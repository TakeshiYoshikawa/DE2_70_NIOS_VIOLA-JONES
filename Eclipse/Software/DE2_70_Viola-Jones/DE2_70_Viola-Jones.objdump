
DE2_70_Viola-Jones.elf:     file format elf32-littlenios2
DE2_70_Viola-Jones.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0001f3d0 memsz 0x0001f3d0 flags r-x
    LOAD off    0x000203f0 vaddr 0x0001f3f0 paddr 0x00020f3c align 2**12
         filesz 0x00001b4c memsz 0x00001b4c flags rw-
    LOAD off    0x00022a88 vaddr 0x00022a88 paddr 0x00022a88 align 2**12
         filesz 0x00000000 memsz 0x00000b40 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001e560  000001b4  000001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000cdc  0001e714  0001e714  0001f714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b4c  0001f3f0  00020f3c  000203f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000b40  00022a88  00022a88  00022a88  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00021f3c  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00002208  00000000  00000000  00021f68  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 0000ba6d  00000000  00000000  00024170  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00068a0b  00000000  00000000  0002fbdd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000104ce  00000000  00000000  000985e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00028de6  00000000  00000000  000a8ab6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00006048  00000000  00000000  000d189c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000092ce  00000000  00000000  000d78e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001923f  00000000  00000000  000e0bb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  000f9df4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000033b0  00000000  00000000  000f9e28  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0010857e  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000f  00000000  00000000  00108581  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00108590  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00108591  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00108592  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00108596  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0010859a  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0010859e  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  001085a7  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  001085b0  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000006  00000000  00000000  001085b9  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000005d  00000000  00000000  001085bf  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000001b4 l    d  .text	00000000 .text
0001e714 l    d  .rodata	00000000 .rodata
0001f3f0 l    d  .rwdata	00000000 .rwdata
00022a88 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000001fc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 image.c
00000000 l    df *ABS*	00000000 stdio-wrapper.c
00000000 l    df *ABS*	00000000 haar.cpp
00022a98 l     O .bss	00000004 rectangles_array
00022a9c l     O .bss	00000004 scaled_rectangles_array
00022a94 l     O .bss	00000004 stages_array
00022aa4 l     O .bss	00000004 tree_thresh_array
00022aa0 l     O .bss	00000004 weights_array
00022aac l     O .bss	00000004 alpha2_array
00022aa8 l     O .bss	00000004 alpha1_array
00022ab0 l     O .bss	00000004 stages_thresh_array
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 rectangles.cpp
00000000 l    df *ABS*	00000000 functexcept.cc
00000000 l    df *ABS*	00000000 ios_failure.cc
00000000 l    df *ABS*	00000000 stdexcept.cc
00000000 l    df *ABS*	00000000 string-inst.cc
00000000 l    df *ABS*	00000000 atomicity.cc
00000000 l    df *ABS*	00000000 bad_typeid.cc
00000000 l    df *ABS*	00000000 eh_throw.cc
0000dbfc l     F .text	00000060 _Z23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception
00000000 l    df *ABS*	00000000 eh_term_handler.cc
00000000 l    df *ABS*	00000000 eh_catch.cc
00000000 l    df *ABS*	00000000 del_op.cc
00000000 l    df *ABS*	00000000 eh_unex_handler.cc
00000000 l    df *ABS*	00000000 eh_personality.cc
0000de4c l     F .text	00000030 _Z12read_uleb128PKhPj
0000de7c l     F .text	00000054 _Z12read_sleb128PKhPi
0000ded0 l     F .text	0000009c _Z16get_adjusted_ptrPKSt9type_infoS1_PPv
0000df6c l     F .text	000001d4 _Z28read_encoded_value_with_basehjPKhPj
0000e140 l     F .text	00000090 _Z21base_of_encoded_valuehP15_Unwind_Context
0000e1d0 l     F .text	00000100 _Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info
0000e2d0 l     F .text	00000084 _Z15get_ttype_entryP16lsda_header_infoj
0000e354 l     F .text	00000084 _Z20check_exception_specP16lsda_header_infoPKSt9type_infoPvi
00000000 l    df *ABS*	00000000 bad_cast.cc
00000000 l    df *ABS*	00000000 si_class_type_info.cc
00000000 l    df *ABS*	00000000 eh_globals.cc
00022ab8 l     O .bss	00000008 eh_globals
00000000 l    df *ABS*	00000000 eh_terminate.cc
00000000 l    df *ABS*	00000000 new_op.cc
00000000 l    df *ABS*	00000000 eh_call.cc
00000000 l    df *ABS*	00000000 eh_exception.cc
00000000 l    df *ABS*	00000000 new_handler.cc
00000000 l    df *ABS*	00000000 eh_alloc.cc
00022b10 l     O .bss	00000800 emergency_buffer
00022ac4 l     O .bss	00000004 emergency_used
00000000 l    df *ABS*	00000000 tinfo.cc
00000000 l    df *ABS*	00000000 class_type_info.cc
00000000 l    df *ABS*	00000000 fp-bit.c
0000f330 l     F .text	000001e4 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
0000fbac l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00010704 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 unwind-sjlj.c
00022ac8 l     O .bss	00000004 fc_static
00010910 l     F .text	00000100 _Unwind_ForcedUnwind_Phase2
00010a28 l     F .text	000000cc _Unwind_RaiseException_Phase2
00010af4 l     F .text	00000028 uw_install_context
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 atoi.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 fgets.c
00000000 l    df *ABS*	00000000 findfp.c
00011b84 l     F .text	00000058 std
00011c90 l     F .text	00000008 __fp_lock
00011c98 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fputc.c
00000000 l    df *ABS*	00000000 fputs.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0001f3f0 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 refill.c
00014784 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 vfprintf.c
00014f88 l     F .text	00000058 __sprint_r
0001ef9a l     O .rodata	00000010 blanks.3452
0001ef8a l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 ctype_.c
0001f0ab l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 dtoa.c
00017220 l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 locale.c
00020ec8 l     O .rwdata	00000004 charset
0001f24c l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 mprec.c
0001f394 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
0001b118 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0001b178 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
0001b1a4 l     F .text	00000040 alt_sim_halt
00000000 l    df *ABS*	00000000 alt_fstat.c
0001b2d8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0001b418 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_kill.c
0001b5b8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0001b698 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0001b7f4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
0001b900 l     F .text	000000dc alt_file_locked
0001bb64 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_read.c
0001bce4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00020ee4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0001bf80 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0001fdac l     O .rwdata	00001060 jtag_uart
00020e0c l     O .rwdata	00000028 altera_hostfs
00020e34 l     O .rwdata	00000054 Pixel_Buffer_DMA
0001c274 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0001c4b4 l     F .text	00000228 altera_avalon_jtag_uart_irq
0001c6dc l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0001cd58 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_hostfs.c
00020ee8 l     O .rwdata	00000004 hcinfo.2234
00020ef4 l     O .rwdata	00000004 hcinfo.2276
00020f00 l     O .rwdata	00000004 hcinfo.2289
00020f0c l     O .rwdata	00000004 hcinfo.2311
00020f18 l     O .rwdata	00000004 hcinfo.2333
00020f24 l     O .rwdata	00000004 hcinfo.2368
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0001d644 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_fs_reg.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0001dd64 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0001e274 l     F .text	00000004 register_fini
0000cfc0  w    F .text	0000005c _ZNSs2atEm
0000efa8 g     F .text	00000040 __cxa_free_exception
0000b95c  w    F .text	00000034 _ZNSsC1IN9__gnu_cxx17__normal_iteratorIPcSsEEEET_S4_RKSaIcE
0000f124 g     F .text	00000008 _ZNKSt9type_info15__is_function_pEv
00019044 g     F .text	00000094 _mprec_log10
00002c6c  w    F .text	00000044 _ZNKSt6vectorI6MyRectSaIS0_EE3endEv
0000ed58 g     F .text	00000018 _ZSt10unexpectedv
000079cc g     F .text	00000034 _ZSt18__throw_bad_typeidv
00019130 g     F .text	00000088 __any_on
00018a8c g     F .text	00000070 _isatty_r
0001f36c g     O .rodata	00000028 __mprec_tinytens
00009268 g     F .text	00000030 _ZNSt14overflow_errorC1ERKSs
0001b854 g     F .text	0000006c alt_main
00002ff0  w    F .text	0000003c _ZSt8_DestroyIP6MyRectS0_EvT_S2_SaIT0_E
000008fc g     F .text	0000007c createSumImage
0000b480  w    F .text	00000040 _ZNKSs6substrEmm
000005d8 g     F .text	00000194 writePgm
00013f18 g     F .text	000000a0 _puts_r
00023338 g     O .bss	00000100 alt_irq
00020e88  w    O .rwdata	00000004 _ZNSs4nposE
00018bc0 g     F .text	00000078 _lseek_r
000108c0 g     F .text	00000014 _Unwind_GetIPInfo
00020f3c g       *ABS*	00000000 __flash_rwdata_start
00005d8c  w    F .text	00000058 _ZNSt6vectorIiSaIiEEixEm
000189ec g     F .text	000000a0 __sflags
0001ac68 g     F .text	00000088 __eqdf2
00006e50  w    F .text	000000b8 _ZNSt6vectorIiSaIiEE5eraseEN9__gnu_cxx17__normal_iteratorIPiS1_EES5_
0000db14 g     F .text	00000074 __cxa_rethrow
00006668  w    F .text	00000044 _ZSt20uninitialized_fill_nIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEmiEvT_T0_RKT1_
000043b8  w    F .text	000002a0 _ZNSt6vectorI6MyRectSaIS0_EEaSERKS2_
00010860 g     F .text	0000000c _Unwind_SjLj_Unregister
0000ab04  w    F .text	00000018 _ZNKSs6rbeginEv
0000ec78 g     F .text	00000014 _ZSt14set_unexpectedPFvvE
0000b874  w    F .text	000000b4 _ZNSs12_S_constructIN9__gnu_cxx17__normal_iteratorIPcSsEEEES2_T_S4_RKSaIcESt20forward_iterator_tag
0000b5e0  w    F .text	00000020 _ZNSs13_S_copy_charsEPcN9__gnu_cxx17__normal_iteratorIS_SsEES2_
0000d9f0  w    F .text	00000024 _ZNSs7replaceEmmRKSs
000108b0 g     F .text	00000010 _Unwind_GetIP
000235c8 g       *ABS*	00000000 __alt_heap_start
000094e8 g     F .text	00000030 _ZNSt12length_errorC1ERKSs
00014aec g     F .text	00000074 _kill_r
0000d09c  w    F .text	00000038 _ZNSs5beginEv
0000ef98 g     F .text	00000010 _ZNSt9bad_allocD2Ev
00013cb4 g     F .text	00000044 printf
0000eb58 g     F .text	00000034 _ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_
00014a2c g     F .text	000000a0 _signal_r
000046a0 g     F .text	00000048 _Z5myMinii
0001e904  w    O .rodata	00000013 _ZTSSt14overflow_error
00014b68 g     F .text	00000068 __sseek
00011bec g     F .text	000000a4 __sinit
000030d0  w    F .text	0000009c _ZNSt15__copy_backwardILb0ESt26random_access_iterator_tagE6copy_bIP6MyRectS4_EET0_T_S6_S5_
00016eb0 g     F .text	00000130 __swbuf_r
00006398  w    F .text	00000044 _ZSt20uninitialized_fill_nIPimiEvT_T0_RKT1_
0000c79c  w    F .text	000000f8 _ZNSs6assignEPKcm
0000eb48 g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD2Ev
00018b20 g     F .text	00000084 _setlocale_r
0001ecb8  w    O .rodata	00000025 _ZTSN10__cxxabiv120__si_class_type_infoE
00011cec g     F .text	00000068 __sfmoreglue
0000255c  w    F .text	000003e4 _Z18evalWeakClassifieriiiii
0001b8e0 g     F .text	00000020 __malloc_unlock
00009fd4  w    F .text	00000018 _ZNSs7_M_moveEPcPKcm
0001ce58 g     F .text	00000154 alt_hostfs_open
00022a88 g     O .bss	00000004 clock_counter
0000da44  w    F .text	00000064 _ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_PKc
0000dc64 g     F .text	00000020 _ZSt18uncaught_exceptionv
0000f7c8 g     F .text	00000174 __divsf3
0001e8c4  w    O .rodata	0000000c _ZTISt15underflow_error
000062a0  w    F .text	0000006c _ZNSt8__fill_nILb1EE6fill_nIPimiEET_S3_T0_RKT1_
0000c40c  w    F .text	000000bc _ZNSsD2Ev
0000c2c4  w    F .text	0000008c _ZNSspLEc
0000beb0  w    F .text	000000e0 _ZNSs6appendEmc
00013ac4 g     F .text	000000e0 memmove
0000eee4 g     F .text	00000010 _ZNSt9exceptionD2Ev
00011cdc g     F .text	00000010 _cleanup
000191b8 g     F .text	000000bc _Balloc
0000fac4 g     F .text	00000094 __fixsfsi
00006200  w    F .text	00000028 _ZSt13__destroy_auxIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEvT_S7_11__true_type
0000b854  w    F .text	00000020 _ZNSs13_S_copy_charsEPcN9__gnu_cxx17__normal_iteratorIPKcSsEES4_
0001e968  w    O .rodata	00000011 _ZTSSt12out_of_range
0000316c  w    F .text	00000044 _ZSt19__copy_backward_auxIP6MyRectS1_ET0_T_S3_S2_
0001ec80  w    O .rodata	0000000c _ZTISt8bad_cast
0000651c  w    F .text	00000048 _ZSt4fillIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiEvT_S7_RKT0_
00009fec  w    F .text	00000018 _ZNSs7_M_copyEPcPKcm
0000c924  w    F .text	00000040 _ZNSsaSEPKc
0000daa8 g     F .text	00000014 _ZN9__gnu_cxx18__exchange_and_addEPVii
00007a9c g     F .text	00000108 _ZSt19__throw_ios_failurePKc
0001ad78 g     F .text	00000088 __gtdf2
0001ecec  w    O .rodata	00000014 _ZTVSt13bad_exception
00000000  w      *UND*	00000000 __errno
000089f8  w    F .text	00000034 _ZNSt14overflow_errorD0Ev
00000000 g     F .entry	0000001c __reset
00020e90  w    O .rwdata	00000001 _ZNSs4_Rep11_S_terminalE
0000a79c  w    F .text	000000e0 _ZNKSs16find_last_not_ofEPKcmm
00005994  w    F .text	00000024 _ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv
00005e20  w    F .text	00000028 _ZSt13__destroy_auxIPiEvT_S1_11__true_type
000108f0 g     F .text	00000008 _Unwind_GetRegionStart
00007258  w    F .text	00000044 _ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEES2_iET0_T_S8_S7_SaIT1_E
00000020 g       *ABS*	00000000 __flash_exceptions_start
0000729c  w    F .text	0000008c _ZNSt15__copy_backwardILb1ESt26random_access_iterator_tagE6copy_bIiEEPT_PKS3_S6_S4_
00012940 g     F .text	00000074 _fstat_r
0000ed70 g     F .text	00000100 _Znwm
0000a53c  w    F .text	00000064 _ZNSs4_Rep10_M_disposeERKSaIcE
00022acc g     O .bss	00000004 errno
000106cc g     F .text	00000038 __make_dp
0000ac18  w    F .text	0000003c _ZNSsC2EmcRKSaIcE
0000a938  w    F .text	0000007c _ZNKSs7compareEPKc
0000b990  w    F .text	000000fc _ZNSsC1ERKSs
00002db4  w    F .text	00000024 _ZNK9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS1_SaIS1_EEE4baseEv
000064a8  w    F .text	00000074 _ZNSt6__fillILb1EE4fillIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiEEvT_S9_RKT0_
00010cc0 g     F .text	00000080 _Unwind_Backtrace
0000b114  w    F .text	00000088 _ZNKSs4copyEPcmm
00022aec g     O .bss	00000004 alt_argv
00005fc0  w    F .text	00000050 _ZSt3maxImERKT_S2_S2_
00028e88 g       *ABS*	00000000 _gp
0000dac0 g     F .text	00000034 _ZNSt10bad_typeidD0Ev
0000f514 g     F .text	00000070 __subsf3
00008a2c  w    F .text	00000010 _ZNSt14overflow_errorD1Ev
00004af4 g     F .text	000005d4 _Z9partitionRSt6vectorI6MyRectSaIS0_EERS_IiSaIiEEf
0000ea38 g     F .text	00000034 _ZNSt8bad_castD0Ev
0001b338 g     F .text	00000020 getpid
00006e00  w    F .text	00000050 _ZSt4copyIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEES6_ET0_T_S8_S7_
0000cb58  w    F .text	00000038 _ZNSs6assignEmc
000073f4  w    F .text	00000050 _ZSt13copy_backwardIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEES6_ET0_T_S8_S7_
00009cdc  w    F .text	0000000c _ZNKSs4_Rep12_M_is_leakedEv
0000e3d8 g     F .text	00000180 __cxa_call_unexpected
000039ac  w    F .text	00000060 _ZNSt12_Vector_baseI6MyRectSaIS0_EED2Ev
0000dc5c g     F .text	00000008 __cxa_get_exception_ptr
00011b60 g     F .text	00000024 fgets
000071d0  w    F .text	00000044 _ZSt24__uninitialized_copy_auxIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEES2_ET0_T_S8_S7_11__true_type
000004c4 g     F .text	00000114 readImage
00003368  w    F .text	00000044 _ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS2_SaIS2_EEEES7_ET0_T_S9_S8_
00002990  w    F .text	00000020 _ZN9__gnu_cxx13new_allocatorI6MyRectED2Ev
0000a00c  w    F .text	0000000c _ZNKSsixEm
0001fc2c g     O .rwdata	00000180 alt_fd_list
000032d4  w    F .text	00000094 _ZSt24__uninitialized_copy_auxIN9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS2_SaIS2_EEEES7_ET0_T_S9_S8_12__false_type
0001d140 g     F .text	000000a0 alt_hostfs_seek
00005bb8  w    F .text	00000044 _ZNKSt6vectorIiSaIiEE5beginEv
0001e97c  w    O .rodata	00000014 _ZTVSt12out_of_range
00010c70 g     F .text	00000050 _Unwind_SjLj_ForcedUnwind
000035f8  w    F .text	0000032c _ZNSt6vectorI6MyRectSaIS0_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS0_S2_EERKS0_
00010884 g     F .text	00000014 _Unwind_GetCFA
0000ec64 g     F .text	00000014 _ZSt13set_terminatePFvvE
0001d76c g     F .text	00000094 alt_find_dev
00013a24 g     F .text	000000a0 memcpy
0000a2b8  w    F .text	00000010 _ZNSsC2Ev
000031b0  w    F .text	00000084 _ZNSt22__copy_backward_normalILb1ELb1EE8copy_b_nIN9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS4_SaIS4_EEEES9_EET0_T_SB_SA_
0000a1a8  w    F .text	0000000c _ZNKSs17find_first_not_ofERKSsm
0000a018  w    F .text	000000a4 _ZNKSs17find_first_not_ofEPKcmm
0000b760  w    F .text	00000034 _ZNSsC1IPKcEET_S2_RKSaIcE
00011cd0 g     F .text	0000000c _cleanup_r
000104fc g     F .text	000000f8 __floatsidf
0001d920 g     F .text	00000090 alt_fs_reg
0001de28 g     F .text	00000078 alt_io_redirect
00010474 g     F .text	00000088 __ltdf2
0001e948  w    O .rodata	00000014 _ZTVSt11range_error
000097c4 g     F .text	00000104 _ZNSt13runtime_errorD2Ev
00008504 g     F .text	00000190 _ZSt21__throw_runtime_errorPKc
0001e714 g       *ABS*	00000000 __DTOR_END__
0000a25c  w    F .text	00000050 _ZNKSs5rfindEPKcm
0000f234 g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD1Ev
000093d8 g     F .text	000000b0 _ZNSt11logic_errorC2ERKSs
0001e9e8  w    O .rodata	00000014 _ZTVSt16invalid_argument
0000a2c8  w    F .text	00000010 _ZN9__gnu_cxxeqIPKcSsEEbRKNS_17__normal_iteratorIT_T0_EES8_
00013fb8 g     F .text	00000014 puts
0000d1ec  w    F .text	00000150 _ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_EPKS3_RKS6_
00002cf4  w    F .text	00000034 _ZN9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS1_SaIS1_EEEC1ERKS2_
000033ac  w    F .text	00000044 _ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS2_SaIS2_EEEES7_S2_ET0_T_S9_S8_SaIT1_E
000092f8 g     F .text	00000030 _ZNSt11range_errorC2ERKSs
00018f94 g     F .text	000000b0 __ratio
0000bcfc  w    F .text	00000004 _ZNSsaSERKSs
00002fb4  w    F .text	0000003c _ZSt8_DestroyIP6MyRectEvT_S2_
0001e95c  w    O .rodata	0000000c _ZTISt12out_of_range
00009f44  w    F .text	00000038 _ZNKSs15_M_check_lengthEmmPKc
0000ab1c  w    F .text	000000c0 _ZNSs12_S_constructEmcRKSaIcE
00006d7c  w    F .text	00000084 _ZNSt13__copy_normalILb1ELb1EE6copy_nIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEES8_EET0_T_SA_S9_
0001c8f4 g     F .text	00000224 altera_avalon_jtag_uart_read
00013178 g     F .text	00000014 malloc
00013cf8 g     F .text	00000034 _printf_r
00010840 g     F .text	00000008 __udivsi3
0001b358 g     F .text	000000c0 isatty
00014810 g     F .text	000000cc _raise_r
0001f27c g     O .rodata	000000c8 __mprec_tens
0000c700  w    F .text	0000009c _ZNSs15_M_replace_safeEmmPKcm
00007ec4 g     F .text	00000190 _ZSt22__throw_overflow_errorPKc
0000605c  w    F .text	00000070 _ZSt26__uninitialized_fill_n_auxIP6MyRectmS0_EvT_T0_RKT1_12__false_type
000094b8 g     F .text	00000030 _ZNSt12out_of_rangeC2ERKSs
00018afc g     F .text	00000008 __locale_charset
00006470  w    F .text	00000038 _ZN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEppEv
0000f9b4 g     F .text	00000078 __lesf2
000078bc  w    F .text	00000048 _ZNSt6vectorIiSaIiEE6insertEN9__gnu_cxx17__normal_iteratorIPiS1_EEmRKi
0000bd00  w    F .text	00000128 _ZNSs7reserveEm
00000200 g     F .text	00000114 strrev
0000ad4c  w    F .text	000000c8 _ZNKSs7compareEmmPKc
0001e064 g     F .text	00000090 alt_icache_flush
00009c94  w    F .text	0000000c _ZNKSs4sizeEv
00022ad0 g     O .bss	00000004 __malloc_top_pad
0000c4c8  w    F .text	00000238 _ZNSs9_M_mutateEmmm
0000d5d0  w    F .text	000002e0 _ZNSs7replaceEmmPKcm
0000a34c  w    F .text	00000058 _ZNKSs16find_last_not_ofEcm
00014ae8 g     F .text	00000004 _getpid_r
00003a0c  w    F .text	0000007c _ZNSt6vectorI6MyRectSaIS0_EED1Ev
0000d920  w    F .text	00000010 _ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_PKcm
00020ec4 g     O .rwdata	00000004 __mb_cur_max
0000c09c  w    F .text	00000040 _ZNSs6appendEPKc
00018b04 g     F .text	0000000c _localeconv_r
0000a3a4  w    F .text	00000064 _ZNKSs17find_first_not_ofEcm
00005e48  w    F .text	0000003c _ZSt8_DestroyIPiEvT_S1_
000034cc  w    F .text	00000064 _ZN9__gnu_cxx13new_allocatorI6MyRectE8allocateEmPKv
000198b0 g     F .text	0000003c __i2b
000129b4 g     F .text	0000049c __sfvwrite_r
0000f254 g     F .text	00000060 _ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj
000046e8 g     F .text	00000048 _Z5myAbsi
00014964 g     F .text	000000b4 __sigtramp_r
00009c14  w    F .text	00000008 _ZNKSs9_M_ibeginEv
00009158 g     F .text	000000b0 _ZNSt13runtime_errorC2ERKSs
00005a30  w    F .text	00000050 _ZNKSt6vectorI6MyRectSaIS0_EE5emptyEv
00007444  w    F .text	00000478 _ZNSt6vectorIiSaIiEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPiS1_EEmRKi
00007128  w    F .text	0000005c _ZNSt13__copy_normalILb1ELb0EE6copy_nIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEES4_EET0_T_SA_S9_
000147a0 g     F .text	00000070 _sbrk_r
0001d000 g     F .text	000000a0 alt_hostfs_read
0001ed74  w    O .rodata	00000020 _ZTVSt9type_info
0001e9d0  w    O .rodata	00000015 _ZTSSt16invalid_argument
00007a34 g     F .text	00000034 _ZSt17__throw_bad_allocv
00003ed0  w    F .text	00000058 _ZNKSt6vectorI6MyRectSaIS0_EE8capacityEv
00002e10  w    F .text	00000038 _ZNSt6vectorI6MyRectSaIS0_EE5beginEv
00009be4  w    F .text	00000010 _ZNSt11char_traitsIcE2eqERKcS2_
00019c2c g     F .text	00000078 _read_r
0000eeb4 g     F .text	00000010 _ZNKSt9exception4whatEv
0000a724  w    F .text	00000068 _ZNKSs4findEcm
00000a80 g     F .text	00000040 setSumImage
0001fbf8 g     O .rwdata	0000000c __lc_ctype
00020edc g     O .rwdata	00000004 alt_max_fd
0000a9b4  w    F .text	00000050 _ZNKSs16find_last_not_ofEPKcm
00011494 g     F .text	00000138 __unpack_d
0000a8e8  w    F .text	00000050 _ZNKSs4findEPKcm
000116c4 g     F .text	00000110 _fclose_r
0000aa54  w    F .text	00000050 _ZNKSs12find_last_ofEPKcm
0000a1b4  w    F .text	000000a8 _ZNKSs5rfindEPKcmm
0001ed68  w    O .rodata	0000000c _ZTISt9bad_alloc
00009c08  w    F .text	0000000c _ZNKSs6_M_repEv
000119e4 g     F .text	00000034 fflush
00002aa4  w    F .text	00000030 _ZNSt12_Vector_baseI6MyRectSaIS0_EE12_Vector_implD1Ev
00022ad4 g     O .bss	00000004 __malloc_max_sbrked_mem
00000888 g     F .text	00000074 createImage
0000cc60  w    F .text	00000050 _ZNSs5eraseEN9__gnu_cxx17__normal_iteratorIPcSsEE
0000d01c  w    F .text	00000044 _ZNSsixEm
0000bb88  w    F .text	00000174 _ZNSs6assignERKSs
0000fb58 g     F .text	00000054 __extendsfdf2
0000592c  w    F .text	00000038 _ZNSaIiEC1ERKS_
00002e6c  w    F .text	00000058 _ZN9__gnu_cxxmiIPK6MyRectS3_St6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T1_E15difference_typeERKSA_RKNS7_IT0_S9_EE
0001003c g     F .text	00000074 __adddf3
00005d30  w    F .text	0000005c _ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEplERKl
0001ec8c  w    O .rodata	0000002c _ZTVN10__cxxabiv120__si_class_type_infoE
0000302c  w    F .text	00000028 _ZNK9__gnu_cxx13new_allocatorI6MyRectE8max_sizeEv
0000c350  w    F .text	000000bc _ZNSsD1Ev
00018e74 g     F .text	00000120 __b2d
00005b08  w    F .text	00000038 _ZNSt6vectorIiSaIiEEC1ERKS0_
00002ad4  w    F .text	00000024 _ZNSt12_Vector_baseI6MyRectSaIS0_EE19_M_get_Tp_allocatorEv
0000ea6c g     F .text	00000010 _ZNSt8bad_castD1Ev
0001a460 g     F .text	000005b0 __umoddi3
0001b704 g     F .text	000000f0 lseek
0000d060  w    F .text	0000003c _ZNSs3endEv
0000f2b4 g     F .text	00000030 _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE
0001ea7c  w    O .rodata	00000014 _ZTVSt11logic_error
0000de40 g     F .text	0000000c _ZdlPv
00008ac4  w    F .text	00000034 _ZNSt12length_errorD0Ev
00020eb4 g     O .rwdata	00000004 _global_impure_ptr
00013fcc g     F .text	000005f4 _realloc_r
000235c8 g       *ABS*	00000000 __bss_end
0001dc6c g     F .text	000000f8 alt_iic_isr_register
0001df38 g     F .text	0000010c alt_tick
00010850 g     F .text	00000010 _Unwind_SjLj_Register
00019e84 g     F .text	000005dc __udivdi3
0001e918  w    O .rodata	00000014 _ZTVSt14overflow_error
00008824 g     F .text	00000190 _ZSt20__throw_length_errorPKc
0001f344 g     O .rodata	00000028 __mprec_bigtens
00019b0c g     F .text	00000120 __s2b
00011694 g     F .text	00000018 abort
0001ae88 g     F .text	00000194 __floatunsidf
00005e84  w    F .text	0000003c _ZSt8_DestroyIPiiEvT_S1_SaIT0_E
00005b40  w    F .text	00000034 _ZN9__gnu_cxx17__normal_iteratorIPKiSt6vectorIiSaIiEEEC1ERKS2_
00009e88  w    F .text	000000bc _ZNSs4_Rep10_M_refcopyEv
00018d94 g     F .text	00000060 __mcmp
00020ec0 g     O .rwdata	00000004 __ctype_ptr
0000dc84 g     F .text	000000a4 __cxa_end_catch
00011cb8 g     F .text	00000018 __fp_lock_all
0001dc24 g     F .text	00000048 alt_ic_irq_enabled
0000ef38 g     F .text	00000010 _ZNSt13bad_exceptionD2Ev
0000675c  w    F .text	00000040 _ZNSt12_Vector_baseIiSaIiEE11_M_allocateEm
0001dea0 g     F .text	00000098 alt_alarm_stop
00002c38  w    F .text	00000034 _ZN9__gnu_cxx17__normal_iteratorIPK6MyRectSt6vectorIS1_SaIS1_EEEC1ERKS3_
00003924  w    F .text	00000088 _ZNSt6vectorI6MyRectSaIS0_EE9push_backERKS0_
00014f64 g     F .text	00000024 strtol
00009ce8  w    F .text	0000000c _ZNKSs4_Rep12_M_is_sharedEv
000063dc  w    F .text	00000044 _ZSt24__uninitialized_fill_n_aIPimiiEvT_T0_RKT1_SaIT2_E
00009bf4  w    F .text	00000008 _ZNKSs7_M_dataEv
0000b334  w    F .text	00000060 _ZNSsC2ERKSsmmRKSaIcE
00022af4 g     O .bss	00000004 alt_irq_active
0000ed30 g     F .text	00000018 _ZSt9terminatev
0000d1e4  w    F .text	00000008 _ZNSs6resizeEm
000089e8  w    F .text	00000010 _ZNSt15underflow_errorD1Ev
0001cfac g     F .text	00000054 alt_hostfs_close
00008054 g     F .text	00000190 _ZSt24__throw_invalid_argumentPKc
000000ec g     F .exceptions	000000c8 alt_irq_handler
0000c894  w    F .text	00000040 _ZNSs6assignEPKc
0001fc04 g     O .rwdata	00000028 alt_dev_null
00005c78  w    F .text	0000004c _ZNKSt6vectorIiSaIiEE4sizeEv
0000b010  w    F .text	00000104 _ZNSs4_Rep7_M_grabERKSaIcES2_
0000cee0  w    F .text	00000050 _ZNSs6insertEmRKSsmm
00008b90 g     F .text	00000008 _ZNKSt8ios_base7failure4whatEv
00006420  w    F .text	00000050 _ZN9__gnu_cxxneIPiSt6vectorIiSaIiEEEEbRKNS_17__normal_iteratorIT_T0_EESA_
00009ad8 g     F .text	0000010c _ZNSt11logic_errorD0Ev
00011010 g     F .text	000000c8 __unpack_f
00005f3c  w    F .text	0000005c _ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEmiERKl
0000aaa4  w    F .text	00000050 _ZNKSs13find_first_ofEPKcm
0001edd0  w    O .rodata	00000022 _ZTSN10__cxxabiv117__class_type_infoE
000058d0  w    F .text	00000024 _ZN9__gnu_cxx13new_allocatorIiEC2ERKS1_
0000c11c  w    F .text	000000e8 _ZNSs6appendERKSsmm
0001d54c g     F .text	00000044 alt_dcache_flush_all
00018c60 g     F .text	00000070 __hi0bits
00020e9c  w    O .rwdata	00000008 _ZTISt9exception
000105f4 g     F .text	000000d8 __fixdfsi
0000aaf4  w    F .text	00000010 _ZNKSs4rendEv
0000a19c  w    F .text	0000000c _ZNKSs4findERKSsm
00008f40 g     F .text	0000010c _ZNSt8ios_base7failureD0Ev
00009d24  w    F .text	0000014c _ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_
0000cf30  w    F .text	0000000c _ZNSs6insertEmRKSs
00004730 g     F .text	0000022c _Z9predicatefR6MyRectS0_
00020f3c g       *ABS*	00000000 __ram_rwdata_end
00006c30  w    F .text	000000a0 _ZNSt6vectorI6MyRectSaIS0_EEC1EmRKS0_RKS1_
000066f0  w    F .text	0000006c _ZN9__gnu_cxx13new_allocatorIiE8allocateEmPKv
0000f154 g     F .text	00000010 _ZNSt9type_infoD1Ev
00020ed4 g     O .rwdata	00000008 alt_dev_list
00022ac0 g     O .bss	00000004 __new_handler
00011fb8 g     F .text	00000058 _fputc_r
0001ea08  w    O .rodata	00000011 _ZTSSt12domain_error
0001be60 g     F .text	00000120 write
0000cbd8  w    F .text	00000038 _ZNSs6insertEN9__gnu_cxx17__normal_iteratorIPcSsEEmc
00002d64  w    F .text	00000028 _ZNK9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS1_SaIS1_EEEdeEv
00013e30 g     F .text	000000e8 _putc_r
0000b6f8  w    F .text	00000034 _ZNSsC1EPKcmRKSaIcE
00006a28  w    F .text	00000038 _ZN9__gnu_cxx13new_allocatorIiE10deallocateEPim
0000d0d4  w    F .text	0000004c _ZNSs4rendEv
0000f144 g     F .text	00000010 _ZNSt9type_infoD0Ev
000096c0 g     F .text	00000104 _ZNSt13runtime_errorD1Ev
00005a80  w    F .text	00000050 _ZNSt12_Vector_baseIiSaIiEE12_Vector_implC1ERKS0_
0001f3f0 g       *ABS*	00000000 __ram_rodata_end
00003234  w    F .text	00000050 _ZSt13copy_backwardIN9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS2_SaIS2_EEEES7_ET0_T_S9_S8_
0001b204 g     F .text	000000d4 fstat
00009e80  w    F .text	00000008 _ZNSs12_Alloc_hiderC2EPcRKSaIcE
000070a0  w    F .text	00000044 _ZSt18uninitialized_copyIPiS0_ET0_T_S2_S1_
0001b478 g     F .text	00000140 kill
0000b2d4  w    F .text	00000060 _ZNSsC1ERKSsmmRKSaIcE
000095d8 g     F .text	00000030 _ZNSt12domain_errorC2ERKSs
000095a8 g     F .text	00000030 _ZNSt12domain_errorC1ERKSs
00008b80  w    F .text	00000010 _ZNSt12domain_errorD1Ev
0000b2a0  w    F .text	00000034 _ZNSsC2IPcEET_S1_RKSaIcE
000199ec g     F .text	00000120 __pow5mult
0000d484  w    F .text	0000014c _ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_ES3_RKS6_
00022adc g     O .bss	00000004 __nlocale_changed
000089b4  w    F .text	00000034 _ZNSt15underflow_errorD0Ev
00002e48  w    F .text	00000024 _ZNK9__gnu_cxx17__normal_iteratorIPK6MyRectSt6vectorIS1_SaIS1_EEE4baseEv
00010848 g     F .text	00000008 __umodsi3
0000f13c g     F .text	00000008 _ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv
0000d930  w    F .text	00000064 _ZNSs7replaceEmmPKc
00006d34  w    F .text	00000048 _ZSt10__copy_auxIPiS0_ET0_T_S2_S1_
000235c8 g       *ABS*	00000000 end
0000dabc g     F .text	00000004 _ZN9__gnu_cxx12__atomic_addEPVii
00010eb0 g     F .text	00000160 __pack_f
00009238 g     F .text	00000030 _ZNSt15underflow_errorC2ERKSs
00007370  w    F .text	00000084 _ZNSt22__copy_backward_normalILb1ELb1EE8copy_b_nIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEES8_EET0_T_SA_S9_
0000d994  w    F .text	0000005c _ZNSs7replaceEmmRKSsmm
0000a150  w    F .text	00000030 _ZNKSs2atEm
00002a6c  w    F .text	00000038 _ZNSaI6MyRectEC2ERKS0_
0000c8d4  w    F .text	00000050 _ZNSs6assignERKSsmm
0000b5ac  w    F .text	00000034 _ZNSsC1IPcEET_S1_RKSaIcE
000116ac g     F .text	0000000c _atoi_r
00009c1c  w    F .text	00000010 _ZNKSs7_M_iendEv
00010a10 g     F .text	00000018 _Unwind_DeleteException
0001291c g     F .text	00000024 fseek
0001c3f4 g     F .text	000000c0 altera_avalon_jtag_uart_init
00006354  w    F .text	00000044 _ZSt26__uninitialized_fill_n_auxIPimiEvT_T0_RKT1_11__true_type
00007904  w    F .text	000000c8 _ZNSt6vectorIiSaIiEE6resizeEmi
00009c7c  w    F .text	00000008 _ZNKSs5beginEv
0001e710 g       *ABS*	00000000 __CTOR_LIST__
00800000 g       *ABS*	00000000 __alt_stack_pointer
0000ca30  w    F .text	00000018 _ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_mc
00022b00  w    O .bss	00000010 _ZNSs4_Rep20_S_empty_rep_storageE
0001cdc8 g     F .text	00000090 alt_avalon_timer_sc_init
0000904c g     F .text	00000008 _ZNKSt13runtime_error4whatEv
00010e30 g     F .text	00000080 __clzsi2
00005800  w    F .text	00000020 _ZN9__gnu_cxx13new_allocatorIiEC2Ev
0001eaa4  w    O .rodata	0000000c _ZTISt13runtime_error
0000f174 g     F .text	0000006c _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv
0001cb18 g     F .text	00000240 altera_avalon_jtag_uart_write
00011bdc g     F .text	00000004 __sfp_lock_acquire
0001ed14  w    O .rodata	00000012 _ZTSSt13bad_exception
000138cc g     F .text	000000e4 memchr
00014fe0 g     F .text	00001eac ___vfprintf_internal_r
00001ef8 g     F .text	000001b8 _Z18ScaleImage_InvokerP9myCascadefiiRSt6vectorI6MyRectSaIS2_EE
0001e9b0  w    O .rodata	00000014 _ZTVSt12length_error
00002f60  w    F .text	00000054 _ZSt13__destroy_auxIP6MyRectEvT_S2_12__false_type
00005c20  w    F .text	00000058 _ZN9__gnu_cxxmiIPKiS2_St6vectorIiSaIiEEEENS_17__normal_iteratorIT_T1_E15difference_typeERKS9_RKNS6_IT0_S8_EE
000121cc g     F .text	00000314 _free_r
0000d8cc  w    F .text	0000001c _ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_S2_S2_
0000ac54  w    F .text	00000034 _ZNSsC1ERKSaIcE
0001e278 g     F .text	000001b0 __call_exitprocs
00009d00  w    F .text	00000008 _ZNSs4_Rep15_M_set_sharableEv
00005ec0  w    F .text	00000024 _ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEE4baseEv
00020e8c  w    O .rwdata	00000004 _ZNSs4_Rep11_S_max_sizeE
00022ae0 g     O .bss	00000004 __mlocale_changed
00008af8  w    F .text	00000010 _ZNSt12length_errorD1Ev
00020ebc g     O .rwdata	00000004 __malloc_sbrk_base
000001b4 g     F .text	0000004c _start
0001eac0  w    O .rodata	0000000c _ZTISt11logic_error
00009cb8  w    F .text	00000008 _ZNKSs4dataEv
000009dc g     F .text	00000064 freeSumImage
00022af8 g     O .bss	00000004 _alt_tick_rate
00002f30  w    F .text	00000030 _ZSt8_DestroyI6MyRectEvPT_
00002ec4  w    F .text	0000004c _ZNKSt6vectorI6MyRectSaIS0_EE4sizeEv
0001ed94  w    O .rodata	0000000d _ZTSSt9type_info
00009cac  w    F .text	0000000c _ZNKSs8capacityEv
00009bfc  w    F .text	0000000c _ZNSs7_M_dataEPc
00009208 g     F .text	00000030 _ZNSt15underflow_errorC1ERKSs
0001957c g     F .text	0000014c __lshift
00009c2c  w    F .text	00000018 _ZNKSs8_M_limitEmm
0001ed44  w    O .rodata	00000014 _ZTVSt9bad_alloc
00022afc g     O .bss	00000004 _alt_nticks
00014acc g     F .text	0000001c signal
0001bbc4 g     F .text	00000120 read
0000c964  w    F .text	000000cc _ZNSs14_M_replace_auxEmmmc
0001c014 g     F .text	00000260 alt_sys_init
0000fa2c g     F .text	00000098 __floatsisf
0000ba8c  w    F .text	000000fc _ZNSsC2ERKSs
00009cc0  w    F .text	00000008 _ZNKSs13get_allocatorEv
00002940  w    F .text	00000020 _ZN9__gnu_cxx13new_allocatorI6MyRectEC2Ev
0001ec54  w    O .rodata	0000000c _ZTISt10bad_typeid
00013c3c g     F .text	00000078 _open_r
0001e140 g     F .text	00000134 __register_exitproc
0001ed58  w    O .rodata	0000000d _ZTSSt9bad_alloc
00003570  w    F .text	00000038 _ZN9__gnu_cxx13new_allocatorI6MyRectE10deallocateEPS1_m
0000a0bc  w    F .text	00000094 _ZNKSs4findEPKcmm
0000cc10  w    F .text	00000050 _ZNSs5eraseEN9__gnu_cxx17__normal_iteratorIPcSsEES2_
000196c8 g     F .text	000001e8 __multiply
0001c78c g     F .text	00000074 altera_avalon_jtag_uart_close
00006264  w    F .text	0000003c _ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiEvT_S7_SaIT0_E
0001f3f0 g       *ABS*	00000000 __ram_rwdata_start
00010b78 g     F .text	000000f8 _Unwind_SjLj_RaiseException
0001e714 g       *ABS*	00000000 __ram_rodata_start
0000a888  w    F .text	00000060 _ZNKSs7compareERKSs
00023310 g     O .bss	00000028 __malloc_current_mallinfo
00010b1c g     F .text	0000005c _Unwind_SjLj_Resume
0000cfac  w    F .text	00000014 _ZNSs7_M_leakEv
00019274 g     F .text	0000017c __d2b
0000f164 g     F .text	00000010 _ZNSt9type_infoD2Ev
00006110  w    F .text	00000044 _ZSt24__uninitialized_fill_n_aIP6MyRectmS0_S0_EvT_T0_RKT1_SaIT2_E
00006f4c  w    F .text	00000044 _ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEES6_ET0_T_S8_S7_
0000ea8c g     F .text	00000078 _ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE
00008b3c  w    F .text	00000010 _ZNSt16invalid_argumentD1Ev
00009c84  w    F .text	00000010 _ZNKSs3endEv
00009fa8  w    F .text	0000002c _ZNSs9_M_assignEPcmc
000050c8 g     F .text	00000738 groupRectangles
0001c2ac g     F .text	00000058 altera_avalon_jtag_uart_read_fd
00000ac0 g     F .text	000000c8 _Z8int_sqrtj
0001d9b0 g     F .text	000000b8 alt_get_fd
00002a10  w    F .text	00000024 _ZN9__gnu_cxx13new_allocatorI6MyRectEC2ERKS2_
00000414 g     F .text	000000b0 itochar
00003454  w    F .text	0000003c _ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS2_SaIS2_EEEEEvT_S8_
0000a2d8  w    F .text	00000064 _ZNKSs5rfindEcm
000058f4  w    F .text	00000038 _ZNSaIiEC2ERKS_
000115cc g     F .text	000000c8 __fpcmp_parts_d
0001e8d0  w    O .rodata	00000014 _ZTSSt15underflow_error
0000a78c  w    F .text	00000010 _ZNKSs13find_first_ofEcm
000171b0 g     F .text	00000070 _close_r
0000705c  w    F .text	00000044 _ZSt24__uninitialized_copy_auxIPiS0_ET0_T_S2_S1_11__true_type
00022a8c g     O .bss	00000004 n_features
000018cc g     F .text	0000017c _Z15nearestNeighborP7MyImageS0_
000139b0 g     F .text	00000074 memcmp
0001c35c g     F .text	00000048 altera_avalon_jtag_uart_close_fd
000235c8 g       *ABS*	00000000 __alt_stack_base
0001c3a4 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
0000ef54 g     F .text	00000034 _ZNSt9bad_allocD0Ev
0000eb38 g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD1Ev
00008a70  w    F .text	00000010 _ZNSt11range_errorD1Ev
00017074 g     F .text	0000013c __swsetup_r
0001e938  w    O .rodata	00000010 _ZTSSt11range_error
00010d40 g     F .text	00000058 _Unwind_SjLj_Resume_or_Rethrow
0001aa10 g     F .text	00000258 __divdf3
00011d54 g     F .text	000000f0 __sfp
000059b8  w    F .text	00000028 _ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEdeEv
000190d8 g     F .text	00000058 __copybits
0001e9fc  w    O .rodata	0000000c _ZTISt12domain_error
0000f11c g     F .text	00000008 _ZNKSt9type_info14__is_pointer_pEv
0001ec74  w    O .rodata	0000000c _ZTSSt8bad_cast
000024b8  w    F .text	000000a4 _Z7myRoundf
0000d8b0  w    F .text	0000001c _ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_NS0_IPKcSsEES5_
0001e8f8  w    O .rodata	0000000c _ZTISt14overflow_error
00005964  w    F .text	00000030 _ZNSt12_Vector_baseIiSaIiEE12_Vector_implD1Ev
0001f7f0 g     O .rwdata	00000408 __malloc_av_
00011be8 g     F .text	00000004 __sinit_lock_release
00007328  w    F .text	00000048 _ZSt19__copy_backward_auxIPiS0_ET0_T_S2_S1_
00005ad0  w    F .text	00000038 _ZNSt12_Vector_baseIiSaIiEEC2ERKS0_
000100b0 g     F .text	000003c4 __muldf3
00014c4c g     F .text	00000060 __sread
0001ee00 g     O .rodata	00000010 __thenan_sf
000041c4  w    F .text	00000084 _ZNSt13__copy_normalILb1ELb1EE6copy_nIN9__gnu_cxx17__normal_iteratorIPK6MyRectSt6vectorIS4_SaIS4_EEEENS3_IPS4_S9_EEEET0_T_SE_SD_
0001ed00  w    O .rodata	00000014 _ZTVSt9exception
00006f90  w    F .text	00000044 _ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEES6_iET0_T_S8_S7_SaIT1_E
0001d800 g     F .text	00000120 alt_find_file
0000da14  w    F .text	00000030 _ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_RKSs
0000f1e0 g     F .text	00000020 _ZNK10__cxxabiv117__class_type_info20__do_find_public_srcElPKvPKS0_S2_
0000cf3c  w    F .text	00000014 _ZNSs5clearEv
0001d590 g     F .text	000000b4 alt_dev_llist_insert
0000630c  w    F .text	00000048 _ZSt6fill_nIPimiET_S1_T0_RKT1_
0001b8c0 g     F .text	00000020 __malloc_lock
0001bda4 g     F .text	000000bc sbrk
000081e4 g     F .text	00000190 _ZSt20__throw_domain_errorPKc
00007ba4 g     F .text	00000190 _ZSt19__throw_logic_errorPKc
0001eda4  w    O .rodata	0000002c _ZTVN10__cxxabiv117__class_type_infoE
0000db88 g     F .text	00000074 __cxa_throw
000117e8 g     F .text	000001fc _fflush_r
00000a40 g     F .text	00000040 setImage
000108d4 g     F .text	00000010 _Unwind_SetIP
0000a690  w    F .text	00000088 _ZNKSs13find_first_ofEPKcmm
00019dd0 g     F .text	000000b4 _calloc_r
00006cd0  w    F .text	00000064 _ZNSt6__copyILb1ESt26random_access_iterator_tagE4copyIiEEPT_PKS3_S6_S4_
0000a33c  w    F .text	00000010 _ZNKSs12find_last_ofEcm
0001e990  w    O .rodata	0000000c _ZTISt12length_error
00009cf4  w    F .text	0000000c _ZNSs4_Rep13_M_set_leakedEv
0000b72c  w    F .text	00000034 _ZNSsC2EPKcmRKSaIcE
00008374 g     F .text	00000190 _ZSt19__throw_range_errorPKc
00009548 g     F .text	00000030 _ZNSt16invalid_argumentC1ERKSs
00011f38 g     F .text	0000001c fopen
00022a88 g       *ABS*	00000000 __bss_start
0000a718  w    F .text	0000000c _ZNKSs13find_first_ofERKSsm
00006564  w    F .text	00000078 _ZNSt8__fill_nILb1EE6fill_nIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEmiEET_S9_T0_RKT1_
0000aed4  w    F .text	000000a0 _ZNKSs7compareEmmRKSs
00013ba4 g     F .text	00000098 memset
00009d08  w    F .text	00000014 _ZNSs4_Rep26_M_set_length_and_sharableEm
00009c60  w    F .text	0000000c _ZNSs12_S_empty_repEv
00003a88 g     F .text	00000340 main
0001ea90  w    O .rodata	00000012 _ZTSSt13runtime_error
00022af0 g     O .bss	00000004 alt_envp
00022ad8 g     O .bss	00000004 __malloc_max_total_mem
00002d28  w    F .text	0000003c _ZNSt6vectorI6MyRectSaIS0_EE3endEv
0001ec30  w    O .rodata	00000014 _ZTVSt10bad_typeid
0001c304 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00005820  w    F .text	00000030 _ZNSaIiEC1Ev
00000314 g     F .text	00000100 myatoi
00016fe0 g     F .text	0000001c __swbuf
00007a68 g     F .text	00000034 _ZSt21__throw_bad_exceptionv
00002960  w    F .text	00000030 _ZNSaI6MyRectEC1Ev
0000ec54 g     F .text	00000008 __cxa_get_globals_fast
00006010  w    F .text	0000004c _ZN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEpLERKl
0001ea44  w    O .rodata	00000016 _ZTSNSt8ios_base7failureE
000029b0  w    F .text	00000030 _ZNSaI6MyRectED1Ev
0001ec60  w    O .rodata	00000014 _ZTVSt8bad_cast
00014b60 g     F .text	00000008 __sclose
00800000 g       *ABS*	00000000 __alt_heap_limit
00002490  w    F .text	00000028 _ZnwmPv
000117d4 g     F .text	00000014 fclose
00014d20 g     F .text	00000244 _strtol_r
00023438 g     O .bss	00000190 _atexit0
00008ab4  w    F .text	00000010 _ZNSt12out_of_rangeD1Ev
00000978 g     F .text	00000064 freeImage
00017438 g     F .text	000015b4 _dtoa_r
0001318c g     F .text	00000740 _malloc_r
0000b6c4  w    F .text	00000034 _ZNSsC2IPKcEET_S2_RKSaIcE
0000ac88  w    F .text	00000034 _ZNSsC2ERKSaIcE
00020ee0 g     O .rwdata	00000004 alt_errno
0000d904  w    F .text	0000001c _ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_S1_S1_
00009298 g     F .text	00000030 _ZNSt14overflow_errorC2ERKSs
00008a3c  w    F .text	00000034 _ZNSt11range_errorD0Ev
00014954 g     F .text	00000010 _init_signal
0001edf4  w    O .rodata	0000000c _ZTIN10__cxxabiv117__class_type_infoE
00002f10  w    F .text	00000020 _ZN6MyRectD1Ev
00012f18 g     F .text	000000b8 _fwalk
00004298  w    F .text	0000005c _ZNSt13__copy_normalILb1ELb0EE6copy_nIN9__gnu_cxx17__normal_iteratorIPK6MyRectSt6vectorIS4_SaIS4_EEEEPS4_EET0_T_SD_SC_
00002c00  w    F .text	00000038 _ZNSt6vectorI6MyRectSaIS0_EEC1ERKS1_
00011a18 g     F .text	00000148 _fgets_r
0000a5a0  w    F .text	000000e4 _ZNKSs12find_last_ofEPKcmm
0000ef28 g     F .text	00000010 _ZNSt13bad_exceptionD1Ev
00013d2c g     F .text	00000104 putc
00010780 g     F .text	00000060 __divsi3
0001ee10 g     O .rodata	00000014 __thenan_df
000120a0 g     F .text	0000012c _malloc_trim_r
000070e4  w    F .text	00000044 _ZSt22__uninitialized_copy_aIPiS0_iET0_T_S2_S1_SaIT1_E
0001e714 g       *ABS*	00000000 __CTOR_END__
0000f5e8 g     F .text	000001e0 __mulsf3
00002af8  w    F .text	00000080 _ZN9__gnu_cxx13new_allocatorI6MyRectE9constructEPS1_RKS1_
00005ee4  w    F .text	00000058 _ZN9__gnu_cxxmiIPiS1_St6vectorIiSaIiEEEENS_17__normal_iteratorIT_T1_E15difference_typeERKS8_RKNS5_IT0_S7_EE
0000c204  w    F .text	000000bc _ZNSs6appendERKSs
0000be28  w    F .text	00000088 _ZNSs9push_backEc
00019d14 g     F .text	000000bc strcmp
0000b19c  w    F .text	00000020 _ZNSs13_S_copy_charsEPcPKcS1_
000059e0  w    F .text	00000050 _ZN9__gnu_cxxeqIPK6MyRectSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_
0001e714 g       *ABS*	00000000 __flash_rodata_start
0000495c g     F .text	00000198 drawRectangle
000040e4  w    F .text	0000009c _ZNSt6__copyILb0ESt26random_access_iterator_tagE4copyIPK6MyRectPS3_EET0_T_S8_S7_
00008e3c g     F .text	00000104 _ZNSt8ios_base7failureD2Ev
00007214  w    F .text	00000044 _ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEES2_ET0_T_S8_S7_
0001e714 g       *ABS*	00000000 __DTOR_LIST__
00008c9c g     F .text	000000d0 _ZNSt8ios_base7failureC1ERKSs
00005870  w    F .text	00000030 _ZNSaIiED2Ev
00022a90 g     O .bss	00000004 iter_counter
0000b794  w    F .text	00000060 _ZNSsC1EPKcRKSaIcE
0001acf0 g     F .text	00000088 __nedf2
0000ea7c g     F .text	00000010 _ZNSt8bad_castD2Ev
00009488 g     F .text	00000030 _ZNSt12out_of_rangeC1ERKSs
00006f08  w    F .text	00000044 _ZSt24__uninitialized_copy_auxIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEES6_ET0_T_S8_S7_11__true_type
0001bfe0 g     F .text	00000034 alt_irq_init
0000b1dc  w    F .text	000000c4 _ZNSs12_S_constructIPcEES0_T_S1_RKSaIcESt20forward_iterator_tag
0001bd44 g     F .text	00000060 alt_release_fd
0000eb04 g     F .text	00000034 _ZN10__cxxabiv120__si_class_type_infoD0Ev
0000ce90  w    F .text	00000050 _ZNSs6insertEmPKc
00003fb0  w    F .text	00000028 _ZNK9__gnu_cxx17__normal_iteratorIPK6MyRectSt6vectorIS1_SaIS1_EEEdeEv
0000076c g     F .text	0000011c cpyPgm
0001ee24 g     O .rodata	00000100 __clz_tab
000099d4 g     F .text	00000104 _ZNSt11logic_errorD2Ev
00005cf8  w    F .text	00000038 _ZNSt6vectorIiSaIiEE5beginEv
0000cf50  w    F .text	0000005c _ZNSs12_M_leak_hardEv
00005de4  w    F .text	0000003c _ZNSt6vectorIiSaIiEE3endEv
00022ae4 g     O .bss	00000004 _PathLocale
00006fd4  w    F .text	00000040 _ZNSt13__copy_normalILb0ELb0EE6copy_nIPiS2_EET0_T_S4_S3_
00006a60  w    F .text	00000050 _ZNSt12_Vector_baseIiSaIiEE13_M_deallocateEPim
000060cc  w    F .text	00000044 _ZSt20uninitialized_fill_nIP6MyRectmS0_EvT_T0_RKT1_
00002cb0  w    F .text	00000044 _ZNKSt6vectorI6MyRectSaIS0_EE5beginEv
0001eab0  w    O .rodata	00000010 _ZTSSt11logic_error
00009054 g     F .text	00000104 _ZNSt11logic_errorD1Ev
0001e0f4 g     F .text	00000014 atexit
000020b0 g     F .text	000003e0 detectObjects
0001e92c  w    O .rodata	0000000c _ZTISt11range_error
0000f93c g     F .text	00000078 __gesf2
000092c8 g     F .text	00000030 _ZNSt11range_errorC1ERKSs
00016ffc g     F .text	00000078 _write_r
00003f28  w    F .text	00000050 _ZN9__gnu_cxxneIPK6MyRectSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_
00018ba4 g     F .text	0000001c setlocale
00008a80  w    F .text	00000034 _ZNSt12out_of_rangeD0Ev
00010908 g     F .text	00000008 _Unwind_GetTextRelBase
0000ee70 g     F .text	00000044 __cxa_call_terminate
00003490  w    F .text	0000003c _ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS2_SaIS2_EEEES2_EvT_S8_SaIT0_E
00020eb0 g     O .rwdata	00000004 _impure_ptr
00022ae8 g     O .bss	00000004 alt_argc
0001d708 g     F .text	00000064 _do_dtors
000124e0 g     F .text	0000043c _fseek_r
00006624  w    F .text	00000044 _ZSt26__uninitialized_fill_n_auxIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEmiEvT_T0_RKT1_11__true_type
000145c0 g     F .text	000001c4 __srefill_r
0000d33c  w    F .text	00000114 _ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_ERKS6_S8_
00002b78  w    F .text	00000050 _ZNSt12_Vector_baseI6MyRectSaIS0_EE12_Vector_implC1ERKS1_
00000020 g       .exceptions	00000000 alt_irq_entry
00009f7c  w    F .text	0000002c _ZNKSs8_M_checkEmPKc
0000aa04  w    F .text	00000050 _ZNKSs17find_first_not_ofEPKcm
00003e78  w    F .text	00000058 _ZNSt6vectorI6MyRectSaIS0_EEixEm
000029e0  w    F .text	00000030 _ZNSaI6MyRectED2Ev
0000a180  w    F .text	00000010 _ZNKSs5emptyEv
00018df4 g     F .text	00000080 __ulp
00019ca4 g     F .text	00000040 __isinfd
000108f8 g     F .text	00000008 _Unwind_FindEnclosingFunction
00009e70  w    F .text	00000010 _ZN9__gnu_cxxeqIPcSsEEbRKNS_17__normal_iteratorIT_T0_EES7_
00011ca0 g     F .text	00000018 __fp_unlock_all
00011f54 g     F .text	00000064 fputc
0000ccb0  w    F .text	0000006c _ZNSs5eraseEmm
00020ecc g     O .rwdata	00000008 alt_fs_list
0000a2ac  w    F .text	0000000c _ZNKSs5rfindERKSsm
0000b4c0  w    F .text	000000ec _ZNSsC2ERKSsmm
0000a87c  w    F .text	0000000c _ZNKSs16find_last_not_ofERKSsm
000108e4 g     F .text	0000000c _Unwind_GetLanguageSpecificData
0001d0a0 g     F .text	000000a0 alt_hostfs_write
00008b08  w    F .text	00000034 _ZNSt16invalid_argumentD0Ev
0000dd28 g     F .text	00000118 __cxa_begin_catch
000033f0  w    F .text	00000064 _ZSt13__destroy_auxIN9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS2_SaIS2_EEEEEvT_S8_12__false_type
0000f244 g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD2Ev
0000ed48 g     F .text	00000010 _ZN10__cxxabiv112__unexpectedEPFvvE
0001e99c  w    O .rodata	00000011 _ZTSSt12length_error
00000020 g       *ABS*	00000000 __ram_exceptions_start
00006ab0  w    F .text	00000060 _ZNSt12_Vector_baseIiSaIiEED2Ev
00018b10 g     F .text	00000010 localeconv
00007a00 g     F .text	00000034 _ZSt16__throw_bad_castv
00001aac g     F .text	0000044c readTextClassifier
00005850  w    F .text	00000020 _ZN9__gnu_cxx13new_allocatorIiED2Ev
0000eef4 g     F .text	00000034 _ZNSt13bad_exceptionD0Ev
00020e94 g     O .rwdata	00000004 _ZN10__cxxabiv119__terminate_handlerE
00007184  w    F .text	0000004c _ZSt4copyIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEES2_ET0_T_S8_S7_
00002a34  w    F .text	00000038 _ZNSaI6MyRectEC1ERKS0_
0001e8e4  w    O .rodata	00000014 _ZTVSt15underflow_error
000061d8  w    F .text	00000028 _ZNK9__gnu_cxx13new_allocatorIiE8max_sizeEv
00004180  w    F .text	00000044 _ZSt10__copy_auxIPK6MyRectPS0_ET0_T_S5_S4_
0001da98 g     F .text	00000050 alt_ic_isr_register
0000efe8 g     F .text	00000134 __cxa_allocate_exception
0001ece0  w    O .rodata	0000000c _ZTIN10__cxxabiv120__si_class_type_infoE
0000ef48 g     F .text	0000000c _ZSt15set_new_handlerPFvvE
0000cb90  w    F .text	00000048 _ZNSsaSEc
00020f3c g       *ABS*	00000000 _edata
00003dc8  w    F .text	00000058 _ZNK9__gnu_cxx17__normal_iteratorIPK6MyRectSt6vectorIS1_SaIS1_EEEplERKl
00004340  w    F .text	00000078 _ZNSt6vectorI6MyRectSaIS0_EE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKS0_S2_EEEEPS0_mT_SA_
000235c8 g       *ABS*	00000000 _end
00020ea4 g     O .rwdata	00000001 _ZSt7nothrow
000098c8 g     F .text	0000010c _ZNSt13runtime_errorD0Ev
0000e558 g     F .text	000004e0 __gxx_personality_sj0
0000af74  w    F .text	0000009c _ZNSs4_Rep8_M_cloneERKSaIcEm
00005bfc  w    F .text	00000024 _ZNK9__gnu_cxx17__normal_iteratorIPKiSt6vectorIiSaIiEEE4baseEv
000001b4 g       *ABS*	00000000 __ram_exceptions_end
00007014  w    F .text	00000048 _ZSt4copyIPiS0_ET0_T_S2_S1_
0001c800 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00012010 g     F .text	00000074 _fputs_r
00005b74  w    F .text	00000044 _ZNKSt6vectorIiSaIiEE3endEv
000058a0  w    F .text	00000030 _ZNSaIiED1Ev
00003fd8  w    F .text	00000084 _ZSt24__uninitialized_copy_auxIN9__gnu_cxx17__normal_iteratorIPK6MyRectSt6vectorIS2_SaIS2_EEEEPS2_ET0_T_SB_SA_12__false_type
00003284  w    F .text	00000050 _ZN9__gnu_cxxneIP6MyRectSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_
0000f2e4 g     F .text	0000004c _ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE
00002d8c  w    F .text	00000028 _ZNKSt6vectorI6MyRectSaIS0_EE8max_sizeEv
0000eed4 g     F .text	00000010 _ZNSt9exceptionD1Ev
0001db84 g     F .text	000000a0 alt_ic_irq_disable
00003f78  w    F .text	00000038 _ZN9__gnu_cxx17__normal_iteratorIPK6MyRectSt6vectorIS1_SaIS1_EEEppEv
00022ab4 g     O .bss	00000004 _ZN14__gnu_internal12atomic_mutexE
0001ea5c  w    O .rodata	0000000c _ZTINSt8ios_base7failureE
00014bd0 g     F .text	0000007c __swrite
00020eb8 g     O .rwdata	00000004 __malloc_trim_threshold
0001e044 g     F .text	00000020 altera_nios2_qsys_irq_init
0000a408  w    F .text	00000130 _ZNSs4_Rep9_S_createEmmRKSaIcE
0001e108 g     F .text	00000038 exit
00010898 g     F .text	00000018 _Unwind_SetGR
0000c2c0  w    F .text	00000004 _ZNSspLERKSs
00012e50 g     F .text	000000c8 _fwalk_reent
0001ea1c  w    O .rodata	00000014 _ZTVSt12domain_error
000193f0 g     F .text	0000018c __mdiff
0000ec8c g     F .text	000000a4 _ZN10__cxxabiv111__terminateEPFvvE
0000ca48  w    F .text	00000068 _ZNSs7replaceEmmmc
0000405c  w    F .text	00000044 _ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPK6MyRectSt6vectorIS2_SaIS2_EEEEPS2_ET0_T_SB_SA_
000107e0 g     F .text	00000060 __modsi3
00001390 g     F .text	0000034c runCascadeClassifier
0000ef88 g     F .text	00000010 _ZNSt9bad_allocD1Ev
00000b88 g     F .text	00000808 setImageForCascadeClassifier
00800000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00002bc8  w    F .text	00000038 _ZNSt12_Vector_baseI6MyRectSaIS0_EEC2ERKS1_
00011be0 g     F .text	00000004 __sfp_lock_release
000035a8  w    F .text	00000050 _ZNSt12_Vector_baseI6MyRectSaIS0_EE13_M_deallocateEPS0_m
00003530  w    F .text	00000040 _ZNSt12_Vector_baseI6MyRectSaIS0_EE11_M_allocateEm
0000eb8c g     F .text	000000c8 _ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE
0001ed28  w    O .rodata	0000000c _ZTISt13bad_exception
00000000 g       *ABS*	00000000 __alt_mem_sdram
000042f4  w    F .text	0000004c _ZSt4copyIN9__gnu_cxx17__normal_iteratorIPK6MyRectSt6vectorIS2_SaIS2_EEEEPS2_ET0_T_SB_SA_
000116b8 g     F .text	0000000c atoi
0001efaa g     O .rodata	00000101 _ctype_
000016dc g     F .text	000001f0 _Z14integralImagesP7MyImageP10MyIntImageS2_
00008b4c  w    F .text	00000034 _ZNSt12domain_errorD0Ev
000068e4  w    F .text	00000144 _ZNSt12_Vector_baseI6MyRectSaIS0_EEC2EmRKS1_
0000a004  w    F .text	00000008 _ZNKSs5c_strEv
000110d8 g     F .text	000000a8 __fpcmp_parts_f
0000679c  w    F .text	00000148 _ZNSt12_Vector_baseIiSaIiEEC2EmRKS0_
00011e44 g     F .text	000000f4 _fopen_r
00019ce4 g     F .text	00000030 __isnand
0001b1e4 g     F .text	00000020 _exit
00008d6c g     F .text	000000d0 _ZNSt8ios_base7failureC2ERKSs
0001d3f8 g     F .text	00000154 alt_alarm_start
00008694 g     F .text	00000190 _ZSt20__throw_out_of_rangePKc
0000acbc  w    F .text	00000090 _ZNKSs7compareEmmPKcm
0000cab0  w    F .text	00000060 _ZNSs6insertEN9__gnu_cxx17__normal_iteratorIPcSsEEc
00010d98 g     F .text	00000098 __muldi3
0001086c g     F .text	00000018 _Unwind_GetGR
0000ec5c g     F .text	00000008 __cxa_get_globals
00003e20  w    F .text	00000058 _ZNK9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS1_SaIS1_EEEplERKl
00012fd0 g     F .text	00000194 __smakebuf_r
00006228  w    F .text	0000003c _ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEvT_S7_
00020e98 g     O .rwdata	00000004 _ZN10__cxxabiv120__unexpected_handlerE
0000c0dc  w    F .text	00000040 _ZNSspLEPKc
000040a0  w    F .text	00000044 _ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPK6MyRectSt6vectorIS2_SaIS2_EEEEPS2_S2_ET0_T_SB_SA_SaIT1_E
00014cac g     F .text	00000074 strlen
000066ac  w    F .text	00000044 _ZSt24__uninitialized_fill_n_aIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEmiiEvT_T0_RKT1_SaIT2_E
00007d34 g     F .text	00000190 _ZSt23__throw_underflow_errorPKc
000148f0 g     F .text	00000064 _init_signal_r
00020ea8  w    O .rwdata	00000008 _ZTISt9type_info
0001b9dc g     F .text	00000188 open
00009cd0  w    F .text	0000000c _ZNSs4_Rep12_S_empty_repEv
00009cc8  w    F .text	00000008 _ZNSs12_Alloc_hiderC1EPcRKSaIcE
0001ae00 g     F .text	00000088 __gedf2
0001ed34  w    O .rodata	0000000d _ZTSSt9exception
0001ea68  w    O .rodata	00000014 _ZTVSt13runtime_error
00006154  w    F .text	00000084 _ZNSt6vectorI6MyRectSaIS0_EE5clearEv
0001ec44  w    O .rodata	0000000f _ZTSSt10bad_typeid
0000a190  w    F .text	0000000c _ZNKSs6lengthEv
0000b1bc  w    F .text	00000020 _ZNSs13_S_copy_charsEPcS_S_
00009608 g     F .text	00000008 _ZNKSt11logic_error4whatEv
0000b600  w    F .text	000000c4 _ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag
0000eec4 g     F .text	00000010 _ZNSt9exceptionD0Ev
0000d174  w    F .text	00000070 _ZNSs6resizeEmc
00003054  w    F .text	0000007c _ZSt10_ConstructI6MyRectS0_EvPT_RKT0_
0001da68 g     F .text	00000030 alt_icache_flush_all
0001ea30  w    O .rodata	00000014 _ZTVNSt8ios_base7failureE
0000daf4 g     F .text	00000010 _ZNSt10bad_typeidD1Ev
00012084 g     F .text	0000001c fputs
00010900 g     F .text	00000008 _Unwind_GetDataRelBase
0000d8e8  w    F .text	0000001c _ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_PKcS4_
00020f30 g     O .rwdata	00000004 alt_priority_mask
0000cd1c  w    F .text	00000174 _ZNSs6insertEmPKcm
0001dae8 g     F .text	0000009c alt_ic_irq_enable
00016e8c g     F .text	00000024 __vfprintf_internal
00009ca0  w    F .text	0000000c _ZNKSs8max_sizeEv
00008b98 g     F .text	00000104 _ZNSt8ios_base7failureD1Ev
0000db04 g     F .text	00000010 _ZNSt10bad_typeidD2Ev
000065dc  w    F .text	00000048 _ZSt6fill_nIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEmiET_S7_T0_RKT1_
0000ffbc g     F .text	00000080 __subdf3
0000a538  w    F .text	00000004 _ZNSs4_Rep10_M_destroyERKSaIcE
0000ae14  w    F .text	000000c0 _ZNKSs7compareEmmRKSsmm
0000a684  w    F .text	0000000c _ZNKSs12find_last_ofERKSsm
00001a48 g     F .text	00000064 releaseTextClassifier
0000b7f4  w    F .text	00000060 _ZNSsC2EPKcRKSaIcE
00009d1c  w    F .text	00000008 _ZNSs4_Rep10_M_refdataEv
00018cd0 g     F .text	000000c4 __lo0bits
0000d120  w    F .text	00000054 _ZNSs6rbeginEv
0000cb10  w    F .text	00000048 _ZNSs6insertEmmc
00004248  w    F .text	00000050 _ZSt4copyIN9__gnu_cxx17__normal_iteratorIPK6MyRectSt6vectorIS2_SaIS2_EEEENS1_IPS2_S7_EEET0_T_SC_SB_
00002dd8  w    F .text	00000038 _ZN9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS1_SaIS1_EEEppEv
00020f34 g     O .rwdata	00000008 alt_alarm_list
0001d6a4 g     F .text	00000064 _do_ctors
00014a18 g     F .text	00000014 __sigtramp
0001e9c4  w    O .rodata	0000000c _ZTISt16invalid_argument
0000b928  w    F .text	00000034 _ZNSsC2IN9__gnu_cxx17__normal_iteratorIPcSsEEEET_S4_RKSaIcE
00004658 g     F .text	00000048 _Z5myMaxii
00005f98  w    F .text	00000028 _ZNKSt6vectorIiSaIiEE8max_sizeEv
00009c44  w    F .text	0000001c _ZNKSs11_M_disjunctEPKc
0001b01c g     F .text	000000fc close
0000d450  w    F .text	00000034 _ZNSs4swapERSs
00005cc4  w    F .text	00000034 _ZN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEC1ERKS1_
0000f584 g     F .text	00000064 __addsf3
0000abdc  w    F .text	0000003c _ZNSsC1EmcRKSaIcE
00009328 g     F .text	000000b0 _ZNSt11logic_errorC1ERKSs
0001b618 g     F .text	00000080 alt_load
00011180 g     F .text	00000314 __pack_d
00009c6c  w    F .text	00000010 _ZNSsC1Ev
0000f12c g     F .text	00000010 _ZNKSt9type_info10__do_catchEPKS_PPvj
00006b10  w    F .text	000000a4 _ZNSt6vectorIiSaIiEEC1EmRKiRKS0_
00006bb4  w    F .text	0000007c _ZNSt6vectorIiSaIiEED1Ev
000148dc g     F .text	00000014 raise
00009578 g     F .text	00000030 _ZNSt16invalid_argumentC2ERKSs
00013164 g     F .text	00000014 free
00011be4 g     F .text	00000004 __sinit_lock_acquire
00009518 g     F .text	00000030 _ZNSt12length_errorC2ERKSs
000198ec g     F .text	00000100 __multadd
0000f200 g     F .text	00000034 _ZN10__cxxabiv117__class_type_infoD0Ev
00018c38 g     F .text	00000028 _Bfree
0001d1e0 g     F .text	00000218 alt_hostfs_fstat
0000bf90  w    F .text	0000010c _ZNSs6appendEPKcm
00009610 g     F .text	000000b0 _ZNSt13runtime_errorC1ERKSs
0000b394  w    F .text	000000ec _ZNSsC1ERKSsmm



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08406d14 	ori	at,at,436
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  44:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defff904 	addi	sp,sp,-28
  f0:	dfc00615 	stw	ra,24(sp)
  f4:	df000515 	stw	fp,20(sp)
  f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  fc:	0005313a 	rdctl	r2,ipending
 100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 10c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 110:	00800044 	movi	r2,1
 114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 118:	e0ffff17 	ldw	r3,-4(fp)
 11c:	e0bffe17 	ldw	r2,-8(fp)
 120:	1884703a 	and	r2,r3,r2
 124:	1005003a 	cmpeq	r2,r2,zero
 128:	1000161e 	bne	r2,zero,184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 12c:	e0bffd17 	ldw	r2,-12(fp)
 130:	00c000b4 	movhi	r3,2
 134:	18ccce04 	addi	r3,r3,13112
 138:	100490fa 	slli	r2,r2,3
 13c:	10c5883a 	add	r2,r2,r3
 140:	11400017 	ldw	r5,0(r2)
 144:	e0bffd17 	ldw	r2,-12(fp)
 148:	00c000b4 	movhi	r3,2
 14c:	18ccce04 	addi	r3,r3,13112
 150:	100490fa 	slli	r2,r2,3
 154:	10c5883a 	add	r2,r2,r3
 158:	10800104 	addi	r2,r2,4
 15c:	11000017 	ldw	r4,0(r2)
 160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 164:	0005313a 	rdctl	r2,ipending
 168:	e0bffb15 	stw	r2,-20(fp)

  return active;
 16c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 174:	e0bfff17 	ldw	r2,-4(fp)
 178:	1004c03a 	cmpne	r2,r2,zero
 17c:	103fe31e 	bne	r2,zero,10c <alt_irq_handler+0x20>
 180:	00000706 	br	1a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 184:	e0bffe17 	ldw	r2,-8(fp)
 188:	1085883a 	add	r2,r2,r2
 18c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 190:	e0bffd17 	ldw	r2,-12(fp)
 194:	10800044 	addi	r2,r2,1
 198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 19c:	003fde06 	br	118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 1a0:	e037883a 	mov	sp,fp
 1a4:	dfc00117 	ldw	ra,4(sp)
 1a8:	df000017 	ldw	fp,0(sp)
 1ac:	dec00204 	addi	sp,sp,8
 1b0:	f800283a 	ret

Disassembly of section .text:

000001b4 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
     1b4:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
     1b8:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
     1bc:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
     1c0:	00bffd16 	blt	zero,r2,1b8 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     1c4:	06c02034 	movhi	sp,128
    ori sp, sp, %lo(__alt_stack_pointer)
     1c8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
     1cc:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
     1d0:	d6a3a214 	ori	gp,gp,36488
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1d4:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
     1d8:	108aa214 	ori	r2,r2,10888

    movhi r3, %hi(__bss_end)
     1dc:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
     1e0:	18cd7214 	ori	r3,r3,13768

    beq r2, r3, 1f
     1e4:	10c00326 	beq	r2,r3,1f4 <_start+0x40>

0:
    stw zero, (r2)
     1e8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1ec:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1f0:	10fffd36 	bltu	r2,r3,1e8 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     1f4:	001b6180 	call	1b618 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     1f8:	001b8540 	call	1b854 <alt_main>

000001fc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1fc:	003fff06 	br	1fc <alt_after_alt_main>

00000200 <strrev>:
#include "image.h"
#include "stdio-wrapper.h"
#include <math.h>

char* strrev(char* str)
{
     200:	defffa04 	addi	sp,sp,-24
     204:	dfc00515 	stw	ra,20(sp)
     208:	df000415 	stw	fp,16(sp)
     20c:	df000404 	addi	fp,sp,16
     210:	e13ffe15 	stw	r4,-8(fp)
	char *p1, *p2;
	if (!str || !*str)
     214:	e0bffe17 	ldw	r2,-8(fp)
     218:	1005003a 	cmpeq	r2,r2,zero
     21c:	1000071e 	bne	r2,zero,23c <strrev+0x3c>
     220:	e0bffe17 	ldw	r2,-8(fp)
     224:	10800003 	ldbu	r2,0(r2)
     228:	10803fcc 	andi	r2,r2,255
     22c:	1080201c 	xori	r2,r2,128
     230:	10bfe004 	addi	r2,r2,-128
     234:	1004c03a 	cmpne	r2,r2,zero
     238:	1000031e 	bne	r2,zero,248 <strrev+0x48>
		return str;
     23c:	e0bffe17 	ldw	r2,-8(fp)
     240:	e0bfff15 	stw	r2,-4(fp)
     244:	00002d06 	br	2fc <strrev+0xfc>
	for (p1 = str, p2 = str + strlen(str) - 1; p2 > p1; ++p1, --p2)
     248:	e0bffe17 	ldw	r2,-8(fp)
     24c:	e0bffd15 	stw	r2,-12(fp)
     250:	e13ffe17 	ldw	r4,-8(fp)
     254:	0014cac0 	call	14cac <strlen>
     258:	1007883a 	mov	r3,r2
     25c:	e0bffe17 	ldw	r2,-8(fp)
     260:	1885883a 	add	r2,r3,r2
     264:	10bfffc4 	addi	r2,r2,-1
     268:	e0bffc15 	stw	r2,-16(fp)
     26c:	00001e06 	br	2e8 <strrev+0xe8>
	{
		*p1 ^= *p2;
     270:	e0bffd17 	ldw	r2,-12(fp)
     274:	10c00003 	ldbu	r3,0(r2)
     278:	e0bffc17 	ldw	r2,-16(fp)
     27c:	10800003 	ldbu	r2,0(r2)
     280:	1884f03a 	xor	r2,r3,r2
     284:	1007883a 	mov	r3,r2
     288:	e0bffd17 	ldw	r2,-12(fp)
     28c:	10c00005 	stb	r3,0(r2)
		*p2 ^= *p1;
     290:	e0bffc17 	ldw	r2,-16(fp)
     294:	10c00003 	ldbu	r3,0(r2)
     298:	e0bffd17 	ldw	r2,-12(fp)
     29c:	10800003 	ldbu	r2,0(r2)
     2a0:	1884f03a 	xor	r2,r3,r2
     2a4:	1007883a 	mov	r3,r2
     2a8:	e0bffc17 	ldw	r2,-16(fp)
     2ac:	10c00005 	stb	r3,0(r2)
		*p1 ^= *p2;
     2b0:	e0bffd17 	ldw	r2,-12(fp)
     2b4:	10c00003 	ldbu	r3,0(r2)
     2b8:	e0bffc17 	ldw	r2,-16(fp)
     2bc:	10800003 	ldbu	r2,0(r2)
     2c0:	1884f03a 	xor	r2,r3,r2
     2c4:	1007883a 	mov	r3,r2
     2c8:	e0bffd17 	ldw	r2,-12(fp)
     2cc:	10c00005 	stb	r3,0(r2)
char* strrev(char* str)
{
	char *p1, *p2;
	if (!str || !*str)
		return str;
	for (p1 = str, p2 = str + strlen(str) - 1; p2 > p1; ++p1, --p2)
     2d0:	e0bffd17 	ldw	r2,-12(fp)
     2d4:	10800044 	addi	r2,r2,1
     2d8:	e0bffd15 	stw	r2,-12(fp)
     2dc:	e0bffc17 	ldw	r2,-16(fp)
     2e0:	10bfffc4 	addi	r2,r2,-1
     2e4:	e0bffc15 	stw	r2,-16(fp)
     2e8:	e0fffc17 	ldw	r3,-16(fp)
     2ec:	e0bffd17 	ldw	r2,-12(fp)
     2f0:	10ffdf36 	bltu	r2,r3,270 <strrev+0x70>
	{
		*p1 ^= *p2;
		*p2 ^= *p1;
		*p1 ^= *p2;
	}
	return str;
     2f4:	e0bffe17 	ldw	r2,-8(fp)
     2f8:	e0bfff15 	stw	r2,-4(fp)
     2fc:	e0bfff17 	ldw	r2,-4(fp)
}
     300:	e037883a 	mov	sp,fp
     304:	dfc00117 	ldw	ra,4(sp)
     308:	df000017 	ldw	fp,0(sp)
     30c:	dec00204 	addi	sp,sp,8
     310:	f800283a 	ret

00000314 <myatoi>:
//	}
//	return(i);
//}

int myatoi (char* string)
{
     314:	defff904 	addi	sp,sp,-28
     318:	dfc00615 	stw	ra,24(sp)
     31c:	df000515 	stw	fp,20(sp)
     320:	df000504 	addi	fp,sp,20
     324:	e13fff15 	stw	r4,-4(fp)
	int sign = 1;
     328:	00800044 	movi	r2,1
     32c:	e0bffe15 	stw	r2,-8(fp)
	// how many characters in the string
	int length = strlen(string);
     330:	e13fff17 	ldw	r4,-4(fp)
     334:	0014cac0 	call	14cac <strlen>
     338:	e0bffd15 	stw	r2,-12(fp)
	int i = 0;
     33c:	e03ffc15 	stw	zero,-16(fp)
	int number = 0;
     340:	e03ffb15 	stw	zero,-20(fp)

	// handle sign
	if (string[0] == '-')
     344:	e0bfff17 	ldw	r2,-4(fp)
     348:	10800003 	ldbu	r2,0(r2)
     34c:	10803fcc 	andi	r2,r2,255
     350:	1080201c 	xori	r2,r2,128
     354:	10bfe004 	addi	r2,r2,-128
     358:	10800b58 	cmpnei	r2,r2,45
     35c:	1000201e 	bne	r2,zero,3e0 <myatoi+0xcc>
	{
		sign = -1;
     360:	00bfffc4 	movi	r2,-1
     364:	e0bffe15 	stw	r2,-8(fp)
		i++;
     368:	e0bffc17 	ldw	r2,-16(fp)
     36c:	10800044 	addi	r2,r2,1
     370:	e0bffc15 	stw	r2,-16(fp)
	}

//	for (i; i < length; i++)
	while(i < length)
     374:	00001a06 	br	3e0 <myatoi+0xcc>
	{
		// handle the decimal place if there is one
		if (string[i] == '.')
     378:	e0bffc17 	ldw	r2,-16(fp)
     37c:	1007883a 	mov	r3,r2
     380:	e0bfff17 	ldw	r2,-4(fp)
     384:	1885883a 	add	r2,r3,r2
     388:	10800003 	ldbu	r2,0(r2)
     38c:	10803fcc 	andi	r2,r2,255
     390:	1080201c 	xori	r2,r2,128
     394:	10bfe004 	addi	r2,r2,-128
     398:	10800ba0 	cmpeqi	r2,r2,46
     39c:	1000131e 	bne	r2,zero,3ec <myatoi+0xd8>
			break;
		number = number * 10 + (string[i]- 48);
     3a0:	e0bffb17 	ldw	r2,-20(fp)
     3a4:	110002a4 	muli	r4,r2,10
     3a8:	e0bffc17 	ldw	r2,-16(fp)
     3ac:	1007883a 	mov	r3,r2
     3b0:	e0bfff17 	ldw	r2,-4(fp)
     3b4:	1885883a 	add	r2,r3,r2
     3b8:	10800003 	ldbu	r2,0(r2)
     3bc:	10803fcc 	andi	r2,r2,255
     3c0:	1080201c 	xori	r2,r2,128
     3c4:	10bfe004 	addi	r2,r2,-128
     3c8:	2085883a 	add	r2,r4,r2
     3cc:	10bff404 	addi	r2,r2,-48
     3d0:	e0bffb15 	stw	r2,-20(fp)
		i++;
     3d4:	e0bffc17 	ldw	r2,-16(fp)
     3d8:	10800044 	addi	r2,r2,1
     3dc:	e0bffc15 	stw	r2,-16(fp)
		sign = -1;
		i++;
	}

//	for (i; i < length; i++)
	while(i < length)
     3e0:	e0fffc17 	ldw	r3,-16(fp)
     3e4:	e0bffd17 	ldw	r2,-12(fp)
     3e8:	18bfe316 	blt	r3,r2,378 <myatoi+0x64>
			break;
		number = number * 10 + (string[i]- 48);
		i++;
	}

	number *= sign;
     3ec:	e0fffb17 	ldw	r3,-20(fp)
     3f0:	e0bffe17 	ldw	r2,-8(fp)
     3f4:	1885383a 	mul	r2,r3,r2
     3f8:	e0bffb15 	stw	r2,-20(fp)

	return number;
     3fc:	e0bffb17 	ldw	r2,-20(fp)
}
     400:	e037883a 	mov	sp,fp
     404:	dfc00117 	ldw	ra,4(sp)
     408:	df000017 	ldw	fp,0(sp)
     40c:	dec00204 	addi	sp,sp,8
     410:	f800283a 	ret

00000414 <itochar>:

void itochar(int x, char* szBuffer, int radix)
{
     414:	defff804 	addi	sp,sp,-32
     418:	dfc00715 	stw	ra,28(sp)
     41c:	df000615 	stw	fp,24(sp)
     420:	df000604 	addi	fp,sp,24
     424:	e13ffd15 	stw	r4,-12(fp)
     428:	e17ffe15 	stw	r5,-8(fp)
     42c:	e1bfff15 	stw	r6,-4(fp)
	int i = 0, n, xx;
     430:	e03ffc15 	stw	zero,-16(fp)
	n = x;
     434:	e0bffd17 	ldw	r2,-12(fp)
     438:	e0bffb15 	stw	r2,-20(fp)
	while (n > 0)
     43c:	00001206 	br	488 <itochar+0x74>
	{
		xx = n%radix;
     440:	e13ffb17 	ldw	r4,-20(fp)
     444:	e17fff17 	ldw	r5,-4(fp)
     448:	00107e00 	call	107e0 <__modsi3>
     44c:	e0bffa15 	stw	r2,-24(fp)
		n = n/radix;
     450:	e13ffb17 	ldw	r4,-20(fp)
     454:	e17fff17 	ldw	r5,-4(fp)
     458:	00107800 	call	10780 <__divsi3>
     45c:	e0bffb15 	stw	r2,-20(fp)
		szBuffer[i++] = '0' + xx;
     460:	e0bffc17 	ldw	r2,-16(fp)
     464:	1007883a 	mov	r3,r2
     468:	e0bffe17 	ldw	r2,-8(fp)
     46c:	1887883a 	add	r3,r3,r2
     470:	e0bffa17 	ldw	r2,-24(fp)
     474:	10800c04 	addi	r2,r2,48
     478:	18800005 	stb	r2,0(r3)
     47c:	e0bffc17 	ldw	r2,-16(fp)
     480:	10800044 	addi	r2,r2,1
     484:	e0bffc15 	stw	r2,-16(fp)

void itochar(int x, char* szBuffer, int radix)
{
	int i = 0, n, xx;
	n = x;
	while (n > 0)
     488:	e0bffb17 	ldw	r2,-20(fp)
     48c:	10800048 	cmpgei	r2,r2,1
     490:	103feb1e 	bne	r2,zero,440 <itochar+0x2c>
	{
		xx = n%radix;
		n = n/radix;
		szBuffer[i++] = '0' + xx;
	}
	szBuffer[i] = '\0';
     494:	e0bffc17 	ldw	r2,-16(fp)
     498:	1007883a 	mov	r3,r2
     49c:	e0bffe17 	ldw	r2,-8(fp)
     4a0:	1885883a 	add	r2,r3,r2
     4a4:	10000005 	stb	zero,0(r2)
	strrev(szBuffer);
     4a8:	e13ffe17 	ldw	r4,-8(fp)
     4ac:	00002000 	call	200 <strrev>
}
     4b0:	e037883a 	mov	sp,fp
     4b4:	dfc00117 	ldw	ra,4(sp)
     4b8:	df000017 	ldw	fp,0(sp)
     4bc:	dec00204 	addi	sp,sp,8
     4c0:	f800283a 	ret

000004c4 <readImage>:
	}
	fclose(in_file);
	return 0;
}*/

int readImage(int x1, int y1, int x2, int y2, MyImage* image){
     4c4:	defff504 	addi	sp,sp,-44
     4c8:	dfc00a15 	stw	ra,40(sp)
     4cc:	df000915 	stw	fp,36(sp)
     4d0:	df000904 	addi	fp,sp,36
     4d4:	e13ffc15 	stw	r4,-16(fp)
     4d8:	e17ffd15 	stw	r5,-12(fp)
     4dc:	e1bffe15 	stw	r6,-8(fp)
     4e0:	e1ffff15 	stw	r7,-4(fp)
	int offset, i=0, row, col;
     4e4:	e03ffa15 	stw	zero,-24(fp)
	volatile short * sram = (short *)  0x08000000;
     4e8:	00820034 	movhi	r2,2048
     4ec:	e0bff715 	stw	r2,-36(fp)
	image->data = (unsigned char*)malloc(sizeof(unsigned char)*(x2*y2));
     4f0:	e0fffe17 	ldw	r3,-8(fp)
     4f4:	e0bfff17 	ldw	r2,-4(fp)
     4f8:	1885383a 	mul	r2,r3,r2
     4fc:	1009883a 	mov	r4,r2
     500:	00131780 	call	13178 <malloc>
     504:	1007883a 	mov	r3,r2
     508:	e0800217 	ldw	r2,8(fp)
     50c:	10c00315 	stw	r3,12(r2)

	image->height = y2;
     510:	e0c00217 	ldw	r3,8(fp)
     514:	e0bfff17 	ldw	r2,-4(fp)
     518:	18800115 	stw	r2,4(r3)
	image->width = x2;
     51c:	e0c00217 	ldw	r3,8(fp)
     520:	e0bffe17 	ldw	r2,-8(fp)
     524:	18800015 	stw	r2,0(r3)
	image->flag = 1;
     528:	e0c00217 	ldw	r3,8(fp)
     52c:	00800044 	movi	r2,1
     530:	18800415 	stw	r2,16(r3)
	image->maxgrey = 255;
     534:	e0c00217 	ldw	r3,8(fp)
     538:	00803fc4 	movi	r2,255
     53c:	18800215 	stw	r2,8(r3)

	for(row = y1; row < y2; row++){
     540:	e0bffd17 	ldw	r2,-12(fp)
     544:	e0bff915 	stw	r2,-28(fp)
     548:	00001a06 	br	5b4 <readImage+0xf0>
		for(col = x1; col < x2; col++){
     54c:	e0bffc17 	ldw	r2,-16(fp)
     550:	e0bff815 	stw	r2,-32(fp)
     554:	00001106 	br	59c <readImage+0xd8>
			//offset = (row << 9) + col;
			image->data[i] = (unsigned char) *(sram + i);
     558:	e0800217 	ldw	r2,8(fp)
     55c:	10c00317 	ldw	r3,12(r2)
     560:	e0bffa17 	ldw	r2,-24(fp)
     564:	1889883a 	add	r4,r3,r2
     568:	e0bffa17 	ldw	r2,-24(fp)
     56c:	1085883a 	add	r2,r2,r2
     570:	1007883a 	mov	r3,r2
     574:	e0bff717 	ldw	r2,-36(fp)
     578:	1885883a 	add	r2,r3,r2
     57c:	1080000b 	ldhu	r2,0(r2)
     580:	20800005 	stb	r2,0(r4)
			i++;
     584:	e0bffa17 	ldw	r2,-24(fp)
     588:	10800044 	addi	r2,r2,1
     58c:	e0bffa15 	stw	r2,-24(fp)
	image->width = x2;
	image->flag = 1;
	image->maxgrey = 255;

	for(row = y1; row < y2; row++){
		for(col = x1; col < x2; col++){
     590:	e0bff817 	ldw	r2,-32(fp)
     594:	10800044 	addi	r2,r2,1
     598:	e0bff815 	stw	r2,-32(fp)
     59c:	e0fff817 	ldw	r3,-32(fp)
     5a0:	e0bffe17 	ldw	r2,-8(fp)
     5a4:	18bfec16 	blt	r3,r2,558 <readImage+0x94>
	image->height = y2;
	image->width = x2;
	image->flag = 1;
	image->maxgrey = 255;

	for(row = y1; row < y2; row++){
     5a8:	e0bff917 	ldw	r2,-28(fp)
     5ac:	10800044 	addi	r2,r2,1
     5b0:	e0bff915 	stw	r2,-28(fp)
     5b4:	e0fff917 	ldw	r3,-28(fp)
     5b8:	e0bfff17 	ldw	r2,-4(fp)
     5bc:	18bfe316 	blt	r3,r2,54c <readImage+0x88>

				++col;
			}
		}
*/
	return 0;
     5c0:	0005883a 	mov	r2,zero
}
     5c4:	e037883a 	mov	sp,fp
     5c8:	dfc00117 	ldw	ra,4(sp)
     5cc:	df000017 	ldw	fp,0(sp)
     5d0:	dec00204 	addi	sp,sp,8
     5d4:	f800283a 	ret

000005d8 <writePgm>:

int writePgm(char *fileName, MyImage *image)
{
     5d8:	defff604 	addi	sp,sp,-40
     5dc:	dfc00915 	stw	ra,36(sp)
     5e0:	df000815 	stw	fp,32(sp)
     5e4:	df000804 	addi	fp,sp,32
     5e8:	e13ffd15 	stw	r4,-12(fp)
     5ec:	e17ffe15 	stw	r5,-8(fp)
	char parameters_str[5];
	int i;
	const char *format = "P5";
     5f0:	008000b4 	movhi	r2,2
     5f4:	10b9c504 	addi	r2,r2,-6380
     5f8:	e0bff915 	stw	r2,-28(fp)
	if (image->flag == 0)
     5fc:	e0bffe17 	ldw	r2,-8(fp)
     600:	10800417 	ldw	r2,16(r2)
     604:	1004c03a 	cmpne	r2,r2,zero
     608:	1000031e 	bne	r2,zero,618 <writePgm+0x40>
	{
		return -1;
     60c:	00bfffc4 	movi	r2,-1
     610:	e0bfff15 	stw	r2,-4(fp)
     614:	00004f06 	br	754 <writePgm+0x17c>
	}
	FILE *fp = fopen(fileName, "w");
     618:	e13ffd17 	ldw	r4,-12(fp)
     61c:	014000b4 	movhi	r5,2
     620:	2979c604 	addi	r5,r5,-6376
     624:	0011f380 	call	11f38 <fopen>
     628:	e0bff815 	stw	r2,-32(fp)
	if (!fp)
     62c:	e0bff817 	ldw	r2,-32(fp)
     630:	1004c03a 	cmpne	r2,r2,zero
     634:	1000071e 	bne	r2,zero,654 <writePgm+0x7c>
	{
		printf("Unable to open file %s\n", fileName);
     638:	010000b4 	movhi	r4,2
     63c:	2139c704 	addi	r4,r4,-6372
     640:	e17ffd17 	ldw	r5,-12(fp)
     644:	0013cb40 	call	13cb4 <printf>
		return -1;
     648:	00bfffc4 	movi	r2,-1
     64c:	e0bfff15 	stw	r2,-4(fp)
     650:	00004006 	br	754 <writePgm+0x17c>
	}
	fputs(format, fp);
     654:	e13ff917 	ldw	r4,-28(fp)
     658:	e17ff817 	ldw	r5,-32(fp)
     65c:	00120840 	call	12084 <fputs>
	fputc('\n', fp);
     660:	01000284 	movi	r4,10
     664:	e17ff817 	ldw	r5,-32(fp)
     668:	0011f540 	call	11f54 <fputc>

	itochar(image->width, parameters_str, 10);
     66c:	e0bffe17 	ldw	r2,-8(fp)
     670:	11000017 	ldw	r4,0(r2)
     674:	e17ffb04 	addi	r5,fp,-20
     678:	01800284 	movi	r6,10
     67c:	00004140 	call	414 <itochar>
	fputs(parameters_str, fp);
     680:	e13ffb04 	addi	r4,fp,-20
     684:	e17ff817 	ldw	r5,-32(fp)
     688:	00120840 	call	12084 <fputs>
	parameters_str[0] = 0;
     68c:	e03ffb05 	stb	zero,-20(fp)
	fputc(' ', fp);
     690:	01000804 	movi	r4,32
     694:	e17ff817 	ldw	r5,-32(fp)
     698:	0011f540 	call	11f54 <fputc>

	itochar(image->height, parameters_str, 10);
     69c:	e0bffe17 	ldw	r2,-8(fp)
     6a0:	11000117 	ldw	r4,4(r2)
     6a4:	e17ffb04 	addi	r5,fp,-20
     6a8:	01800284 	movi	r6,10
     6ac:	00004140 	call	414 <itochar>
	fputs(parameters_str, fp);
     6b0:	e13ffb04 	addi	r4,fp,-20
     6b4:	e17ff817 	ldw	r5,-32(fp)
     6b8:	00120840 	call	12084 <fputs>
	parameters_str[0] = 0;
     6bc:	e03ffb05 	stb	zero,-20(fp)
	fputc('\n', fp);
     6c0:	01000284 	movi	r4,10
     6c4:	e17ff817 	ldw	r5,-32(fp)
     6c8:	0011f540 	call	11f54 <fputc>

	itochar(image->maxgrey, parameters_str, 10);
     6cc:	e0bffe17 	ldw	r2,-8(fp)
     6d0:	11000217 	ldw	r4,8(r2)
     6d4:	e17ffb04 	addi	r5,fp,-20
     6d8:	01800284 	movi	r6,10
     6dc:	00004140 	call	414 <itochar>
	fputs(parameters_str, fp);
     6e0:	e13ffb04 	addi	r4,fp,-20
     6e4:	e17ff817 	ldw	r5,-32(fp)
     6e8:	00120840 	call	12084 <fputs>
	fputc('\n', fp);
     6ec:	01000284 	movi	r4,10
     6f0:	e17ff817 	ldw	r5,-32(fp)
     6f4:	0011f540 	call	11f54 <fputc>

	for (i = 0; i < (image->width * image->height); i++)
     6f8:	e03ffa15 	stw	zero,-24(fp)
     6fc:	00000b06 	br	72c <writePgm+0x154>
	{
		fputc(image->data[i], fp);
     700:	e0bffe17 	ldw	r2,-8(fp)
     704:	10c00317 	ldw	r3,12(r2)
     708:	e0bffa17 	ldw	r2,-24(fp)
     70c:	1885883a 	add	r2,r3,r2
     710:	10800003 	ldbu	r2,0(r2)
     714:	11003fcc 	andi	r4,r2,255
     718:	e17ff817 	ldw	r5,-32(fp)
     71c:	0011f540 	call	11f54 <fputc>

	itochar(image->maxgrey, parameters_str, 10);
	fputs(parameters_str, fp);
	fputc('\n', fp);

	for (i = 0; i < (image->width * image->height); i++)
     720:	e0bffa17 	ldw	r2,-24(fp)
     724:	10800044 	addi	r2,r2,1
     728:	e0bffa15 	stw	r2,-24(fp)
     72c:	e0bffe17 	ldw	r2,-8(fp)
     730:	10c00017 	ldw	r3,0(r2)
     734:	e0bffe17 	ldw	r2,-8(fp)
     738:	10800117 	ldw	r2,4(r2)
     73c:	1887383a 	mul	r3,r3,r2
     740:	e0bffa17 	ldw	r2,-24(fp)
     744:	10ffee16 	blt	r2,r3,700 <writePgm+0x128>
	{
		fputc(image->data[i], fp);
	}
	fclose(fp);
     748:	e13ff817 	ldw	r4,-32(fp)
     74c:	00117d40 	call	117d4 <fclose>
	return 0;
     750:	e03fff15 	stw	zero,-4(fp)
     754:	e0bfff17 	ldw	r2,-4(fp)
}
     758:	e037883a 	mov	sp,fp
     75c:	dfc00117 	ldw	ra,4(sp)
     760:	df000017 	ldw	fp,0(sp)
     764:	dec00204 	addi	sp,sp,8
     768:	f800283a 	ret

0000076c <cpyPgm>:

int cpyPgm(MyImage* src, MyImage* dst)
{
     76c:	defffa04 	addi	sp,sp,-24
     770:	dfc00515 	stw	ra,20(sp)
     774:	df000415 	stw	fp,16(sp)
     778:	df000404 	addi	fp,sp,16
     77c:	e13ffd15 	stw	r4,-12(fp)
     780:	e17ffe15 	stw	r5,-8(fp)
	int i = 0;
     784:	e03ffc15 	stw	zero,-16(fp)
	if (src->flag == 0)
     788:	e0bffd17 	ldw	r2,-12(fp)
     78c:	10800417 	ldw	r2,16(r2)
     790:	1004c03a 	cmpne	r2,r2,zero
     794:	1000061e 	bne	r2,zero,7b0 <cpyPgm+0x44>
	{
		printf("No data available in the specified source image\n");
     798:	010000b4 	movhi	r4,2
     79c:	2139cd04 	addi	r4,r4,-6348
     7a0:	0013fb80 	call	13fb8 <puts>
		return -1;
     7a4:	00bfffc4 	movi	r2,-1
     7a8:	e0bfff15 	stw	r2,-4(fp)
     7ac:	00003006 	br	870 <cpyPgm+0x104>
	}
	dst->width = src->width;
     7b0:	e0bffd17 	ldw	r2,-12(fp)
     7b4:	10c00017 	ldw	r3,0(r2)
     7b8:	e0bffe17 	ldw	r2,-8(fp)
     7bc:	10c00015 	stw	r3,0(r2)
	dst->height = src->height;
     7c0:	e0bffd17 	ldw	r2,-12(fp)
     7c4:	10c00117 	ldw	r3,4(r2)
     7c8:	e0bffe17 	ldw	r2,-8(fp)
     7cc:	10c00115 	stw	r3,4(r2)
	dst->maxgrey = src->maxgrey;
     7d0:	e0bffd17 	ldw	r2,-12(fp)
     7d4:	10c00217 	ldw	r3,8(r2)
     7d8:	e0bffe17 	ldw	r2,-8(fp)
     7dc:	10c00215 	stw	r3,8(r2)
	dst->data = (unsigned char*)malloc(sizeof(unsigned char)*(dst->height*dst->width));
     7e0:	e0bffe17 	ldw	r2,-8(fp)
     7e4:	10c00117 	ldw	r3,4(r2)
     7e8:	e0bffe17 	ldw	r2,-8(fp)
     7ec:	10800017 	ldw	r2,0(r2)
     7f0:	1885383a 	mul	r2,r3,r2
     7f4:	1009883a 	mov	r4,r2
     7f8:	00131780 	call	13178 <malloc>
     7fc:	1007883a 	mov	r3,r2
     800:	e0bffe17 	ldw	r2,-8(fp)
     804:	10c00315 	stw	r3,12(r2)
	dst->flag = 1;
     808:	e0fffe17 	ldw	r3,-8(fp)
     80c:	00800044 	movi	r2,1
     810:	18800415 	stw	r2,16(r3)
	for (i = 0; i < (dst->width * dst->height); i++)
     814:	e03ffc15 	stw	zero,-16(fp)
     818:	00000d06 	br	850 <cpyPgm+0xe4>
	{
		dst->data[i] = src->data[i];
     81c:	e0bffe17 	ldw	r2,-8(fp)
     820:	10c00317 	ldw	r3,12(r2)
     824:	e0bffc17 	ldw	r2,-16(fp)
     828:	1889883a 	add	r4,r3,r2
     82c:	e0bffd17 	ldw	r2,-12(fp)
     830:	10c00317 	ldw	r3,12(r2)
     834:	e0bffc17 	ldw	r2,-16(fp)
     838:	1885883a 	add	r2,r3,r2
     83c:	10800003 	ldbu	r2,0(r2)
     840:	20800005 	stb	r2,0(r4)
	dst->width = src->width;
	dst->height = src->height;
	dst->maxgrey = src->maxgrey;
	dst->data = (unsigned char*)malloc(sizeof(unsigned char)*(dst->height*dst->width));
	dst->flag = 1;
	for (i = 0; i < (dst->width * dst->height); i++)
     844:	e0bffc17 	ldw	r2,-16(fp)
     848:	10800044 	addi	r2,r2,1
     84c:	e0bffc15 	stw	r2,-16(fp)
     850:	e0bffe17 	ldw	r2,-8(fp)
     854:	10c00017 	ldw	r3,0(r2)
     858:	e0bffe17 	ldw	r2,-8(fp)
     85c:	10800117 	ldw	r2,4(r2)
     860:	1887383a 	mul	r3,r3,r2
     864:	e0bffc17 	ldw	r2,-16(fp)
     868:	10ffec16 	blt	r2,r3,81c <cpyPgm+0xb0>
	{
		dst->data[i] = src->data[i];
	}
}
     86c:	00000106 	br	874 <cpyPgm+0x108>
     870:	e0bfff17 	ldw	r2,-4(fp)
     874:	e037883a 	mov	sp,fp
     878:	dfc00117 	ldw	ra,4(sp)
     87c:	df000017 	ldw	fp,0(sp)
     880:	dec00204 	addi	sp,sp,8
     884:	f800283a 	ret

00000888 <createImage>:


void createImage(int width, int height, MyImage *image)
{
     888:	defffb04 	addi	sp,sp,-20
     88c:	dfc00415 	stw	ra,16(sp)
     890:	df000315 	stw	fp,12(sp)
     894:	df000304 	addi	fp,sp,12
     898:	e13ffd15 	stw	r4,-12(fp)
     89c:	e17ffe15 	stw	r5,-8(fp)
     8a0:	e1bfff15 	stw	r6,-4(fp)
	image->width = width;
     8a4:	e0ffff17 	ldw	r3,-4(fp)
     8a8:	e0bffd17 	ldw	r2,-12(fp)
     8ac:	18800015 	stw	r2,0(r3)
	image->height = height;
     8b0:	e0ffff17 	ldw	r3,-4(fp)
     8b4:	e0bffe17 	ldw	r2,-8(fp)
     8b8:	18800115 	stw	r2,4(r3)
	image->flag = 1;
     8bc:	e0ffff17 	ldw	r3,-4(fp)
     8c0:	00800044 	movi	r2,1
     8c4:	18800415 	stw	r2,16(r3)
	image->data = (unsigned char *)malloc(sizeof(unsigned char)*(height*width));
     8c8:	e0fffe17 	ldw	r3,-8(fp)
     8cc:	e0bffd17 	ldw	r2,-12(fp)
     8d0:	1885383a 	mul	r2,r3,r2
     8d4:	1009883a 	mov	r4,r2
     8d8:	00131780 	call	13178 <malloc>
     8dc:	1007883a 	mov	r3,r2
     8e0:	e0bfff17 	ldw	r2,-4(fp)
     8e4:	10c00315 	stw	r3,12(r2)
}
     8e8:	e037883a 	mov	sp,fp
     8ec:	dfc00117 	ldw	ra,4(sp)
     8f0:	df000017 	ldw	fp,0(sp)
     8f4:	dec00204 	addi	sp,sp,8
     8f8:	f800283a 	ret

000008fc <createSumImage>:

void createSumImage(int width, int height, MyIntImage *image)
{
     8fc:	defffb04 	addi	sp,sp,-20
     900:	dfc00415 	stw	ra,16(sp)
     904:	df000315 	stw	fp,12(sp)
     908:	df000304 	addi	fp,sp,12
     90c:	e13ffd15 	stw	r4,-12(fp)
     910:	e17ffe15 	stw	r5,-8(fp)
     914:	e1bfff15 	stw	r6,-4(fp)
	image->width = width;
     918:	e0ffff17 	ldw	r3,-4(fp)
     91c:	e0bffd17 	ldw	r2,-12(fp)
     920:	18800015 	stw	r2,0(r3)
	image->height = height;
     924:	e0ffff17 	ldw	r3,-4(fp)
     928:	e0bffe17 	ldw	r2,-8(fp)
     92c:	18800115 	stw	r2,4(r3)
	image->flag = 1;
     930:	e0ffff17 	ldw	r3,-4(fp)
     934:	00800044 	movi	r2,1
     938:	18800315 	stw	r2,12(r3)
	image->data = (int *)malloc(sizeof(int)*(height*width));
     93c:	e0fffe17 	ldw	r3,-8(fp)
     940:	e0bffd17 	ldw	r2,-12(fp)
     944:	1885383a 	mul	r2,r3,r2
     948:	1085883a 	add	r2,r2,r2
     94c:	1085883a 	add	r2,r2,r2
     950:	1009883a 	mov	r4,r2
     954:	00131780 	call	13178 <malloc>
     958:	1007883a 	mov	r3,r2
     95c:	e0bfff17 	ldw	r2,-4(fp)
     960:	10c00215 	stw	r3,8(r2)
}
     964:	e037883a 	mov	sp,fp
     968:	dfc00117 	ldw	ra,4(sp)
     96c:	df000017 	ldw	fp,0(sp)
     970:	dec00204 	addi	sp,sp,8
     974:	f800283a 	ret

00000978 <freeImage>:

int freeImage(MyImage* image)
{
     978:	defffc04 	addi	sp,sp,-16
     97c:	dfc00315 	stw	ra,12(sp)
     980:	df000215 	stw	fp,8(sp)
     984:	df000204 	addi	fp,sp,8
     988:	e13ffe15 	stw	r4,-8(fp)
	if (image->flag == 0)
     98c:	e0bffe17 	ldw	r2,-8(fp)
     990:	10800417 	ldw	r2,16(r2)
     994:	1004c03a 	cmpne	r2,r2,zero
     998:	1000061e 	bne	r2,zero,9b4 <freeImage+0x3c>
	{
		printf("no image to delete\n");
     99c:	010000b4 	movhi	r4,2
     9a0:	2139d904 	addi	r4,r4,-6300
     9a4:	0013fb80 	call	13fb8 <puts>
		return -1;
     9a8:	00bfffc4 	movi	r2,-1
     9ac:	e0bfff15 	stw	r2,-4(fp)
     9b0:	00000406 	br	9c4 <freeImage+0x4c>
	}
	else
	{
//		printf("image deleted\n");
		free(image->data); 
     9b4:	e0bffe17 	ldw	r2,-8(fp)
     9b8:	11000317 	ldw	r4,12(r2)
     9bc:	00131640 	call	13164 <free>
		return 0;
     9c0:	e03fff15 	stw	zero,-4(fp)
     9c4:	e0bfff17 	ldw	r2,-4(fp)
	}
}
     9c8:	e037883a 	mov	sp,fp
     9cc:	dfc00117 	ldw	ra,4(sp)
     9d0:	df000017 	ldw	fp,0(sp)
     9d4:	dec00204 	addi	sp,sp,8
     9d8:	f800283a 	ret

000009dc <freeSumImage>:

int freeSumImage(MyIntImage* image)
{
     9dc:	defffc04 	addi	sp,sp,-16
     9e0:	dfc00315 	stw	ra,12(sp)
     9e4:	df000215 	stw	fp,8(sp)
     9e8:	df000204 	addi	fp,sp,8
     9ec:	e13ffe15 	stw	r4,-8(fp)
	if (image->flag == 0)
     9f0:	e0bffe17 	ldw	r2,-8(fp)
     9f4:	10800317 	ldw	r2,12(r2)
     9f8:	1004c03a 	cmpne	r2,r2,zero
     9fc:	1000061e 	bne	r2,zero,a18 <freeSumImage+0x3c>
	{
		printf("no image to delete\n");
     a00:	010000b4 	movhi	r4,2
     a04:	2139d904 	addi	r4,r4,-6300
     a08:	0013fb80 	call	13fb8 <puts>
		return -1;
     a0c:	00bfffc4 	movi	r2,-1
     a10:	e0bfff15 	stw	r2,-4(fp)
     a14:	00000406 	br	a28 <freeSumImage+0x4c>
	}
	else
	{
//		printf("image deleted\n");
		free(image->data); 
     a18:	e0bffe17 	ldw	r2,-8(fp)
     a1c:	11000217 	ldw	r4,8(r2)
     a20:	00131640 	call	13164 <free>
		return 0;
     a24:	e03fff15 	stw	zero,-4(fp)
     a28:	e0bfff17 	ldw	r2,-4(fp)
	}
}
     a2c:	e037883a 	mov	sp,fp
     a30:	dfc00117 	ldw	ra,4(sp)
     a34:	df000017 	ldw	fp,0(sp)
     a38:	dec00204 	addi	sp,sp,8
     a3c:	f800283a 	ret

00000a40 <setImage>:

void setImage(int width, int height, MyImage *image)
{
     a40:	defffc04 	addi	sp,sp,-16
     a44:	df000315 	stw	fp,12(sp)
     a48:	df000304 	addi	fp,sp,12
     a4c:	e13ffd15 	stw	r4,-12(fp)
     a50:	e17ffe15 	stw	r5,-8(fp)
     a54:	e1bfff15 	stw	r6,-4(fp)
	image->width = width;
     a58:	e0ffff17 	ldw	r3,-4(fp)
     a5c:	e0bffd17 	ldw	r2,-12(fp)
     a60:	18800015 	stw	r2,0(r3)
	image->height = height;
     a64:	e0ffff17 	ldw	r3,-4(fp)
     a68:	e0bffe17 	ldw	r2,-8(fp)
     a6c:	18800115 	stw	r2,4(r3)
}
     a70:	e037883a 	mov	sp,fp
     a74:	df000017 	ldw	fp,0(sp)
     a78:	dec00104 	addi	sp,sp,4
     a7c:	f800283a 	ret

00000a80 <setSumImage>:

void setSumImage(int width, int height, MyIntImage *image)
{
     a80:	defffc04 	addi	sp,sp,-16
     a84:	df000315 	stw	fp,12(sp)
     a88:	df000304 	addi	fp,sp,12
     a8c:	e13ffd15 	stw	r4,-12(fp)
     a90:	e17ffe15 	stw	r5,-8(fp)
     a94:	e1bfff15 	stw	r6,-4(fp)
	image->width = width;
     a98:	e0ffff17 	ldw	r3,-4(fp)
     a9c:	e0bffd17 	ldw	r2,-12(fp)
     aa0:	18800015 	stw	r2,0(r3)
	image->height = height;
     aa4:	e0ffff17 	ldw	r3,-4(fp)
     aa8:	e0bffe17 	ldw	r2,-8(fp)
     aac:	18800115 	stw	r2,4(r3)
}
     ab0:	e037883a 	mov	sp,fp
     ab4:	df000017 	ldw	fp,0(sp)
     ab8:	dec00104 	addi	sp,sp,4
     abc:	f800283a 	ret

00000ac0 <_Z8int_sqrtj>:
/*****************************************************
 * The int_sqrt is only used in runCascadeClassifier
 * If you want to replace int_sqrt with HW sqrtf in GPU,
 * simple look into the runCascadeClassifier function.
 *****************************************************/
unsigned int int_sqrt (unsigned int value)
     ac0:	defffa04 	addi	sp,sp,-24
     ac4:	df000515 	stw	fp,20(sp)
     ac8:	df000504 	addi	fp,sp,20
     acc:	e13fff15 	stw	r4,-4(fp)
{
  int i;
  unsigned int a = 0, b = 0, c = 0;
     ad0:	e03ffd15 	stw	zero,-12(fp)
     ad4:	e03ffc15 	stw	zero,-16(fp)
     ad8:	e03ffb15 	stw	zero,-20(fp)
  for (i=0; i < (32 >> 1); i++)
     adc:	e03ffe15 	stw	zero,-8(fp)
     ae0:	00002106 	br	b68 <_Z8int_sqrtj+0xa8>
    {
      c<<= 2;
     ae4:	e0bffb17 	ldw	r2,-20(fp)
     ae8:	1085883a 	add	r2,r2,r2
     aec:	1085883a 	add	r2,r2,r2
     af0:	e0bffb15 	stw	r2,-20(fp)
#define UPPERBITS(value) (value>>30)
      c += UPPERBITS(value);
     af4:	e0bfff17 	ldw	r2,-4(fp)
     af8:	1006d7ba 	srli	r3,r2,30
     afc:	e0bffb17 	ldw	r2,-20(fp)
     b00:	10c5883a 	add	r2,r2,r3
     b04:	e0bffb15 	stw	r2,-20(fp)
#undef UPPERBITS
      value <<= 2;
     b08:	e0bfff17 	ldw	r2,-4(fp)
     b0c:	1085883a 	add	r2,r2,r2
     b10:	1085883a 	add	r2,r2,r2
     b14:	e0bfff15 	stw	r2,-4(fp)
      a <<= 1;
     b18:	e0bffd17 	ldw	r2,-12(fp)
     b1c:	1085883a 	add	r2,r2,r2
     b20:	e0bffd15 	stw	r2,-12(fp)
      b = (a<<1) | 1;
     b24:	e0bffd17 	ldw	r2,-12(fp)
     b28:	1085883a 	add	r2,r2,r2
     b2c:	10800054 	ori	r2,r2,1
     b30:	e0bffc15 	stw	r2,-16(fp)
      if (c >= b)
     b34:	e0fffb17 	ldw	r3,-20(fp)
     b38:	e0bffc17 	ldw	r2,-16(fp)
     b3c:	18800736 	bltu	r3,r2,b5c <_Z8int_sqrtj+0x9c>
	{
	  c -= b;
     b40:	e0fffb17 	ldw	r3,-20(fp)
     b44:	e0bffc17 	ldw	r2,-16(fp)
     b48:	1885c83a 	sub	r2,r3,r2
     b4c:	e0bffb15 	stw	r2,-20(fp)
	  a++;
     b50:	e0bffd17 	ldw	r2,-12(fp)
     b54:	10800044 	addi	r2,r2,1
     b58:	e0bffd15 	stw	r2,-12(fp)
 *****************************************************/
unsigned int int_sqrt (unsigned int value)
{
  int i;
  unsigned int a = 0, b = 0, c = 0;
  for (i=0; i < (32 >> 1); i++)
     b5c:	e0bffe17 	ldw	r2,-8(fp)
     b60:	10800044 	addi	r2,r2,1
     b64:	e0bffe15 	stw	r2,-8(fp)
     b68:	e0bffe17 	ldw	r2,-8(fp)
     b6c:	10800410 	cmplti	r2,r2,16
     b70:	103fdc1e 	bne	r2,zero,ae4 <_Z8int_sqrtj+0x24>
	{
	  c -= b;
	  a++;
	}
    }
  return a;
     b74:	e0bffd17 	ldw	r2,-12(fp)
}
     b78:	e037883a 	mov	sp,fp
     b7c:	df000017 	ldw	fp,0(sp)
     b80:	dec00104 	addi	sp,sp,4
     b84:	f800283a 	ret

00000b88 <setImageForCascadeClassifier>:


void setImageForCascadeClassifier( myCascade* _cascade, MyIntImage* _sum, MyIntImage* _sqsum)
     b88:	deffeb04 	addi	sp,sp,-84
     b8c:	df001415 	stw	fp,80(sp)
     b90:	df001404 	addi	fp,sp,80
     b94:	e13ffd15 	stw	r4,-12(fp)
     b98:	e17ffe15 	stw	r5,-8(fp)
     b9c:	e1bfff15 	stw	r6,-4(fp)
{
  MyIntImage *sum = _sum;
     ba0:	e0bffe17 	ldw	r2,-8(fp)
     ba4:	e0bff415 	stw	r2,-48(fp)
  MyIntImage *sqsum = _sqsum;
     ba8:	e0bfff17 	ldw	r2,-4(fp)
     bac:	e0bff315 	stw	r2,-52(fp)
  myCascade* cascade = _cascade;
     bb0:	e0bffd17 	ldw	r2,-12(fp)
     bb4:	e0bff215 	stw	r2,-56(fp)
  int i, j, k;
  MyRect equRect;
  int r_index = 0;
     bb8:	e03fee15 	stw	zero,-72(fp)
  int w_index = 0;
     bbc:	e03fed15 	stw	zero,-76(fp)
  MyRect tr;

  cascade->sum = *sum;
     bc0:	e13ff217 	ldw	r4,-56(fp)
     bc4:	e0fff417 	ldw	r3,-48(fp)
     bc8:	18800017 	ldw	r2,0(r3)
     bcc:	20800615 	stw	r2,24(r4)
     bd0:	18800117 	ldw	r2,4(r3)
     bd4:	20800715 	stw	r2,28(r4)
     bd8:	18800217 	ldw	r2,8(r3)
     bdc:	20800815 	stw	r2,32(r4)
     be0:	18800317 	ldw	r2,12(r3)
     be4:	20800915 	stw	r2,36(r4)
  cascade->sqsum = *sqsum;
     be8:	e13ff217 	ldw	r4,-56(fp)
     bec:	e0fff317 	ldw	r3,-52(fp)
     bf0:	18800017 	ldw	r2,0(r3)
     bf4:	20800a15 	stw	r2,40(r4)
     bf8:	18800117 	ldw	r2,4(r3)
     bfc:	20800b15 	stw	r2,44(r4)
     c00:	18800217 	ldw	r2,8(r3)
     c04:	20800c15 	stw	r2,48(r4)
     c08:	18800317 	ldw	r2,12(r3)
     c0c:	20800d15 	stw	r2,52(r4)

  equRect.x = equRect.y = 0;
     c10:	e03ff615 	stw	zero,-40(fp)
     c14:	e0bff617 	ldw	r2,-40(fp)
     c18:	e0bff515 	stw	r2,-44(fp)
  equRect.width = cascade->orig_window_size.width;
     c1c:	e0bff217 	ldw	r2,-56(fp)
     c20:	10800317 	ldw	r2,12(r2)
     c24:	e0bff715 	stw	r2,-36(fp)
  equRect.height = cascade->orig_window_size.height;
     c28:	e0bff217 	ldw	r2,-56(fp)
     c2c:	10800417 	ldw	r2,16(r2)
     c30:	e0bff815 	stw	r2,-32(fp)

  cascade->inv_window_area = equRect.width*equRect.height;
     c34:	e0fff717 	ldw	r3,-36(fp)
     c38:	e0bff817 	ldw	r2,-32(fp)
     c3c:	1887383a 	mul	r3,r3,r2
     c40:	e0bff217 	ldw	r2,-56(fp)
     c44:	10c00515 	stw	r3,20(r2)

  cascade->p0 = (sum->data) ;
     c48:	e0bff417 	ldw	r2,-48(fp)
     c4c:	10c00217 	ldw	r3,8(r2)
     c50:	e0bff217 	ldw	r2,-56(fp)
     c54:	10c01215 	stw	r3,72(r2)
  cascade->p1 = (sum->data +  equRect.width - 1) ;
     c58:	e0bff417 	ldw	r2,-48(fp)
     c5c:	10c00217 	ldw	r3,8(r2)
     c60:	e0bff717 	ldw	r2,-36(fp)
     c64:	1085883a 	add	r2,r2,r2
     c68:	1085883a 	add	r2,r2,r2
     c6c:	1885883a 	add	r2,r3,r2
     c70:	10ffff04 	addi	r3,r2,-4
     c74:	e0bff217 	ldw	r2,-56(fp)
     c78:	10c01315 	stw	r3,76(r2)
  cascade->p2 = (sum->data + sum->width*(equRect.height - 1));
     c7c:	e0bff417 	ldw	r2,-48(fp)
     c80:	11000217 	ldw	r4,8(r2)
     c84:	e0bff417 	ldw	r2,-48(fp)
     c88:	10c00017 	ldw	r3,0(r2)
     c8c:	e0bff817 	ldw	r2,-32(fp)
     c90:	1085883a 	add	r2,r2,r2
     c94:	1085883a 	add	r2,r2,r2
     c98:	10bfff04 	addi	r2,r2,-4
     c9c:	1885383a 	mul	r2,r3,r2
     ca0:	2087883a 	add	r3,r4,r2
     ca4:	e0bff217 	ldw	r2,-56(fp)
     ca8:	10c01415 	stw	r3,80(r2)
  cascade->p3 = (sum->data + sum->width*(equRect.height - 1) + equRect.width - 1);
     cac:	e0bff417 	ldw	r2,-48(fp)
     cb0:	11400217 	ldw	r5,8(r2)
     cb4:	e0bff717 	ldw	r2,-36(fp)
     cb8:	1085883a 	add	r2,r2,r2
     cbc:	1085883a 	add	r2,r2,r2
     cc0:	1007883a 	mov	r3,r2
     cc4:	e0bff417 	ldw	r2,-48(fp)
     cc8:	11000017 	ldw	r4,0(r2)
     ccc:	e0bff817 	ldw	r2,-32(fp)
     cd0:	1085883a 	add	r2,r2,r2
     cd4:	1085883a 	add	r2,r2,r2
     cd8:	10bfff04 	addi	r2,r2,-4
     cdc:	2085383a 	mul	r2,r4,r2
     ce0:	1885883a 	add	r2,r3,r2
     ce4:	2885883a 	add	r2,r5,r2
     ce8:	10ffff04 	addi	r3,r2,-4
     cec:	e0bff217 	ldw	r2,-56(fp)
     cf0:	10c01515 	stw	r3,84(r2)
  cascade->pq0 = (sqsum->data);
     cf4:	e0bff317 	ldw	r2,-52(fp)
     cf8:	10c00217 	ldw	r3,8(r2)
     cfc:	e0bff217 	ldw	r2,-56(fp)
     d00:	10c00e15 	stw	r3,56(r2)
  cascade->pq1 = (sqsum->data +  equRect.width - 1) ;
     d04:	e0bff317 	ldw	r2,-52(fp)
     d08:	10c00217 	ldw	r3,8(r2)
     d0c:	e0bff717 	ldw	r2,-36(fp)
     d10:	1085883a 	add	r2,r2,r2
     d14:	1085883a 	add	r2,r2,r2
     d18:	1885883a 	add	r2,r3,r2
     d1c:	10ffff04 	addi	r3,r2,-4
     d20:	e0bff217 	ldw	r2,-56(fp)
     d24:	10c00f15 	stw	r3,60(r2)
  cascade->pq2 = (sqsum->data + sqsum->width*(equRect.height - 1));
     d28:	e0bff317 	ldw	r2,-52(fp)
     d2c:	11000217 	ldw	r4,8(r2)
     d30:	e0bff317 	ldw	r2,-52(fp)
     d34:	10c00017 	ldw	r3,0(r2)
     d38:	e0bff817 	ldw	r2,-32(fp)
     d3c:	1085883a 	add	r2,r2,r2
     d40:	1085883a 	add	r2,r2,r2
     d44:	10bfff04 	addi	r2,r2,-4
     d48:	1885383a 	mul	r2,r3,r2
     d4c:	2087883a 	add	r3,r4,r2
     d50:	e0bff217 	ldw	r2,-56(fp)
     d54:	10c01015 	stw	r3,64(r2)
  cascade->pq3 = (sqsum->data + sqsum->width*(equRect.height - 1) + equRect.width - 1);
     d58:	e0bff317 	ldw	r2,-52(fp)
     d5c:	11400217 	ldw	r5,8(r2)
     d60:	e0bff717 	ldw	r2,-36(fp)
     d64:	1085883a 	add	r2,r2,r2
     d68:	1085883a 	add	r2,r2,r2
     d6c:	1007883a 	mov	r3,r2
     d70:	e0bff317 	ldw	r2,-52(fp)
     d74:	11000017 	ldw	r4,0(r2)
     d78:	e0bff817 	ldw	r2,-32(fp)
     d7c:	1085883a 	add	r2,r2,r2
     d80:	1085883a 	add	r2,r2,r2
     d84:	10bfff04 	addi	r2,r2,-4
     d88:	2085383a 	mul	r2,r4,r2
     d8c:	1885883a 	add	r2,r3,r2
     d90:	2885883a 	add	r2,r5,r2
     d94:	10ffff04 	addi	r3,r2,-4
     d98:	e0bff217 	ldw	r2,-56(fp)
     d9c:	10c01115 	stw	r3,68(r2)
   * Load the index of the four corners 
   * of the filter rectangle
   **************************************/

  /* loop over the number of stages */
  for( i = 0; i < cascade->n_stages; i++ )
     da0:	e03ff115 	stw	zero,-60(fp)
     da4:	00017206 	br	1370 <setImageForCascadeClassifier+0x7e8>
    {
      /* loop over the number of haar features */
      for( j = 0; j < stages_array[i]; j++ )
     da8:	e03ff015 	stw	zero,-64(fp)
     dac:	00016406 	br	1340 <setImageForCascadeClassifier+0x7b8>
	{
	  int nr = 3;
     db0:	008000c4 	movi	r2,3
     db4:	e0bfec15 	stw	r2,-80(fp)
	  /* loop over the number of rectangles */
	  for( k = 0; k < nr; k++ )
     db8:	e03fef15 	stw	zero,-68(fp)
     dbc:	00015406 	br	1310 <setImageForCascadeClassifier+0x788>
	    {
	      tr.x = rectangles_array[r_index + k*4];
     dc0:	e0bfef17 	ldw	r2,-68(fp)
     dc4:	1085883a 	add	r2,r2,r2
     dc8:	1085883a 	add	r2,r2,r2
     dcc:	1007883a 	mov	r3,r2
     dd0:	e0bfee17 	ldw	r2,-72(fp)
     dd4:	1885883a 	add	r2,r3,r2
     dd8:	1085883a 	add	r2,r2,r2
     ddc:	1085883a 	add	r2,r2,r2
     de0:	1007883a 	mov	r3,r2
     de4:	d0a70417 	ldw	r2,-25584(gp)
     de8:	1885883a 	add	r2,r3,r2
     dec:	10800017 	ldw	r2,0(r2)
     df0:	e0bff915 	stw	r2,-28(fp)
	      tr.width = rectangles_array[r_index + 2 + k*4];
     df4:	e0bfef17 	ldw	r2,-68(fp)
     df8:	1085883a 	add	r2,r2,r2
     dfc:	1085883a 	add	r2,r2,r2
     e00:	1007883a 	mov	r3,r2
     e04:	e0bfee17 	ldw	r2,-72(fp)
     e08:	1885883a 	add	r2,r3,r2
     e0c:	1085883a 	add	r2,r2,r2
     e10:	1085883a 	add	r2,r2,r2
     e14:	1007883a 	mov	r3,r2
     e18:	d0a70417 	ldw	r2,-25584(gp)
     e1c:	1885883a 	add	r2,r3,r2
     e20:	10800204 	addi	r2,r2,8
     e24:	10800017 	ldw	r2,0(r2)
     e28:	e0bffb15 	stw	r2,-20(fp)
	      tr.y = rectangles_array[r_index + 1 + k*4];
     e2c:	e0bfef17 	ldw	r2,-68(fp)
     e30:	1085883a 	add	r2,r2,r2
     e34:	1085883a 	add	r2,r2,r2
     e38:	1007883a 	mov	r3,r2
     e3c:	e0bfee17 	ldw	r2,-72(fp)
     e40:	1885883a 	add	r2,r3,r2
     e44:	1085883a 	add	r2,r2,r2
     e48:	1085883a 	add	r2,r2,r2
     e4c:	1007883a 	mov	r3,r2
     e50:	d0a70417 	ldw	r2,-25584(gp)
     e54:	1885883a 	add	r2,r3,r2
     e58:	10800104 	addi	r2,r2,4
     e5c:	10800017 	ldw	r2,0(r2)
     e60:	e0bffa15 	stw	r2,-24(fp)
	      tr.height = rectangles_array[r_index + 3 + k*4];
     e64:	e0bfef17 	ldw	r2,-68(fp)
     e68:	1085883a 	add	r2,r2,r2
     e6c:	1085883a 	add	r2,r2,r2
     e70:	1007883a 	mov	r3,r2
     e74:	e0bfee17 	ldw	r2,-72(fp)
     e78:	1885883a 	add	r2,r3,r2
     e7c:	1085883a 	add	r2,r2,r2
     e80:	1085883a 	add	r2,r2,r2
     e84:	1007883a 	mov	r3,r2
     e88:	d0a70417 	ldw	r2,-25584(gp)
     e8c:	1885883a 	add	r2,r3,r2
     e90:	10800304 	addi	r2,r2,12
     e94:	10800017 	ldw	r2,0(r2)
     e98:	e0bffc15 	stw	r2,-16(fp)
	      if (k < 2)
     e9c:	e0bfef17 	ldw	r2,-68(fp)
     ea0:	10800088 	cmpgei	r2,r2,2
     ea4:	10006c1e 	bne	r2,zero,1058 <setImageForCascadeClassifier+0x4d0>
		{
		  scaled_rectangles_array[r_index + k*4] = (sum->data + sum->width*(tr.y ) + (tr.x )) ;
     ea8:	e0bfef17 	ldw	r2,-68(fp)
     eac:	1085883a 	add	r2,r2,r2
     eb0:	1085883a 	add	r2,r2,r2
     eb4:	1007883a 	mov	r3,r2
     eb8:	e0bfee17 	ldw	r2,-72(fp)
     ebc:	1885883a 	add	r2,r3,r2
     ec0:	1085883a 	add	r2,r2,r2
     ec4:	1085883a 	add	r2,r2,r2
     ec8:	1007883a 	mov	r3,r2
     ecc:	d0a70517 	ldw	r2,-25580(gp)
     ed0:	188b883a 	add	r5,r3,r2
     ed4:	e0bff417 	ldw	r2,-48(fp)
     ed8:	11800217 	ldw	r6,8(r2)
     edc:	e0bff917 	ldw	r2,-28(fp)
     ee0:	1009883a 	mov	r4,r2
     ee4:	e0bff417 	ldw	r2,-48(fp)
     ee8:	10c00017 	ldw	r3,0(r2)
     eec:	e0bffa17 	ldw	r2,-24(fp)
     ef0:	1885383a 	mul	r2,r3,r2
     ef4:	2085883a 	add	r2,r4,r2
     ef8:	1085883a 	add	r2,r2,r2
     efc:	1085883a 	add	r2,r2,r2
     f00:	3085883a 	add	r2,r6,r2
     f04:	28800015 	stw	r2,0(r5)
		  scaled_rectangles_array[r_index + k*4 + 1] = (sum->data + sum->width*(tr.y ) + (tr.x  + tr.width)) ;
     f08:	e0bfef17 	ldw	r2,-68(fp)
     f0c:	1085883a 	add	r2,r2,r2
     f10:	1085883a 	add	r2,r2,r2
     f14:	1007883a 	mov	r3,r2
     f18:	e0bfee17 	ldw	r2,-72(fp)
     f1c:	1885883a 	add	r2,r3,r2
     f20:	1085883a 	add	r2,r2,r2
     f24:	1085883a 	add	r2,r2,r2
     f28:	1007883a 	mov	r3,r2
     f2c:	d0a70517 	ldw	r2,-25580(gp)
     f30:	1885883a 	add	r2,r3,r2
     f34:	11400104 	addi	r5,r2,4
     f38:	e0bff417 	ldw	r2,-48(fp)
     f3c:	11800217 	ldw	r6,8(r2)
     f40:	e0fff917 	ldw	r3,-28(fp)
     f44:	e0bffb17 	ldw	r2,-20(fp)
     f48:	1885883a 	add	r2,r3,r2
     f4c:	1009883a 	mov	r4,r2
     f50:	e0bff417 	ldw	r2,-48(fp)
     f54:	10c00017 	ldw	r3,0(r2)
     f58:	e0bffa17 	ldw	r2,-24(fp)
     f5c:	1885383a 	mul	r2,r3,r2
     f60:	2085883a 	add	r2,r4,r2
     f64:	1085883a 	add	r2,r2,r2
     f68:	1085883a 	add	r2,r2,r2
     f6c:	3085883a 	add	r2,r6,r2
     f70:	28800015 	stw	r2,0(r5)
		  scaled_rectangles_array[r_index + k*4 + 2] = (sum->data + sum->width*(tr.y  + tr.height) + (tr.x ));
     f74:	e0bfef17 	ldw	r2,-68(fp)
     f78:	1085883a 	add	r2,r2,r2
     f7c:	1085883a 	add	r2,r2,r2
     f80:	1007883a 	mov	r3,r2
     f84:	e0bfee17 	ldw	r2,-72(fp)
     f88:	1885883a 	add	r2,r3,r2
     f8c:	1085883a 	add	r2,r2,r2
     f90:	1085883a 	add	r2,r2,r2
     f94:	1007883a 	mov	r3,r2
     f98:	d0a70517 	ldw	r2,-25580(gp)
     f9c:	1885883a 	add	r2,r3,r2
     fa0:	11800204 	addi	r6,r2,8
     fa4:	e0bff417 	ldw	r2,-48(fp)
     fa8:	11c00217 	ldw	r7,8(r2)
     fac:	e0bff917 	ldw	r2,-28(fp)
     fb0:	100b883a 	mov	r5,r2
     fb4:	e0bff417 	ldw	r2,-48(fp)
     fb8:	11000017 	ldw	r4,0(r2)
     fbc:	e0fffa17 	ldw	r3,-24(fp)
     fc0:	e0bffc17 	ldw	r2,-16(fp)
     fc4:	1885883a 	add	r2,r3,r2
     fc8:	2085383a 	mul	r2,r4,r2
     fcc:	2885883a 	add	r2,r5,r2
     fd0:	1085883a 	add	r2,r2,r2
     fd4:	1085883a 	add	r2,r2,r2
     fd8:	3885883a 	add	r2,r7,r2
     fdc:	30800015 	stw	r2,0(r6)
		  scaled_rectangles_array[r_index + k*4 + 3] = (sum->data + sum->width*(tr.y  + tr.height) + (tr.x  + tr.width));
     fe0:	e0bfef17 	ldw	r2,-68(fp)
     fe4:	1085883a 	add	r2,r2,r2
     fe8:	1085883a 	add	r2,r2,r2
     fec:	1007883a 	mov	r3,r2
     ff0:	e0bfee17 	ldw	r2,-72(fp)
     ff4:	1885883a 	add	r2,r3,r2
     ff8:	1085883a 	add	r2,r2,r2
     ffc:	1085883a 	add	r2,r2,r2
    1000:	1007883a 	mov	r3,r2
    1004:	d0a70517 	ldw	r2,-25580(gp)
    1008:	1885883a 	add	r2,r3,r2
    100c:	11800304 	addi	r6,r2,12
    1010:	e0bff417 	ldw	r2,-48(fp)
    1014:	11c00217 	ldw	r7,8(r2)
    1018:	e0fff917 	ldw	r3,-28(fp)
    101c:	e0bffb17 	ldw	r2,-20(fp)
    1020:	1885883a 	add	r2,r3,r2
    1024:	100b883a 	mov	r5,r2
    1028:	e0bff417 	ldw	r2,-48(fp)
    102c:	11000017 	ldw	r4,0(r2)
    1030:	e0fffa17 	ldw	r3,-24(fp)
    1034:	e0bffc17 	ldw	r2,-16(fp)
    1038:	1885883a 	add	r2,r3,r2
    103c:	2085383a 	mul	r2,r4,r2
    1040:	2885883a 	add	r2,r5,r2
    1044:	1085883a 	add	r2,r2,r2
    1048:	1085883a 	add	r2,r2,r2
    104c:	3885883a 	add	r2,r7,r2
    1050:	30800015 	stw	r2,0(r6)
    1054:	0000ab06 	br	1304 <setImageForCascadeClassifier+0x77c>
		}
	      else
		{
		  if ((tr.x == 0)&& (tr.y == 0) &&(tr.width == 0) &&(tr.height == 0))
    1058:	e0bff917 	ldw	r2,-28(fp)
    105c:	1004c03a 	cmpne	r2,r2,zero
    1060:	10003d1e 	bne	r2,zero,1158 <setImageForCascadeClassifier+0x5d0>
    1064:	e0bffa17 	ldw	r2,-24(fp)
    1068:	1004c03a 	cmpne	r2,r2,zero
    106c:	10003a1e 	bne	r2,zero,1158 <setImageForCascadeClassifier+0x5d0>
    1070:	e0bffb17 	ldw	r2,-20(fp)
    1074:	1004c03a 	cmpne	r2,r2,zero
    1078:	1000371e 	bne	r2,zero,1158 <setImageForCascadeClassifier+0x5d0>
    107c:	e0bffc17 	ldw	r2,-16(fp)
    1080:	1004c03a 	cmpne	r2,r2,zero
    1084:	1000341e 	bne	r2,zero,1158 <setImageForCascadeClassifier+0x5d0>
		    {
		      scaled_rectangles_array[r_index + k*4] = NULL ;
    1088:	e0bfef17 	ldw	r2,-68(fp)
    108c:	1085883a 	add	r2,r2,r2
    1090:	1085883a 	add	r2,r2,r2
    1094:	1007883a 	mov	r3,r2
    1098:	e0bfee17 	ldw	r2,-72(fp)
    109c:	1885883a 	add	r2,r3,r2
    10a0:	1085883a 	add	r2,r2,r2
    10a4:	1085883a 	add	r2,r2,r2
    10a8:	1007883a 	mov	r3,r2
    10ac:	d0a70517 	ldw	r2,-25580(gp)
    10b0:	1885883a 	add	r2,r3,r2
    10b4:	10000015 	stw	zero,0(r2)
		      scaled_rectangles_array[r_index + k*4 + 1] = NULL ;
    10b8:	e0bfef17 	ldw	r2,-68(fp)
    10bc:	1085883a 	add	r2,r2,r2
    10c0:	1085883a 	add	r2,r2,r2
    10c4:	1007883a 	mov	r3,r2
    10c8:	e0bfee17 	ldw	r2,-72(fp)
    10cc:	1885883a 	add	r2,r3,r2
    10d0:	1085883a 	add	r2,r2,r2
    10d4:	1085883a 	add	r2,r2,r2
    10d8:	1007883a 	mov	r3,r2
    10dc:	d0a70517 	ldw	r2,-25580(gp)
    10e0:	1885883a 	add	r2,r3,r2
    10e4:	10800104 	addi	r2,r2,4
    10e8:	10000015 	stw	zero,0(r2)
		      scaled_rectangles_array[r_index + k*4 + 2] = NULL;
    10ec:	e0bfef17 	ldw	r2,-68(fp)
    10f0:	1085883a 	add	r2,r2,r2
    10f4:	1085883a 	add	r2,r2,r2
    10f8:	1007883a 	mov	r3,r2
    10fc:	e0bfee17 	ldw	r2,-72(fp)
    1100:	1885883a 	add	r2,r3,r2
    1104:	1085883a 	add	r2,r2,r2
    1108:	1085883a 	add	r2,r2,r2
    110c:	1007883a 	mov	r3,r2
    1110:	d0a70517 	ldw	r2,-25580(gp)
    1114:	1885883a 	add	r2,r3,r2
    1118:	10800204 	addi	r2,r2,8
    111c:	10000015 	stw	zero,0(r2)
		      scaled_rectangles_array[r_index + k*4 + 3] = NULL;
    1120:	e0bfef17 	ldw	r2,-68(fp)
    1124:	1085883a 	add	r2,r2,r2
    1128:	1085883a 	add	r2,r2,r2
    112c:	1007883a 	mov	r3,r2
    1130:	e0bfee17 	ldw	r2,-72(fp)
    1134:	1885883a 	add	r2,r3,r2
    1138:	1085883a 	add	r2,r2,r2
    113c:	1085883a 	add	r2,r2,r2
    1140:	1007883a 	mov	r3,r2
    1144:	d0a70517 	ldw	r2,-25580(gp)
    1148:	1885883a 	add	r2,r3,r2
    114c:	10800304 	addi	r2,r2,12
    1150:	10000015 	stw	zero,0(r2)
		  scaled_rectangles_array[r_index + k*4 + 2] = (sum->data + sum->width*(tr.y  + tr.height) + (tr.x ));
		  scaled_rectangles_array[r_index + k*4 + 3] = (sum->data + sum->width*(tr.y  + tr.height) + (tr.x  + tr.width));
		}
	      else
		{
		  if ((tr.x == 0)&& (tr.y == 0) &&(tr.width == 0) &&(tr.height == 0))
    1154:	00006b06 	br	1304 <setImageForCascadeClassifier+0x77c>
		      scaled_rectangles_array[r_index + k*4 + 2] = NULL;
		      scaled_rectangles_array[r_index + k*4 + 3] = NULL;
		    }
		  else
		    {
		      scaled_rectangles_array[r_index + k*4] = (sum->data + sum->width*(tr.y ) + (tr.x )) ;
    1158:	e0bfef17 	ldw	r2,-68(fp)
    115c:	1085883a 	add	r2,r2,r2
    1160:	1085883a 	add	r2,r2,r2
    1164:	1007883a 	mov	r3,r2
    1168:	e0bfee17 	ldw	r2,-72(fp)
    116c:	1885883a 	add	r2,r3,r2
    1170:	1085883a 	add	r2,r2,r2
    1174:	1085883a 	add	r2,r2,r2
    1178:	1007883a 	mov	r3,r2
    117c:	d0a70517 	ldw	r2,-25580(gp)
    1180:	188b883a 	add	r5,r3,r2
    1184:	e0bff417 	ldw	r2,-48(fp)
    1188:	11800217 	ldw	r6,8(r2)
    118c:	e0bff917 	ldw	r2,-28(fp)
    1190:	1009883a 	mov	r4,r2
    1194:	e0bff417 	ldw	r2,-48(fp)
    1198:	10c00017 	ldw	r3,0(r2)
    119c:	e0bffa17 	ldw	r2,-24(fp)
    11a0:	1885383a 	mul	r2,r3,r2
    11a4:	2085883a 	add	r2,r4,r2
    11a8:	1085883a 	add	r2,r2,r2
    11ac:	1085883a 	add	r2,r2,r2
    11b0:	3085883a 	add	r2,r6,r2
    11b4:	28800015 	stw	r2,0(r5)
		      scaled_rectangles_array[r_index + k*4 + 1] = (sum->data + sum->width*(tr.y ) + (tr.x  + tr.width)) ;
    11b8:	e0bfef17 	ldw	r2,-68(fp)
    11bc:	1085883a 	add	r2,r2,r2
    11c0:	1085883a 	add	r2,r2,r2
    11c4:	1007883a 	mov	r3,r2
    11c8:	e0bfee17 	ldw	r2,-72(fp)
    11cc:	1885883a 	add	r2,r3,r2
    11d0:	1085883a 	add	r2,r2,r2
    11d4:	1085883a 	add	r2,r2,r2
    11d8:	1007883a 	mov	r3,r2
    11dc:	d0a70517 	ldw	r2,-25580(gp)
    11e0:	1885883a 	add	r2,r3,r2
    11e4:	11400104 	addi	r5,r2,4
    11e8:	e0bff417 	ldw	r2,-48(fp)
    11ec:	11800217 	ldw	r6,8(r2)
    11f0:	e0fff917 	ldw	r3,-28(fp)
    11f4:	e0bffb17 	ldw	r2,-20(fp)
    11f8:	1885883a 	add	r2,r3,r2
    11fc:	1009883a 	mov	r4,r2
    1200:	e0bff417 	ldw	r2,-48(fp)
    1204:	10c00017 	ldw	r3,0(r2)
    1208:	e0bffa17 	ldw	r2,-24(fp)
    120c:	1885383a 	mul	r2,r3,r2
    1210:	2085883a 	add	r2,r4,r2
    1214:	1085883a 	add	r2,r2,r2
    1218:	1085883a 	add	r2,r2,r2
    121c:	3085883a 	add	r2,r6,r2
    1220:	28800015 	stw	r2,0(r5)
		      scaled_rectangles_array[r_index + k*4 + 2] = (sum->data + sum->width*(tr.y  + tr.height) + (tr.x ));
    1224:	e0bfef17 	ldw	r2,-68(fp)
    1228:	1085883a 	add	r2,r2,r2
    122c:	1085883a 	add	r2,r2,r2
    1230:	1007883a 	mov	r3,r2
    1234:	e0bfee17 	ldw	r2,-72(fp)
    1238:	1885883a 	add	r2,r3,r2
    123c:	1085883a 	add	r2,r2,r2
    1240:	1085883a 	add	r2,r2,r2
    1244:	1007883a 	mov	r3,r2
    1248:	d0a70517 	ldw	r2,-25580(gp)
    124c:	1885883a 	add	r2,r3,r2
    1250:	11800204 	addi	r6,r2,8
    1254:	e0bff417 	ldw	r2,-48(fp)
    1258:	11c00217 	ldw	r7,8(r2)
    125c:	e0bff917 	ldw	r2,-28(fp)
    1260:	100b883a 	mov	r5,r2
    1264:	e0bff417 	ldw	r2,-48(fp)
    1268:	11000017 	ldw	r4,0(r2)
    126c:	e0fffa17 	ldw	r3,-24(fp)
    1270:	e0bffc17 	ldw	r2,-16(fp)
    1274:	1885883a 	add	r2,r3,r2
    1278:	2085383a 	mul	r2,r4,r2
    127c:	2885883a 	add	r2,r5,r2
    1280:	1085883a 	add	r2,r2,r2
    1284:	1085883a 	add	r2,r2,r2
    1288:	3885883a 	add	r2,r7,r2
    128c:	30800015 	stw	r2,0(r6)
		      scaled_rectangles_array[r_index + k*4 + 3] = (sum->data + sum->width*(tr.y  + tr.height) + (tr.x  + tr.width));
    1290:	e0bfef17 	ldw	r2,-68(fp)
    1294:	1085883a 	add	r2,r2,r2
    1298:	1085883a 	add	r2,r2,r2
    129c:	1007883a 	mov	r3,r2
    12a0:	e0bfee17 	ldw	r2,-72(fp)
    12a4:	1885883a 	add	r2,r3,r2
    12a8:	1085883a 	add	r2,r2,r2
    12ac:	1085883a 	add	r2,r2,r2
    12b0:	1007883a 	mov	r3,r2
    12b4:	d0a70517 	ldw	r2,-25580(gp)
    12b8:	1885883a 	add	r2,r3,r2
    12bc:	11800304 	addi	r6,r2,12
    12c0:	e0bff417 	ldw	r2,-48(fp)
    12c4:	11c00217 	ldw	r7,8(r2)
    12c8:	e0fff917 	ldw	r3,-28(fp)
    12cc:	e0bffb17 	ldw	r2,-20(fp)
    12d0:	1885883a 	add	r2,r3,r2
    12d4:	100b883a 	mov	r5,r2
    12d8:	e0bff417 	ldw	r2,-48(fp)
    12dc:	11000017 	ldw	r4,0(r2)
    12e0:	e0fffa17 	ldw	r3,-24(fp)
    12e4:	e0bffc17 	ldw	r2,-16(fp)
    12e8:	1885883a 	add	r2,r3,r2
    12ec:	2085383a 	mul	r2,r4,r2
    12f0:	2885883a 	add	r2,r5,r2
    12f4:	1085883a 	add	r2,r2,r2
    12f8:	1085883a 	add	r2,r2,r2
    12fc:	3885883a 	add	r2,r7,r2
    1300:	30800015 	stw	r2,0(r6)
      /* loop over the number of haar features */
      for( j = 0; j < stages_array[i]; j++ )
	{
	  int nr = 3;
	  /* loop over the number of rectangles */
	  for( k = 0; k < nr; k++ )
    1304:	e0bfef17 	ldw	r2,-68(fp)
    1308:	10800044 	addi	r2,r2,1
    130c:	e0bfef15 	stw	r2,-68(fp)
    1310:	e0ffef17 	ldw	r3,-68(fp)
    1314:	e0bfec17 	ldw	r2,-80(fp)
    1318:	18bea916 	blt	r3,r2,dc0 <setImageForCascadeClassifier+0x238>
		      scaled_rectangles_array[r_index + k*4 + 2] = (sum->data + sum->width*(tr.y  + tr.height) + (tr.x ));
		      scaled_rectangles_array[r_index + k*4 + 3] = (sum->data + sum->width*(tr.y  + tr.height) + (tr.x  + tr.width));
		    }
		} /* end of branch if(k<2) */
	    } /* end of k loop*/
	  r_index+=12;
    131c:	e0bfee17 	ldw	r2,-72(fp)
    1320:	10800304 	addi	r2,r2,12
    1324:	e0bfee15 	stw	r2,-72(fp)
	  w_index+=3;
    1328:	e0bfed17 	ldw	r2,-76(fp)
    132c:	108000c4 	addi	r2,r2,3
    1330:	e0bfed15 	stw	r2,-76(fp)

  /* loop over the number of stages */
  for( i = 0; i < cascade->n_stages; i++ )
    {
      /* loop over the number of haar features */
      for( j = 0; j < stages_array[i]; j++ )
    1334:	e0bff017 	ldw	r2,-64(fp)
    1338:	10800044 	addi	r2,r2,1
    133c:	e0bff015 	stw	r2,-64(fp)
    1340:	e0bff117 	ldw	r2,-60(fp)
    1344:	1085883a 	add	r2,r2,r2
    1348:	1085883a 	add	r2,r2,r2
    134c:	1007883a 	mov	r3,r2
    1350:	d0a70317 	ldw	r2,-25588(gp)
    1354:	1885883a 	add	r2,r3,r2
    1358:	10c00017 	ldw	r3,0(r2)
    135c:	e0bff017 	ldw	r2,-64(fp)
    1360:	10fe9316 	blt	r2,r3,db0 <setImageForCascadeClassifier+0x228>
   * Load the index of the four corners 
   * of the filter rectangle
   **************************************/

  /* loop over the number of stages */
  for( i = 0; i < cascade->n_stages; i++ )
    1364:	e0bff117 	ldw	r2,-60(fp)
    1368:	10800044 	addi	r2,r2,1
    136c:	e0bff115 	stw	r2,-60(fp)
    1370:	e0bff217 	ldw	r2,-56(fp)
    1374:	10c00017 	ldw	r3,0(r2)
    1378:	e0bff117 	ldw	r2,-60(fp)
    137c:	10fe8a16 	blt	r2,r3,da8 <setImageForCascadeClassifier+0x220>
	    } /* end of k loop*/
	  r_index+=12;
	  w_index+=3;
	} /* end of j loop */
    } /* end i loop */
}
    1380:	e037883a 	mov	sp,fp
    1384:	df000017 	ldw	fp,0(sp)
    1388:	dec00104 	addi	sp,sp,4
    138c:	f800283a 	ret

00001390 <runCascadeClassifier>:

}



int runCascadeClassifier( myCascade* _cascade, MyPoint pt, int start_stage )
    1390:	deffeb04 	addi	sp,sp,-84
    1394:	dfc01415 	stw	ra,80(sp)
    1398:	df001315 	stw	fp,76(sp)
    139c:	dc401215 	stw	r17,72(sp)
    13a0:	dc001115 	stw	r16,68(sp)
    13a4:	df001104 	addi	fp,sp,68
    13a8:	e13ffb15 	stw	r4,-20(fp)
    13ac:	e17ffc15 	stw	r5,-16(fp)
    13b0:	e1bffd15 	stw	r6,-12(fp)
    13b4:	e1fffe15 	stw	r7,-8(fp)

  int p_offset, pq_offset;
  int i, j;
  unsigned int mean;
  unsigned int variance_norm_factor;
  int haar_counter = 0;
    13b8:	e03ff415 	stw	zero,-48(fp)
  int w_index = 0;
    13bc:	e03ff315 	stw	zero,-52(fp)
  int r_index = 0;
    13c0:	e03ff215 	stw	zero,-56(fp)
  int stage_sum;
  myCascade* cascade;
  cascade = _cascade;
    13c4:	e0bffb17 	ldw	r2,-20(fp)
    13c8:	e0bff015 	stw	r2,-64(fp)
	
  p_offset = pt.y * (cascade->sum.width) + pt.x;
    13cc:	e0fffd17 	ldw	r3,-12(fp)
    13d0:	e0bff017 	ldw	r2,-64(fp)
    13d4:	10800617 	ldw	r2,24(r2)
    13d8:	1887383a 	mul	r3,r3,r2
    13dc:	e0bffc17 	ldw	r2,-16(fp)
    13e0:	1885883a 	add	r2,r3,r2
    13e4:	e0bffa15 	stw	r2,-24(fp)
  pq_offset = pt.y * (cascade->sqsum.width) + pt.x;
    13e8:	e0fffd17 	ldw	r3,-12(fp)
    13ec:	e0bff017 	ldw	r2,-64(fp)
    13f0:	10800a17 	ldw	r2,40(r2)
    13f4:	1887383a 	mul	r3,r3,r2
    13f8:	e0bffc17 	ldw	r2,-16(fp)
    13fc:	1885883a 	add	r2,r3,r2
    1400:	e0bff915 	stw	r2,-28(fp)
   * mean is the mean of the pixels in the detection window
   * cascade->pqi[pq_offset] are the squared pixel values (using the squared integral image)
   * inv_window_area is 1 over the total number of pixels in the detection window
   *************************************************************************/

  variance_norm_factor =  (cascade->pq0[pq_offset] - cascade->pq1[pq_offset] - cascade->pq2[pq_offset] + cascade->pq3[pq_offset]);
    1404:	e0bff017 	ldw	r2,-64(fp)
    1408:	10c00e17 	ldw	r3,56(r2)
    140c:	e0bff917 	ldw	r2,-28(fp)
    1410:	1085883a 	add	r2,r2,r2
    1414:	1085883a 	add	r2,r2,r2
    1418:	1885883a 	add	r2,r3,r2
    141c:	10c00017 	ldw	r3,0(r2)
    1420:	e0bff017 	ldw	r2,-64(fp)
    1424:	11000f17 	ldw	r4,60(r2)
    1428:	e0bff917 	ldw	r2,-28(fp)
    142c:	1085883a 	add	r2,r2,r2
    1430:	1085883a 	add	r2,r2,r2
    1434:	2085883a 	add	r2,r4,r2
    1438:	10800017 	ldw	r2,0(r2)
    143c:	1887c83a 	sub	r3,r3,r2
    1440:	e0bff017 	ldw	r2,-64(fp)
    1444:	11001017 	ldw	r4,64(r2)
    1448:	e0bff917 	ldw	r2,-28(fp)
    144c:	1085883a 	add	r2,r2,r2
    1450:	1085883a 	add	r2,r2,r2
    1454:	2085883a 	add	r2,r4,r2
    1458:	10800017 	ldw	r2,0(r2)
    145c:	1887c83a 	sub	r3,r3,r2
    1460:	e0bff017 	ldw	r2,-64(fp)
    1464:	11001117 	ldw	r4,68(r2)
    1468:	e0bff917 	ldw	r2,-28(fp)
    146c:	1085883a 	add	r2,r2,r2
    1470:	1085883a 	add	r2,r2,r2
    1474:	2085883a 	add	r2,r4,r2
    1478:	10800017 	ldw	r2,0(r2)
    147c:	1885883a 	add	r2,r3,r2
    1480:	e0bff515 	stw	r2,-44(fp)
  mean = (cascade->p0[p_offset] - cascade->p1[p_offset] - cascade->p2[p_offset] + cascade->p3[p_offset]);
    1484:	e0bff017 	ldw	r2,-64(fp)
    1488:	10c01217 	ldw	r3,72(r2)
    148c:	e0bffa17 	ldw	r2,-24(fp)
    1490:	1085883a 	add	r2,r2,r2
    1494:	1085883a 	add	r2,r2,r2
    1498:	1885883a 	add	r2,r3,r2
    149c:	10c00017 	ldw	r3,0(r2)
    14a0:	e0bff017 	ldw	r2,-64(fp)
    14a4:	11001317 	ldw	r4,76(r2)
    14a8:	e0bffa17 	ldw	r2,-24(fp)
    14ac:	1085883a 	add	r2,r2,r2
    14b0:	1085883a 	add	r2,r2,r2
    14b4:	2085883a 	add	r2,r4,r2
    14b8:	10800017 	ldw	r2,0(r2)
    14bc:	1887c83a 	sub	r3,r3,r2
    14c0:	e0bff017 	ldw	r2,-64(fp)
    14c4:	11001417 	ldw	r4,80(r2)
    14c8:	e0bffa17 	ldw	r2,-24(fp)
    14cc:	1085883a 	add	r2,r2,r2
    14d0:	1085883a 	add	r2,r2,r2
    14d4:	2085883a 	add	r2,r4,r2
    14d8:	10800017 	ldw	r2,0(r2)
    14dc:	1887c83a 	sub	r3,r3,r2
    14e0:	e0bff017 	ldw	r2,-64(fp)
    14e4:	11001517 	ldw	r4,84(r2)
    14e8:	e0bffa17 	ldw	r2,-24(fp)
    14ec:	1085883a 	add	r2,r2,r2
    14f0:	1085883a 	add	r2,r2,r2
    14f4:	2085883a 	add	r2,r4,r2
    14f8:	10800017 	ldw	r2,0(r2)
    14fc:	1885883a 	add	r2,r3,r2
    1500:	e0bff615 	stw	r2,-40(fp)

  variance_norm_factor = (variance_norm_factor*cascade->inv_window_area);
    1504:	e0bff017 	ldw	r2,-64(fp)
    1508:	10800517 	ldw	r2,20(r2)
    150c:	1007883a 	mov	r3,r2
    1510:	e0bff517 	ldw	r2,-44(fp)
    1514:	10c5383a 	mul	r2,r2,r3
    1518:	e0bff515 	stw	r2,-44(fp)
  variance_norm_factor =  variance_norm_factor - mean*mean;
    151c:	e0fff617 	ldw	r3,-40(fp)
    1520:	e0bff617 	ldw	r2,-40(fp)
    1524:	1887383a 	mul	r3,r3,r2
    1528:	e0bff517 	ldw	r2,-44(fp)
    152c:	10c5c83a 	sub	r2,r2,r3
    1530:	e0bff515 	stw	r2,-44(fp)
   * In GPU, it is wise to convert the variance norm
   * into floating point, and use HW sqrtf function.
   * More info:
   * http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#standard-functions
   **********************************************/
  if( variance_norm_factor > 0 )
    1534:	e0bff517 	ldw	r2,-44(fp)
    1538:	1005003a 	cmpeq	r2,r2,zero
    153c:	1000041e 	bne	r2,zero,1550 <runCascadeClassifier+0x1c0>
    variance_norm_factor = int_sqrt(variance_norm_factor);
    1540:	e13ff517 	ldw	r4,-44(fp)
    1544:	0000ac00 	call	ac0 <_Z8int_sqrtj>
    1548:	e0bff515 	stw	r2,-44(fp)
    154c:	00000206 	br	1558 <runCascadeClassifier+0x1c8>
  else
    variance_norm_factor = 1;
    1550:	00800044 	movi	r2,1
    1554:	e0bff515 	stw	r2,-44(fp)
   *
   * Filters in the same stage are also independent,
   * except that filter results need to be merged,
   * and compared with a per-stage threshold.
   *************************************************/
  for( i = start_stage; i < cascade->n_stages; i++ )
    1558:	e0bffe17 	ldw	r2,-8(fp)
    155c:	e0bff815 	stw	r2,-32(fp)
    1560:	00005006 	br	16a4 <runCascadeClassifier+0x314>
       * To avoid it from limiting parallelism,
       * we can duplicate it multiple times,
       * e.g., using stage_sum_array[number_of_threads].
       * Then threads only need to sync at the end
       ***************************************************/
      stage_sum = 0;
    1564:	e03ff115 	stw	zero,-60(fp)

      for( j = 0; j < stages_array[i]; j++ )
    1568:	e03ff715 	stw	zero,-36(fp)
    156c:	00001c06 	br	15e0 <runCascadeClassifier+0x250>
	{
	  /**************************************************
	   * Send the shifted window to a haar filter.
	   **************************************************/
	  stage_sum += evalWeakClassifier(variance_norm_factor, p_offset, haar_counter, w_index, r_index);
    1570:	e13ff517 	ldw	r4,-44(fp)
    1574:	e0bff217 	ldw	r2,-56(fp)
    1578:	d8800015 	stw	r2,0(sp)
    157c:	e17ffa17 	ldw	r5,-24(fp)
    1580:	e1bff417 	ldw	r6,-48(fp)
    1584:	e1fff317 	ldw	r7,-52(fp)
    1588:	000255c0 	call	255c <_Z18evalWeakClassifieriiiii>
    158c:	1007883a 	mov	r3,r2
    1590:	e0bff117 	ldw	r2,-60(fp)
    1594:	10c5883a 	add	r2,r2,r3
    1598:	e0bff115 	stw	r2,-60(fp)
	  n_features++;
    159c:	d0a70117 	ldw	r2,-25596(gp)
    15a0:	1009883a 	mov	r4,r2
    15a4:	014fe034 	movhi	r5,16256
    15a8:	000f5840 	call	f584 <__addsf3>
    15ac:	d0a70115 	stw	r2,-25596(gp)
	  haar_counter++;
    15b0:	e0bff417 	ldw	r2,-48(fp)
    15b4:	10800044 	addi	r2,r2,1
    15b8:	e0bff415 	stw	r2,-48(fp)
	  w_index+=3;
    15bc:	e0bff317 	ldw	r2,-52(fp)
    15c0:	108000c4 	addi	r2,r2,3
    15c4:	e0bff315 	stw	r2,-52(fp)
	  r_index+=12;
    15c8:	e0bff217 	ldw	r2,-56(fp)
    15cc:	10800304 	addi	r2,r2,12
    15d0:	e0bff215 	stw	r2,-56(fp)
       * e.g., using stage_sum_array[number_of_threads].
       * Then threads only need to sync at the end
       ***************************************************/
      stage_sum = 0;

      for( j = 0; j < stages_array[i]; j++ )
    15d4:	e0bff717 	ldw	r2,-36(fp)
    15d8:	10800044 	addi	r2,r2,1
    15dc:	e0bff715 	stw	r2,-36(fp)
    15e0:	e0bff817 	ldw	r2,-32(fp)
    15e4:	1085883a 	add	r2,r2,r2
    15e8:	1085883a 	add	r2,r2,r2
    15ec:	1007883a 	mov	r3,r2
    15f0:	d0a70317 	ldw	r2,-25588(gp)
    15f4:	1885883a 	add	r2,r3,r2
    15f8:	10c00017 	ldw	r3,0(r2)
    15fc:	e0bff717 	ldw	r2,-36(fp)
    1600:	10ffdb16 	blt	r2,r3,1570 <runCascadeClassifier+0x1e0>
       * and the search is abandoned at the i-th stage (-i).
       * Otherwise, a face is detected (1)
       **************************************************************/

      /* the number "0.4" is empirically chosen for 5kk73 */
      if( stage_sum < 0.4*stages_thresh_array[i] ){
    1604:	e13ff117 	ldw	r4,-60(fp)
    1608:	00104fc0 	call	104fc <__floatsidf>
    160c:	1021883a 	mov	r16,r2
    1610:	1823883a 	mov	r17,r3
    1614:	e0bff817 	ldw	r2,-32(fp)
    1618:	1085883a 	add	r2,r2,r2
    161c:	1085883a 	add	r2,r2,r2
    1620:	1007883a 	mov	r3,r2
    1624:	d0a70a17 	ldw	r2,-25560(gp)
    1628:	1885883a 	add	r2,r3,r2
    162c:	11000017 	ldw	r4,0(r2)
    1630:	00104fc0 	call	104fc <__floatsidf>
    1634:	100b883a 	mov	r5,r2
    1638:	180d883a 	mov	r6,r3
    163c:	2809883a 	mov	r4,r5
    1640:	300b883a 	mov	r5,r6
    1644:	01a666b4 	movhi	r6,39322
    1648:	31a66684 	addi	r6,r6,-26214
    164c:	01cff6b4 	movhi	r7,16346
    1650:	39e66644 	addi	r7,r7,-26215
    1654:	00100b00 	call	100b0 <__muldf3>
    1658:	1009883a 	mov	r4,r2
    165c:	180b883a 	mov	r5,r3
    1660:	2005883a 	mov	r2,r4
    1664:	2807883a 	mov	r3,r5
    1668:	8009883a 	mov	r4,r16
    166c:	880b883a 	mov	r5,r17
    1670:	100d883a 	mov	r6,r2
    1674:	180f883a 	mov	r7,r3
    1678:	00104740 	call	10474 <__ltdf2>
    167c:	1004803a 	cmplt	r2,r2,zero
    1680:	1000011e 	bne	r2,zero,1688 <runCascadeClassifier+0x2f8>
    1684:	00000406 	br	1698 <runCascadeClassifier+0x308>
	return -i;
    1688:	e0bff817 	ldw	r2,-32(fp)
    168c:	0085c83a 	sub	r2,zero,r2
    1690:	e0bfff15 	stw	r2,-4(fp)
    1694:	00000906 	br	16bc <runCascadeClassifier+0x32c>
   *
   * Filters in the same stage are also independent,
   * except that filter results need to be merged,
   * and compared with a per-stage threshold.
   *************************************************/
  for( i = start_stage; i < cascade->n_stages; i++ )
    1698:	e0bff817 	ldw	r2,-32(fp)
    169c:	10800044 	addi	r2,r2,1
    16a0:	e0bff815 	stw	r2,-32(fp)
    16a4:	e0bff017 	ldw	r2,-64(fp)
    16a8:	10c00017 	ldw	r3,0(r2)
    16ac:	e0bff817 	ldw	r2,-32(fp)
    16b0:	10ffac16 	blt	r2,r3,1564 <runCascadeClassifier+0x1d4>
      /* the number "0.4" is empirically chosen for 5kk73 */
      if( stage_sum < 0.4*stages_thresh_array[i] ){
	return -i;
      } /* end of the per-stage thresholding */
    } /* end of i loop */
  return 1;
    16b4:	00800044 	movi	r2,1
    16b8:	e0bfff15 	stw	r2,-4(fp)
    16bc:	e0bfff17 	ldw	r2,-4(fp)
}
    16c0:	e037883a 	mov	sp,fp
    16c4:	dfc00317 	ldw	ra,12(sp)
    16c8:	df000217 	ldw	fp,8(sp)
    16cc:	dc400117 	ldw	r17,4(sp)
    16d0:	dc000017 	ldw	r16,0(sp)
    16d4:	dec00404 	addi	sp,sp,16
    16d8:	f800283a 	ret

000016dc <_Z14integralImagesP7MyImageP10MyIntImageS2_>:
 * Compute the integral image (and squared integral)
 * Integral image helps quickly sum up an area.
 * More info:
 * http://en.wikipedia.org/wiki/Summed_area_table
 ****************************************************/
void integralImages( MyImage *src, MyIntImage *sum, MyIntImage *sqsum )
    16dc:	defff004 	addi	sp,sp,-64
    16e0:	df000f15 	stw	fp,60(sp)
    16e4:	df000f04 	addi	fp,sp,60
    16e8:	e13ffd15 	stw	r4,-12(fp)
    16ec:	e17ffe15 	stw	r5,-8(fp)
    16f0:	e1bfff15 	stw	r6,-4(fp)
{
  int x, y, s, sq, t, tq;
  unsigned char it;
  int height = src->height;
    16f4:	e0bffd17 	ldw	r2,-12(fp)
    16f8:	10800117 	ldw	r2,4(r2)
    16fc:	e0bff515 	stw	r2,-44(fp)
  int width = src->width;
    1700:	e0bffd17 	ldw	r2,-12(fp)
    1704:	10800017 	ldw	r2,0(r2)
    1708:	e0bff415 	stw	r2,-48(fp)
  unsigned char *data = src->data;
    170c:	e0bffd17 	ldw	r2,-12(fp)
    1710:	10800317 	ldw	r2,12(r2)
    1714:	e0bff315 	stw	r2,-52(fp)
  int * sumData = sum->data;
    1718:	e0bffe17 	ldw	r2,-8(fp)
    171c:	10800217 	ldw	r2,8(r2)
    1720:	e0bff215 	stw	r2,-56(fp)
  int * sqsumData = sqsum->data;
    1724:	e0bfff17 	ldw	r2,-4(fp)
    1728:	10800217 	ldw	r2,8(r2)
    172c:	e0bff115 	stw	r2,-60(fp)
  for( y = 0; y < height; y++)
    1730:	e03ffb15 	stw	zero,-20(fp)
    1734:	00005e06 	br	18b0 <_Z14integralImagesP7MyImageP10MyIntImageS2_+0x1d4>
    {
      s = 0;
    1738:	e03ffa15 	stw	zero,-24(fp)
      sq = 0;
    173c:	e03ff915 	stw	zero,-28(fp)
      /* loop over the number of columns */
      for( x = 0; x < width; x ++)
    1740:	e03ffc15 	stw	zero,-16(fp)
    1744:	00005406 	br	1898 <_Z14integralImagesP7MyImageP10MyIntImageS2_+0x1bc>
	{
	  it = data[y*width+x];
    1748:	e0fffb17 	ldw	r3,-20(fp)
    174c:	e0bff417 	ldw	r2,-48(fp)
    1750:	1887383a 	mul	r3,r3,r2
    1754:	e0bffc17 	ldw	r2,-16(fp)
    1758:	1885883a 	add	r2,r3,r2
    175c:	1007883a 	mov	r3,r2
    1760:	e0bff317 	ldw	r2,-52(fp)
    1764:	1885883a 	add	r2,r3,r2
    1768:	10800003 	ldbu	r2,0(r2)
    176c:	e0bff605 	stb	r2,-40(fp)
	  /* sum of the current row (integer)*/
	  s += it; 
    1770:	e0fff603 	ldbu	r3,-40(fp)
    1774:	e0bffa17 	ldw	r2,-24(fp)
    1778:	10c5883a 	add	r2,r2,r3
    177c:	e0bffa15 	stw	r2,-24(fp)
	  sq += it*it;
    1780:	e0fff603 	ldbu	r3,-40(fp)
    1784:	e0bff603 	ldbu	r2,-40(fp)
    1788:	1887383a 	mul	r3,r3,r2
    178c:	e0bff917 	ldw	r2,-28(fp)
    1790:	10c5883a 	add	r2,r2,r3
    1794:	e0bff915 	stw	r2,-28(fp)

	  t = s;
    1798:	e0bffa17 	ldw	r2,-24(fp)
    179c:	e0bff815 	stw	r2,-32(fp)
	  tq = sq;
    17a0:	e0bff917 	ldw	r2,-28(fp)
    17a4:	e0bff715 	stw	r2,-36(fp)
	  if (y != 0)
    17a8:	e0bffb17 	ldw	r2,-20(fp)
    17ac:	1005003a 	cmpeq	r2,r2,zero
    17b0:	10001e1e 	bne	r2,zero,182c <_Z14integralImagesP7MyImageP10MyIntImageS2_+0x150>
	    {
	      t += sumData[(y-1)*width+x];
    17b4:	e0bffb17 	ldw	r2,-20(fp)
    17b8:	10ffffc4 	addi	r3,r2,-1
    17bc:	e0bff417 	ldw	r2,-48(fp)
    17c0:	1887383a 	mul	r3,r3,r2
    17c4:	e0bffc17 	ldw	r2,-16(fp)
    17c8:	1885883a 	add	r2,r3,r2
    17cc:	1085883a 	add	r2,r2,r2
    17d0:	1085883a 	add	r2,r2,r2
    17d4:	1007883a 	mov	r3,r2
    17d8:	e0bff217 	ldw	r2,-56(fp)
    17dc:	1885883a 	add	r2,r3,r2
    17e0:	10c00017 	ldw	r3,0(r2)
    17e4:	e0bff817 	ldw	r2,-32(fp)
    17e8:	10c5883a 	add	r2,r2,r3
    17ec:	e0bff815 	stw	r2,-32(fp)
	      tq += sqsumData[(y-1)*width+x];
    17f0:	e0bffb17 	ldw	r2,-20(fp)
    17f4:	10ffffc4 	addi	r3,r2,-1
    17f8:	e0bff417 	ldw	r2,-48(fp)
    17fc:	1887383a 	mul	r3,r3,r2
    1800:	e0bffc17 	ldw	r2,-16(fp)
    1804:	1885883a 	add	r2,r3,r2
    1808:	1085883a 	add	r2,r2,r2
    180c:	1085883a 	add	r2,r2,r2
    1810:	1007883a 	mov	r3,r2
    1814:	e0bff117 	ldw	r2,-60(fp)
    1818:	1885883a 	add	r2,r3,r2
    181c:	10c00017 	ldw	r3,0(r2)
    1820:	e0bff717 	ldw	r2,-36(fp)
    1824:	10c5883a 	add	r2,r2,r3
    1828:	e0bff715 	stw	r2,-36(fp)
	    }
	  sumData[y*width+x]=t;
    182c:	e0fffb17 	ldw	r3,-20(fp)
    1830:	e0bff417 	ldw	r2,-48(fp)
    1834:	1887383a 	mul	r3,r3,r2
    1838:	e0bffc17 	ldw	r2,-16(fp)
    183c:	1885883a 	add	r2,r3,r2
    1840:	1085883a 	add	r2,r2,r2
    1844:	1085883a 	add	r2,r2,r2
    1848:	1007883a 	mov	r3,r2
    184c:	e0bff217 	ldw	r2,-56(fp)
    1850:	1887883a 	add	r3,r3,r2
    1854:	e0bff817 	ldw	r2,-32(fp)
    1858:	18800015 	stw	r2,0(r3)
	  sqsumData[y*width+x]=tq;
    185c:	e0fffb17 	ldw	r3,-20(fp)
    1860:	e0bff417 	ldw	r2,-48(fp)
    1864:	1887383a 	mul	r3,r3,r2
    1868:	e0bffc17 	ldw	r2,-16(fp)
    186c:	1885883a 	add	r2,r3,r2
    1870:	1085883a 	add	r2,r2,r2
    1874:	1085883a 	add	r2,r2,r2
    1878:	1007883a 	mov	r3,r2
    187c:	e0bff117 	ldw	r2,-60(fp)
    1880:	1887883a 	add	r3,r3,r2
    1884:	e0bff717 	ldw	r2,-36(fp)
    1888:	18800015 	stw	r2,0(r3)
  for( y = 0; y < height; y++)
    {
      s = 0;
      sq = 0;
      /* loop over the number of columns */
      for( x = 0; x < width; x ++)
    188c:	e0bffc17 	ldw	r2,-16(fp)
    1890:	10800044 	addi	r2,r2,1
    1894:	e0bffc15 	stw	r2,-16(fp)
    1898:	e0fffc17 	ldw	r3,-16(fp)
    189c:	e0bff417 	ldw	r2,-48(fp)
    18a0:	18bfa916 	blt	r3,r2,1748 <_Z14integralImagesP7MyImageP10MyIntImageS2_+0x6c>
  int height = src->height;
  int width = src->width;
  unsigned char *data = src->data;
  int * sumData = sum->data;
  int * sqsumData = sqsum->data;
  for( y = 0; y < height; y++)
    18a4:	e0bffb17 	ldw	r2,-20(fp)
    18a8:	10800044 	addi	r2,r2,1
    18ac:	e0bffb15 	stw	r2,-20(fp)
    18b0:	e0fffb17 	ldw	r3,-20(fp)
    18b4:	e0bff517 	ldw	r2,-44(fp)
    18b8:	18bf9f16 	blt	r3,r2,1738 <_Z14integralImagesP7MyImageP10MyIntImageS2_+0x5c>
	    }
	  sumData[y*width+x]=t;
	  sqsumData[y*width+x]=tq;
	}
    }
}
    18bc:	e037883a 	mov	sp,fp
    18c0:	df000017 	ldw	fp,0(sp)
    18c4:	dec00104 	addi	sp,sp,4
    18c8:	f800283a 	ret

000018cc <_Z15nearestNeighborP7MyImageS0_>:

/***********************************************************
 * This function downsample an image using nearest neighbor
 * It is used to build the image pyramid
 **********************************************************/
void nearestNeighbor (MyImage *src, MyImage *dst)
    18cc:	deffed04 	addi	sp,sp,-76
    18d0:	dfc01215 	stw	ra,72(sp)
    18d4:	df001115 	stw	fp,68(sp)
    18d8:	df001104 	addi	fp,sp,68
    18dc:	e13ffe15 	stw	r4,-8(fp)
    18e0:	e17fff15 	stw	r5,-4(fp)
  int j;
  int x;
  int i;
  unsigned char* t;
  unsigned char* p;
  int w1 = src->width;
    18e4:	e0bffe17 	ldw	r2,-8(fp)
    18e8:	10800017 	ldw	r2,0(r2)
    18ec:	e0bff715 	stw	r2,-36(fp)
  int h1 = src->height;
    18f0:	e0bffe17 	ldw	r2,-8(fp)
    18f4:	10800117 	ldw	r2,4(r2)
    18f8:	e0bff615 	stw	r2,-40(fp)
  int w2 = dst->width;
    18fc:	e0bfff17 	ldw	r2,-4(fp)
    1900:	10800017 	ldw	r2,0(r2)
    1904:	e0bff515 	stw	r2,-44(fp)
  int h2 = dst->height;
    1908:	e0bfff17 	ldw	r2,-4(fp)
    190c:	10800117 	ldw	r2,4(r2)
    1910:	e0bff415 	stw	r2,-48(fp)

  int rat = 0;
    1914:	e03ff315 	stw	zero,-52(fp)

  unsigned char* src_data = src->data;
    1918:	e0bffe17 	ldw	r2,-8(fp)
    191c:	10800317 	ldw	r2,12(r2)
    1920:	e0bff215 	stw	r2,-56(fp)
  unsigned char* dst_data = dst->data;
    1924:	e0bfff17 	ldw	r2,-4(fp)
    1928:	10800317 	ldw	r2,12(r2)
    192c:	e0bff115 	stw	r2,-60(fp)


  int x_ratio = (int)((w1<<16)/w2) +1;
    1930:	e0bff717 	ldw	r2,-36(fp)
    1934:	1008943a 	slli	r4,r2,16
    1938:	e17ff517 	ldw	r5,-44(fp)
    193c:	00107800 	call	10780 <__divsi3>
    1940:	10800044 	addi	r2,r2,1
    1944:	e0bff015 	stw	r2,-64(fp)
  int y_ratio = (int)((h1<<16)/h2) +1;
    1948:	e0bff617 	ldw	r2,-40(fp)
    194c:	1008943a 	slli	r4,r2,16
    1950:	e17ff417 	ldw	r5,-48(fp)
    1954:	00107800 	call	10780 <__divsi3>
    1958:	10800044 	addi	r2,r2,1
    195c:	e0bfef15 	stw	r2,-68(fp)

  for (i=0;i<h2;i++)
    1960:	e03ffa15 	stw	zero,-24(fp)
    1964:	00003006 	br	1a28 <_Z15nearestNeighborP7MyImageS0_+0x15c>
    {
      t = dst_data + i*w2;
    1968:	e0fffa17 	ldw	r3,-24(fp)
    196c:	e0bff517 	ldw	r2,-44(fp)
    1970:	1885383a 	mul	r2,r3,r2
    1974:	1007883a 	mov	r3,r2
    1978:	e0bff117 	ldw	r2,-60(fp)
    197c:	1885883a 	add	r2,r3,r2
    1980:	e0bff915 	stw	r2,-28(fp)
      y = ((i*y_ratio)>>16);
    1984:	e0fffa17 	ldw	r3,-24(fp)
    1988:	e0bfef17 	ldw	r2,-68(fp)
    198c:	1885383a 	mul	r2,r3,r2
    1990:	1005d43a 	srai	r2,r2,16
    1994:	e0bffd15 	stw	r2,-12(fp)
      p = src_data + y*w1;
    1998:	e0fffd17 	ldw	r3,-12(fp)
    199c:	e0bff717 	ldw	r2,-36(fp)
    19a0:	1885383a 	mul	r2,r3,r2
    19a4:	1007883a 	mov	r3,r2
    19a8:	e0bff217 	ldw	r2,-56(fp)
    19ac:	1885883a 	add	r2,r3,r2
    19b0:	e0bff815 	stw	r2,-32(fp)
      rat = 0;
    19b4:	e03ff315 	stw	zero,-52(fp)
      for (j=0;j<w2;j++)
    19b8:	e03ffc15 	stw	zero,-16(fp)
    19bc:	00001406 	br	1a10 <_Z15nearestNeighborP7MyImageS0_+0x144>
	{
	  x = (rat>>16);
    19c0:	e0bff317 	ldw	r2,-52(fp)
    19c4:	1005d43a 	srai	r2,r2,16
    19c8:	e0bffb15 	stw	r2,-20(fp)
	  *t++ = p[x];
    19cc:	e0bffb17 	ldw	r2,-20(fp)
    19d0:	1007883a 	mov	r3,r2
    19d4:	e0bff817 	ldw	r2,-32(fp)
    19d8:	1885883a 	add	r2,r3,r2
    19dc:	10c00003 	ldbu	r3,0(r2)
    19e0:	e0bff917 	ldw	r2,-28(fp)
    19e4:	10c00005 	stb	r3,0(r2)
    19e8:	e0bff917 	ldw	r2,-28(fp)
    19ec:	10800044 	addi	r2,r2,1
    19f0:	e0bff915 	stw	r2,-28(fp)
	  rat += x_ratio;
    19f4:	e0fff317 	ldw	r3,-52(fp)
    19f8:	e0bff017 	ldw	r2,-64(fp)
    19fc:	1885883a 	add	r2,r3,r2
    1a00:	e0bff315 	stw	r2,-52(fp)
    {
      t = dst_data + i*w2;
      y = ((i*y_ratio)>>16);
      p = src_data + y*w1;
      rat = 0;
      for (j=0;j<w2;j++)
    1a04:	e0bffc17 	ldw	r2,-16(fp)
    1a08:	10800044 	addi	r2,r2,1
    1a0c:	e0bffc15 	stw	r2,-16(fp)
    1a10:	e0fffc17 	ldw	r3,-16(fp)
    1a14:	e0bff517 	ldw	r2,-44(fp)
    1a18:	18bfe916 	blt	r3,r2,19c0 <_Z15nearestNeighborP7MyImageS0_+0xf4>


  int x_ratio = (int)((w1<<16)/w2) +1;
  int y_ratio = (int)((h1<<16)/h2) +1;

  for (i=0;i<h2;i++)
    1a1c:	e0bffa17 	ldw	r2,-24(fp)
    1a20:	10800044 	addi	r2,r2,1
    1a24:	e0bffa15 	stw	r2,-24(fp)
    1a28:	e0fffa17 	ldw	r3,-24(fp)
    1a2c:	e0bff417 	ldw	r2,-48(fp)
    1a30:	18bfcd16 	blt	r3,r2,1968 <_Z15nearestNeighborP7MyImageS0_+0x9c>
	  x = (rat>>16);
	  *t++ = p[x];
	  rat += x_ratio;
	}
    }
}
    1a34:	e037883a 	mov	sp,fp
    1a38:	dfc00117 	ldw	ra,4(sp)
    1a3c:	df000017 	ldw	fp,0(sp)
    1a40:	dec00204 	addi	sp,sp,8
    1a44:	f800283a 	ret

00001a48 <releaseTextClassifier>:
    } /* end of i loop */
  fclose(fp);
}


void releaseTextClassifier()
    1a48:	defffe04 	addi	sp,sp,-8
    1a4c:	dfc00115 	stw	ra,4(sp)
    1a50:	df000015 	stw	fp,0(sp)
    1a54:	d839883a 	mov	fp,sp
{
  free(stages_array);
    1a58:	d1270317 	ldw	r4,-25588(gp)
    1a5c:	00131640 	call	13164 <free>
  free(rectangles_array);
    1a60:	d1270417 	ldw	r4,-25584(gp)
    1a64:	00131640 	call	13164 <free>
  free(scaled_rectangles_array);
    1a68:	d1270517 	ldw	r4,-25580(gp)
    1a6c:	00131640 	call	13164 <free>
  free(weights_array);
    1a70:	d1270617 	ldw	r4,-25576(gp)
    1a74:	00131640 	call	13164 <free>
  free(tree_thresh_array);
    1a78:	d1270717 	ldw	r4,-25572(gp)
    1a7c:	00131640 	call	13164 <free>
  free(alpha1_array);
    1a80:	d1270817 	ldw	r4,-25568(gp)
    1a84:	00131640 	call	13164 <free>
  free(alpha2_array);
    1a88:	d1270917 	ldw	r4,-25564(gp)
    1a8c:	00131640 	call	13164 <free>
  free(stages_thresh_array);
    1a90:	d1270a17 	ldw	r4,-25560(gp)
    1a94:	00131640 	call	13164 <free>
}
    1a98:	e037883a 	mov	sp,fp
    1a9c:	dfc00117 	ldw	ra,4(sp)
    1aa0:	df000017 	ldw	fp,0(sp)
    1aa4:	dec00204 	addi	sp,sp,8
    1aa8:	f800283a 	ret

00001aac <readTextClassifier>:
	  rat += x_ratio;
	}
    }
}

void readTextClassifier()//(myCascade * cascade)
    1aac:	deffef04 	addi	sp,sp,-68
    1ab0:	dfc01015 	stw	ra,64(sp)
    1ab4:	df000f15 	stw	fp,60(sp)
    1ab8:	dc000e15 	stw	r16,56(sp)
    1abc:	df000e04 	addi	fp,sp,56
{
  /*number of stages of the cascade classifier*/
  int stages;
  /*total number of weak classifiers (one node each)*/
  int total_nodes = 0;
    1ac0:	e03ffb15 	stw	zero,-20(fp)
  int i, j, k, l;
  char mystring [12];
  int r_index = 0;
    1ac4:	e03ff615 	stw	zero,-40(fp)
  int w_index = 0;
    1ac8:	e03ff515 	stw	zero,-44(fp)
  int tree_index = 0;
    1acc:	e03ff415 	stw	zero,-48(fp)
  FILE *finfo = fopen("/mnt/host/info.txt", "r");
    1ad0:	010000b4 	movhi	r4,2
    1ad4:	2139de04 	addi	r4,r4,-6280
    1ad8:	014000b4 	movhi	r5,2
    1adc:	2979e304 	addi	r5,r5,-6260
    1ae0:	0011f380 	call	11f38 <fopen>
    1ae4:	e0bff315 	stw	r2,-52(fp)
  /**************************************************
  /* how many stages are in the cascaded filter? 
  /* the first line of info.txt is the number of stages 
  /* (in the 5kk73 example, there are 25 stages)
  **************************************************/
  if ( fgets (mystring , 12 , finfo) != NULL )
    1ae8:	e13ffd04 	addi	r4,fp,-12
    1aec:	01400304 	movi	r5,12
    1af0:	e1bff317 	ldw	r6,-52(fp)
    1af4:	0011b600 	call	11b60 <fgets>
    1af8:	1004c03a 	cmpne	r2,r2,zero
    1afc:	10803fcc 	andi	r2,r2,255
    1b00:	1005003a 	cmpeq	r2,r2,zero
    1b04:	1000031e 	bne	r2,zero,1b14 <readTextClassifier+0x68>
    {
      stages = atoi(mystring);
    1b08:	e13ffd04 	addi	r4,fp,-12
    1b0c:	00116b80 	call	116b8 <atoi>
    1b10:	e0bffc15 	stw	r2,-16(fp)
    }
  i = 0;
    1b14:	e03ffa15 	stw	zero,-24(fp)

  stages_array = (int *)malloc(sizeof(int)*stages);
    1b18:	e0bffc17 	ldw	r2,-16(fp)
    1b1c:	1085883a 	add	r2,r2,r2
    1b20:	1085883a 	add	r2,r2,r2
    1b24:	1009883a 	mov	r4,r2
    1b28:	00131780 	call	13178 <malloc>
    1b2c:	d0a70315 	stw	r2,-25588(gp)
   * how many filters in each stage? 
   * They are specified in info.txt,
   * starting from second line.
   * (in the 5kk73 example, from line 2 to line 26)
   *************************************************/
  while ( fgets (mystring , 12 , finfo) != NULL )
    1b30:	00001606 	br	1b8c <readTextClassifier+0xe0>
    {
      stages_array[i] = atoi(mystring);
    1b34:	e0bffa17 	ldw	r2,-24(fp)
    1b38:	1085883a 	add	r2,r2,r2
    1b3c:	1085883a 	add	r2,r2,r2
    1b40:	1007883a 	mov	r3,r2
    1b44:	d0a70317 	ldw	r2,-25588(gp)
    1b48:	18a1883a 	add	r16,r3,r2
    1b4c:	e13ffd04 	addi	r4,fp,-12
    1b50:	00116b80 	call	116b8 <atoi>
    1b54:	80800015 	stw	r2,0(r16)
      total_nodes += stages_array[i];
    1b58:	e0bffa17 	ldw	r2,-24(fp)
    1b5c:	1085883a 	add	r2,r2,r2
    1b60:	1085883a 	add	r2,r2,r2
    1b64:	1007883a 	mov	r3,r2
    1b68:	d0a70317 	ldw	r2,-25588(gp)
    1b6c:	1885883a 	add	r2,r3,r2
    1b70:	10c00017 	ldw	r3,0(r2)
    1b74:	e0bffb17 	ldw	r2,-20(fp)
    1b78:	10c5883a 	add	r2,r2,r3
    1b7c:	e0bffb15 	stw	r2,-20(fp)
      i++;
    1b80:	e0bffa17 	ldw	r2,-24(fp)
    1b84:	10800044 	addi	r2,r2,1
    1b88:	e0bffa15 	stw	r2,-24(fp)
   * how many filters in each stage? 
   * They are specified in info.txt,
   * starting from second line.
   * (in the 5kk73 example, from line 2 to line 26)
   *************************************************/
  while ( fgets (mystring , 12 , finfo) != NULL )
    1b8c:	e13ffd04 	addi	r4,fp,-12
    1b90:	01400304 	movi	r5,12
    1b94:	e1bff317 	ldw	r6,-52(fp)
    1b98:	0011b600 	call	11b60 <fgets>
    1b9c:	1004c03a 	cmpne	r2,r2,zero
    1ba0:	10803fcc 	andi	r2,r2,255
    1ba4:	1004c03a 	cmpne	r2,r2,zero
    1ba8:	103fe21e 	bne	r2,zero,1b34 <readTextClassifier+0x88>
    {
      stages_array[i] = atoi(mystring);
      total_nodes += stages_array[i];
      i++;
    }
  fclose(finfo);
    1bac:	e13ff317 	ldw	r4,-52(fp)
    1bb0:	00117d40 	call	117d4 <fclose>
  /***********************************************
   * Allocate a lot of array structures
   * Note that, to increase parallelism,
   * some arrays need to be splitted or duplicated
   **********************************************/
  rectangles_array = (int *)malloc(sizeof(int)*total_nodes*12);
    1bb4:	e0bffb17 	ldw	r2,-20(fp)
    1bb8:	11000c24 	muli	r4,r2,48
    1bbc:	00131780 	call	13178 <malloc>
    1bc0:	d0a70415 	stw	r2,-25584(gp)
  scaled_rectangles_array = (int **)malloc(sizeof(int*)*total_nodes*12);
    1bc4:	e0bffb17 	ldw	r2,-20(fp)
    1bc8:	11000c24 	muli	r4,r2,48
    1bcc:	00131780 	call	13178 <malloc>
    1bd0:	d0a70515 	stw	r2,-25580(gp)
  weights_array = (int *)malloc(sizeof(int)*total_nodes*3);
    1bd4:	e0bffb17 	ldw	r2,-20(fp)
    1bd8:	11000324 	muli	r4,r2,12
    1bdc:	00131780 	call	13178 <malloc>
    1be0:	d0a70615 	stw	r2,-25576(gp)
  alpha1_array = (int*)malloc(sizeof(int)*total_nodes);
    1be4:	e0bffb17 	ldw	r2,-20(fp)
    1be8:	1085883a 	add	r2,r2,r2
    1bec:	1085883a 	add	r2,r2,r2
    1bf0:	1009883a 	mov	r4,r2
    1bf4:	00131780 	call	13178 <malloc>
    1bf8:	d0a70815 	stw	r2,-25568(gp)
  alpha2_array = (int*)malloc(sizeof(int)*total_nodes);
    1bfc:	e0bffb17 	ldw	r2,-20(fp)
    1c00:	1085883a 	add	r2,r2,r2
    1c04:	1085883a 	add	r2,r2,r2
    1c08:	1009883a 	mov	r4,r2
    1c0c:	00131780 	call	13178 <malloc>
    1c10:	d0a70915 	stw	r2,-25564(gp)
  tree_thresh_array = (int*)malloc(sizeof(int)*total_nodes);
    1c14:	e0bffb17 	ldw	r2,-20(fp)
    1c18:	1085883a 	add	r2,r2,r2
    1c1c:	1085883a 	add	r2,r2,r2
    1c20:	1009883a 	mov	r4,r2
    1c24:	00131780 	call	13178 <malloc>
    1c28:	d0a70715 	stw	r2,-25572(gp)
  stages_thresh_array = (int*)malloc(sizeof(int)*stages);
    1c2c:	e0bffc17 	ldw	r2,-16(fp)
    1c30:	1085883a 	add	r2,r2,r2
    1c34:	1085883a 	add	r2,r2,r2
    1c38:	1009883a 	mov	r4,r2
    1c3c:	00131780 	call	13178 <malloc>
    1c40:	d0a70a15 	stw	r2,-25560(gp)
  FILE *fp = fopen("/mnt/host/class.txt", "r");
    1c44:	010000b4 	movhi	r4,2
    1c48:	2139e404 	addi	r4,r4,-6256
    1c4c:	014000b4 	movhi	r5,2
    1c50:	2979e304 	addi	r5,r5,-6260
    1c54:	0011f380 	call	11f38 <fopen>
    1c58:	e0bff215 	stw	r2,-56(fp)
   * 17: alpha 1 of the filter
   * 18: alpha 2 of the filter
   ******************************************/

  /* loop over n of stages */
  for (i = 0; i < stages; i++)
    1c5c:	e03ffa15 	stw	zero,-24(fp)
    1c60:	00009a06 	br	1ecc <readTextClassifier+0x420>
    {    /* loop over n of trees */
      for (j = 0; j < stages_array[i]; j++)
    1c64:	e03ff915 	stw	zero,-28(fp)
    1c68:	00008c06 	br	1e9c <readTextClassifier+0x3f0>
	{	/* loop over n of rectangular features */
	  for(k = 0; k < 3; k++)
    1c6c:	e03ff815 	stw	zero,-32(fp)
    1c70:	00003306 	br	1d40 <readTextClassifier+0x294>
	    {	/* loop over the n of vertices */
	      for (l = 0; l <4; l++)
    1c74:	e03ff715 	stw	zero,-36(fp)
    1c78:	00001706 	br	1cd8 <readTextClassifier+0x22c>
		{
		  if (fgets (mystring , 12 , fp) != NULL)
    1c7c:	e13ffd04 	addi	r4,fp,-12
    1c80:	01400304 	movi	r5,12
    1c84:	e1bff217 	ldw	r6,-56(fp)
    1c88:	0011b600 	call	11b60 <fgets>
    1c8c:	1004c03a 	cmpne	r2,r2,zero
    1c90:	10803fcc 	andi	r2,r2,255
    1c94:	1005003a 	cmpeq	r2,r2,zero
    1c98:	1000121e 	bne	r2,zero,1ce4 <readTextClassifier+0x238>
		    rectangles_array[r_index] = atoi(mystring);
    1c9c:	e0bff617 	ldw	r2,-40(fp)
    1ca0:	1085883a 	add	r2,r2,r2
    1ca4:	1085883a 	add	r2,r2,r2
    1ca8:	1007883a 	mov	r3,r2
    1cac:	d0a70417 	ldw	r2,-25584(gp)
    1cb0:	18a1883a 	add	r16,r3,r2
    1cb4:	e13ffd04 	addi	r4,fp,-12
    1cb8:	00116b80 	call	116b8 <atoi>
    1cbc:	80800015 	stw	r2,0(r16)
		  else
		    break;
		  r_index++;
    1cc0:	e0bff617 	ldw	r2,-40(fp)
    1cc4:	10800044 	addi	r2,r2,1
    1cc8:	e0bff615 	stw	r2,-40(fp)
    {    /* loop over n of trees */
      for (j = 0; j < stages_array[i]; j++)
	{	/* loop over n of rectangular features */
	  for(k = 0; k < 3; k++)
	    {	/* loop over the n of vertices */
	      for (l = 0; l <4; l++)
    1ccc:	e0bff717 	ldw	r2,-36(fp)
    1cd0:	10800044 	addi	r2,r2,1
    1cd4:	e0bff715 	stw	r2,-36(fp)
    1cd8:	e0bff717 	ldw	r2,-36(fp)
    1cdc:	10800110 	cmplti	r2,r2,4
    1ce0:	103fe61e 	bne	r2,zero,1c7c <readTextClassifier+0x1d0>
		    rectangles_array[r_index] = atoi(mystring);
		  else
		    break;
		  r_index++;
		} /* end of l loop */
	      if (fgets (mystring , 12 , fp) != NULL)
    1ce4:	e13ffd04 	addi	r4,fp,-12
    1ce8:	01400304 	movi	r5,12
    1cec:	e1bff217 	ldw	r6,-56(fp)
    1cf0:	0011b600 	call	11b60 <fgets>
    1cf4:	1004c03a 	cmpne	r2,r2,zero
    1cf8:	10803fcc 	andi	r2,r2,255
    1cfc:	1005003a 	cmpeq	r2,r2,zero
    1d00:	1000121e 	bne	r2,zero,1d4c <readTextClassifier+0x2a0>
		{
		  weights_array[w_index] = atoi(mystring);
    1d04:	e0bff517 	ldw	r2,-44(fp)
    1d08:	1085883a 	add	r2,r2,r2
    1d0c:	1085883a 	add	r2,r2,r2
    1d10:	1007883a 	mov	r3,r2
    1d14:	d0a70617 	ldw	r2,-25576(gp)
    1d18:	18a1883a 	add	r16,r3,r2
    1d1c:	e13ffd04 	addi	r4,fp,-12
    1d20:	00116b80 	call	116b8 <atoi>
    1d24:	80800015 	stw	r2,0(r16)
		  /*TODO: make more general */
		  /*weights_array[w_index]>>=8; */
		}
	      else
		break;
	      w_index++;
    1d28:	e0bff517 	ldw	r2,-44(fp)
    1d2c:	10800044 	addi	r2,r2,1
    1d30:	e0bff515 	stw	r2,-44(fp)
  /* loop over n of stages */
  for (i = 0; i < stages; i++)
    {    /* loop over n of trees */
      for (j = 0; j < stages_array[i]; j++)
	{	/* loop over n of rectangular features */
	  for(k = 0; k < 3; k++)
    1d34:	e0bff817 	ldw	r2,-32(fp)
    1d38:	10800044 	addi	r2,r2,1
    1d3c:	e0bff815 	stw	r2,-32(fp)
    1d40:	e0bff817 	ldw	r2,-32(fp)
    1d44:	108000d0 	cmplti	r2,r2,3
    1d48:	103fca1e 	bne	r2,zero,1c74 <readTextClassifier+0x1c8>
		}
	      else
		break;
	      w_index++;
	    } /* end of k loop */
	  if (fgets (mystring , 12 , fp) != NULL)
    1d4c:	e13ffd04 	addi	r4,fp,-12
    1d50:	01400304 	movi	r5,12
    1d54:	e1bff217 	ldw	r6,-56(fp)
    1d58:	0011b600 	call	11b60 <fgets>
    1d5c:	1004c03a 	cmpne	r2,r2,zero
    1d60:	10803fcc 	andi	r2,r2,255
    1d64:	1005003a 	cmpeq	r2,r2,zero
    1d68:	1000551e 	bne	r2,zero,1ec0 <readTextClassifier+0x414>
	    tree_thresh_array[tree_index]= atoi(mystring);
    1d6c:	e0bff417 	ldw	r2,-48(fp)
    1d70:	1085883a 	add	r2,r2,r2
    1d74:	1085883a 	add	r2,r2,r2
    1d78:	1007883a 	mov	r3,r2
    1d7c:	d0a70717 	ldw	r2,-25572(gp)
    1d80:	18a1883a 	add	r16,r3,r2
    1d84:	e13ffd04 	addi	r4,fp,-12
    1d88:	00116b80 	call	116b8 <atoi>
    1d8c:	80800015 	stw	r2,0(r16)
	  else
	    break;
	  if (fgets (mystring , 12 , fp) != NULL)
    1d90:	e13ffd04 	addi	r4,fp,-12
    1d94:	01400304 	movi	r5,12
    1d98:	e1bff217 	ldw	r6,-56(fp)
    1d9c:	0011b600 	call	11b60 <fgets>
    1da0:	1004c03a 	cmpne	r2,r2,zero
    1da4:	10803fcc 	andi	r2,r2,255
    1da8:	1005003a 	cmpeq	r2,r2,zero
    1dac:	1000441e 	bne	r2,zero,1ec0 <readTextClassifier+0x414>
	    alpha1_array[tree_index]= atoi(mystring);
    1db0:	e0bff417 	ldw	r2,-48(fp)
    1db4:	1085883a 	add	r2,r2,r2
    1db8:	1085883a 	add	r2,r2,r2
    1dbc:	1007883a 	mov	r3,r2
    1dc0:	d0a70817 	ldw	r2,-25568(gp)
    1dc4:	18a1883a 	add	r16,r3,r2
    1dc8:	e13ffd04 	addi	r4,fp,-12
    1dcc:	00116b80 	call	116b8 <atoi>
    1dd0:	80800015 	stw	r2,0(r16)
	  else
	    break;
	  if (fgets (mystring , 12 , fp) != NULL)
    1dd4:	e13ffd04 	addi	r4,fp,-12
    1dd8:	01400304 	movi	r5,12
    1ddc:	e1bff217 	ldw	r6,-56(fp)
    1de0:	0011b600 	call	11b60 <fgets>
    1de4:	1004c03a 	cmpne	r2,r2,zero
    1de8:	10803fcc 	andi	r2,r2,255
    1dec:	1005003a 	cmpeq	r2,r2,zero
    1df0:	1000331e 	bne	r2,zero,1ec0 <readTextClassifier+0x414>
	    alpha2_array[tree_index]= atoi(mystring);
    1df4:	e0bff417 	ldw	r2,-48(fp)
    1df8:	1085883a 	add	r2,r2,r2
    1dfc:	1085883a 	add	r2,r2,r2
    1e00:	1007883a 	mov	r3,r2
    1e04:	d0a70917 	ldw	r2,-25564(gp)
    1e08:	18a1883a 	add	r16,r3,r2
    1e0c:	e13ffd04 	addi	r4,fp,-12
    1e10:	00116b80 	call	116b8 <atoi>
    1e14:	80800015 	stw	r2,0(r16)
	  else
	    break;
	  tree_index++;
    1e18:	e0bff417 	ldw	r2,-48(fp)
    1e1c:	10800044 	addi	r2,r2,1
    1e20:	e0bff415 	stw	r2,-48(fp)
	  if (j == stages_array[i]-1)
    1e24:	e0bffa17 	ldw	r2,-24(fp)
    1e28:	1085883a 	add	r2,r2,r2
    1e2c:	1085883a 	add	r2,r2,r2
    1e30:	1007883a 	mov	r3,r2
    1e34:	d0a70317 	ldw	r2,-25588(gp)
    1e38:	1885883a 	add	r2,r3,r2
    1e3c:	10800017 	ldw	r2,0(r2)
    1e40:	10ffffc4 	addi	r3,r2,-1
    1e44:	e0bff917 	ldw	r2,-28(fp)
    1e48:	1880111e 	bne	r3,r2,1e90 <readTextClassifier+0x3e4>
	    {
	      if (fgets (mystring , 12 , fp) != NULL)
    1e4c:	e13ffd04 	addi	r4,fp,-12
    1e50:	01400304 	movi	r5,12
    1e54:	e1bff217 	ldw	r6,-56(fp)
    1e58:	0011b600 	call	11b60 <fgets>
    1e5c:	1004c03a 	cmpne	r2,r2,zero
    1e60:	10803fcc 	andi	r2,r2,255
    1e64:	1005003a 	cmpeq	r2,r2,zero
    1e68:	1000151e 	bne	r2,zero,1ec0 <readTextClassifier+0x414>
		stages_thresh_array[i] = atoi(mystring);
    1e6c:	e0bffa17 	ldw	r2,-24(fp)
    1e70:	1085883a 	add	r2,r2,r2
    1e74:	1085883a 	add	r2,r2,r2
    1e78:	1007883a 	mov	r3,r2
    1e7c:	d0a70a17 	ldw	r2,-25560(gp)
    1e80:	18a1883a 	add	r16,r3,r2
    1e84:	e13ffd04 	addi	r4,fp,-12
    1e88:	00116b80 	call	116b8 <atoi>
    1e8c:	80800015 	stw	r2,0(r16)
   ******************************************/

  /* loop over n of stages */
  for (i = 0; i < stages; i++)
    {    /* loop over n of trees */
      for (j = 0; j < stages_array[i]; j++)
    1e90:	e0bff917 	ldw	r2,-28(fp)
    1e94:	10800044 	addi	r2,r2,1
    1e98:	e0bff915 	stw	r2,-28(fp)
    1e9c:	e0bffa17 	ldw	r2,-24(fp)
    1ea0:	1085883a 	add	r2,r2,r2
    1ea4:	1085883a 	add	r2,r2,r2
    1ea8:	1007883a 	mov	r3,r2
    1eac:	d0a70317 	ldw	r2,-25588(gp)
    1eb0:	1885883a 	add	r2,r3,r2
    1eb4:	10c00017 	ldw	r3,0(r2)
    1eb8:	e0bff917 	ldw	r2,-28(fp)
    1ebc:	10ff6b16 	blt	r2,r3,1c6c <readTextClassifier+0x1c0>
   * 17: alpha 1 of the filter
   * 18: alpha 2 of the filter
   ******************************************/

  /* loop over n of stages */
  for (i = 0; i < stages; i++)
    1ec0:	e0bffa17 	ldw	r2,-24(fp)
    1ec4:	10800044 	addi	r2,r2,1
    1ec8:	e0bffa15 	stw	r2,-24(fp)
    1ecc:	e0fffa17 	ldw	r3,-24(fp)
    1ed0:	e0bffc17 	ldw	r2,-16(fp)
    1ed4:	18bf6316 	blt	r3,r2,1c64 <readTextClassifier+0x1b8>
	      else
		break;
	    }
	} /* end of j loop */
    } /* end of i loop */
  fclose(fp);
    1ed8:	e13ff217 	ldw	r4,-56(fp)
    1edc:	00117d40 	call	117d4 <fclose>
}
    1ee0:	e037883a 	mov	sp,fp
    1ee4:	dfc00217 	ldw	ra,8(sp)
    1ee8:	df000117 	ldw	fp,4(sp)
    1eec:	dc000017 	ldw	r16,0(sp)
    1ef0:	dec00304 	addi	sp,sp,12
    1ef4:	f800283a 	ret

00001ef8 <_Z18ScaleImage_InvokerP9myCascadefiiRSt6vectorI6MyRectSaIS2_EE>:
    } /* end of i loop */
  return 1;
}


void ScaleImage_Invoker( myCascade* _cascade, float _factor, int sum_row, int sum_col, std::vector<MyRect>& _vec)
    1ef8:	deffe604 	addi	sp,sp,-104
    1efc:	dfc01915 	stw	ra,100(sp)
    1f00:	df001815 	stw	fp,96(sp)
    1f04:	df001804 	addi	fp,sp,96
    1f08:	e13ffc15 	stw	r4,-16(fp)
    1f0c:	e17ffd15 	stw	r5,-12(fp)
    1f10:	e1bffe15 	stw	r6,-8(fp)
    1f14:	e1ffff15 	stw	r7,-4(fp)
{

  myCascade* cascade = _cascade;
    1f18:	e0bffc17 	ldw	r2,-16(fp)
    1f1c:	e0bff115 	stw	r2,-60(fp)

  float factor = _factor;
    1f20:	e0bffd17 	ldw	r2,-12(fp)
    1f24:	e0bff015 	stw	r2,-64(fp)
  MyPoint p;
  int result;
  int y1, y2, x2, x, y, step;
  std::vector<MyRect> *vec = &_vec;
    1f28:	e0800217 	ldw	r2,8(fp)
    1f2c:	e0bfe815 	stw	r2,-96(fp)

  MySize winSize0 = cascade->orig_window_size;
    1f30:	e13ff117 	ldw	r4,-60(fp)
    1f34:	20800317 	ldw	r2,12(r4)
    1f38:	20c00417 	ldw	r3,16(r4)
    1f3c:	e0bff415 	stw	r2,-48(fp)
    1f40:	e0fff515 	stw	r3,-44(fp)
  MySize winSize;

  winSize.width =  myRound(winSize0.width*factor);
    1f44:	e13ff417 	ldw	r4,-48(fp)
    1f48:	000fa2c0 	call	fa2c <__floatsisf>
    1f4c:	1009883a 	mov	r4,r2
    1f50:	e17ff017 	ldw	r5,-64(fp)
    1f54:	000f5e80 	call	f5e8 <__mulsf3>
    1f58:	1009883a 	mov	r4,r2
    1f5c:	00024b80 	call	24b8 <_Z7myRoundf>
    1f60:	e0bff615 	stw	r2,-40(fp)
  winSize.height =  myRound(winSize0.height*factor);
    1f64:	e13ff517 	ldw	r4,-44(fp)
    1f68:	000fa2c0 	call	fa2c <__floatsisf>
    1f6c:	1009883a 	mov	r4,r2
    1f70:	e17ff017 	ldw	r5,-64(fp)
    1f74:	000f5e80 	call	f5e8 <__mulsf3>
    1f78:	1009883a 	mov	r4,r2
    1f7c:	00024b80 	call	24b8 <_Z7myRoundf>
    1f80:	e0bff715 	stw	r2,-36(fp)
  y1 = 0;
    1f84:	e03fee15 	stw	zero,-72(fp)

  /********************************************
  * When filter window shifts to image boarder,
  * some margin need to be kept
  *********************************************/
  y2 = sum_row - winSize0.height;
    1f88:	e0fff517 	ldw	r3,-44(fp)
    1f8c:	e0bffe17 	ldw	r2,-8(fp)
    1f90:	10c5c83a 	sub	r2,r2,r3
    1f94:	e0bfed15 	stw	r2,-76(fp)
  x2 = sum_col - winSize0.width;
    1f98:	e0fff417 	ldw	r3,-48(fp)
    1f9c:	e0bfff17 	ldw	r2,-4(fp)
    1fa0:	10c5c83a 	sub	r2,r2,r3
    1fa4:	e0bfec15 	stw	r2,-80(fp)
   * unless you want to change input image.
   *
   * The step size is set to 1 for 5kk73,
   * i.e., shift the filter window by 1 pixel.
   *******************************************/	
  step = 1;
    1fa8:	00800044 	movi	r2,1
    1fac:	e0bfe915 	stw	r2,-92(fp)
   * Some random hints (may or may not work):
   * Split or duplicate data structure.
   * Merge functions/loops to increase locality
   * Tiling to increase computation-to-memory ratio
   *********************************************/
  for( x = 0; x <= x2; x += step )
    1fb0:	e03feb15 	stw	zero,-84(fp)
    1fb4:	00003606 	br	2090 <_Z18ScaleImage_InvokerP9myCascadefiiRSt6vectorI6MyRectSaIS2_EE+0x198>
    for( y = y1; y <= y2; y += step )
    1fb8:	e0bfee17 	ldw	r2,-72(fp)
    1fbc:	e0bfea15 	stw	r2,-88(fp)
    1fc0:	00002c06 	br	2074 <_Z18ScaleImage_InvokerP9myCascadefiiRSt6vectorI6MyRectSaIS2_EE+0x17c>
      {
	p.x = x;
    1fc4:	e0bfeb17 	ldw	r2,-84(fp)
    1fc8:	e0bff215 	stw	r2,-56(fp)
	p.y = y;
    1fcc:	e0bfea17 	ldw	r2,-88(fp)
    1fd0:	e0bff315 	stw	r2,-52(fp)

	/*********************************************
	 * Optimization Oppotunity:
	 * The same cascade filter is used each time
	 ********************************************/
	result = runCascadeClassifier( cascade, p, 0 );
    1fd4:	e13ff117 	ldw	r4,-60(fp)
    1fd8:	e17ff217 	ldw	r5,-56(fp)
    1fdc:	e1bff317 	ldw	r6,-52(fp)
    1fe0:	000f883a 	mov	r7,zero
    1fe4:	00013900 	call	1390 <runCascadeClassifier>
    1fe8:	e0bfef15 	stw	r2,-68(fp)
	 * the push_back operation is not possible on GPUs.
	 * The GPU may need to use a simpler data structure,
	 * e.g., an array, to store the coordinates of face,
	 * which can be later memcpy from GPU to CPU to do push_back
	 *******************************************************/
	if( result > 0 )
    1fec:	e0bfef17 	ldw	r2,-68(fp)
    1ff0:	10800050 	cmplti	r2,r2,1
    1ff4:	10001b1e 	bne	r2,zero,2064 <_Z18ScaleImage_InvokerP9myCascadefiiRSt6vectorI6MyRectSaIS2_EE+0x16c>
	  {
	    MyRect r = {myRound(x*factor), myRound(y*factor), winSize.width, winSize.height};
    1ff8:	e03ff815 	stw	zero,-32(fp)
    1ffc:	e03ff915 	stw	zero,-28(fp)
    2000:	e03ffa15 	stw	zero,-24(fp)
    2004:	e03ffb15 	stw	zero,-20(fp)
    2008:	e13feb17 	ldw	r4,-84(fp)
    200c:	000fa2c0 	call	fa2c <__floatsisf>
    2010:	1009883a 	mov	r4,r2
    2014:	e17ff017 	ldw	r5,-64(fp)
    2018:	000f5e80 	call	f5e8 <__mulsf3>
    201c:	1009883a 	mov	r4,r2
    2020:	00024b80 	call	24b8 <_Z7myRoundf>
    2024:	e0bff815 	stw	r2,-32(fp)
    2028:	e13fea17 	ldw	r4,-88(fp)
    202c:	000fa2c0 	call	fa2c <__floatsisf>
    2030:	1009883a 	mov	r4,r2
    2034:	e17ff017 	ldw	r5,-64(fp)
    2038:	000f5e80 	call	f5e8 <__mulsf3>
    203c:	1009883a 	mov	r4,r2
    2040:	00024b80 	call	24b8 <_Z7myRoundf>
    2044:	e0bff915 	stw	r2,-28(fp)
    2048:	e0bff617 	ldw	r2,-40(fp)
    204c:	e0bffa15 	stw	r2,-24(fp)
    2050:	e0bff717 	ldw	r2,-36(fp)
    2054:	e0bffb15 	stw	r2,-20(fp)
	    vec->push_back(r);
    2058:	e17ff804 	addi	r5,fp,-32
    205c:	e13fe817 	ldw	r4,-96(fp)
    2060:	00039240 	call	3924 <_ZNSt6vectorI6MyRectSaIS0_EE9push_backERKS0_>
   * Split or duplicate data structure.
   * Merge functions/loops to increase locality
   * Tiling to increase computation-to-memory ratio
   *********************************************/
  for( x = 0; x <= x2; x += step )
    for( y = y1; y <= y2; y += step )
    2064:	e0bfea17 	ldw	r2,-88(fp)
    2068:	e0ffe917 	ldw	r3,-92(fp)
    206c:	10c5883a 	add	r2,r2,r3
    2070:	e0bfea15 	stw	r2,-88(fp)
    2074:	e0ffea17 	ldw	r3,-88(fp)
    2078:	e0bfed17 	ldw	r2,-76(fp)
    207c:	10ffd10e 	bge	r2,r3,1fc4 <_Z18ScaleImage_InvokerP9myCascadefiiRSt6vectorI6MyRectSaIS2_EE+0xcc>
   * Some random hints (may or may not work):
   * Split or duplicate data structure.
   * Merge functions/loops to increase locality
   * Tiling to increase computation-to-memory ratio
   *********************************************/
  for( x = 0; x <= x2; x += step )
    2080:	e0bfeb17 	ldw	r2,-84(fp)
    2084:	e0ffe917 	ldw	r3,-92(fp)
    2088:	10c5883a 	add	r2,r2,r3
    208c:	e0bfeb15 	stw	r2,-84(fp)
    2090:	e0ffeb17 	ldw	r3,-84(fp)
    2094:	e0bfec17 	ldw	r2,-80(fp)
    2098:	10ffc70e 	bge	r2,r3,1fb8 <_Z18ScaleImage_InvokerP9myCascadefiiRSt6vectorI6MyRectSaIS2_EE+0xc0>
	  {
	    MyRect r = {myRound(x*factor), myRound(y*factor), winSize.width, winSize.height};
	    vec->push_back(r);
	  }
      }
}
    209c:	e037883a 	mov	sp,fp
    20a0:	dfc00117 	ldw	ra,4(sp)
    20a4:	df000017 	ldw	fp,0(sp)
    20a8:	dec00204 	addi	sp,sp,8
    20ac:	f800283a 	ret

000020b0 <detectObjects>:
 * Function: detectObjects
 * Description: It calls all the major steps
 ******************************************************/

std::vector<MyRect> detectObjects( MyImage* _img, MySize minSize, MySize maxSize, myCascade* cascade,
				   float scaleFactor, int minNeighbors)
    20b0:	deffc204 	addi	sp,sp,-248
    20b4:	dfc03d15 	stw	ra,244(sp)
    20b8:	df003c15 	stw	fp,240(sp)
    20bc:	ddc03b15 	stw	r23,236(sp)
    20c0:	dd803a15 	stw	r22,232(sp)
    20c4:	dd403915 	stw	r21,228(sp)
    20c8:	dd003815 	stw	r20,224(sp)
    20cc:	dcc03715 	stw	r19,220(sp)
    20d0:	dc803615 	stw	r18,216(sp)
    20d4:	dc403515 	stw	r17,212(sp)
    20d8:	dc003415 	stw	r16,208(sp)
    20dc:	df003404 	addi	fp,sp,208
    20e0:	e13ffe15 	stw	r4,-8(fp)
    20e4:	e17fec15 	stw	r5,-80(fp)
    20e8:	e1bfed15 	stw	r6,-76(fp)
    20ec:	e1ffee15 	stw	r7,-72(fp)
    20f0:	00800074 	movhi	r2,1
    20f4:	10b95604 	addi	r2,r2,-6824
    20f8:	e0bff515 	stw	r2,-44(fp)
    20fc:	008000b4 	movhi	r2,2
    2100:	10b90a04 	addi	r2,r2,-7128
    2104:	e0bff615 	stw	r2,-40(fp)
    2108:	e0bff704 	addi	r2,fp,-36
    210c:	e0ffcd04 	addi	r3,fp,-204
    2110:	10c00015 	stw	r3,0(r2)
    2114:	00c00034 	movhi	r3,0
    2118:	18c90704 	addi	r3,r3,9244
    211c:	10c00115 	stw	r3,4(r2)
    2120:	16c00215 	stw	sp,8(r2)
    2124:	e13fef04 	addi	r4,fp,-68
    2128:	00108500 	call	10850 <_Unwind_SjLj_Register>
{

  /* group overlaping windows */
  const float GROUP_EPS = 0.4f;
    212c:	008fb374 	movhi	r2,16077
    2130:	10b33344 	addi	r2,r2,-13107
    2134:	e0bfd215 	stw	r2,-184(fp)
  /* pointer to input image */
  MyImage *img = _img;
    2138:	e0bfec17 	ldw	r2,-80(fp)
    213c:	e0bfd115 	stw	r2,-188(fp)
   **********************************/
  MyImage image1Obj;
  MyIntImage sum1Obj;
  MyIntImage sqsum1Obj;
  /* pointers for the created structs */
  MyImage *img1 = &image1Obj;
    2140:	e0bfd404 	addi	r2,fp,-176
    2144:	e0bfd015 	stw	r2,-192(fp)
  MyIntImage *sum1 = &sum1Obj;
    2148:	e0bfd904 	addi	r2,fp,-156
    214c:	e0bfcf15 	stw	r2,-196(fp)
  MyIntImage *sqsum1 = &sqsum1Obj;
    2150:	e0bfdd04 	addi	r2,fp,-140
    2154:	e0bfce15 	stw	r2,-200(fp)
   *
   * Each element of the std::vector is a "MyRect" struct 
   * MyRect struct keeps the info of a rectangle (see haar.h)
   * The rectangle contains one face candidate 
   *****************************************************/
  std::vector<MyRect> allCandidates;
    2158:	e0bffe17 	ldw	r2,-8(fp)
    215c:	e0bffd15 	stw	r2,-12(fp)
    2160:	e13fd304 	addi	r4,fp,-180
    2164:	00029600 	call	2960 <_ZNSaI6MyRectEC1Ev>
    2168:	e17fd304 	addi	r5,fp,-180
    216c:	e13ffd17 	ldw	r4,-12(fp)
    2170:	0002c000 	call	2c00 <_ZNSt6vectorI6MyRectSaIS0_EEC1ERKS1_>
    2174:	e13fd304 	addi	r4,fp,-180
    2178:	00029b00 	call	29b0 <_ZNSaI6MyRectED1Ev>

  /* scaling factor */
  float factor;

  /* maxSize */
  if( maxSize.height == 0 || maxSize.width == 0 )
    217c:	e0800b17 	ldw	r2,44(fp)
    2180:	1005003a 	cmpeq	r2,r2,zero
    2184:	1000031e 	bne	r2,zero,2194 <detectObjects+0xe4>
    2188:	e0800a17 	ldw	r2,40(fp)
    218c:	1004c03a 	cmpne	r2,r2,zero
    2190:	1000061e 	bne	r2,zero,21ac <detectObjects+0xfc>
    {
      maxSize.height = img->height;
    2194:	e0bfd117 	ldw	r2,-188(fp)
    2198:	10800117 	ldw	r2,4(r2)
    219c:	e0800b15 	stw	r2,44(fp)
      maxSize.width = img->width;
    21a0:	e0bfd117 	ldw	r2,-188(fp)
    21a4:	10800017 	ldw	r2,0(r2)
    21a8:	e0800a15 	stw	r2,40(fp)
    }

  /* window size of the training set */
  MySize winSize0 = cascade->orig_window_size;
    21ac:	e1000c17 	ldw	r4,48(fp)
    21b0:	20800317 	ldw	r2,12(r4)
    21b4:	20c00417 	ldw	r3,16(r4)
    21b8:	e0bfe415 	stw	r2,-112(fp)
    21bc:	e0ffe515 	stw	r3,-108(fp)

  /* malloc for img1: unsigned char */
  createImage(img->width, img->height, img1);
    21c0:	e0bfd117 	ldw	r2,-188(fp)
    21c4:	11000017 	ldw	r4,0(r2)
    21c8:	e0bfd117 	ldw	r2,-188(fp)
    21cc:	11400117 	ldw	r5,4(r2)
    21d0:	00800044 	movi	r2,1
    21d4:	e0bff015 	stw	r2,-64(fp)
    21d8:	e1bfd017 	ldw	r6,-192(fp)
    21dc:	00008880 	call	888 <createImage>
  /* malloc for sum1: unsigned char */
  createSumImage(img->width, img->height, sum1);
    21e0:	e0bfd117 	ldw	r2,-188(fp)
    21e4:	11000017 	ldw	r4,0(r2)
    21e8:	e0bfd117 	ldw	r2,-188(fp)
    21ec:	11400117 	ldw	r5,4(r2)
    21f0:	e1bfcf17 	ldw	r6,-196(fp)
    21f4:	00008fc0 	call	8fc <createSumImage>
  /* malloc for sqsum1: unsigned char */
  createSumImage(img->width, img->height, sqsum1);
    21f8:	e0bfd117 	ldw	r2,-188(fp)
    21fc:	11000017 	ldw	r4,0(r2)
    2200:	e0bfd117 	ldw	r2,-188(fp)
    2204:	11400117 	ldw	r5,4(r2)
    2208:	e1bfce17 	ldw	r6,-200(fp)
    220c:	00008fc0 	call	8fc <createSumImage>

  /* initial scaling factor */
  factor = 1;
    2210:	008fe034 	movhi	r2,16256
    2214:	e0bfcd15 	stw	r2,-204(fp)

  /* iterate over the image pyramid */
  for( factor = 1; ; factor *= scaleFactor )
    2218:	008fe034 	movhi	r2,16256
    221c:	e0bfcd15 	stw	r2,-204(fp)
    {
      /* iteration counter */
      iter_counter++;
    2220:	d0a70217 	ldw	r2,-25592(gp)
    2224:	10800044 	addi	r2,r2,1
    2228:	d0a70215 	stw	r2,-25592(gp)

      /* size of the image scaled up */
      MySize winSize = { myRound(winSize0.width*factor), myRound(winSize0.height*factor) };
    222c:	e03fe615 	stw	zero,-104(fp)
    2230:	e03fe715 	stw	zero,-100(fp)
    2234:	e13fe417 	ldw	r4,-112(fp)
    2238:	000fa2c0 	call	fa2c <__floatsisf>
    223c:	1009883a 	mov	r4,r2
    2240:	e17fcd17 	ldw	r5,-204(fp)
    2244:	000f5e80 	call	f5e8 <__mulsf3>
    2248:	1009883a 	mov	r4,r2
    224c:	00024b80 	call	24b8 <_Z7myRoundf>
    2250:	e0bfe615 	stw	r2,-104(fp)
    2254:	e13fe517 	ldw	r4,-108(fp)
    2258:	000fa2c0 	call	fa2c <__floatsisf>
    225c:	1009883a 	mov	r4,r2
    2260:	e17fcd17 	ldw	r5,-204(fp)
    2264:	000f5e80 	call	f5e8 <__mulsf3>
    2268:	1009883a 	mov	r4,r2
    226c:	00024b80 	call	24b8 <_Z7myRoundf>
    2270:	e0bfe715 	stw	r2,-100(fp)

      /* size of the image scaled down (from bigger to smaller) */
      MySize sz = { ( img->width/factor ), ( img->height/factor ) };
    2274:	e03fe815 	stw	zero,-96(fp)
    2278:	e03fe915 	stw	zero,-92(fp)
    227c:	e0bfd117 	ldw	r2,-188(fp)
    2280:	11000017 	ldw	r4,0(r2)
    2284:	000fa2c0 	call	fa2c <__floatsisf>
    2288:	1009883a 	mov	r4,r2
    228c:	e17fcd17 	ldw	r5,-204(fp)
    2290:	000f7c80 	call	f7c8 <__divsf3>
    2294:	1009883a 	mov	r4,r2
    2298:	000fac40 	call	fac4 <__fixsfsi>
    229c:	e0bfe815 	stw	r2,-96(fp)
    22a0:	e0bfd117 	ldw	r2,-188(fp)
    22a4:	11000117 	ldw	r4,4(r2)
    22a8:	000fa2c0 	call	fa2c <__floatsisf>
    22ac:	1009883a 	mov	r4,r2
    22b0:	e17fcd17 	ldw	r5,-204(fp)
    22b4:	000f7c80 	call	f7c8 <__divsf3>
    22b8:	1009883a 	mov	r4,r2
    22bc:	000fac40 	call	fac4 <__fixsfsi>
    22c0:	e0bfe915 	stw	r2,-92(fp)

      /* difference between sizes of the scaled image and the original detection window */
      MySize sz1 = { sz.width - winSize0.width, sz.height - winSize0.height };
    22c4:	e03fea15 	stw	zero,-88(fp)
    22c8:	e03feb15 	stw	zero,-84(fp)
    22cc:	e0ffe817 	ldw	r3,-96(fp)
    22d0:	e0bfe417 	ldw	r2,-112(fp)
    22d4:	1885c83a 	sub	r2,r3,r2
    22d8:	e0bfea15 	stw	r2,-88(fp)
    22dc:	e0ffe917 	ldw	r3,-92(fp)
    22e0:	e0bfe517 	ldw	r2,-108(fp)
    22e4:	1885c83a 	sub	r2,r3,r2
    22e8:	e0bfeb15 	stw	r2,-84(fp)

      /* if the actual scaled image is smaller than the original detection window, break */
      if( sz1.width < 0 || sz1.height < 0 )
    22ec:	e0bfea17 	ldw	r2,-88(fp)
    22f0:	1004803a 	cmplt	r2,r2,zero
    22f4:	1000031e 	bne	r2,zero,2304 <detectObjects+0x254>
    22f8:	e0bfeb17 	ldw	r2,-84(fp)
    22fc:	1004403a 	cmpge	r2,r2,zero
    2300:	1000041e 	bne	r2,zero,2314 <detectObjects+0x264>
       ***************************************************/
      ScaleImage_Invoker(cascade, factor, sum1->height, sum1->width,
			 allCandidates);
    } /* end of the factor loop, finish all scales in pyramid*/

  if( minNeighbors != 0)
    2304:	e0800e17 	ldw	r2,56(fp)
    2308:	1004c03a 	cmpne	r2,r2,zero
    230c:	1000331e 	bne	r2,zero,23dc <detectObjects+0x32c>
    2310:	00003906 	br	23f8 <detectObjects+0x348>
      /* if the actual scaled image is smaller than the original detection window, break */
      if( sz1.width < 0 || sz1.height < 0 )
	break;

      /* if a minSize different from the original detection window is specified, continue to the next scaling */
      if( winSize.width < minSize.width || winSize.height < minSize.height )
    2314:	e0ffe617 	ldw	r3,-104(fp)
    2318:	e0bfed17 	ldw	r2,-76(fp)
    231c:	18802a16 	blt	r3,r2,23c8 <detectObjects+0x318>
    2320:	e0ffe717 	ldw	r3,-100(fp)
    2324:	e0bfee17 	ldw	r2,-72(fp)
    2328:	1880010e 	bge	r3,r2,2330 <detectObjects+0x280>
	continue;
    232c:	00002606 	br	23c8 <detectObjects+0x318>
       * img1: normal image (unsigned char)
       * sum1: integral image (int)
       * sqsum1: squared integral image (int)
       * see image.c for details
       ************************************/
      setImage(sz.width, sz.height, img1);
    2330:	e13fe817 	ldw	r4,-96(fp)
    2334:	e17fe917 	ldw	r5,-92(fp)
    2338:	00800044 	movi	r2,1
    233c:	e0bff015 	stw	r2,-64(fp)
    2340:	e1bfd017 	ldw	r6,-192(fp)
    2344:	0000a400 	call	a40 <setImage>
      setSumImage(sz.width, sz.height, sum1);
    2348:	e13fe817 	ldw	r4,-96(fp)
    234c:	e17fe917 	ldw	r5,-92(fp)
    2350:	e1bfcf17 	ldw	r6,-196(fp)
    2354:	0000a800 	call	a80 <setSumImage>
      setSumImage(sz.width, sz.height, sqsum1);
    2358:	e13fe817 	ldw	r4,-96(fp)
    235c:	e17fe917 	ldw	r5,-92(fp)
    2360:	e1bfce17 	ldw	r6,-200(fp)
    2364:	0000a800 	call	a80 <setSumImage>
      /***************************************
       * Compute-intensive step:
       * building image pyramid by downsampling
       * downsampling using nearest neighbor
       **************************************/
      nearestNeighbor(img, img1);
    2368:	e13fd117 	ldw	r4,-188(fp)
    236c:	e17fd017 	ldw	r5,-192(fp)
    2370:	00018cc0 	call	18cc <_Z15nearestNeighborP7MyImageS0_>
      /***************************************************
       * Compute-intensive step:
       * At each scale of the image pyramid,
       * compute a new integral and squared integral image
       ***************************************************/
      integralImages(img1, sum1, sqsum1);
    2374:	e13fd017 	ldw	r4,-192(fp)
    2378:	e17fcf17 	ldw	r5,-196(fp)
    237c:	e1bfce17 	ldw	r6,-200(fp)
    2380:	00016dc0 	call	16dc <_Z14integralImagesP7MyImageP10MyIntImageS2_>
       * 
       * This function loads the four corners,
       * but does not do compuation based on four coners.
       * The computation is done next in ScaleImage_Invoker
       *************************************************/
      setImageForCascadeClassifier( cascade, sum1, sqsum1);
    2384:	e1000c17 	ldw	r4,48(fp)
    2388:	e17fcf17 	ldw	r5,-196(fp)
    238c:	e1bfce17 	ldw	r6,-200(fp)
    2390:	0000b880 	call	b88 <setImageForCascadeClassifier>

      /* print out for each scale of the image pyramid */
      printf("detecting faces, iter := %d\n", iter_counter);
    2394:	d1670217 	ldw	r5,-25592(gp)
    2398:	010000b4 	movhi	r4,2
    239c:	2139ef04 	addi	r4,r4,-6212
    23a0:	0013cb40 	call	13cb4 <printf>
       * The main computations are invoked by this function.
       * Optimization oppurtunity:
       * the same cascade filter is invoked each time
       ***************************************************/
      ScaleImage_Invoker(cascade, factor, sum1->height, sum1->width,
			 allCandidates);
    23a4:	e0bfcf17 	ldw	r2,-196(fp)
    23a8:	11800117 	ldw	r6,4(r2)
    23ac:	e0bfcf17 	ldw	r2,-196(fp)
    23b0:	11c00017 	ldw	r7,0(r2)
    23b4:	e0bffe17 	ldw	r2,-8(fp)
    23b8:	d8800015 	stw	r2,0(sp)
    23bc:	e1000c17 	ldw	r4,48(fp)
    23c0:	e17fcd17 	ldw	r5,-204(fp)
    23c4:	0001ef80 	call	1ef8 <_Z18ScaleImage_InvokerP9myCascadefiiRSt6vectorI6MyRectSaIS2_EE>

  /* initial scaling factor */
  factor = 1;

  /* iterate over the image pyramid */
  for( factor = 1; ; factor *= scaleFactor )
    23c8:	e13fcd17 	ldw	r4,-204(fp)
    23cc:	e1400d17 	ldw	r5,52(fp)
    23d0:	000f5e80 	call	f5e8 <__mulsf3>
    23d4:	e0bfcd15 	stw	r2,-204(fp)
    23d8:	003f9106 	br	2220 <detectObjects+0x170>
			 allCandidates);
    } /* end of the factor loop, finish all scales in pyramid*/

  if( minNeighbors != 0)
    {
      groupRectangles(allCandidates, minNeighbors, GROUP_EPS);
    23dc:	e13ffe17 	ldw	r4,-8(fp)
    23e0:	00800044 	movi	r2,1
    23e4:	e0bff015 	stw	r2,-64(fp)
    23e8:	e1400e17 	ldw	r5,56(fp)
    23ec:	018fb374 	movhi	r6,16077
    23f0:	31b33344 	addi	r6,r6,-13107
    23f4:	00050c80 	call	50c8 <groupRectangles>
    }

  freeImage(img1);
    23f8:	00800044 	movi	r2,1
    23fc:	e0bff015 	stw	r2,-64(fp)
    2400:	e13fd017 	ldw	r4,-192(fp)
    2404:	00009780 	call	978 <freeImage>
  freeSumImage(sum1);
    2408:	e13fcf17 	ldw	r4,-196(fp)
    240c:	00009dc0 	call	9dc <freeSumImage>
  freeSumImage(sqsum1);
    2410:	e13fce17 	ldw	r4,-200(fp)
    2414:	00009dc0 	call	9dc <freeSumImage>
    2418:	00000d06 	br	2450 <detectObjects+0x3a0>
    241c:	e7003304 	addi	fp,fp,204
    2420:	e0fff117 	ldw	r3,-60(fp)
    2424:	e0ffff15 	stw	r3,-4(fp)
    2428:	e0bfff17 	ldw	r2,-4(fp)
    242c:	e0bffc15 	stw	r2,-16(fp)
  return allCandidates;
    2430:	e13ffe17 	ldw	r4,-8(fp)
    2434:	0003a0c0 	call	3a0c <_ZNSt6vectorI6MyRectSaIS0_EED1Ev>
    2438:	e0fffc17 	ldw	r3,-16(fp)
    243c:	e0ffff15 	stw	r3,-4(fp)
    2440:	00bfffc4 	movi	r2,-1
    2444:	e0bff015 	stw	r2,-64(fp)
    2448:	e13fff17 	ldw	r4,-4(fp)
    244c:	0010b1c0 	call	10b1c <_Unwind_SjLj_Resume>
    2450:	e13fef04 	addi	r4,fp,-68
    2454:	00108600 	call	10860 <_Unwind_SjLj_Unregister>

}
    2458:	e0bffe17 	ldw	r2,-8(fp)
    245c:	e037883a 	mov	sp,fp
    2460:	dfc00917 	ldw	ra,36(sp)
    2464:	df000817 	ldw	fp,32(sp)
    2468:	ddc00717 	ldw	r23,28(sp)
    246c:	dd800617 	ldw	r22,24(sp)
    2470:	dd400517 	ldw	r21,20(sp)
    2474:	dd000417 	ldw	r20,16(sp)
    2478:	dcc00317 	ldw	r19,12(sp)
    247c:	dc800217 	ldw	r18,8(sp)
    2480:	dc400117 	ldw	r17,4(sp)
    2484:	dc000017 	ldw	r16,0(sp)
    2488:	dec00a04 	addi	sp,sp,40
    248c:	f800283a 	ret

00002490 <_ZnwmPv>:
void* operator new[](std::size_t, const std::nothrow_t&) throw();
void operator delete(void*, const std::nothrow_t&) throw();
void operator delete[](void*, const std::nothrow_t&) throw();

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) throw() { return __p; }
    2490:	defffd04 	addi	sp,sp,-12
    2494:	df000215 	stw	fp,8(sp)
    2498:	df000204 	addi	fp,sp,8
    249c:	e13ffe15 	stw	r4,-8(fp)
    24a0:	e17fff15 	stw	r5,-4(fp)
    24a4:	e0bfff17 	ldw	r2,-4(fp)
    24a8:	e037883a 	mov	sp,fp
    24ac:	df000017 	ldw	fp,0(sp)
    24b0:	dec00104 	addi	sp,sp,4
    24b4:	f800283a 	ret

000024b8 <_Z7myRoundf>:
    return a;
  else
    return b;
}

inline  int  myRound( float value )
    24b8:	defff904 	addi	sp,sp,-28
    24bc:	dfc00615 	stw	ra,24(sp)
    24c0:	df000515 	stw	fp,20(sp)
    24c4:	df000504 	addi	fp,sp,20
    24c8:	e13ffb15 	stw	r4,-20(fp)
{
  return (int)(value + (value >= 0 ? 0.5 : -0.5));
    24cc:	e13ffb17 	ldw	r4,-20(fp)
    24d0:	000fb580 	call	fb58 <__extendsfdf2>
    24d4:	e0bffe15 	stw	r2,-8(fp)
    24d8:	e0ffff15 	stw	r3,-4(fp)
    24dc:	e13ffb17 	ldw	r4,-20(fp)
    24e0:	000b883a 	mov	r5,zero
    24e4:	000f93c0 	call	f93c <__gesf2>
    24e8:	1004403a 	cmpge	r2,r2,zero
    24ec:	1000011e 	bne	r2,zero,24f4 <_Z7myRoundf+0x3c>
    24f0:	00000506 	br	2508 <_Z7myRoundf+0x50>
    24f4:	0005883a 	mov	r2,zero
    24f8:	e0bffc15 	stw	r2,-16(fp)
    24fc:	008ff834 	movhi	r2,16352
    2500:	e0bffd15 	stw	r2,-12(fp)
    2504:	00000406 	br	2518 <_Z7myRoundf+0x60>
    2508:	0005883a 	mov	r2,zero
    250c:	e0bffc15 	stw	r2,-16(fp)
    2510:	00aff834 	movhi	r2,49120
    2514:	e0bffd15 	stw	r2,-12(fp)
    2518:	e13ffe17 	ldw	r4,-8(fp)
    251c:	e17fff17 	ldw	r5,-4(fp)
    2520:	e1bffc17 	ldw	r6,-16(fp)
    2524:	e1fffd17 	ldw	r7,-12(fp)
    2528:	001003c0 	call	1003c <__adddf3>
    252c:	1009883a 	mov	r4,r2
    2530:	180b883a 	mov	r5,r3
    2534:	2005883a 	mov	r2,r4
    2538:	2807883a 	mov	r3,r5
    253c:	1009883a 	mov	r4,r2
    2540:	180b883a 	mov	r5,r3
    2544:	00105f40 	call	105f4 <__fixdfsi>
}
    2548:	e037883a 	mov	sp,fp
    254c:	dfc00117 	ldw	ra,4(sp)
    2550:	df000017 	ldw	fp,0(sp)
    2554:	dec00204 	addi	sp,sp,8
    2558:	f800283a 	ret

0000255c <_Z18evalWeakClassifieriiiii>:
 * evalWeakClassifier:
 * the actual computation of a haar filter.
 * More info:
 * http://en.wikipedia.org/wiki/Haar-like_features
 ***************************************************/
inline int evalWeakClassifier(int variance_norm_factor, int p_offset, int tree_index, int w_index, int r_index )
    255c:	defff804 	addi	sp,sp,-32
    2560:	df000715 	stw	fp,28(sp)
    2564:	df000704 	addi	fp,sp,28
    2568:	e13ffb15 	stw	r4,-20(fp)
    256c:	e17ffc15 	stw	r5,-16(fp)
    2570:	e1bffd15 	stw	r6,-12(fp)
    2574:	e1fffe15 	stw	r7,-8(fp)
{

  /* the node threshold is multiplied by the standard deviation of the image */
  int t = tree_thresh_array[tree_index] * variance_norm_factor;
    2578:	e0bffd17 	ldw	r2,-12(fp)
    257c:	1085883a 	add	r2,r2,r2
    2580:	1085883a 	add	r2,r2,r2
    2584:	1007883a 	mov	r3,r2
    2588:	d0a70717 	ldw	r2,-25572(gp)
    258c:	1885883a 	add	r2,r3,r2
    2590:	10c00017 	ldw	r3,0(r2)
    2594:	e0bffb17 	ldw	r2,-20(fp)
    2598:	1885383a 	mul	r2,r3,r2
    259c:	e0bffa15 	stw	r2,-24(fp)

  int sum = (*(scaled_rectangles_array[r_index] + p_offset)
	     - *(scaled_rectangles_array[r_index + 1] + p_offset)
	     - *(scaled_rectangles_array[r_index + 2] + p_offset)
	     + *(scaled_rectangles_array[r_index + 3] + p_offset))
    * weights_array[w_index];
    25a0:	e0800117 	ldw	r2,4(fp)
    25a4:	1085883a 	add	r2,r2,r2
    25a8:	1085883a 	add	r2,r2,r2
    25ac:	1007883a 	mov	r3,r2
    25b0:	d0a70517 	ldw	r2,-25580(gp)
    25b4:	1885883a 	add	r2,r3,r2
    25b8:	10c00017 	ldw	r3,0(r2)
    25bc:	e0bffc17 	ldw	r2,-16(fp)
    25c0:	1085883a 	add	r2,r2,r2
    25c4:	1085883a 	add	r2,r2,r2
    25c8:	1885883a 	add	r2,r3,r2
    25cc:	11000017 	ldw	r4,0(r2)
    25d0:	e0800117 	ldw	r2,4(fp)
    25d4:	1085883a 	add	r2,r2,r2
    25d8:	1085883a 	add	r2,r2,r2
    25dc:	1007883a 	mov	r3,r2
    25e0:	d0a70517 	ldw	r2,-25580(gp)
    25e4:	1885883a 	add	r2,r3,r2
    25e8:	10800104 	addi	r2,r2,4
    25ec:	10c00017 	ldw	r3,0(r2)
    25f0:	e0bffc17 	ldw	r2,-16(fp)
    25f4:	1085883a 	add	r2,r2,r2
    25f8:	1085883a 	add	r2,r2,r2
    25fc:	1885883a 	add	r2,r3,r2
    2600:	10800017 	ldw	r2,0(r2)
    2604:	2089c83a 	sub	r4,r4,r2
    2608:	e0800117 	ldw	r2,4(fp)
    260c:	1085883a 	add	r2,r2,r2
    2610:	1085883a 	add	r2,r2,r2
    2614:	1007883a 	mov	r3,r2
    2618:	d0a70517 	ldw	r2,-25580(gp)
    261c:	1885883a 	add	r2,r3,r2
    2620:	10800204 	addi	r2,r2,8
    2624:	10c00017 	ldw	r3,0(r2)
    2628:	e0bffc17 	ldw	r2,-16(fp)
    262c:	1085883a 	add	r2,r2,r2
    2630:	1085883a 	add	r2,r2,r2
    2634:	1885883a 	add	r2,r3,r2
    2638:	10800017 	ldw	r2,0(r2)
    263c:	2089c83a 	sub	r4,r4,r2
    2640:	e0800117 	ldw	r2,4(fp)
    2644:	1085883a 	add	r2,r2,r2
    2648:	1085883a 	add	r2,r2,r2
    264c:	1007883a 	mov	r3,r2
    2650:	d0a70517 	ldw	r2,-25580(gp)
    2654:	1885883a 	add	r2,r3,r2
    2658:	10800304 	addi	r2,r2,12
    265c:	10c00017 	ldw	r3,0(r2)
    2660:	e0bffc17 	ldw	r2,-16(fp)
    2664:	1085883a 	add	r2,r2,r2
    2668:	1085883a 	add	r2,r2,r2
    266c:	1885883a 	add	r2,r3,r2
    2670:	10800017 	ldw	r2,0(r2)
    2674:	2089883a 	add	r4,r4,r2
    2678:	e0bffe17 	ldw	r2,-8(fp)
    267c:	1085883a 	add	r2,r2,r2
    2680:	1085883a 	add	r2,r2,r2
    2684:	1007883a 	mov	r3,r2
    2688:	d0a70617 	ldw	r2,-25576(gp)
    268c:	1885883a 	add	r2,r3,r2
    2690:	10800017 	ldw	r2,0(r2)
    2694:	2085383a 	mul	r2,r4,r2
    2698:	e0bff915 	stw	r2,-28(fp)

  sum += (*(scaled_rectangles_array[r_index+4] + p_offset)
	  - *(scaled_rectangles_array[r_index + 5] + p_offset)
	  - *(scaled_rectangles_array[r_index + 6] + p_offset)
	  + *(scaled_rectangles_array[r_index + 7] + p_offset))
    * weights_array[w_index + 1];
    269c:	e0800117 	ldw	r2,4(fp)
    26a0:	1085883a 	add	r2,r2,r2
    26a4:	1085883a 	add	r2,r2,r2
    26a8:	1007883a 	mov	r3,r2
    26ac:	d0a70517 	ldw	r2,-25580(gp)
    26b0:	1885883a 	add	r2,r3,r2
    26b4:	10800404 	addi	r2,r2,16
    26b8:	10c00017 	ldw	r3,0(r2)
    26bc:	e0bffc17 	ldw	r2,-16(fp)
    26c0:	1085883a 	add	r2,r2,r2
    26c4:	1085883a 	add	r2,r2,r2
    26c8:	1885883a 	add	r2,r3,r2
    26cc:	11000017 	ldw	r4,0(r2)
    26d0:	e0800117 	ldw	r2,4(fp)
    26d4:	1085883a 	add	r2,r2,r2
    26d8:	1085883a 	add	r2,r2,r2
    26dc:	1007883a 	mov	r3,r2
    26e0:	d0a70517 	ldw	r2,-25580(gp)
    26e4:	1885883a 	add	r2,r3,r2
    26e8:	10800504 	addi	r2,r2,20
    26ec:	10c00017 	ldw	r3,0(r2)
    26f0:	e0bffc17 	ldw	r2,-16(fp)
    26f4:	1085883a 	add	r2,r2,r2
    26f8:	1085883a 	add	r2,r2,r2
    26fc:	1885883a 	add	r2,r3,r2
    2700:	10800017 	ldw	r2,0(r2)
    2704:	2089c83a 	sub	r4,r4,r2
    2708:	e0800117 	ldw	r2,4(fp)
    270c:	1085883a 	add	r2,r2,r2
    2710:	1085883a 	add	r2,r2,r2
    2714:	1007883a 	mov	r3,r2
    2718:	d0a70517 	ldw	r2,-25580(gp)
    271c:	1885883a 	add	r2,r3,r2
    2720:	10800604 	addi	r2,r2,24
    2724:	10c00017 	ldw	r3,0(r2)
    2728:	e0bffc17 	ldw	r2,-16(fp)
    272c:	1085883a 	add	r2,r2,r2
    2730:	1085883a 	add	r2,r2,r2
    2734:	1885883a 	add	r2,r3,r2
    2738:	10800017 	ldw	r2,0(r2)
    273c:	2089c83a 	sub	r4,r4,r2
    2740:	e0800117 	ldw	r2,4(fp)
    2744:	1085883a 	add	r2,r2,r2
    2748:	1085883a 	add	r2,r2,r2
    274c:	1007883a 	mov	r3,r2
    2750:	d0a70517 	ldw	r2,-25580(gp)
    2754:	1885883a 	add	r2,r3,r2
    2758:	10800704 	addi	r2,r2,28
    275c:	10c00017 	ldw	r3,0(r2)
    2760:	e0bffc17 	ldw	r2,-16(fp)
    2764:	1085883a 	add	r2,r2,r2
    2768:	1085883a 	add	r2,r2,r2
    276c:	1885883a 	add	r2,r3,r2
    2770:	10800017 	ldw	r2,0(r2)
    2774:	2089883a 	add	r4,r4,r2
    2778:	e0bffe17 	ldw	r2,-8(fp)
    277c:	1085883a 	add	r2,r2,r2
    2780:	1085883a 	add	r2,r2,r2
    2784:	1007883a 	mov	r3,r2
    2788:	d0a70617 	ldw	r2,-25576(gp)
    278c:	1885883a 	add	r2,r3,r2
    2790:	10800104 	addi	r2,r2,4
    2794:	10800017 	ldw	r2,0(r2)
    2798:	2087383a 	mul	r3,r4,r2
    279c:	e0bff917 	ldw	r2,-28(fp)
    27a0:	10c5883a 	add	r2,r2,r3
    27a4:	e0bff915 	stw	r2,-28(fp)

  if ((scaled_rectangles_array[r_index+8] != NULL))
    27a8:	e0800117 	ldw	r2,4(fp)
    27ac:	1085883a 	add	r2,r2,r2
    27b0:	1085883a 	add	r2,r2,r2
    27b4:	1007883a 	mov	r3,r2
    27b8:	d0a70517 	ldw	r2,-25580(gp)
    27bc:	1885883a 	add	r2,r3,r2
    27c0:	10800804 	addi	r2,r2,32
    27c4:	10800017 	ldw	r2,0(r2)
    27c8:	1005003a 	cmpeq	r2,r2,zero
    27cc:	1000431e 	bne	r2,zero,28dc <_Z18evalWeakClassifieriiiii+0x380>
    sum += (*(scaled_rectangles_array[r_index+8] + p_offset)
	    - *(scaled_rectangles_array[r_index + 9] + p_offset)
	    - *(scaled_rectangles_array[r_index + 10] + p_offset)
	    + *(scaled_rectangles_array[r_index + 11] + p_offset))
      * weights_array[w_index + 2];
    27d0:	e0800117 	ldw	r2,4(fp)
    27d4:	1085883a 	add	r2,r2,r2
    27d8:	1085883a 	add	r2,r2,r2
    27dc:	1007883a 	mov	r3,r2
    27e0:	d0a70517 	ldw	r2,-25580(gp)
    27e4:	1885883a 	add	r2,r3,r2
    27e8:	10800804 	addi	r2,r2,32
    27ec:	10c00017 	ldw	r3,0(r2)
    27f0:	e0bffc17 	ldw	r2,-16(fp)
    27f4:	1085883a 	add	r2,r2,r2
    27f8:	1085883a 	add	r2,r2,r2
    27fc:	1885883a 	add	r2,r3,r2
    2800:	11000017 	ldw	r4,0(r2)
    2804:	e0800117 	ldw	r2,4(fp)
    2808:	1085883a 	add	r2,r2,r2
    280c:	1085883a 	add	r2,r2,r2
    2810:	1007883a 	mov	r3,r2
    2814:	d0a70517 	ldw	r2,-25580(gp)
    2818:	1885883a 	add	r2,r3,r2
    281c:	10800904 	addi	r2,r2,36
    2820:	10c00017 	ldw	r3,0(r2)
    2824:	e0bffc17 	ldw	r2,-16(fp)
    2828:	1085883a 	add	r2,r2,r2
    282c:	1085883a 	add	r2,r2,r2
    2830:	1885883a 	add	r2,r3,r2
    2834:	10800017 	ldw	r2,0(r2)
    2838:	2089c83a 	sub	r4,r4,r2
    283c:	e0800117 	ldw	r2,4(fp)
    2840:	1085883a 	add	r2,r2,r2
    2844:	1085883a 	add	r2,r2,r2
    2848:	1007883a 	mov	r3,r2
    284c:	d0a70517 	ldw	r2,-25580(gp)
    2850:	1885883a 	add	r2,r3,r2
    2854:	10800a04 	addi	r2,r2,40
    2858:	10c00017 	ldw	r3,0(r2)
    285c:	e0bffc17 	ldw	r2,-16(fp)
    2860:	1085883a 	add	r2,r2,r2
    2864:	1085883a 	add	r2,r2,r2
    2868:	1885883a 	add	r2,r3,r2
    286c:	10800017 	ldw	r2,0(r2)
    2870:	2089c83a 	sub	r4,r4,r2
    2874:	e0800117 	ldw	r2,4(fp)
    2878:	1085883a 	add	r2,r2,r2
    287c:	1085883a 	add	r2,r2,r2
    2880:	1007883a 	mov	r3,r2
    2884:	d0a70517 	ldw	r2,-25580(gp)
    2888:	1885883a 	add	r2,r3,r2
    288c:	10800b04 	addi	r2,r2,44
    2890:	10c00017 	ldw	r3,0(r2)
    2894:	e0bffc17 	ldw	r2,-16(fp)
    2898:	1085883a 	add	r2,r2,r2
    289c:	1085883a 	add	r2,r2,r2
    28a0:	1885883a 	add	r2,r3,r2
    28a4:	10800017 	ldw	r2,0(r2)
    28a8:	2089883a 	add	r4,r4,r2
    28ac:	e0bffe17 	ldw	r2,-8(fp)
    28b0:	1085883a 	add	r2,r2,r2
    28b4:	1085883a 	add	r2,r2,r2
    28b8:	1007883a 	mov	r3,r2
    28bc:	d0a70617 	ldw	r2,-25576(gp)
    28c0:	1885883a 	add	r2,r3,r2
    28c4:	10800204 	addi	r2,r2,8
    28c8:	10800017 	ldw	r2,0(r2)
    28cc:	2087383a 	mul	r3,r4,r2
    28d0:	e0bff917 	ldw	r2,-28(fp)
    28d4:	10c5883a 	add	r2,r2,r3
    28d8:	e0bff915 	stw	r2,-28(fp)

  if(sum >= t)
    28dc:	e0fff917 	ldw	r3,-28(fp)
    28e0:	e0bffa17 	ldw	r2,-24(fp)
    28e4:	18800916 	blt	r3,r2,290c <_Z18evalWeakClassifieriiiii+0x3b0>
    return alpha2_array[tree_index];
    28e8:	e0bffd17 	ldw	r2,-12(fp)
    28ec:	1085883a 	add	r2,r2,r2
    28f0:	1085883a 	add	r2,r2,r2
    28f4:	1007883a 	mov	r3,r2
    28f8:	d0a70917 	ldw	r2,-25564(gp)
    28fc:	1885883a 	add	r2,r3,r2
    2900:	10800017 	ldw	r2,0(r2)
    2904:	e0bfff15 	stw	r2,-4(fp)
    2908:	00000806 	br	292c <_Z18evalWeakClassifieriiiii+0x3d0>
  else
    return alpha1_array[tree_index];
    290c:	e0bffd17 	ldw	r2,-12(fp)
    2910:	1085883a 	add	r2,r2,r2
    2914:	1085883a 	add	r2,r2,r2
    2918:	1007883a 	mov	r3,r2
    291c:	d0a70817 	ldw	r2,-25568(gp)
    2920:	1885883a 	add	r2,r3,r2
    2924:	10800017 	ldw	r2,0(r2)
    2928:	e0bfff15 	stw	r2,-4(fp)
    292c:	e0bfff17 	ldw	r2,-4(fp)

}
    2930:	e037883a 	mov	sp,fp
    2934:	df000017 	ldw	fp,0(sp)
    2938:	dec00104 	addi	sp,sp,4
    293c:	f800283a 	ret

00002940 <_ZN9__gnu_cxx13new_allocatorI6MyRectEC2Ev>:

      template<typename _Tp1>
        struct rebind
        { typedef new_allocator<_Tp1> other; };

      new_allocator() throw() { }
    2940:	defffe04 	addi	sp,sp,-8
    2944:	df000115 	stw	fp,4(sp)
    2948:	df000104 	addi	fp,sp,4
    294c:	e13fff15 	stw	r4,-4(fp)
    2950:	e037883a 	mov	sp,fp
    2954:	df000017 	ldw	fp,0(sp)
    2958:	dec00104 	addi	sp,sp,4
    295c:	f800283a 	ret

00002960 <_ZNSaI6MyRectEC1Ev>:

      template<typename _Tp1>
        struct rebind
        { typedef allocator<_Tp1> other; };

      allocator() throw() { }
    2960:	defffd04 	addi	sp,sp,-12
    2964:	dfc00215 	stw	ra,8(sp)
    2968:	df000115 	stw	fp,4(sp)
    296c:	df000104 	addi	fp,sp,4
    2970:	e13fff15 	stw	r4,-4(fp)
    2974:	e13fff17 	ldw	r4,-4(fp)
    2978:	00029400 	call	2940 <_ZN9__gnu_cxx13new_allocatorI6MyRectEC2Ev>
    297c:	e037883a 	mov	sp,fp
    2980:	dfc00117 	ldw	ra,4(sp)
    2984:	df000017 	ldw	fp,0(sp)
    2988:	dec00204 	addi	sp,sp,8
    298c:	f800283a 	ret

00002990 <_ZN9__gnu_cxx13new_allocatorI6MyRectED2Ev>:
      new_allocator(const new_allocator&) throw() { }

      template<typename _Tp1>
        new_allocator(const new_allocator<_Tp1>&) throw() { }

      ~new_allocator() throw() { }
    2990:	defffe04 	addi	sp,sp,-8
    2994:	df000115 	stw	fp,4(sp)
    2998:	df000104 	addi	fp,sp,4
    299c:	e13fff15 	stw	r4,-4(fp)
    29a0:	e037883a 	mov	sp,fp
    29a4:	df000017 	ldw	fp,0(sp)
    29a8:	dec00104 	addi	sp,sp,4
    29ac:	f800283a 	ret

000029b0 <_ZNSaI6MyRectED1Ev>:
      : __glibcxx_base_allocator<_Tp>(__a) { }

      template<typename _Tp1>
        allocator(const allocator<_Tp1>&) throw() { }

      ~allocator() throw() { }
    29b0:	defffd04 	addi	sp,sp,-12
    29b4:	dfc00215 	stw	ra,8(sp)
    29b8:	df000115 	stw	fp,4(sp)
    29bc:	df000104 	addi	fp,sp,4
    29c0:	e13fff15 	stw	r4,-4(fp)
    29c4:	e13fff17 	ldw	r4,-4(fp)
    29c8:	00029900 	call	2990 <_ZN9__gnu_cxx13new_allocatorI6MyRectED2Ev>
    29cc:	e037883a 	mov	sp,fp
    29d0:	dfc00117 	ldw	ra,4(sp)
    29d4:	df000017 	ldw	fp,0(sp)
    29d8:	dec00204 	addi	sp,sp,8
    29dc:	f800283a 	ret

000029e0 <_ZNSaI6MyRectED2Ev>:
    29e0:	defffd04 	addi	sp,sp,-12
    29e4:	dfc00215 	stw	ra,8(sp)
    29e8:	df000115 	stw	fp,4(sp)
    29ec:	df000104 	addi	fp,sp,4
    29f0:	e13fff15 	stw	r4,-4(fp)
    29f4:	e13fff17 	ldw	r4,-4(fp)
    29f8:	00029900 	call	2990 <_ZN9__gnu_cxx13new_allocatorI6MyRectED2Ev>
    29fc:	e037883a 	mov	sp,fp
    2a00:	dfc00117 	ldw	ra,4(sp)
    2a04:	df000017 	ldw	fp,0(sp)
    2a08:	dec00204 	addi	sp,sp,8
    2a0c:	f800283a 	ret

00002a10 <_ZN9__gnu_cxx13new_allocatorI6MyRectEC2ERKS2_>:
        struct rebind
        { typedef new_allocator<_Tp1> other; };

      new_allocator() throw() { }

      new_allocator(const new_allocator&) throw() { }
    2a10:	defffd04 	addi	sp,sp,-12
    2a14:	df000215 	stw	fp,8(sp)
    2a18:	df000204 	addi	fp,sp,8
    2a1c:	e13ffe15 	stw	r4,-8(fp)
    2a20:	e17fff15 	stw	r5,-4(fp)
    2a24:	e037883a 	mov	sp,fp
    2a28:	df000017 	ldw	fp,0(sp)
    2a2c:	dec00104 	addi	sp,sp,4
    2a30:	f800283a 	ret

00002a34 <_ZNSaI6MyRectEC1ERKS0_>:
        struct rebind
        { typedef allocator<_Tp1> other; };

      allocator() throw() { }

      allocator(const allocator& __a) throw()
    2a34:	defffc04 	addi	sp,sp,-16
    2a38:	dfc00315 	stw	ra,12(sp)
    2a3c:	df000215 	stw	fp,8(sp)
    2a40:	df000204 	addi	fp,sp,8
    2a44:	e13ffe15 	stw	r4,-8(fp)
    2a48:	e17fff15 	stw	r5,-4(fp)
      : __glibcxx_base_allocator<_Tp>(__a) { }
    2a4c:	e13ffe17 	ldw	r4,-8(fp)
    2a50:	e17fff17 	ldw	r5,-4(fp)
    2a54:	0002a100 	call	2a10 <_ZN9__gnu_cxx13new_allocatorI6MyRectEC2ERKS2_>
    2a58:	e037883a 	mov	sp,fp
    2a5c:	dfc00117 	ldw	ra,4(sp)
    2a60:	df000017 	ldw	fp,0(sp)
    2a64:	dec00204 	addi	sp,sp,8
    2a68:	f800283a 	ret

00002a6c <_ZNSaI6MyRectEC2ERKS0_>:
        struct rebind
        { typedef allocator<_Tp1> other; };

      allocator() throw() { }

      allocator(const allocator& __a) throw()
    2a6c:	defffc04 	addi	sp,sp,-16
    2a70:	dfc00315 	stw	ra,12(sp)
    2a74:	df000215 	stw	fp,8(sp)
    2a78:	df000204 	addi	fp,sp,8
    2a7c:	e13ffe15 	stw	r4,-8(fp)
    2a80:	e17fff15 	stw	r5,-4(fp)
      : __glibcxx_base_allocator<_Tp>(__a) { }
    2a84:	e13ffe17 	ldw	r4,-8(fp)
    2a88:	e17fff17 	ldw	r5,-4(fp)
    2a8c:	0002a100 	call	2a10 <_ZN9__gnu_cxx13new_allocatorI6MyRectEC2ERKS2_>
    2a90:	e037883a 	mov	sp,fp
    2a94:	dfc00117 	ldw	ra,4(sp)
    2a98:	df000017 	ldw	fp,0(sp)
    2a9c:	dec00204 	addi	sp,sp,8
    2aa0:	f800283a 	ret

00002aa4 <_ZNSt12_Vector_baseI6MyRectSaIS0_EE12_Vector_implD1Ev>:
    {
      typedef typename _Alloc::template rebind<_Tp>::other _Tp_alloc_type;

      struct _Vector_impl 
      : public _Tp_alloc_type
      {
    2aa4:	defffd04 	addi	sp,sp,-12
    2aa8:	dfc00215 	stw	ra,8(sp)
    2aac:	df000115 	stw	fp,4(sp)
    2ab0:	df000104 	addi	fp,sp,4
    2ab4:	e13fff15 	stw	r4,-4(fp)
    2ab8:	e13fff17 	ldw	r4,-4(fp)
    2abc:	00029e00 	call	29e0 <_ZNSaI6MyRectED2Ev>
    2ac0:	e037883a 	mov	sp,fp
    2ac4:	dfc00117 	ldw	ra,4(sp)
    2ac8:	df000017 	ldw	fp,0(sp)
    2acc:	dec00204 	addi	sp,sp,8
    2ad0:	f800283a 	ret

00002ad4 <_ZNSt12_Vector_baseI6MyRectSaIS0_EE19_M_get_Tp_allocatorEv>:
      
    public:
      typedef _Alloc allocator_type;

      _Tp_alloc_type&
      _M_get_Tp_allocator()
    2ad4:	defffe04 	addi	sp,sp,-8
    2ad8:	df000115 	stw	fp,4(sp)
    2adc:	df000104 	addi	fp,sp,4
    2ae0:	e13fff15 	stw	r4,-4(fp)
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
    2ae4:	e0bfff17 	ldw	r2,-4(fp)
    2ae8:	e037883a 	mov	sp,fp
    2aec:	df000017 	ldw	fp,0(sp)
    2af0:	dec00104 	addi	sp,sp,4
    2af4:	f800283a 	ret

00002af8 <_ZN9__gnu_cxx13new_allocatorI6MyRectE9constructEPS1_RKS1_>:
      { return size_t(-1) / sizeof(_Tp); }

      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 402. wrong new expression in [some_] allocator::construct
      void 
      construct(pointer __p, const _Tp& __val) 
    2af8:	defffa04 	addi	sp,sp,-24
    2afc:	dfc00515 	stw	ra,20(sp)
    2b00:	df000415 	stw	fp,16(sp)
    2b04:	df000404 	addi	fp,sp,16
    2b08:	e13ffc15 	stw	r4,-16(fp)
    2b0c:	e17ffd15 	stw	r5,-12(fp)
    2b10:	e1bffe15 	stw	r6,-8(fp)
      { ::new(__p) _Tp(__val); }
    2b14:	01000404 	movi	r4,16
    2b18:	e17ffd17 	ldw	r5,-12(fp)
    2b1c:	00024900 	call	2490 <_ZnwmPv>
    2b20:	e0bfff15 	stw	r2,-4(fp)
    2b24:	e0ffff17 	ldw	r3,-4(fp)
    2b28:	1805003a 	cmpeq	r2,r3,zero
    2b2c:	10000d1e 	bne	r2,zero,2b64 <_ZN9__gnu_cxx13new_allocatorI6MyRectE9constructEPS1_RKS1_+0x6c>
    2b30:	e0fffe17 	ldw	r3,-8(fp)
    2b34:	18800017 	ldw	r2,0(r3)
    2b38:	e13fff17 	ldw	r4,-4(fp)
    2b3c:	20800015 	stw	r2,0(r4)
    2b40:	18800117 	ldw	r2,4(r3)
    2b44:	e13fff17 	ldw	r4,-4(fp)
    2b48:	20800115 	stw	r2,4(r4)
    2b4c:	18800217 	ldw	r2,8(r3)
    2b50:	e13fff17 	ldw	r4,-4(fp)
    2b54:	20800215 	stw	r2,8(r4)
    2b58:	18800317 	ldw	r2,12(r3)
    2b5c:	e0ffff17 	ldw	r3,-4(fp)
    2b60:	18800315 	stw	r2,12(r3)
    2b64:	e037883a 	mov	sp,fp
    2b68:	dfc00117 	ldw	ra,4(sp)
    2b6c:	df000017 	ldw	fp,0(sp)
    2b70:	dec00204 	addi	sp,sp,8
    2b74:	f800283a 	ret

00002b78 <_ZNSt12_Vector_baseI6MyRectSaIS0_EE12_Vector_implC1ERKS1_>:
      : public _Tp_alloc_type
      {
	_Tp*           _M_start;
	_Tp*           _M_finish;
	_Tp*           _M_end_of_storage;
	_Vector_impl(_Tp_alloc_type const& __a)
    2b78:	defffc04 	addi	sp,sp,-16
    2b7c:	dfc00315 	stw	ra,12(sp)
    2b80:	df000215 	stw	fp,8(sp)
    2b84:	df000204 	addi	fp,sp,8
    2b88:	e13ffe15 	stw	r4,-8(fp)
    2b8c:	e17fff15 	stw	r5,-4(fp)
	: _Tp_alloc_type(__a), _M_start(0), _M_finish(0), _M_end_of_storage(0)
    2b90:	e13ffe17 	ldw	r4,-8(fp)
    2b94:	e17fff17 	ldw	r5,-4(fp)
    2b98:	0002a6c0 	call	2a6c <_ZNSaI6MyRectEC2ERKS0_>
    2b9c:	e0bffe17 	ldw	r2,-8(fp)
    2ba0:	10000015 	stw	zero,0(r2)
    2ba4:	e0bffe17 	ldw	r2,-8(fp)
    2ba8:	10000115 	stw	zero,4(r2)
    2bac:	e0bffe17 	ldw	r2,-8(fp)
    2bb0:	10000215 	stw	zero,8(r2)
	{ }
    2bb4:	e037883a 	mov	sp,fp
    2bb8:	dfc00117 	ldw	ra,4(sp)
    2bbc:	df000017 	ldw	fp,0(sp)
    2bc0:	dec00204 	addi	sp,sp,8
    2bc4:	f800283a 	ret

00002bc8 <_ZNSt12_Vector_baseI6MyRectSaIS0_EEC2ERKS1_>:

      allocator_type
      get_allocator() const
      { return _M_get_Tp_allocator(); }

      _Vector_base(const allocator_type& __a)
    2bc8:	defffc04 	addi	sp,sp,-16
    2bcc:	dfc00315 	stw	ra,12(sp)
    2bd0:	df000215 	stw	fp,8(sp)
    2bd4:	df000204 	addi	fp,sp,8
    2bd8:	e13ffe15 	stw	r4,-8(fp)
    2bdc:	e17fff15 	stw	r5,-4(fp)
      : _M_impl(__a)
    2be0:	e13ffe17 	ldw	r4,-8(fp)
    2be4:	e17fff17 	ldw	r5,-4(fp)
    2be8:	0002b780 	call	2b78 <_ZNSt12_Vector_baseI6MyRectSaIS0_EE12_Vector_implC1ERKS1_>
      { }
    2bec:	e037883a 	mov	sp,fp
    2bf0:	dfc00117 	ldw	ra,4(sp)
    2bf4:	df000017 	ldw	fp,0(sp)
    2bf8:	dec00204 	addi	sp,sp,8
    2bfc:	f800283a 	ret

00002c00 <_ZNSt6vectorI6MyRectSaIS0_EEC1ERKS1_>:
      // (assign() and get_allocator() are also listed in this section)
      /**
       *  @brief  Default constructor creates no elements.
       */
      explicit
      vector(const allocator_type& __a = allocator_type())
    2c00:	defffc04 	addi	sp,sp,-16
    2c04:	dfc00315 	stw	ra,12(sp)
    2c08:	df000215 	stw	fp,8(sp)
    2c0c:	df000204 	addi	fp,sp,8
    2c10:	e13ffe15 	stw	r4,-8(fp)
    2c14:	e17fff15 	stw	r5,-4(fp)
      : _Base(__a)
    2c18:	e13ffe17 	ldw	r4,-8(fp)
    2c1c:	e17fff17 	ldw	r5,-4(fp)
    2c20:	0002bc80 	call	2bc8 <_ZNSt12_Vector_baseI6MyRectSaIS0_EEC2ERKS1_>
      { }
    2c24:	e037883a 	mov	sp,fp
    2c28:	dfc00117 	ldw	ra,4(sp)
    2c2c:	df000017 	ldw	fp,0(sp)
    2c30:	dec00204 	addi	sp,sp,8
    2c34:	f800283a 	ret

00002c38 <_ZN9__gnu_cxx17__normal_iteratorIPK6MyRectSt6vectorIS1_SaIS1_EEEC1ERKS3_>:
      typedef typename iterator_traits<_Iterator>::pointer   pointer;

      __normal_iterator() : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) : _M_current(__i) { }
    2c38:	defffd04 	addi	sp,sp,-12
    2c3c:	df000215 	stw	fp,8(sp)
    2c40:	df000204 	addi	fp,sp,8
    2c44:	e13ffe15 	stw	r4,-8(fp)
    2c48:	e17fff15 	stw	r5,-4(fp)
    2c4c:	e0bfff17 	ldw	r2,-4(fp)
    2c50:	10c00017 	ldw	r3,0(r2)
    2c54:	e0bffe17 	ldw	r2,-8(fp)
    2c58:	10c00015 	stw	r3,0(r2)
    2c5c:	e037883a 	mov	sp,fp
    2c60:	df000017 	ldw	fp,0(sp)
    2c64:	dec00104 	addi	sp,sp,4
    2c68:	f800283a 	ret

00002c6c <_ZNKSt6vectorI6MyRectSaIS0_EE3endEv>:
       *  Returns a read-only (constant) iterator that points one past
       *  the last element in the %vector.  Iteration is done in
       *  ordinary element order.
       */
      const_iterator
      end() const
    2c6c:	defffb04 	addi	sp,sp,-20
    2c70:	dfc00415 	stw	ra,16(sp)
    2c74:	df000315 	stw	fp,12(sp)
    2c78:	df000304 	addi	fp,sp,12
    2c7c:	e13fff15 	stw	r4,-4(fp)
      { return const_iterator (this->_M_impl._M_finish); }
    2c80:	e0bfff17 	ldw	r2,-4(fp)
    2c84:	10800117 	ldw	r2,4(r2)
    2c88:	e0bffd15 	stw	r2,-12(fp)
    2c8c:	e13ffe04 	addi	r4,fp,-8
    2c90:	e17ffd04 	addi	r5,fp,-12
    2c94:	0002c380 	call	2c38 <_ZN9__gnu_cxx17__normal_iteratorIPK6MyRectSt6vectorIS1_SaIS1_EEEC1ERKS3_>
    2c98:	e0bffe17 	ldw	r2,-8(fp)
    2c9c:	e037883a 	mov	sp,fp
    2ca0:	dfc00117 	ldw	ra,4(sp)
    2ca4:	df000017 	ldw	fp,0(sp)
    2ca8:	dec00204 	addi	sp,sp,8
    2cac:	f800283a 	ret

00002cb0 <_ZNKSt6vectorI6MyRectSaIS0_EE5beginEv>:
       *  Returns a read-only (constant) iterator that points to the
       *  first element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      const_iterator
      begin() const
    2cb0:	defffb04 	addi	sp,sp,-20
    2cb4:	dfc00415 	stw	ra,16(sp)
    2cb8:	df000315 	stw	fp,12(sp)
    2cbc:	df000304 	addi	fp,sp,12
    2cc0:	e13fff15 	stw	r4,-4(fp)
      { return const_iterator (this->_M_impl._M_start); }
    2cc4:	e0bfff17 	ldw	r2,-4(fp)
    2cc8:	10800017 	ldw	r2,0(r2)
    2ccc:	e0bffd15 	stw	r2,-12(fp)
    2cd0:	e13ffe04 	addi	r4,fp,-8
    2cd4:	e17ffd04 	addi	r5,fp,-12
    2cd8:	0002c380 	call	2c38 <_ZN9__gnu_cxx17__normal_iteratorIPK6MyRectSt6vectorIS1_SaIS1_EEEC1ERKS3_>
    2cdc:	e0bffe17 	ldw	r2,-8(fp)
    2ce0:	e037883a 	mov	sp,fp
    2ce4:	dfc00117 	ldw	ra,4(sp)
    2ce8:	df000017 	ldw	fp,0(sp)
    2cec:	dec00204 	addi	sp,sp,8
    2cf0:	f800283a 	ret

00002cf4 <_ZN9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS1_SaIS1_EEEC1ERKS2_>:
    2cf4:	defffd04 	addi	sp,sp,-12
    2cf8:	df000215 	stw	fp,8(sp)
    2cfc:	df000204 	addi	fp,sp,8
    2d00:	e13ffe15 	stw	r4,-8(fp)
    2d04:	e17fff15 	stw	r5,-4(fp)
    2d08:	e0bfff17 	ldw	r2,-4(fp)
    2d0c:	10c00017 	ldw	r3,0(r2)
    2d10:	e0bffe17 	ldw	r2,-8(fp)
    2d14:	10c00015 	stw	r3,0(r2)
    2d18:	e037883a 	mov	sp,fp
    2d1c:	df000017 	ldw	fp,0(sp)
    2d20:	dec00104 	addi	sp,sp,4
    2d24:	f800283a 	ret

00002d28 <_ZNSt6vectorI6MyRectSaIS0_EE3endEv>:
       *  Returns a read/write iterator that points one past the last
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      iterator
      end()
    2d28:	defffc04 	addi	sp,sp,-16
    2d2c:	dfc00315 	stw	ra,12(sp)
    2d30:	df000215 	stw	fp,8(sp)
    2d34:	df000204 	addi	fp,sp,8
    2d38:	e13fff15 	stw	r4,-4(fp)
      { return iterator (this->_M_impl._M_finish); }
    2d3c:	e0bfff17 	ldw	r2,-4(fp)
    2d40:	11400104 	addi	r5,r2,4
    2d44:	e13ffe04 	addi	r4,fp,-8
    2d48:	0002cf40 	call	2cf4 <_ZN9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS1_SaIS1_EEEC1ERKS2_>
    2d4c:	e0bffe17 	ldw	r2,-8(fp)
    2d50:	e037883a 	mov	sp,fp
    2d54:	dfc00117 	ldw	ra,4(sp)
    2d58:	df000017 	ldw	fp,0(sp)
    2d5c:	dec00204 	addi	sp,sp,8
    2d60:	f800283a 	ret

00002d64 <_ZNK9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS1_SaIS1_EEEdeEv>:
			  >::__type>& __i)
        : _M_current(__i.base()) { }

      // Forward iterator requirements
      reference
      operator*() const
    2d64:	defffe04 	addi	sp,sp,-8
    2d68:	df000115 	stw	fp,4(sp)
    2d6c:	df000104 	addi	fp,sp,4
    2d70:	e13fff15 	stw	r4,-4(fp)
      { return *_M_current; }
    2d74:	e0bfff17 	ldw	r2,-4(fp)
    2d78:	10800017 	ldw	r2,0(r2)
    2d7c:	e037883a 	mov	sp,fp
    2d80:	df000017 	ldw	fp,0(sp)
    2d84:	dec00104 	addi	sp,sp,4
    2d88:	f800283a 	ret

00002d8c <_ZNKSt6vectorI6MyRectSaIS0_EE8max_sizeEv>:
      size() const
      { return size_type(end() - begin()); }

      /**  Returns the size() of the largest possible %vector.  */
      size_type
      max_size() const
    2d8c:	defffe04 	addi	sp,sp,-8
    2d90:	df000115 	stw	fp,4(sp)
    2d94:	df000104 	addi	fp,sp,4
    2d98:	e13fff15 	stw	r4,-4(fp)
      { return size_type(-1) / sizeof(value_type); }
    2d9c:	00840034 	movhi	r2,4096
    2da0:	10bfffc4 	addi	r2,r2,-1
    2da4:	e037883a 	mov	sp,fp
    2da8:	df000017 	ldw	fp,0(sp)
    2dac:	dec00104 	addi	sp,sp,4
    2db0:	f800283a 	ret

00002db4 <_ZNK9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS1_SaIS1_EEE4baseEv>:
      __normal_iterator
      operator-(const difference_type& __n) const
      { return __normal_iterator(_M_current - __n); }

      const _Iterator&
      base() const
    2db4:	defffe04 	addi	sp,sp,-8
    2db8:	df000115 	stw	fp,4(sp)
    2dbc:	df000104 	addi	fp,sp,4
    2dc0:	e13fff15 	stw	r4,-4(fp)
      { return _M_current; }
    2dc4:	e0bfff17 	ldw	r2,-4(fp)
    2dc8:	e037883a 	mov	sp,fp
    2dcc:	df000017 	ldw	fp,0(sp)
    2dd0:	dec00104 	addi	sp,sp,4
    2dd4:	f800283a 	ret

00002dd8 <_ZN9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS1_SaIS1_EEEppEv>:
      pointer
      operator->() const
      { return _M_current; }

      __normal_iterator&
      operator++()
    2dd8:	defffe04 	addi	sp,sp,-8
    2ddc:	df000115 	stw	fp,4(sp)
    2de0:	df000104 	addi	fp,sp,4
    2de4:	e13fff15 	stw	r4,-4(fp)
      {
	++_M_current;
    2de8:	e0bfff17 	ldw	r2,-4(fp)
    2dec:	10800017 	ldw	r2,0(r2)
    2df0:	10c00404 	addi	r3,r2,16
    2df4:	e0bfff17 	ldw	r2,-4(fp)
    2df8:	10c00015 	stw	r3,0(r2)
	return *this;
    2dfc:	e0bfff17 	ldw	r2,-4(fp)
    2e00:	e037883a 	mov	sp,fp
    2e04:	df000017 	ldw	fp,0(sp)
    2e08:	dec00104 	addi	sp,sp,4
    2e0c:	f800283a 	ret

00002e10 <_ZNSt6vectorI6MyRectSaIS0_EE5beginEv>:
       *  Returns a read/write iterator that points to the first
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      iterator
      begin()
    2e10:	defffc04 	addi	sp,sp,-16
    2e14:	dfc00315 	stw	ra,12(sp)
    2e18:	df000215 	stw	fp,8(sp)
    2e1c:	df000204 	addi	fp,sp,8
    2e20:	e13fff15 	stw	r4,-4(fp)
      { return iterator (this->_M_impl._M_start); }
    2e24:	e17fff17 	ldw	r5,-4(fp)
    2e28:	e13ffe04 	addi	r4,fp,-8
    2e2c:	0002cf40 	call	2cf4 <_ZN9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS1_SaIS1_EEEC1ERKS2_>
    2e30:	e0bffe17 	ldw	r2,-8(fp)
    2e34:	e037883a 	mov	sp,fp
    2e38:	dfc00117 	ldw	ra,4(sp)
    2e3c:	df000017 	ldw	fp,0(sp)
    2e40:	dec00204 	addi	sp,sp,8
    2e44:	f800283a 	ret

00002e48 <_ZNK9__gnu_cxx17__normal_iteratorIPK6MyRectSt6vectorIS1_SaIS1_EEE4baseEv>:
      __normal_iterator
      operator-(const difference_type& __n) const
      { return __normal_iterator(_M_current - __n); }

      const _Iterator&
      base() const
    2e48:	defffe04 	addi	sp,sp,-8
    2e4c:	df000115 	stw	fp,4(sp)
    2e50:	df000104 	addi	fp,sp,4
    2e54:	e13fff15 	stw	r4,-4(fp)
      { return _M_current; }
    2e58:	e0bfff17 	ldw	r2,-4(fp)
    2e5c:	e037883a 	mov	sp,fp
    2e60:	df000017 	ldw	fp,0(sp)
    2e64:	dec00104 	addi	sp,sp,4
    2e68:	f800283a 	ret

00002e6c <_ZN9__gnu_cxxmiIPK6MyRectS3_St6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T1_E15difference_typeERKSA_RKNS7_IT0_S9_EE>:
  // operators but also operator- must accept mixed iterator/const_iterator
  // parameters.
  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline typename __normal_iterator<_IteratorL, _Container>::difference_type
    operator-(const __normal_iterator<_IteratorL, _Container>& __lhs,
	      const __normal_iterator<_IteratorR, _Container>& __rhs)
    2e6c:	defffb04 	addi	sp,sp,-20
    2e70:	dfc00415 	stw	ra,16(sp)
    2e74:	df000315 	stw	fp,12(sp)
    2e78:	dc000215 	stw	r16,8(sp)
    2e7c:	df000204 	addi	fp,sp,8
    2e80:	e13ffe15 	stw	r4,-8(fp)
    2e84:	e17fff15 	stw	r5,-4(fp)
    { return __lhs.base() - __rhs.base(); }
    2e88:	e13ffe17 	ldw	r4,-8(fp)
    2e8c:	0002e480 	call	2e48 <_ZNK9__gnu_cxx17__normal_iteratorIPK6MyRectSt6vectorIS1_SaIS1_EEE4baseEv>
    2e90:	10800017 	ldw	r2,0(r2)
    2e94:	1021883a 	mov	r16,r2
    2e98:	e13fff17 	ldw	r4,-4(fp)
    2e9c:	0002e480 	call	2e48 <_ZNK9__gnu_cxx17__normal_iteratorIPK6MyRectSt6vectorIS1_SaIS1_EEE4baseEv>
    2ea0:	10800017 	ldw	r2,0(r2)
    2ea4:	8085c83a 	sub	r2,r16,r2
    2ea8:	1005d13a 	srai	r2,r2,4
    2eac:	e037883a 	mov	sp,fp
    2eb0:	dfc00217 	ldw	ra,8(sp)
    2eb4:	df000117 	ldw	fp,4(sp)
    2eb8:	dc000017 	ldw	r16,0(sp)
    2ebc:	dec00304 	addi	sp,sp,12
    2ec0:	f800283a 	ret

00002ec4 <_ZNKSt6vectorI6MyRectSaIS0_EE4sizeEv>:
      { return const_reverse_iterator(begin()); }

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const
    2ec4:	defffb04 	addi	sp,sp,-20
    2ec8:	dfc00415 	stw	ra,16(sp)
    2ecc:	df000315 	stw	fp,12(sp)
    2ed0:	df000304 	addi	fp,sp,12
    2ed4:	e13fff15 	stw	r4,-4(fp)
      { return size_type(end() - begin()); }
    2ed8:	e13fff17 	ldw	r4,-4(fp)
    2edc:	0002c6c0 	call	2c6c <_ZNKSt6vectorI6MyRectSaIS0_EE3endEv>
    2ee0:	e0bffe15 	stw	r2,-8(fp)
    2ee4:	e13fff17 	ldw	r4,-4(fp)
    2ee8:	0002cb00 	call	2cb0 <_ZNKSt6vectorI6MyRectSaIS0_EE5beginEv>
    2eec:	e0bffd15 	stw	r2,-12(fp)
    2ef0:	e13ffe04 	addi	r4,fp,-8
    2ef4:	e17ffd04 	addi	r5,fp,-12
    2ef8:	0002e6c0 	call	2e6c <_ZN9__gnu_cxxmiIPK6MyRectS3_St6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T1_E15difference_typeERKSA_RKNS7_IT0_S9_EE>
    2efc:	e037883a 	mov	sp,fp
    2f00:	dfc00117 	ldw	ra,4(sp)
    2f04:	df000017 	ldw	fp,0(sp)
    2f08:	dec00204 	addi	sp,sp,8
    2f0c:	f800283a 	ret

00002f10 <_ZN6MyRectD1Ev>:
    int x;
    int y;
    int width;
    int height;
}
MyRect;
    2f10:	defffe04 	addi	sp,sp,-8
    2f14:	df000115 	stw	fp,4(sp)
    2f18:	df000104 	addi	fp,sp,4
    2f1c:	e13fff15 	stw	r4,-4(fp)
    2f20:	e037883a 	mov	sp,fp
    2f24:	df000017 	ldw	fp,0(sp)
    2f28:	dec00104 	addi	sp,sp,4
    2f2c:	f800283a 	ret

00002f30 <_ZSt8_DestroyI6MyRectEvPT_>:
   * Destroy the object pointed to by a pointer type.
   * @endif
   */
  template<typename _Tp>
    inline void
    _Destroy(_Tp* __pointer)
    2f30:	defffd04 	addi	sp,sp,-12
    2f34:	dfc00215 	stw	ra,8(sp)
    2f38:	df000115 	stw	fp,4(sp)
    2f3c:	df000104 	addi	fp,sp,4
    2f40:	e13fff15 	stw	r4,-4(fp)
    { __pointer->~_Tp(); }
    2f44:	e13fff17 	ldw	r4,-4(fp)
    2f48:	0002f100 	call	2f10 <_ZN6MyRectD1Ev>
    2f4c:	e037883a 	mov	sp,fp
    2f50:	dfc00117 	ldw	ra,4(sp)
    2f54:	df000017 	ldw	fp,0(sp)
    2f58:	dec00204 	addi	sp,sp,8
    2f5c:	f800283a 	ret

00002f60 <_ZSt13__destroy_auxIP6MyRectEvT_S2_12__false_type>:
   * @endif
   */
  template<typename _ForwardIterator>
    inline void
    __destroy_aux(_ForwardIterator __first, _ForwardIterator __last,
		  __false_type)
    2f60:	defffb04 	addi	sp,sp,-20
    2f64:	dfc00415 	stw	ra,16(sp)
    2f68:	df000315 	stw	fp,12(sp)
    2f6c:	df000304 	addi	fp,sp,12
    2f70:	e13ffd15 	stw	r4,-12(fp)
    2f74:	e17ffe15 	stw	r5,-8(fp)
    2f78:	e1bfff05 	stb	r6,-4(fp)
    {
      for (; __first != __last; ++__first)
    2f7c:	00000506 	br	2f94 <_ZSt13__destroy_auxIP6MyRectEvT_S2_12__false_type+0x34>
	std::_Destroy(&*__first);
    2f80:	e13ffd17 	ldw	r4,-12(fp)
    2f84:	0002f300 	call	2f30 <_ZSt8_DestroyI6MyRectEvPT_>
  template<typename _ForwardIterator>
    inline void
    __destroy_aux(_ForwardIterator __first, _ForwardIterator __last,
		  __false_type)
    {
      for (; __first != __last; ++__first)
    2f88:	e0bffd17 	ldw	r2,-12(fp)
    2f8c:	10800404 	addi	r2,r2,16
    2f90:	e0bffd15 	stw	r2,-12(fp)
    2f94:	e0fffd17 	ldw	r3,-12(fp)
    2f98:	e0bffe17 	ldw	r2,-8(fp)
    2f9c:	18bff81e 	bne	r3,r2,2f80 <_ZSt13__destroy_auxIP6MyRectEvT_S2_12__false_type+0x20>
	std::_Destroy(&*__first);
    2fa0:	e037883a 	mov	sp,fp
    2fa4:	dfc00117 	ldw	ra,4(sp)
    2fa8:	df000017 	ldw	fp,0(sp)
    2fac:	dec00204 	addi	sp,sp,8
    2fb0:	f800283a 	ret

00002fb4 <_ZSt8_DestroyIP6MyRectEvT_S2_>:
   * away, otherwise the objects' destructors must be invoked.
   * @endif
   */
  template<typename _ForwardIterator>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
    2fb4:	defffb04 	addi	sp,sp,-20
    2fb8:	dfc00415 	stw	ra,16(sp)
    2fbc:	df000315 	stw	fp,12(sp)
    2fc0:	df000304 	addi	fp,sp,12
    2fc4:	e13ffd15 	stw	r4,-12(fp)
    2fc8:	e17ffe15 	stw	r5,-8(fp)
      typedef typename iterator_traits<_ForwardIterator>::value_type
                       _Value_type;
      typedef typename std::__is_scalar<_Value_type>::__type
	               _Has_trivial_destructor;

      std::__destroy_aux(__first, __last, _Has_trivial_destructor());
    2fcc:	e13ffd17 	ldw	r4,-12(fp)
    2fd0:	e17ffe17 	ldw	r5,-8(fp)
    2fd4:	e1bfff03 	ldbu	r6,-4(fp)
    2fd8:	0002f600 	call	2f60 <_ZSt13__destroy_auxIP6MyRectEvT_S2_12__false_type>
    2fdc:	e037883a 	mov	sp,fp
    2fe0:	dfc00117 	ldw	ra,4(sp)
    2fe4:	df000017 	ldw	fp,0(sp)
    2fe8:	dec00204 	addi	sp,sp,8
    2fec:	f800283a 	ret

00002ff0 <_ZSt8_DestroyIP6MyRectS0_EvT_S2_SaIT0_E>:
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
	     allocator<_Tp>)
    2ff0:	defffb04 	addi	sp,sp,-20
    2ff4:	dfc00415 	stw	ra,16(sp)
    2ff8:	df000315 	stw	fp,12(sp)
    2ffc:	df000304 	addi	fp,sp,12
    3000:	e13ffd15 	stw	r4,-12(fp)
    3004:	e17ffe15 	stw	r5,-8(fp)
    3008:	e1bfff15 	stw	r6,-4(fp)
    {
      _Destroy(__first, __last);
    300c:	e13ffd17 	ldw	r4,-12(fp)
    3010:	e17ffe17 	ldw	r5,-8(fp)
    3014:	0002fb40 	call	2fb4 <_ZSt8_DestroyIP6MyRectEvT_S2_>
    3018:	e037883a 	mov	sp,fp
    301c:	dfc00117 	ldw	ra,4(sp)
    3020:	df000017 	ldw	fp,0(sp)
    3024:	dec00204 	addi	sp,sp,8
    3028:	f800283a 	ret

0000302c <_ZNK9__gnu_cxx13new_allocatorI6MyRectE8max_sizeEv>:
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }

      size_type
      max_size() const throw() 
    302c:	defffe04 	addi	sp,sp,-8
    3030:	df000115 	stw	fp,4(sp)
    3034:	df000104 	addi	fp,sp,4
    3038:	e13fff15 	stw	r4,-4(fp)
      { return size_t(-1) / sizeof(_Tp); }
    303c:	00840034 	movhi	r2,4096
    3040:	10bfffc4 	addi	r2,r2,-1
    3044:	e037883a 	mov	sp,fp
    3048:	df000017 	ldw	fp,0(sp)
    304c:	dec00104 	addi	sp,sp,4
    3050:	f800283a 	ret

00003054 <_ZSt10_ConstructI6MyRectS0_EvPT_RKT0_>:
   * object's constructor with an initializer.
   * @endif
   */
  template<typename _T1, typename _T2>
    inline void
    _Construct(_T1* __p, const _T2& __value)
    3054:	defffb04 	addi	sp,sp,-20
    3058:	dfc00415 	stw	ra,16(sp)
    305c:	df000315 	stw	fp,12(sp)
    3060:	df000304 	addi	fp,sp,12
    3064:	e13ffd15 	stw	r4,-12(fp)
    3068:	e17ffe15 	stw	r5,-8(fp)
    {
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 402. wrong new expression in [some_]allocator::construct
      ::new(static_cast<void*>(__p)) _T1(__value);
    306c:	01000404 	movi	r4,16
    3070:	e17ffd17 	ldw	r5,-12(fp)
    3074:	00024900 	call	2490 <_ZnwmPv>
    3078:	e0bfff15 	stw	r2,-4(fp)
    307c:	e0ffff17 	ldw	r3,-4(fp)
    3080:	1805003a 	cmpeq	r2,r3,zero
    3084:	10000d1e 	bne	r2,zero,30bc <_ZSt10_ConstructI6MyRectS0_EvPT_RKT0_+0x68>
    3088:	e0fffe17 	ldw	r3,-8(fp)
    308c:	18800017 	ldw	r2,0(r3)
    3090:	e13fff17 	ldw	r4,-4(fp)
    3094:	20800015 	stw	r2,0(r4)
    3098:	18800117 	ldw	r2,4(r3)
    309c:	e13fff17 	ldw	r4,-4(fp)
    30a0:	20800115 	stw	r2,4(r4)
    30a4:	18800217 	ldw	r2,8(r3)
    30a8:	e13fff17 	ldw	r4,-4(fp)
    30ac:	20800215 	stw	r2,8(r4)
    30b0:	18800317 	ldw	r2,12(r3)
    30b4:	e0ffff17 	ldw	r3,-4(fp)
    30b8:	18800315 	stw	r2,12(r3)
    30bc:	e037883a 	mov	sp,fp
    30c0:	dfc00117 	ldw	ra,4(sp)
    30c4:	df000017 	ldw	fp,0(sp)
    30c8:	dec00204 	addi	sp,sp,8
    30cc:	f800283a 	ret

000030d0 <_ZNSt15__copy_backwardILb0ESt26random_access_iterator_tagE6copy_bIP6MyRectS4_EET0_T_S6_S5_>:
  template<bool _BoolType>
    struct __copy_backward<_BoolType, random_access_iterator_tag>
    {
      template<typename _BI1, typename _BI2>
        static _BI2
        copy_b(_BI1 __first, _BI1 __last, _BI2 __result)
    30d0:	defffb04 	addi	sp,sp,-20
    30d4:	df000415 	stw	fp,16(sp)
    30d8:	df000404 	addi	fp,sp,16
    30dc:	e13ffd15 	stw	r4,-12(fp)
    30e0:	e17ffe15 	stw	r5,-8(fp)
    30e4:	e1bfff15 	stw	r6,-4(fp)
        { 
	  typename iterator_traits<_BI1>::difference_type __n;
	  for (__n = __last - __first; __n > 0; --__n)
    30e8:	e0fffe17 	ldw	r3,-8(fp)
    30ec:	e0bffd17 	ldw	r2,-12(fp)
    30f0:	1885c83a 	sub	r2,r3,r2
    30f4:	1005d13a 	srai	r2,r2,4
    30f8:	e0bffc15 	stw	r2,-16(fp)
    30fc:	00001306 	br	314c <_ZNSt15__copy_backwardILb0ESt26random_access_iterator_tagE6copy_bIP6MyRectS4_EET0_T_S6_S5_+0x7c>
	    *--__result = *--__last;
    3100:	e0bfff17 	ldw	r2,-4(fp)
    3104:	10bffc04 	addi	r2,r2,-16
    3108:	e0bfff15 	stw	r2,-4(fp)
    310c:	e13fff17 	ldw	r4,-4(fp)
    3110:	e0bffe17 	ldw	r2,-8(fp)
    3114:	10bffc04 	addi	r2,r2,-16
    3118:	e0bffe15 	stw	r2,-8(fp)
    311c:	e0fffe17 	ldw	r3,-8(fp)
    3120:	18800017 	ldw	r2,0(r3)
    3124:	20800015 	stw	r2,0(r4)
    3128:	18800117 	ldw	r2,4(r3)
    312c:	20800115 	stw	r2,4(r4)
    3130:	18800217 	ldw	r2,8(r3)
    3134:	20800215 	stw	r2,8(r4)
    3138:	18800317 	ldw	r2,12(r3)
    313c:	20800315 	stw	r2,12(r4)
      template<typename _BI1, typename _BI2>
        static _BI2
        copy_b(_BI1 __first, _BI1 __last, _BI2 __result)
        { 
	  typename iterator_traits<_BI1>::difference_type __n;
	  for (__n = __last - __first; __n > 0; --__n)
    3140:	e0bffc17 	ldw	r2,-16(fp)
    3144:	10bfffc4 	addi	r2,r2,-1
    3148:	e0bffc15 	stw	r2,-16(fp)
    314c:	e0bffc17 	ldw	r2,-16(fp)
    3150:	10800048 	cmpgei	r2,r2,1
    3154:	103fea1e 	bne	r2,zero,3100 <_ZNSt15__copy_backwardILb0ESt26random_access_iterator_tagE6copy_bIP6MyRectS4_EET0_T_S6_S5_+0x30>
	    *--__result = *--__last;
	  return __result;
    3158:	e0bfff17 	ldw	r2,-4(fp)
    315c:	e037883a 	mov	sp,fp
    3160:	df000017 	ldw	fp,0(sp)
    3164:	dec00104 	addi	sp,sp,4
    3168:	f800283a 	ret

0000316c <_ZSt19__copy_backward_auxIP6MyRectS1_ET0_T_S3_S2_>:
	}
    };

  template<typename _BI1, typename _BI2>
    inline _BI2
    __copy_backward_aux(_BI1 __first, _BI1 __last, _BI2 __result)
    316c:	defffa04 	addi	sp,sp,-24
    3170:	dfc00515 	stw	ra,20(sp)
    3174:	df000415 	stw	fp,16(sp)
    3178:	df000404 	addi	fp,sp,16
    317c:	e13ffd15 	stw	r4,-12(fp)
    3180:	e17ffe15 	stw	r5,-8(fp)
    3184:	e1bfff15 	stw	r6,-4(fp)
      typedef typename iterator_traits<_BI2>::value_type _ValueType2;
      typedef typename iterator_traits<_BI1>::iterator_category _Category;
      const bool __simple = (__is_scalar<_ValueType1>::__value
	                     && __is_pointer<_BI1>::__value
	                     && __is_pointer<_BI2>::__value
			     && __are_same<_ValueType1, _ValueType2>::__value);
    3188:	e03ffc05 	stb	zero,-16(fp)

      return std::__copy_backward<__simple, _Category>::copy_b(__first, __last,
							       __result);
    318c:	e13ffd17 	ldw	r4,-12(fp)
    3190:	e17ffe17 	ldw	r5,-8(fp)
    3194:	e1bfff17 	ldw	r6,-4(fp)
    3198:	00030d00 	call	30d0 <_ZNSt15__copy_backwardILb0ESt26random_access_iterator_tagE6copy_bIP6MyRectS4_EET0_T_S6_S5_>
    319c:	e037883a 	mov	sp,fp
    31a0:	dfc00117 	ldw	ra,4(sp)
    31a4:	df000017 	ldw	fp,0(sp)
    31a8:	dec00204 	addi	sp,sp,8
    31ac:	f800283a 	ret

000031b0 <_ZNSt22__copy_backward_normalILb1ELb1EE8copy_b_nIN9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS4_SaIS4_EEEES9_EET0_T_SB_SA_>:
  template<>
    struct __copy_backward_normal<true, true>
    {
      template<typename _BI1, typename _BI2>
        static _BI2
        copy_b_n(_BI1 __first, _BI1 __last, _BI2 __result)
    31b0:	defff704 	addi	sp,sp,-36
    31b4:	dfc00815 	stw	ra,32(sp)
    31b8:	df000715 	stw	fp,28(sp)
    31bc:	dc400615 	stw	r17,24(sp)
    31c0:	dc000515 	stw	r16,20(sp)
    31c4:	df000504 	addi	fp,sp,20
    31c8:	e13ffd15 	stw	r4,-12(fp)
    31cc:	e17ffe15 	stw	r5,-8(fp)
    31d0:	e1bfff15 	stw	r6,-4(fp)
        { return _BI2(std::__copy_backward_aux(__first.base(), __last.base(),
					       __result.base())); }
    31d4:	e13ffd04 	addi	r4,fp,-12
    31d8:	0002db40 	call	2db4 <_ZNK9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS1_SaIS1_EEE4baseEv>
    31dc:	14400017 	ldw	r17,0(r2)
    31e0:	e13ffe04 	addi	r4,fp,-8
    31e4:	0002db40 	call	2db4 <_ZNK9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS1_SaIS1_EEE4baseEv>
    31e8:	14000017 	ldw	r16,0(r2)
    31ec:	e13fff04 	addi	r4,fp,-4
    31f0:	0002db40 	call	2db4 <_ZNK9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS1_SaIS1_EEE4baseEv>
    31f4:	11800017 	ldw	r6,0(r2)
    31f8:	8809883a 	mov	r4,r17
    31fc:	800b883a 	mov	r5,r16
    3200:	000316c0 	call	316c <_ZSt19__copy_backward_auxIP6MyRectS1_ET0_T_S3_S2_>
    3204:	e0bffb15 	stw	r2,-20(fp)
    3208:	e13ffc04 	addi	r4,fp,-16
    320c:	e17ffb04 	addi	r5,fp,-20
    3210:	0002cf40 	call	2cf4 <_ZN9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS1_SaIS1_EEEC1ERKS2_>
    3214:	e0bffc17 	ldw	r2,-16(fp)
    3218:	e037883a 	mov	sp,fp
    321c:	dfc00317 	ldw	ra,12(sp)
    3220:	df000217 	ldw	fp,8(sp)
    3224:	dc400117 	ldw	r17,4(sp)
    3228:	dc000017 	ldw	r16,0(sp)
    322c:	dec00404 	addi	sp,sp,16
    3230:	f800283a 	ret

00003234 <_ZSt13copy_backwardIN9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS2_SaIS2_EEEES7_ET0_T_S9_S8_>:
   *  Result may not be in the range [first,last).  Use copy instead.  Note
   *  that the start of the output range may overlap [first,last).
  */
  template <typename _BI1, typename _BI2>
    inline _BI2
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
    3234:	defffa04 	addi	sp,sp,-24
    3238:	dfc00515 	stw	ra,20(sp)
    323c:	df000415 	stw	fp,16(sp)
    3240:	df000404 	addi	fp,sp,16
    3244:	e13ffd15 	stw	r4,-12(fp)
    3248:	e17ffe15 	stw	r5,-8(fp)
    324c:	e1bfff15 	stw	r6,-4(fp)
      __glibcxx_function_requires(_ConvertibleConcept<
	    typename iterator_traits<_BI1>::value_type,
	    typename iterator_traits<_BI2>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);

      const bool __bi1 = __is_normal_iterator<_BI1>::__value;
    3250:	00800044 	movi	r2,1
    3254:	e0bffc45 	stb	r2,-15(fp)
      const bool __bi2 = __is_normal_iterator<_BI2>::__value;
    3258:	00800044 	movi	r2,1
    325c:	e0bffc05 	stb	r2,-16(fp)
      return std::__copy_backward_normal<__bi1, __bi2>::copy_b_n(__first, __last,
								 __result);
    3260:	e13ffd17 	ldw	r4,-12(fp)
    3264:	e17ffe17 	ldw	r5,-8(fp)
    3268:	e1bfff17 	ldw	r6,-4(fp)
    326c:	00031b00 	call	31b0 <_ZNSt22__copy_backward_normalILb1ELb1EE8copy_b_nIN9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS4_SaIS4_EEEES9_EET0_T_SB_SA_>
    3270:	e037883a 	mov	sp,fp
    3274:	dfc00117 	ldw	ra,4(sp)
    3278:	df000017 	ldw	fp,0(sp)
    327c:	dec00204 	addi	sp,sp,8
    3280:	f800283a 	ret

00003284 <_ZN9__gnu_cxxneIP6MyRectSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>:
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    3284:	defffb04 	addi	sp,sp,-20
    3288:	dfc00415 	stw	ra,16(sp)
    328c:	df000315 	stw	fp,12(sp)
    3290:	dc000215 	stw	r16,8(sp)
    3294:	df000204 	addi	fp,sp,8
    3298:	e13ffe15 	stw	r4,-8(fp)
    329c:	e17fff15 	stw	r5,-4(fp)
    { return __lhs.base() != __rhs.base(); }
    32a0:	e13ffe17 	ldw	r4,-8(fp)
    32a4:	0002db40 	call	2db4 <_ZNK9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS1_SaIS1_EEE4baseEv>
    32a8:	14000017 	ldw	r16,0(r2)
    32ac:	e13fff17 	ldw	r4,-4(fp)
    32b0:	0002db40 	call	2db4 <_ZNK9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS1_SaIS1_EEE4baseEv>
    32b4:	10800017 	ldw	r2,0(r2)
    32b8:	8084c03a 	cmpne	r2,r16,r2
    32bc:	e037883a 	mov	sp,fp
    32c0:	dfc00217 	ldw	ra,8(sp)
    32c4:	df000117 	ldw	fp,4(sp)
    32c8:	dc000017 	ldw	r16,0(sp)
    32cc:	dec00304 	addi	sp,sp,12
    32d0:	f800283a 	ret

000032d4 <_ZSt24__uninitialized_copy_auxIN9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS2_SaIS2_EEEES7_ET0_T_S9_S8_12__false_type>:

  template<typename _InputIterator, typename _ForwardIterator>
    inline _ForwardIterator
    __uninitialized_copy_aux(_InputIterator __first, _InputIterator __last,
			     _ForwardIterator __result,
			     __false_type)
    32d4:	defff804 	addi	sp,sp,-32
    32d8:	dfc00715 	stw	ra,28(sp)
    32dc:	df000615 	stw	fp,24(sp)
    32e0:	dc000515 	stw	r16,20(sp)
    32e4:	df000504 	addi	fp,sp,20
    32e8:	e13ffc15 	stw	r4,-16(fp)
    32ec:	e17ffd15 	stw	r5,-12(fp)
    32f0:	e1bffe15 	stw	r6,-8(fp)
    32f4:	e1ffff05 	stb	r7,-4(fp)
    {
      _ForwardIterator __cur = __result;
    32f8:	e0bffe17 	ldw	r2,-8(fp)
    32fc:	e0bffb15 	stw	r2,-20(fp)
      try
	{
	  for (; __first != __last; ++__first, ++__cur)
    3300:	00000c06 	br	3334 <_ZSt24__uninitialized_copy_auxIN9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS2_SaIS2_EEEES7_ET0_T_S9_S8_12__false_type+0x60>
	    std::_Construct(&*__cur, *__first);
    3304:	e13ffb04 	addi	r4,fp,-20
    3308:	0002d640 	call	2d64 <_ZNK9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS1_SaIS1_EEEdeEv>
    330c:	1021883a 	mov	r16,r2
    3310:	e13ffc04 	addi	r4,fp,-16
    3314:	0002d640 	call	2d64 <_ZNK9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS1_SaIS1_EEEdeEv>
    3318:	100b883a 	mov	r5,r2
    331c:	8009883a 	mov	r4,r16
    3320:	00030540 	call	3054 <_ZSt10_ConstructI6MyRectS0_EvPT_RKT0_>
			     __false_type)
    {
      _ForwardIterator __cur = __result;
      try
	{
	  for (; __first != __last; ++__first, ++__cur)
    3324:	e13ffc04 	addi	r4,fp,-16
    3328:	0002dd80 	call	2dd8 <_ZN9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS1_SaIS1_EEEppEv>
    332c:	e13ffb04 	addi	r4,fp,-20
    3330:	0002dd80 	call	2dd8 <_ZN9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS1_SaIS1_EEEppEv>
    3334:	e13ffc04 	addi	r4,fp,-16
    3338:	e17ffd04 	addi	r5,fp,-12
    333c:	00032840 	call	3284 <_ZN9__gnu_cxxneIP6MyRectSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>
    3340:	10803fcc 	andi	r2,r2,255
    3344:	1004c03a 	cmpne	r2,r2,zero
    3348:	103fee1e 	bne	r2,zero,3304 <_ZSt24__uninitialized_copy_auxIN9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS2_SaIS2_EEEES7_ET0_T_S9_S8_12__false_type+0x30>
	    std::_Construct(&*__cur, *__first);
	  return __cur;
    334c:	e0bffb17 	ldw	r2,-20(fp)
	}
      catch(...)
	{
	  std::_Destroy(__result, __cur);
	  __throw_exception_again;
    3350:	e037883a 	mov	sp,fp
    3354:	dfc00217 	ldw	ra,8(sp)
    3358:	df000117 	ldw	fp,4(sp)
    335c:	dc000017 	ldw	r16,0(sp)
    3360:	dec00304 	addi	sp,sp,12
    3364:	f800283a 	ret

00003368 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS2_SaIS2_EEEES7_ET0_T_S9_S8_>:
   *  Like copy(), but does not require an initialized output range.
  */
  template<typename _InputIterator, typename _ForwardIterator>
    inline _ForwardIterator
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
		       _ForwardIterator __result)
    3368:	defffa04 	addi	sp,sp,-24
    336c:	dfc00515 	stw	ra,20(sp)
    3370:	df000415 	stw	fp,16(sp)
    3374:	df000404 	addi	fp,sp,16
    3378:	e13ffc15 	stw	r4,-16(fp)
    337c:	e17ffd15 	stw	r5,-12(fp)
    3380:	e1bffe15 	stw	r6,-8(fp)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type _ValueType;
      typedef typename std::__is_scalar<_ValueType>::__type _Is_POD;
      return std::__uninitialized_copy_aux(__first, __last, __result,
					   _Is_POD());
    3384:	e13ffc17 	ldw	r4,-16(fp)
    3388:	e17ffd17 	ldw	r5,-12(fp)
    338c:	e1bffe17 	ldw	r6,-8(fp)
    3390:	e1ffff03 	ldbu	r7,-4(fp)
    3394:	00032d40 	call	32d4 <_ZSt24__uninitialized_copy_auxIN9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS2_SaIS2_EEEES7_ET0_T_S9_S8_12__false_type>
    3398:	e037883a 	mov	sp,fp
    339c:	dfc00117 	ldw	ra,4(sp)
    33a0:	df000017 	ldw	fp,0(sp)
    33a4:	dec00204 	addi	sp,sp,8
    33a8:	f800283a 	ret

000033ac <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS2_SaIS2_EEEES7_S2_ET0_T_S9_S8_SaIT1_E>:

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
			   _ForwardIterator __result,
			   allocator<_Tp>)
    33ac:	defffa04 	addi	sp,sp,-24
    33b0:	dfc00515 	stw	ra,20(sp)
    33b4:	df000415 	stw	fp,16(sp)
    33b8:	df000404 	addi	fp,sp,16
    33bc:	e13ffc15 	stw	r4,-16(fp)
    33c0:	e17ffd15 	stw	r5,-12(fp)
    33c4:	e1bffe15 	stw	r6,-8(fp)
    33c8:	e1ffff15 	stw	r7,-4(fp)
    {
      return std::uninitialized_copy(__first, __last, __result);
    33cc:	e13ffc17 	ldw	r4,-16(fp)
    33d0:	e17ffd17 	ldw	r5,-12(fp)
    33d4:	e1bffe17 	ldw	r6,-8(fp)
    33d8:	00033680 	call	3368 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS2_SaIS2_EEEES7_ET0_T_S9_S8_>
    33dc:	e037883a 	mov	sp,fp
    33e0:	dfc00117 	ldw	ra,4(sp)
    33e4:	df000017 	ldw	fp,0(sp)
    33e8:	dec00204 	addi	sp,sp,8
    33ec:	f800283a 	ret

000033f0 <_ZSt13__destroy_auxIN9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS2_SaIS2_EEEEEvT_S8_12__false_type>:
   * @endif
   */
  template<typename _ForwardIterator>
    inline void
    __destroy_aux(_ForwardIterator __first, _ForwardIterator __last,
		  __false_type)
    33f0:	defffb04 	addi	sp,sp,-20
    33f4:	dfc00415 	stw	ra,16(sp)
    33f8:	df000315 	stw	fp,12(sp)
    33fc:	df000304 	addi	fp,sp,12
    3400:	e13ffd15 	stw	r4,-12(fp)
    3404:	e17ffe15 	stw	r5,-8(fp)
    3408:	e1bfff05 	stb	r6,-4(fp)
    {
      for (; __first != __last; ++__first)
    340c:	00000606 	br	3428 <_ZSt13__destroy_auxIN9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS2_SaIS2_EEEEEvT_S8_12__false_type+0x38>
	std::_Destroy(&*__first);
    3410:	e13ffd04 	addi	r4,fp,-12
    3414:	0002d640 	call	2d64 <_ZNK9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS1_SaIS1_EEEdeEv>
    3418:	1009883a 	mov	r4,r2
    341c:	0002f300 	call	2f30 <_ZSt8_DestroyI6MyRectEvPT_>
  template<typename _ForwardIterator>
    inline void
    __destroy_aux(_ForwardIterator __first, _ForwardIterator __last,
		  __false_type)
    {
      for (; __first != __last; ++__first)
    3420:	e13ffd04 	addi	r4,fp,-12
    3424:	0002dd80 	call	2dd8 <_ZN9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS1_SaIS1_EEEppEv>
    3428:	e17ffe04 	addi	r5,fp,-8
    342c:	e13ffd04 	addi	r4,fp,-12
    3430:	00032840 	call	3284 <_ZN9__gnu_cxxneIP6MyRectSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>
    3434:	10803fcc 	andi	r2,r2,255
    3438:	1004c03a 	cmpne	r2,r2,zero
    343c:	103ff41e 	bne	r2,zero,3410 <_ZSt13__destroy_auxIN9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS2_SaIS2_EEEEEvT_S8_12__false_type+0x20>
	std::_Destroy(&*__first);
    3440:	e037883a 	mov	sp,fp
    3444:	dfc00117 	ldw	ra,4(sp)
    3448:	df000017 	ldw	fp,0(sp)
    344c:	dec00204 	addi	sp,sp,8
    3450:	f800283a 	ret

00003454 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS2_SaIS2_EEEEEvT_S8_>:
   * away, otherwise the objects' destructors must be invoked.
   * @endif
   */
  template<typename _ForwardIterator>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
    3454:	defffb04 	addi	sp,sp,-20
    3458:	dfc00415 	stw	ra,16(sp)
    345c:	df000315 	stw	fp,12(sp)
    3460:	df000304 	addi	fp,sp,12
    3464:	e13ffd15 	stw	r4,-12(fp)
    3468:	e17ffe15 	stw	r5,-8(fp)
      typedef typename iterator_traits<_ForwardIterator>::value_type
                       _Value_type;
      typedef typename std::__is_scalar<_Value_type>::__type
	               _Has_trivial_destructor;

      std::__destroy_aux(__first, __last, _Has_trivial_destructor());
    346c:	e13ffd17 	ldw	r4,-12(fp)
    3470:	e17ffe17 	ldw	r5,-8(fp)
    3474:	e1bfff03 	ldbu	r6,-4(fp)
    3478:	00033f00 	call	33f0 <_ZSt13__destroy_auxIN9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS2_SaIS2_EEEEEvT_S8_12__false_type>
    347c:	e037883a 	mov	sp,fp
    3480:	dfc00117 	ldw	ra,4(sp)
    3484:	df000017 	ldw	fp,0(sp)
    3488:	dec00204 	addi	sp,sp,8
    348c:	f800283a 	ret

00003490 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS2_SaIS2_EEEES2_EvT_S8_SaIT0_E>:
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
	     allocator<_Tp>)
    3490:	defffb04 	addi	sp,sp,-20
    3494:	dfc00415 	stw	ra,16(sp)
    3498:	df000315 	stw	fp,12(sp)
    349c:	df000304 	addi	fp,sp,12
    34a0:	e13ffd15 	stw	r4,-12(fp)
    34a4:	e17ffe15 	stw	r5,-8(fp)
    34a8:	e1bfff15 	stw	r6,-4(fp)
    {
      _Destroy(__first, __last);
    34ac:	e13ffd17 	ldw	r4,-12(fp)
    34b0:	e17ffe17 	ldw	r5,-8(fp)
    34b4:	00034540 	call	3454 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS2_SaIS2_EEEEEvT_S8_>
    34b8:	e037883a 	mov	sp,fp
    34bc:	dfc00117 	ldw	ra,4(sp)
    34c0:	df000017 	ldw	fp,0(sp)
    34c4:	dec00204 	addi	sp,sp,8
    34c8:	f800283a 	ret

000034cc <_ZN9__gnu_cxx13new_allocatorI6MyRectE8allocateEmPKv>:
      address(const_reference __x) const { return &__x; }

      // NB: __n is permitted to be 0.  The C++ standard says nothing
      // about what the return value is when __n == 0.
      pointer
      allocate(size_type __n, const void* = 0)
    34cc:	defffb04 	addi	sp,sp,-20
    34d0:	dfc00415 	stw	ra,16(sp)
    34d4:	df000315 	stw	fp,12(sp)
    34d8:	df000304 	addi	fp,sp,12
    34dc:	e13ffd15 	stw	r4,-12(fp)
    34e0:	e17ffe15 	stw	r5,-8(fp)
    34e4:	e1bfff15 	stw	r6,-4(fp)
      { 
	if (__builtin_expect(__n > this->max_size(), false))
    34e8:	e13ffd17 	ldw	r4,-12(fp)
    34ec:	000302c0 	call	302c <_ZNK9__gnu_cxx13new_allocatorI6MyRectE8max_sizeEv>
    34f0:	1007883a 	mov	r3,r2
    34f4:	e0bffe17 	ldw	r2,-8(fp)
    34f8:	1885803a 	cmpltu	r2,r3,r2
    34fc:	1004c03a 	cmpne	r2,r2,zero
    3500:	10803fcc 	andi	r2,r2,255
    3504:	1005003a 	cmpeq	r2,r2,zero
    3508:	1000011e 	bne	r2,zero,3510 <_ZN9__gnu_cxx13new_allocatorI6MyRectE8allocateEmPKv+0x44>
	  std::__throw_bad_alloc();
    350c:	0007a340 	call	7a34 <_ZSt17__throw_bad_allocv>

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    3510:	e0bffe17 	ldw	r2,-8(fp)
    3514:	1008913a 	slli	r4,r2,4
    3518:	000ed700 	call	ed70 <_Znwm>
    351c:	e037883a 	mov	sp,fp
    3520:	dfc00117 	ldw	ra,4(sp)
    3524:	df000017 	ldw	fp,0(sp)
    3528:	dec00204 	addi	sp,sp,8
    352c:	f800283a 	ret

00003530 <_ZNSt12_Vector_baseI6MyRectSaIS0_EE11_M_allocateEm>:

    public:
      _Vector_impl _M_impl;

      _Tp*
      _M_allocate(size_t __n)
    3530:	defffc04 	addi	sp,sp,-16
    3534:	dfc00315 	stw	ra,12(sp)
    3538:	df000215 	stw	fp,8(sp)
    353c:	df000204 	addi	fp,sp,8
    3540:	e13ffe15 	stw	r4,-8(fp)
    3544:	e17fff15 	stw	r5,-4(fp)
      { return _M_impl.allocate(__n); }
    3548:	e0bffe17 	ldw	r2,-8(fp)
    354c:	1009883a 	mov	r4,r2
    3550:	e17fff17 	ldw	r5,-4(fp)
    3554:	000d883a 	mov	r6,zero
    3558:	00034cc0 	call	34cc <_ZN9__gnu_cxx13new_allocatorI6MyRectE8allocateEmPKv>
    355c:	e037883a 	mov	sp,fp
    3560:	dfc00117 	ldw	ra,4(sp)
    3564:	df000017 	ldw	fp,0(sp)
    3568:	dec00204 	addi	sp,sp,8
    356c:	f800283a 	ret

00003570 <_ZN9__gnu_cxx13new_allocatorI6MyRectE10deallocateEPS1_m>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
    3570:	defffb04 	addi	sp,sp,-20
    3574:	dfc00415 	stw	ra,16(sp)
    3578:	df000315 	stw	fp,12(sp)
    357c:	df000304 	addi	fp,sp,12
    3580:	e13ffd15 	stw	r4,-12(fp)
    3584:	e17ffe15 	stw	r5,-8(fp)
    3588:	e1bfff15 	stw	r6,-4(fp)
      { ::operator delete(__p); }
    358c:	e13ffe17 	ldw	r4,-8(fp)
    3590:	000de400 	call	de40 <_ZdlPv>
    3594:	e037883a 	mov	sp,fp
    3598:	dfc00117 	ldw	ra,4(sp)
    359c:	df000017 	ldw	fp,0(sp)
    35a0:	dec00204 	addi	sp,sp,8
    35a4:	f800283a 	ret

000035a8 <_ZNSt12_Vector_baseI6MyRectSaIS0_EE13_M_deallocateEPS0_m>:

      void
      _M_deallocate(_Tp* __p, size_t __n)
    35a8:	defffb04 	addi	sp,sp,-20
    35ac:	dfc00415 	stw	ra,16(sp)
    35b0:	df000315 	stw	fp,12(sp)
    35b4:	df000304 	addi	fp,sp,12
    35b8:	e13ffd15 	stw	r4,-12(fp)
    35bc:	e17ffe15 	stw	r5,-8(fp)
    35c0:	e1bfff15 	stw	r6,-4(fp)
      {
	if (__p)
    35c4:	e0bffe17 	ldw	r2,-8(fp)
    35c8:	1005003a 	cmpeq	r2,r2,zero
    35cc:	1000051e 	bne	r2,zero,35e4 <_ZNSt12_Vector_baseI6MyRectSaIS0_EE13_M_deallocateEPS0_m+0x3c>
	  _M_impl.deallocate(__p, __n);
    35d0:	e0bffd17 	ldw	r2,-12(fp)
    35d4:	1009883a 	mov	r4,r2
    35d8:	e17ffe17 	ldw	r5,-8(fp)
    35dc:	e1bfff17 	ldw	r6,-4(fp)
    35e0:	00035700 	call	3570 <_ZN9__gnu_cxx13new_allocatorI6MyRectE10deallocateEPS1_m>
    35e4:	e037883a 	mov	sp,fp
    35e8:	dfc00117 	ldw	ra,4(sp)
    35ec:	df000017 	ldw	fp,0(sp)
    35f0:	dec00204 	addi	sp,sp,8
    35f4:	f800283a 	ret

000035f8 <_ZNSt6vectorI6MyRectSaIS0_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS0_S2_EERKS0_>:
      }

  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
    _M_insert_aux(iterator __position, const _Tp& __x)
    35f8:	deffe704 	addi	sp,sp,-100
    35fc:	dfc01815 	stw	ra,96(sp)
    3600:	df001715 	stw	fp,92(sp)
    3604:	dc401615 	stw	r17,88(sp)
    3608:	dc001515 	stw	r16,84(sp)
    360c:	df001504 	addi	fp,sp,84
    3610:	e13ffc15 	stw	r4,-16(fp)
    3614:	e17ffd15 	stw	r5,-12(fp)
    3618:	e1bffe15 	stw	r6,-8(fp)
    {
      if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
    361c:	e0bffc17 	ldw	r2,-16(fp)
    3620:	10c00117 	ldw	r3,4(r2)
    3624:	e0bffc17 	ldw	r2,-16(fp)
    3628:	10800217 	ldw	r2,8(r2)
    362c:	18803426 	beq	r3,r2,3700 <_ZNSt6vectorI6MyRectSaIS0_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS0_S2_EERKS0_+0x108>
	{
	  this->_M_impl.construct(this->_M_impl._M_finish,
    3630:	e0bffc17 	ldw	r2,-16(fp)
    3634:	1009883a 	mov	r4,r2
    3638:	e0bffc17 	ldw	r2,-16(fp)
    363c:	11400117 	ldw	r5,4(r2)
    3640:	e0bffc17 	ldw	r2,-16(fp)
    3644:	10800117 	ldw	r2,4(r2)
    3648:	11bffc04 	addi	r6,r2,-16
    364c:	0002af80 	call	2af8 <_ZN9__gnu_cxx13new_allocatorI6MyRectE9constructEPS1_RKS1_>
				  *(this->_M_impl._M_finish - 1));
	  ++this->_M_impl._M_finish;
    3650:	e0bffc17 	ldw	r2,-16(fp)
    3654:	10800117 	ldw	r2,4(r2)
    3658:	10c00404 	addi	r3,r2,16
    365c:	e0bffc17 	ldw	r2,-16(fp)
    3660:	10c00115 	stw	r3,4(r2)
	  _Tp __x_copy = __x;
    3664:	e0fffe17 	ldw	r3,-8(fp)
    3668:	18800017 	ldw	r2,0(r3)
    366c:	e0bff615 	stw	r2,-40(fp)
    3670:	18800117 	ldw	r2,4(r3)
    3674:	e0bff715 	stw	r2,-36(fp)
    3678:	18800217 	ldw	r2,8(r3)
    367c:	e0bff815 	stw	r2,-32(fp)
    3680:	18800317 	ldw	r2,12(r3)
    3684:	e0bff915 	stw	r2,-28(fp)
	  std::copy_backward(__position,
    3688:	e0bffc17 	ldw	r2,-16(fp)
    368c:	10800117 	ldw	r2,4(r2)
    3690:	10bff804 	addi	r2,r2,-32
    3694:	e0bff415 	stw	r2,-48(fp)
    3698:	e13ff504 	addi	r4,fp,-44
    369c:	e17ff404 	addi	r5,fp,-48
    36a0:	0002cf40 	call	2cf4 <_ZN9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS1_SaIS1_EEEC1ERKS2_>
    36a4:	e0bffc17 	ldw	r2,-16(fp)
    36a8:	10800117 	ldw	r2,4(r2)
    36ac:	10bffc04 	addi	r2,r2,-16
    36b0:	e0bff215 	stw	r2,-56(fp)
    36b4:	e13ff304 	addi	r4,fp,-52
    36b8:	e17ff204 	addi	r5,fp,-56
    36bc:	0002cf40 	call	2cf4 <_ZN9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS1_SaIS1_EEEC1ERKS2_>
    36c0:	e13ffd17 	ldw	r4,-12(fp)
    36c4:	e17ff517 	ldw	r5,-44(fp)
    36c8:	e1bff317 	ldw	r6,-52(fp)
    36cc:	00032340 	call	3234 <_ZSt13copy_backwardIN9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS2_SaIS2_EEEES7_ET0_T_S9_S8_>
			     iterator(this->_M_impl._M_finish-2),
			     iterator(this->_M_impl._M_finish-1));
	  *__position = __x_copy;
    36d0:	e13ffd04 	addi	r4,fp,-12
    36d4:	0002d640 	call	2d64 <_ZNK9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS1_SaIS1_EEEdeEv>
    36d8:	1007883a 	mov	r3,r2
    36dc:	e0bff617 	ldw	r2,-40(fp)
    36e0:	18800015 	stw	r2,0(r3)
    36e4:	e0bff717 	ldw	r2,-36(fp)
    36e8:	18800115 	stw	r2,4(r3)
    36ec:	e0bff817 	ldw	r2,-32(fp)
    36f0:	18800215 	stw	r2,8(r3)
    36f4:	e0bff917 	ldw	r2,-28(fp)
    36f8:	18800315 	stw	r2,12(r3)
    36fc:	00008206 	br	3908 <_ZNSt6vectorI6MyRectSaIS0_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS0_S2_EERKS0_+0x310>
	}
      else
	{
	  const size_type __old_size = size();
    3700:	e13ffc17 	ldw	r4,-16(fp)
    3704:	0002ec40 	call	2ec4 <_ZNKSt6vectorI6MyRectSaIS0_EE4sizeEv>
    3708:	e0bfec15 	stw	r2,-80(fp)
	  if (__old_size == this->max_size())
    370c:	e13ffc17 	ldw	r4,-16(fp)
    3710:	0002d8c0 	call	2d8c <_ZNKSt6vectorI6MyRectSaIS0_EE8max_sizeEv>
    3714:	1007883a 	mov	r3,r2
    3718:	e0bfec17 	ldw	r2,-80(fp)
    371c:	1885003a 	cmpeq	r2,r3,r2
    3720:	10803fcc 	andi	r2,r2,255
    3724:	1005003a 	cmpeq	r2,r2,zero
    3728:	1000031e 	bne	r2,zero,3738 <_ZNSt6vectorI6MyRectSaIS0_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS0_S2_EERKS0_+0x140>
	    __throw_length_error(__N("vector::_M_insert_aux"));
    372c:	010000b4 	movhi	r4,2
    3730:	2139e904 	addi	r4,r4,-6236
    3734:	00088240 	call	8824 <_ZSt20__throw_length_errorPKc>

	  // When sizeof(value_type) == 1 and __old_size > size_type(-1)/2
	  // __len overflows: if we don't notice and _M_allocate doesn't
	  // throw we crash badly later.
	  size_type __len = __old_size != 0 ? 2 * __old_size : 1;	  
    3738:	e0bfec17 	ldw	r2,-80(fp)
    373c:	1005003a 	cmpeq	r2,r2,zero
    3740:	1000041e 	bne	r2,zero,3754 <_ZNSt6vectorI6MyRectSaIS0_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS0_S2_EERKS0_+0x15c>
    3744:	e0bfec17 	ldw	r2,-80(fp)
    3748:	1085883a 	add	r2,r2,r2
    374c:	e0bfff15 	stw	r2,-4(fp)
    3750:	00000206 	br	375c <_ZNSt6vectorI6MyRectSaIS0_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS0_S2_EERKS0_+0x164>
    3754:	00800044 	movi	r2,1
    3758:	e0bfff15 	stw	r2,-4(fp)
    375c:	e0bfff17 	ldw	r2,-4(fp)
    3760:	e0bfeb15 	stw	r2,-84(fp)
	  if (__len < __old_size)
    3764:	e0ffeb17 	ldw	r3,-84(fp)
    3768:	e0bfec17 	ldw	r2,-80(fp)
    376c:	1880032e 	bgeu	r3,r2,377c <_ZNSt6vectorI6MyRectSaIS0_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS0_S2_EERKS0_+0x184>
	    __len = this->max_size();
    3770:	e13ffc17 	ldw	r4,-16(fp)
    3774:	0002d8c0 	call	2d8c <_ZNKSt6vectorI6MyRectSaIS0_EE8max_sizeEv>
    3778:	e0bfeb15 	stw	r2,-84(fp)

	  iterator __new_start(this->_M_allocate(__len));
    377c:	e13ffc17 	ldw	r4,-16(fp)
    3780:	e17feb17 	ldw	r5,-84(fp)
    3784:	00035300 	call	3530 <_ZNSt12_Vector_baseI6MyRectSaIS0_EE11_M_allocateEm>
    3788:	e0bff115 	stw	r2,-60(fp)
    378c:	e13ffa04 	addi	r4,fp,-24
    3790:	e17ff104 	addi	r5,fp,-60
    3794:	0002cf40 	call	2cf4 <_ZN9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS1_SaIS1_EEEC1ERKS2_>
	  iterator __new_finish(__new_start);
    3798:	e0bffa17 	ldw	r2,-24(fp)
    379c:	e0bffb15 	stw	r2,-20(fp)
	  try
	    {
	      __new_finish =
    37a0:	e17ffc17 	ldw	r5,-16(fp)
    37a4:	e13ff004 	addi	r4,fp,-64
    37a8:	0002cf40 	call	2cf4 <_ZN9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS1_SaIS1_EEEC1ERKS2_>
    37ac:	e13ffc17 	ldw	r4,-16(fp)
    37b0:	0002ad40 	call	2ad4 <_ZNSt12_Vector_baseI6MyRectSaIS0_EE19_M_get_Tp_allocatorEv>
    37b4:	100b883a 	mov	r5,r2
    37b8:	e13fef04 	addi	r4,fp,-68
    37bc:	0002a340 	call	2a34 <_ZNSaI6MyRectEC1ERKS0_>
    37c0:	e1ffef04 	addi	r7,fp,-68
    37c4:	e13ff017 	ldw	r4,-64(fp)
    37c8:	e17ffd17 	ldw	r5,-12(fp)
    37cc:	e1bffa17 	ldw	r6,-24(fp)
    37d0:	00033ac0 	call	33ac <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS2_SaIS2_EEEES7_S2_ET0_T_S9_S8_SaIT1_E>
    37d4:	e0bffb15 	stw	r2,-20(fp)
    37d8:	e13fef04 	addi	r4,fp,-68
    37dc:	00029b00 	call	29b0 <_ZNSaI6MyRectED1Ev>
		std::__uninitialized_copy_a(iterator(this->_M_impl._M_start),
					    __position,
					    __new_start,
					    _M_get_Tp_allocator());
	      this->_M_impl.construct(__new_finish.base(), __x);
    37e0:	e0bffc17 	ldw	r2,-16(fp)
    37e4:	1021883a 	mov	r16,r2
    37e8:	e13ffb04 	addi	r4,fp,-20
    37ec:	0002db40 	call	2db4 <_ZNK9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS1_SaIS1_EEE4baseEv>
    37f0:	11400017 	ldw	r5,0(r2)
    37f4:	8009883a 	mov	r4,r16
    37f8:	e1bffe17 	ldw	r6,-8(fp)
    37fc:	0002af80 	call	2af8 <_ZN9__gnu_cxx13new_allocatorI6MyRectE9constructEPS1_RKS1_>
	      ++__new_finish;
    3800:	e13ffb04 	addi	r4,fp,-20
    3804:	0002dd80 	call	2dd8 <_ZN9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS1_SaIS1_EEEppEv>
	      __new_finish =
    3808:	e0bffc17 	ldw	r2,-16(fp)
    380c:	11400104 	addi	r5,r2,4
    3810:	e13fee04 	addi	r4,fp,-72
    3814:	0002cf40 	call	2cf4 <_ZN9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS1_SaIS1_EEEC1ERKS2_>
    3818:	e13ffc17 	ldw	r4,-16(fp)
    381c:	0002ad40 	call	2ad4 <_ZNSt12_Vector_baseI6MyRectSaIS0_EE19_M_get_Tp_allocatorEv>
    3820:	100b883a 	mov	r5,r2
    3824:	e13fed84 	addi	r4,fp,-74
    3828:	0002a340 	call	2a34 <_ZNSaI6MyRectEC1ERKS0_>
    382c:	e1ffed84 	addi	r7,fp,-74
    3830:	e13ffd17 	ldw	r4,-12(fp)
    3834:	e17fee17 	ldw	r5,-72(fp)
    3838:	e1bffb17 	ldw	r6,-20(fp)
    383c:	00033ac0 	call	33ac <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS2_SaIS2_EEEES7_S2_ET0_T_S9_S8_SaIT1_E>
    3840:	e0bffb15 	stw	r2,-20(fp)
    3844:	e13fed84 	addi	r4,fp,-74
    3848:	00029b00 	call	29b0 <_ZNSaI6MyRectED1Ev>
	    {
	      std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	      _M_deallocate(__new_start.base(),__len);
	      __throw_exception_again;
	    }
	  std::_Destroy(begin(), end(), _M_get_Tp_allocator());
    384c:	e13ffc17 	ldw	r4,-16(fp)
    3850:	0002e100 	call	2e10 <_ZNSt6vectorI6MyRectSaIS0_EE5beginEv>
    3854:	1021883a 	mov	r16,r2
    3858:	e13ffc17 	ldw	r4,-16(fp)
    385c:	0002d280 	call	2d28 <_ZNSt6vectorI6MyRectSaIS0_EE3endEv>
    3860:	1023883a 	mov	r17,r2
    3864:	e13ffc17 	ldw	r4,-16(fp)
    3868:	0002ad40 	call	2ad4 <_ZNSt12_Vector_baseI6MyRectSaIS0_EE19_M_get_Tp_allocatorEv>
    386c:	100b883a 	mov	r5,r2
    3870:	e13fed04 	addi	r4,fp,-76
    3874:	0002a340 	call	2a34 <_ZNSaI6MyRectEC1ERKS0_>
    3878:	e1bfed04 	addi	r6,fp,-76
    387c:	8009883a 	mov	r4,r16
    3880:	880b883a 	mov	r5,r17
    3884:	00034900 	call	3490 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS2_SaIS2_EEEES2_EvT_S8_SaIT0_E>
    3888:	e13fed04 	addi	r4,fp,-76
    388c:	00029b00 	call	29b0 <_ZNSaI6MyRectED1Ev>
	  _M_deallocate(this->_M_impl._M_start,
    3890:	e13ffc17 	ldw	r4,-16(fp)
    3894:	e0bffc17 	ldw	r2,-16(fp)
    3898:	11400017 	ldw	r5,0(r2)
    389c:	e0bffc17 	ldw	r2,-16(fp)
    38a0:	10800217 	ldw	r2,8(r2)
    38a4:	1007883a 	mov	r3,r2
    38a8:	e0bffc17 	ldw	r2,-16(fp)
    38ac:	10800017 	ldw	r2,0(r2)
    38b0:	1885c83a 	sub	r2,r3,r2
    38b4:	1005d13a 	srai	r2,r2,4
    38b8:	100d883a 	mov	r6,r2
    38bc:	00035a80 	call	35a8 <_ZNSt12_Vector_baseI6MyRectSaIS0_EE13_M_deallocateEPS0_m>
			this->_M_impl._M_end_of_storage
			- this->_M_impl._M_start);
	  this->_M_impl._M_start = __new_start.base();
    38c0:	e13ffa04 	addi	r4,fp,-24
    38c4:	0002db40 	call	2db4 <_ZNK9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS1_SaIS1_EEE4baseEv>
    38c8:	10c00017 	ldw	r3,0(r2)
    38cc:	e0bffc17 	ldw	r2,-16(fp)
    38d0:	10c00015 	stw	r3,0(r2)
	  this->_M_impl._M_finish = __new_finish.base();
    38d4:	e13ffb04 	addi	r4,fp,-20
    38d8:	0002db40 	call	2db4 <_ZNK9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS1_SaIS1_EEE4baseEv>
    38dc:	10c00017 	ldw	r3,0(r2)
    38e0:	e0bffc17 	ldw	r2,-16(fp)
    38e4:	10c00115 	stw	r3,4(r2)
	  this->_M_impl._M_end_of_storage = __new_start.base() + __len;
    38e8:	e13ffa04 	addi	r4,fp,-24
    38ec:	0002db40 	call	2db4 <_ZNK9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS1_SaIS1_EEE4baseEv>
    38f0:	10c00017 	ldw	r3,0(r2)
    38f4:	e0bfeb17 	ldw	r2,-84(fp)
    38f8:	1004913a 	slli	r2,r2,4
    38fc:	1887883a 	add	r3,r3,r2
    3900:	e0bffc17 	ldw	r2,-16(fp)
    3904:	10c00215 	stw	r3,8(r2)
    3908:	e037883a 	mov	sp,fp
    390c:	dfc00317 	ldw	ra,12(sp)
    3910:	df000217 	ldw	fp,8(sp)
    3914:	dc400117 	ldw	r17,4(sp)
    3918:	dc000017 	ldw	r16,0(sp)
    391c:	dec00404 	addi	sp,sp,16
    3920:	f800283a 	ret

00003924 <_ZNSt6vectorI6MyRectSaIS0_EE9push_backERKS0_>:
       *  to it.  Due to the nature of a %vector this operation can be
       *  done in constant time if the %vector has preallocated space
       *  available.
       */
      void
      push_back(const value_type& __x)
    3924:	defffc04 	addi	sp,sp,-16
    3928:	dfc00315 	stw	ra,12(sp)
    392c:	df000215 	stw	fp,8(sp)
    3930:	df000204 	addi	fp,sp,8
    3934:	e13ffe15 	stw	r4,-8(fp)
    3938:	e17fff15 	stw	r5,-4(fp)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
    393c:	e0bffe17 	ldw	r2,-8(fp)
    3940:	10c00117 	ldw	r3,4(r2)
    3944:	e0bffe17 	ldw	r2,-8(fp)
    3948:	10800217 	ldw	r2,8(r2)
    394c:	18800c26 	beq	r3,r2,3980 <_ZNSt6vectorI6MyRectSaIS0_EE9push_backERKS0_+0x5c>
	  {
	    this->_M_impl.construct(this->_M_impl._M_finish, __x);
    3950:	e0bffe17 	ldw	r2,-8(fp)
    3954:	1009883a 	mov	r4,r2
    3958:	e0bffe17 	ldw	r2,-8(fp)
    395c:	11400117 	ldw	r5,4(r2)
    3960:	e1bfff17 	ldw	r6,-4(fp)
    3964:	0002af80 	call	2af8 <_ZN9__gnu_cxx13new_allocatorI6MyRectE9constructEPS1_RKS1_>
	    ++this->_M_impl._M_finish;
    3968:	e0bffe17 	ldw	r2,-8(fp)
    396c:	10800117 	ldw	r2,4(r2)
    3970:	10c00404 	addi	r3,r2,16
    3974:	e0bffe17 	ldw	r2,-8(fp)
    3978:	10c00115 	stw	r3,4(r2)
    397c:	00000606 	br	3998 <_ZNSt6vectorI6MyRectSaIS0_EE9push_backERKS0_+0x74>
	  }
	else
	  _M_insert_aux(end(), __x);
    3980:	e13ffe17 	ldw	r4,-8(fp)
    3984:	0002d280 	call	2d28 <_ZNSt6vectorI6MyRectSaIS0_EE3endEv>
    3988:	100b883a 	mov	r5,r2
    398c:	e13ffe17 	ldw	r4,-8(fp)
    3990:	e1bfff17 	ldw	r6,-4(fp)
    3994:	00035f80 	call	35f8 <_ZNSt6vectorI6MyRectSaIS0_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS0_S2_EERKS0_>
    3998:	e037883a 	mov	sp,fp
    399c:	dfc00117 	ldw	ra,4(sp)
    39a0:	df000017 	ldw	fp,0(sp)
    39a4:	dec00204 	addi	sp,sp,8
    39a8:	f800283a 	ret

000039ac <_ZNSt12_Vector_baseI6MyRectSaIS0_EED2Ev>:
	this->_M_impl._M_start = this->_M_allocate(__n);
	this->_M_impl._M_finish = this->_M_impl._M_start;
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
      }

      ~_Vector_base()
    39ac:	defffd04 	addi	sp,sp,-12
    39b0:	dfc00215 	stw	ra,8(sp)
    39b4:	df000115 	stw	fp,4(sp)
    39b8:	df000104 	addi	fp,sp,4
    39bc:	e13fff15 	stw	r4,-4(fp)
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
    39c0:	e0bfff17 	ldw	r2,-4(fp)
    39c4:	11400017 	ldw	r5,0(r2)
    39c8:	e0bfff17 	ldw	r2,-4(fp)
    39cc:	10800217 	ldw	r2,8(r2)
    39d0:	1007883a 	mov	r3,r2
    39d4:	e0bfff17 	ldw	r2,-4(fp)
    39d8:	10800017 	ldw	r2,0(r2)
    39dc:	1885c83a 	sub	r2,r3,r2
    39e0:	1005d13a 	srai	r2,r2,4
    39e4:	100d883a 	mov	r6,r2
    39e8:	e13fff17 	ldw	r4,-4(fp)
    39ec:	00035a80 	call	35a8 <_ZNSt12_Vector_baseI6MyRectSaIS0_EE13_M_deallocateEPS0_m>
    39f0:	e13fff17 	ldw	r4,-4(fp)
    39f4:	0002aa40 	call	2aa4 <_ZNSt12_Vector_baseI6MyRectSaIS0_EE12_Vector_implD1Ev>
    39f8:	e037883a 	mov	sp,fp
    39fc:	dfc00117 	ldw	ra,4(sp)
    3a00:	df000017 	ldw	fp,0(sp)
    3a04:	dec00204 	addi	sp,sp,8
    3a08:	f800283a 	ret

00003a0c <_ZNSt6vectorI6MyRectSaIS0_EED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibilty.
       */
      ~vector()
    3a0c:	defffa04 	addi	sp,sp,-24
    3a10:	dfc00515 	stw	ra,20(sp)
    3a14:	df000415 	stw	fp,16(sp)
    3a18:	dc400315 	stw	r17,12(sp)
    3a1c:	dc000215 	stw	r16,8(sp)
    3a20:	df000204 	addi	fp,sp,8
    3a24:	e13fff15 	stw	r4,-4(fp)
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    3a28:	e0bfff17 	ldw	r2,-4(fp)
    3a2c:	14000017 	ldw	r16,0(r2)
    3a30:	e0bfff17 	ldw	r2,-4(fp)
    3a34:	14400117 	ldw	r17,4(r2)
    3a38:	e13fff17 	ldw	r4,-4(fp)
    3a3c:	0002ad40 	call	2ad4 <_ZNSt12_Vector_baseI6MyRectSaIS0_EE19_M_get_Tp_allocatorEv>
    3a40:	100b883a 	mov	r5,r2
    3a44:	e13ffe04 	addi	r4,fp,-8
    3a48:	0002a340 	call	2a34 <_ZNSaI6MyRectEC1ERKS0_>
    3a4c:	8009883a 	mov	r4,r16
    3a50:	880b883a 	mov	r5,r17
    3a54:	e1bffe04 	addi	r6,fp,-8
    3a58:	0002ff00 	call	2ff0 <_ZSt8_DestroyIP6MyRectS0_EvT_S2_SaIT0_E>
    3a5c:	e13ffe04 	addi	r4,fp,-8
    3a60:	00029b00 	call	29b0 <_ZNSaI6MyRectED1Ev>
    3a64:	e13fff17 	ldw	r4,-4(fp)
    3a68:	00039ac0 	call	39ac <_ZNSt12_Vector_baseI6MyRectSaIS0_EED2Ev>
    3a6c:	e037883a 	mov	sp,fp
    3a70:	dfc00317 	ldw	ra,12(sp)
    3a74:	df000217 	ldw	fp,8(sp)
    3a78:	dc400117 	ldw	r17,4(sp)
    3a7c:	dc000017 	ldw	r16,0(sp)
    3a80:	dec00404 	addi	sp,sp,16
    3a84:	f800283a 	ret

00003a88 <main>:
#define OUTPUT_FILENAME "/mnt/host/Output.pgm"

using namespace std;


int main (int argc, char *argv[]) 
    3a88:	deffab04 	addi	sp,sp,-340
    3a8c:	dfc05415 	stw	ra,336(sp)
    3a90:	df005315 	stw	fp,332(sp)
    3a94:	ddc05215 	stw	r23,328(sp)
    3a98:	dd805115 	stw	r22,324(sp)
    3a9c:	dd405015 	stw	r21,320(sp)
    3aa0:	dd004f15 	stw	r20,316(sp)
    3aa4:	dcc04e15 	stw	r19,312(sp)
    3aa8:	dc804d15 	stw	r18,308(sp)
    3aac:	dc404c15 	stw	r17,304(sp)
    3ab0:	dc004b15 	stw	r16,300(sp)
    3ab4:	df004b04 	addi	fp,sp,300
    3ab8:	e13feb15 	stw	r4,-84(fp)
    3abc:	e17fec15 	stw	r5,-80(fp)
    3ac0:	00800074 	movhi	r2,1
    3ac4:	10b95604 	addi	r2,r2,-6824
    3ac8:	e0bff315 	stw	r2,-52(fp)
    3acc:	008000b4 	movhi	r2,2
    3ad0:	10b90b84 	addi	r2,r2,-7122
    3ad4:	e0bff415 	stw	r2,-48(fp)
    3ad8:	e0bff504 	addi	r2,fp,-44
    3adc:	e0ffba04 	addi	r3,fp,-280
    3ae0:	10c00015 	stw	r3,0(r2)
    3ae4:	00c00034 	movhi	r3,0
    3ae8:	18cf1404 	addi	r3,r3,15440
    3aec:	10c00115 	stw	r3,4(r2)
    3af0:	16c00215 	stw	sp,8(r2)
    3af4:	e13fed04 	addi	r4,fp,-76
    3af8:	00108500 	call	10850 <_Unwind_SjLj_Register>
{

	int flag;
	
	int mode = 1;
    3afc:	00800044 	movi	r2,1
    3b00:	e0bfbf15 	stw	r2,-260(fp)
	int i;

	/* detection parameters */
	float scaleFactor = 1.2;
    3b04:	008fe6b4 	movhi	r2,16282
    3b08:	10a66684 	addi	r2,r2,-26214
    3b0c:	e0bfbd15 	stw	r2,-268(fp)
	int minNeighbours = 1;
    3b10:	00800044 	movi	r2,1
    3b14:	e0bfbc15 	stw	r2,-272(fp)


	printf("-- entering main function --\r\n");
    3b18:	00bfffc4 	movi	r2,-1
    3b1c:	e0bfee15 	stw	r2,-72(fp)
    3b20:	010000b4 	movhi	r4,2
    3b24:	2139f704 	addi	r4,r4,-6180
    3b28:	0013fb80 	call	13fb8 <puts>

	printf("-- loading image --\r\n");
    3b2c:	010000b4 	movhi	r4,2
    3b30:	2139ff04 	addi	r4,r4,-6148
    3b34:	0013fb80 	call	13fb8 <puts>

	MyImage imageObj;
	MyImage *image = &imageObj;
    3b38:	e0bfc504 	addi	r2,fp,-236
    3b3c:	e0bfbb15 	stw	r2,-276(fp)
	{
		printf( "Unable to open input image\n");
		return 1;
	}*/

	flag = readImage(0, 0, 320, 240, image);
    3b40:	e0bfbb17 	ldw	r2,-276(fp)
    3b44:	d8800015 	stw	r2,0(sp)
    3b48:	0009883a 	mov	r4,zero
    3b4c:	000b883a 	mov	r5,zero
    3b50:	01805004 	movi	r6,320
    3b54:	01c03c04 	movi	r7,240
    3b58:	00004c40 	call	4c4 <readImage>
    3b5c:	e0bfc015 	stw	r2,-256(fp)

	printf("-- loading cascade classifier --\r\n");
    3b60:	010000b4 	movhi	r4,2
    3b64:	213a0504 	addi	r4,r4,-6124
    3b68:	0013fb80 	call	13fb8 <puts>

	myCascade cascadeObj;
	myCascade *cascade = &cascadeObj;
    3b6c:	e0bfd504 	addi	r2,fp,-172
    3b70:	e0bfba15 	stw	r2,-280(fp)
	MySize minSize = {20, 20};
    3b74:	00800504 	movi	r2,20
    3b78:	e0bfca15 	stw	r2,-216(fp)
    3b7c:	00800504 	movi	r2,20
    3b80:	e0bfcb15 	stw	r2,-212(fp)
	MySize maxSize = {0, 0};
    3b84:	e03fcc15 	stw	zero,-208(fp)
    3b88:	e03fcd15 	stw	zero,-204(fp)

	/* classifier properties */
	cascade->n_stages=25;
    3b8c:	e0ffba17 	ldw	r3,-280(fp)
    3b90:	00800644 	movi	r2,25
    3b94:	18800015 	stw	r2,0(r3)
	cascade->total_nodes=2913;
    3b98:	e0ffba17 	ldw	r3,-280(fp)
    3b9c:	0082d844 	movi	r2,2913
    3ba0:	18800115 	stw	r2,4(r3)
	cascade->orig_window_size.height = 24;
    3ba4:	e0ffba17 	ldw	r3,-280(fp)
    3ba8:	00800604 	movi	r2,24
    3bac:	18800415 	stw	r2,16(r3)
	cascade->orig_window_size.width = 24;
    3bb0:	e0ffba17 	ldw	r3,-280(fp)
    3bb4:	00800604 	movi	r2,24
    3bb8:	18800315 	stw	r2,12(r3)


	readTextClassifier();
    3bbc:	0001aac0 	call	1aac <readTextClassifier>

	std::vector<MyRect> result;
    3bc0:	e13fc404 	addi	r4,fp,-240
    3bc4:	00029600 	call	2960 <_ZNSaI6MyRectEC1Ev>
    3bc8:	e13fce04 	addi	r4,fp,-200
    3bcc:	e17fc404 	addi	r5,fp,-240
    3bd0:	0002c000 	call	2c00 <_ZNSt6vectorI6MyRectSaIS0_EEC1ERKS1_>
    3bd4:	e13fc404 	addi	r4,fp,-240
    3bd8:	00029b00 	call	29b0 <_ZNSaI6MyRectED1Ev>

	printf("-- detecting faces --\r\n");
    3bdc:	00800084 	movi	r2,2
    3be0:	e0bfee15 	stw	r2,-72(fp)
    3be4:	010000b4 	movhi	r4,2
    3be8:	213a0e04 	addi	r4,r4,-6088
    3bec:	0013fb80 	call	13fb8 <puts>

	result = detectObjects(image, minSize, maxSize, cascade, scaleFactor, minNeighbours);
    3bf0:	e13fc104 	addi	r4,fp,-252
    3bf4:	e0bfcc17 	ldw	r2,-208(fp)
    3bf8:	d8800015 	stw	r2,0(sp)
    3bfc:	e0bfcd17 	ldw	r2,-204(fp)
    3c00:	d8800115 	stw	r2,4(sp)
    3c04:	e0bfba17 	ldw	r2,-280(fp)
    3c08:	d8800215 	stw	r2,8(sp)
    3c0c:	e0bfbd17 	ldw	r2,-268(fp)
    3c10:	d8800315 	stw	r2,12(sp)
    3c14:	e0bfbc17 	ldw	r2,-272(fp)
    3c18:	d8800415 	stw	r2,16(sp)
    3c1c:	e17fbb17 	ldw	r5,-276(fp)
    3c20:	e1bfca17 	ldw	r6,-216(fp)
    3c24:	e1ffcb17 	ldw	r7,-212(fp)
    3c28:	00020b00 	call	20b0 <detectObjects>
    3c2c:	e13fce04 	addi	r4,fp,-200
    3c30:	e17fc104 	addi	r5,fp,-252
    3c34:	00800044 	movi	r2,1
    3c38:	e0bfee15 	stw	r2,-72(fp)
    3c3c:	00043b80 	call	43b8 <_ZNSt6vectorI6MyRectSaIS0_EEaSERKS2_>
    3c40:	e13fc104 	addi	r4,fp,-252
    3c44:	0003a0c0 	call	3a0c <_ZNSt6vectorI6MyRectSaIS0_EED1Ev>

	for(i = 0; i < result.size(); i++ )
    3c48:	e03fbe15 	stw	zero,-264(fp)
    3c4c:	00002506 	br	3ce4 <main+0x25c>
    3c50:	e7004604 	addi	fp,fp,280
    3c54:	e0bfee17 	ldw	r2,-72(fp)
    3c58:	e0ffef17 	ldw	r3,-68(fp)
    3c5c:	e0ffff15 	stw	r3,-4(fp)
    3c60:	10800060 	cmpeqi	r2,r2,1
    3c64:	10003e1e 	bne	r2,zero,3d60 <main+0x2d8>
    3c68:	e0bfff17 	ldw	r2,-4(fp)
    3c6c:	e0bffb15 	stw	r2,-20(fp)

	std::vector<MyRect> result;

	printf("-- detecting faces --\r\n");

	result = detectObjects(image, minSize, maxSize, cascade, scaleFactor, minNeighbours);
    3c70:	e13fc104 	addi	r4,fp,-252
    3c74:	0003a0c0 	call	3a0c <_ZNSt6vectorI6MyRectSaIS0_EED1Ev>
    3c78:	e0fffb17 	ldw	r3,-20(fp)
    3c7c:	e0ffff15 	stw	r3,-4(fp)
    3c80:	00003706 	br	3d60 <main+0x2d8>

	for(i = 0; i < result.size(); i++ )
	{
		MyRect r = result[i];
    3c84:	e17fbe17 	ldw	r5,-264(fp)
    3c88:	e13fce04 	addi	r4,fp,-200
    3c8c:	0003e780 	call	3e78 <_ZNSt6vectorI6MyRectSaIS0_EEixEm>
    3c90:	1007883a 	mov	r3,r2
    3c94:	18800017 	ldw	r2,0(r3)
    3c98:	e0bfd115 	stw	r2,-188(fp)
    3c9c:	18800117 	ldw	r2,4(r3)
    3ca0:	e0bfd215 	stw	r2,-184(fp)
    3ca4:	18800217 	ldw	r2,8(r3)
    3ca8:	e0bfd315 	stw	r2,-180(fp)
    3cac:	18800317 	ldw	r2,12(r3)
    3cb0:	e0bfd415 	stw	r2,-176(fp)
		drawRectangle(image, r);
    3cb4:	e0bfd417 	ldw	r2,-176(fp)
    3cb8:	d8800015 	stw	r2,0(sp)
    3cbc:	00800084 	movi	r2,2
    3cc0:	e0bfee15 	stw	r2,-72(fp)
    3cc4:	e17fd117 	ldw	r5,-188(fp)
    3cc8:	e1bfd217 	ldw	r6,-184(fp)
    3ccc:	e1ffd317 	ldw	r7,-180(fp)
    3cd0:	e13fbb17 	ldw	r4,-276(fp)
    3cd4:	000495c0 	call	495c <drawRectangle>

	printf("-- detecting faces --\r\n");

	result = detectObjects(image, minSize, maxSize, cascade, scaleFactor, minNeighbours);

	for(i = 0; i < result.size(); i++ )
    3cd8:	e0bfbe17 	ldw	r2,-264(fp)
    3cdc:	10800044 	addi	r2,r2,1
    3ce0:	e0bfbe15 	stw	r2,-264(fp)
    3ce4:	e0bfbe17 	ldw	r2,-264(fp)
    3ce8:	e0bffd15 	stw	r2,-12(fp)
    3cec:	e13fce04 	addi	r4,fp,-200
    3cf0:	0002ec40 	call	2ec4 <_ZNKSt6vectorI6MyRectSaIS0_EE4sizeEv>
    3cf4:	e0fffd17 	ldw	r3,-12(fp)
    3cf8:	1885803a 	cmpltu	r2,r3,r2
    3cfc:	10803fcc 	andi	r2,r2,255
    3d00:	1004c03a 	cmpne	r2,r2,zero
    3d04:	103fdf1e 	bne	r2,zero,3c84 <main+0x1fc>
	{
		MyRect r = result[i];
		drawRectangle(image, r);
	}

	printf("-- saving output --\r\n"); 
    3d08:	00800084 	movi	r2,2
    3d0c:	e0bfee15 	stw	r2,-72(fp)
    3d10:	010000b4 	movhi	r4,2
    3d14:	213a1404 	addi	r4,r4,-6064
    3d18:	0013fb80 	call	13fb8 <puts>
	flag = writePgm((char *)OUTPUT_FILENAME, image); 
    3d1c:	010000b4 	movhi	r4,2
    3d20:	213a1a04 	addi	r4,r4,-6040
    3d24:	e17fbb17 	ldw	r5,-276(fp)
    3d28:	00005d80 	call	5d8 <writePgm>
    3d2c:	e0bfc015 	stw	r2,-256(fp)

	printf("-- image saved --\r\n");
    3d30:	010000b4 	movhi	r4,2
    3d34:	213a2004 	addi	r4,r4,-6016
    3d38:	0013fb80 	call	13fb8 <puts>

	/* delete image and free classifier */
	releaseTextClassifier();
    3d3c:	0001a480 	call	1a48 <releaseTextClassifier>
	freeImage(image);
    3d40:	e13fbb17 	ldw	r4,-276(fp)
    3d44:	00009780 	call	978 <freeImage>

	return 0;
    3d48:	e03ffc15 	stw	zero,-16(fp)
    3d4c:	e13fce04 	addi	r4,fp,-200
    3d50:	0003a0c0 	call	3a0c <_ZNSt6vectorI6MyRectSaIS0_EED1Ev>
    3d54:	e0bffc17 	ldw	r2,-16(fp)
    3d58:	e0bffe15 	stw	r2,-8(fp)
    3d5c:	00000a06 	br	3d88 <main+0x300>
    3d60:	e0ffff17 	ldw	r3,-4(fp)
    3d64:	e0fffa15 	stw	r3,-24(fp)
    3d68:	e13fce04 	addi	r4,fp,-200
    3d6c:	0003a0c0 	call	3a0c <_ZNSt6vectorI6MyRectSaIS0_EED1Ev>
    3d70:	e0bffa17 	ldw	r2,-24(fp)
    3d74:	e0bfff15 	stw	r2,-4(fp)
    3d78:	00bfffc4 	movi	r2,-1
    3d7c:	e0bfee15 	stw	r2,-72(fp)
    3d80:	e13fff17 	ldw	r4,-4(fp)
    3d84:	0010b1c0 	call	10b1c <_Unwind_SjLj_Resume>
    3d88:	e13fed04 	addi	r4,fp,-76
    3d8c:	00108600 	call	10860 <_Unwind_SjLj_Unregister>
}
    3d90:	e0bffe17 	ldw	r2,-8(fp)
    3d94:	e037883a 	mov	sp,fp
    3d98:	dfc00917 	ldw	ra,36(sp)
    3d9c:	df000817 	ldw	fp,32(sp)
    3da0:	ddc00717 	ldw	r23,28(sp)
    3da4:	dd800617 	ldw	r22,24(sp)
    3da8:	dd400517 	ldw	r21,20(sp)
    3dac:	dd000417 	ldw	r20,16(sp)
    3db0:	dcc00317 	ldw	r19,12(sp)
    3db4:	dc800217 	ldw	r18,8(sp)
    3db8:	dc400117 	ldw	r17,4(sp)
    3dbc:	dc000017 	ldw	r16,0(sp)
    3dc0:	dec00a04 	addi	sp,sp,40
    3dc4:	f800283a 	ret

00003dc8 <_ZNK9__gnu_cxx17__normal_iteratorIPK6MyRectSt6vectorIS1_SaIS1_EEEplERKl>:
      __normal_iterator&
      operator+=(const difference_type& __n)
      { _M_current += __n; return *this; }

      __normal_iterator
      operator+(const difference_type& __n) const
    3dc8:	defffa04 	addi	sp,sp,-24
    3dcc:	dfc00515 	stw	ra,20(sp)
    3dd0:	df000415 	stw	fp,16(sp)
    3dd4:	df000404 	addi	fp,sp,16
    3dd8:	e13ffe15 	stw	r4,-8(fp)
    3ddc:	e17fff15 	stw	r5,-4(fp)
      { return __normal_iterator(_M_current + __n); }
    3de0:	e0bffe17 	ldw	r2,-8(fp)
    3de4:	10c00017 	ldw	r3,0(r2)
    3de8:	e0bfff17 	ldw	r2,-4(fp)
    3dec:	10800017 	ldw	r2,0(r2)
    3df0:	1004913a 	slli	r2,r2,4
    3df4:	1885883a 	add	r2,r3,r2
    3df8:	e0bffc15 	stw	r2,-16(fp)
    3dfc:	e13ffd04 	addi	r4,fp,-12
    3e00:	e17ffc04 	addi	r5,fp,-16
    3e04:	0002c380 	call	2c38 <_ZN9__gnu_cxx17__normal_iteratorIPK6MyRectSt6vectorIS1_SaIS1_EEEC1ERKS3_>
    3e08:	e0bffd17 	ldw	r2,-12(fp)
    3e0c:	e037883a 	mov	sp,fp
    3e10:	dfc00117 	ldw	ra,4(sp)
    3e14:	df000017 	ldw	fp,0(sp)
    3e18:	dec00204 	addi	sp,sp,8
    3e1c:	f800283a 	ret

00003e20 <_ZNK9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS1_SaIS1_EEEplERKl>:
      __normal_iterator&
      operator+=(const difference_type& __n)
      { _M_current += __n; return *this; }

      __normal_iterator
      operator+(const difference_type& __n) const
    3e20:	defffa04 	addi	sp,sp,-24
    3e24:	dfc00515 	stw	ra,20(sp)
    3e28:	df000415 	stw	fp,16(sp)
    3e2c:	df000404 	addi	fp,sp,16
    3e30:	e13ffe15 	stw	r4,-8(fp)
    3e34:	e17fff15 	stw	r5,-4(fp)
      { return __normal_iterator(_M_current + __n); }
    3e38:	e0bffe17 	ldw	r2,-8(fp)
    3e3c:	10c00017 	ldw	r3,0(r2)
    3e40:	e0bfff17 	ldw	r2,-4(fp)
    3e44:	10800017 	ldw	r2,0(r2)
    3e48:	1004913a 	slli	r2,r2,4
    3e4c:	1885883a 	add	r2,r3,r2
    3e50:	e0bffc15 	stw	r2,-16(fp)
    3e54:	e13ffd04 	addi	r4,fp,-12
    3e58:	e17ffc04 	addi	r5,fp,-16
    3e5c:	0002cf40 	call	2cf4 <_ZN9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS1_SaIS1_EEEC1ERKS2_>
    3e60:	e0bffd17 	ldw	r2,-12(fp)
    3e64:	e037883a 	mov	sp,fp
    3e68:	dfc00117 	ldw	ra,4(sp)
    3e6c:	df000017 	ldw	fp,0(sp)
    3e70:	dec00204 	addi	sp,sp,8
    3e74:	f800283a 	ret

00003e78 <_ZNSt6vectorI6MyRectSaIS0_EEixEm>:
       *  Note that data access with this operator is unchecked and
       *  out_of_range lookups are not defined. (For checked lookups
       *  see at().)
       */
      reference
      operator[](size_type __n)
    3e78:	defff904 	addi	sp,sp,-28
    3e7c:	dfc00615 	stw	ra,24(sp)
    3e80:	df000515 	stw	fp,20(sp)
    3e84:	df000504 	addi	fp,sp,20
    3e88:	e13ffe15 	stw	r4,-8(fp)
    3e8c:	e17fff15 	stw	r5,-4(fp)
      { return *(begin() + __n); }
    3e90:	e13ffe17 	ldw	r4,-8(fp)
    3e94:	0002e100 	call	2e10 <_ZNSt6vectorI6MyRectSaIS0_EE5beginEv>
    3e98:	e0bffc15 	stw	r2,-16(fp)
    3e9c:	e0bfff17 	ldw	r2,-4(fp)
    3ea0:	e0bffb15 	stw	r2,-20(fp)
    3ea4:	e13ffc04 	addi	r4,fp,-16
    3ea8:	e17ffb04 	addi	r5,fp,-20
    3eac:	0003e200 	call	3e20 <_ZNK9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS1_SaIS1_EEEplERKl>
    3eb0:	e0bffd15 	stw	r2,-12(fp)
    3eb4:	e13ffd04 	addi	r4,fp,-12
    3eb8:	0002d640 	call	2d64 <_ZNK9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS1_SaIS1_EEEdeEv>
    3ebc:	e037883a 	mov	sp,fp
    3ec0:	dfc00117 	ldw	ra,4(sp)
    3ec4:	df000017 	ldw	fp,0(sp)
    3ec8:	dec00204 	addi	sp,sp,8
    3ecc:	f800283a 	ret

00003ed0 <_ZNKSt6vectorI6MyRectSaIS0_EE8capacityEv>:
      /**
       *  Returns the total number of elements that the %vector can
       *  hold before needing to allocate more memory.
       */
      size_type
      capacity() const
    3ed0:	defffa04 	addi	sp,sp,-24
    3ed4:	dfc00515 	stw	ra,20(sp)
    3ed8:	df000415 	stw	fp,16(sp)
    3edc:	df000404 	addi	fp,sp,16
    3ee0:	e13fff15 	stw	r4,-4(fp)
      { return size_type(const_iterator(this->_M_impl._M_end_of_storage)
			 - begin()); }
    3ee4:	e0bfff17 	ldw	r2,-4(fp)
    3ee8:	10800217 	ldw	r2,8(r2)
    3eec:	e0bffd15 	stw	r2,-12(fp)
    3ef0:	e13ffe04 	addi	r4,fp,-8
    3ef4:	e17ffd04 	addi	r5,fp,-12
    3ef8:	0002c380 	call	2c38 <_ZN9__gnu_cxx17__normal_iteratorIPK6MyRectSt6vectorIS1_SaIS1_EEEC1ERKS3_>
    3efc:	e13fff17 	ldw	r4,-4(fp)
    3f00:	0002cb00 	call	2cb0 <_ZNKSt6vectorI6MyRectSaIS0_EE5beginEv>
    3f04:	e0bffc15 	stw	r2,-16(fp)
    3f08:	e13ffe04 	addi	r4,fp,-8
    3f0c:	e17ffc04 	addi	r5,fp,-16
    3f10:	0002e6c0 	call	2e6c <_ZN9__gnu_cxxmiIPK6MyRectS3_St6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T1_E15difference_typeERKSA_RKNS7_IT0_S9_EE>
    3f14:	e037883a 	mov	sp,fp
    3f18:	dfc00117 	ldw	ra,4(sp)
    3f1c:	df000017 	ldw	fp,0(sp)
    3f20:	dec00204 	addi	sp,sp,8
    3f24:	f800283a 	ret

00003f28 <_ZN9__gnu_cxxneIPK6MyRectSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    3f28:	defffb04 	addi	sp,sp,-20
    3f2c:	dfc00415 	stw	ra,16(sp)
    3f30:	df000315 	stw	fp,12(sp)
    3f34:	dc000215 	stw	r16,8(sp)
    3f38:	df000204 	addi	fp,sp,8
    3f3c:	e13ffe15 	stw	r4,-8(fp)
    3f40:	e17fff15 	stw	r5,-4(fp)
    { return __lhs.base() != __rhs.base(); }
    3f44:	e13ffe17 	ldw	r4,-8(fp)
    3f48:	0002e480 	call	2e48 <_ZNK9__gnu_cxx17__normal_iteratorIPK6MyRectSt6vectorIS1_SaIS1_EEE4baseEv>
    3f4c:	14000017 	ldw	r16,0(r2)
    3f50:	e13fff17 	ldw	r4,-4(fp)
    3f54:	0002e480 	call	2e48 <_ZNK9__gnu_cxx17__normal_iteratorIPK6MyRectSt6vectorIS1_SaIS1_EEE4baseEv>
    3f58:	10800017 	ldw	r2,0(r2)
    3f5c:	8084c03a 	cmpne	r2,r16,r2
    3f60:	e037883a 	mov	sp,fp
    3f64:	dfc00217 	ldw	ra,8(sp)
    3f68:	df000117 	ldw	fp,4(sp)
    3f6c:	dc000017 	ldw	r16,0(sp)
    3f70:	dec00304 	addi	sp,sp,12
    3f74:	f800283a 	ret

00003f78 <_ZN9__gnu_cxx17__normal_iteratorIPK6MyRectSt6vectorIS1_SaIS1_EEEppEv>:
      pointer
      operator->() const
      { return _M_current; }

      __normal_iterator&
      operator++()
    3f78:	defffe04 	addi	sp,sp,-8
    3f7c:	df000115 	stw	fp,4(sp)
    3f80:	df000104 	addi	fp,sp,4
    3f84:	e13fff15 	stw	r4,-4(fp)
      {
	++_M_current;
    3f88:	e0bfff17 	ldw	r2,-4(fp)
    3f8c:	10800017 	ldw	r2,0(r2)
    3f90:	10c00404 	addi	r3,r2,16
    3f94:	e0bfff17 	ldw	r2,-4(fp)
    3f98:	10c00015 	stw	r3,0(r2)
	return *this;
    3f9c:	e0bfff17 	ldw	r2,-4(fp)
    3fa0:	e037883a 	mov	sp,fp
    3fa4:	df000017 	ldw	fp,0(sp)
    3fa8:	dec00104 	addi	sp,sp,4
    3fac:	f800283a 	ret

00003fb0 <_ZNK9__gnu_cxx17__normal_iteratorIPK6MyRectSt6vectorIS1_SaIS1_EEEdeEv>:
			  >::__type>& __i)
        : _M_current(__i.base()) { }

      // Forward iterator requirements
      reference
      operator*() const
    3fb0:	defffe04 	addi	sp,sp,-8
    3fb4:	df000115 	stw	fp,4(sp)
    3fb8:	df000104 	addi	fp,sp,4
    3fbc:	e13fff15 	stw	r4,-4(fp)
      { return *_M_current; }
    3fc0:	e0bfff17 	ldw	r2,-4(fp)
    3fc4:	10800017 	ldw	r2,0(r2)
    3fc8:	e037883a 	mov	sp,fp
    3fcc:	df000017 	ldw	fp,0(sp)
    3fd0:	dec00104 	addi	sp,sp,4
    3fd4:	f800283a 	ret

00003fd8 <_ZSt24__uninitialized_copy_auxIN9__gnu_cxx17__normal_iteratorIPK6MyRectSt6vectorIS2_SaIS2_EEEEPS2_ET0_T_SB_SA_12__false_type>:

  template<typename _InputIterator, typename _ForwardIterator>
    inline _ForwardIterator
    __uninitialized_copy_aux(_InputIterator __first, _InputIterator __last,
			     _ForwardIterator __result,
			     __false_type)
    3fd8:	defff904 	addi	sp,sp,-28
    3fdc:	dfc00615 	stw	ra,24(sp)
    3fe0:	df000515 	stw	fp,20(sp)
    3fe4:	df000504 	addi	fp,sp,20
    3fe8:	e13ffc15 	stw	r4,-16(fp)
    3fec:	e17ffd15 	stw	r5,-12(fp)
    3ff0:	e1bffe15 	stw	r6,-8(fp)
    3ff4:	e1ffff05 	stb	r7,-4(fp)
    {
      _ForwardIterator __cur = __result;
    3ff8:	e0bffe17 	ldw	r2,-8(fp)
    3ffc:	e0bffb15 	stw	r2,-20(fp)
      try
	{
	  for (; __first != __last; ++__first, ++__cur)
    4000:	00000a06 	br	402c <_ZSt24__uninitialized_copy_auxIN9__gnu_cxx17__normal_iteratorIPK6MyRectSt6vectorIS2_SaIS2_EEEEPS2_ET0_T_SB_SA_12__false_type+0x54>
	    std::_Construct(&*__cur, *__first);
    4004:	e13ffc04 	addi	r4,fp,-16
    4008:	0003fb00 	call	3fb0 <_ZNK9__gnu_cxx17__normal_iteratorIPK6MyRectSt6vectorIS1_SaIS1_EEEdeEv>
    400c:	100b883a 	mov	r5,r2
    4010:	e13ffb17 	ldw	r4,-20(fp)
    4014:	00030540 	call	3054 <_ZSt10_ConstructI6MyRectS0_EvPT_RKT0_>
			     __false_type)
    {
      _ForwardIterator __cur = __result;
      try
	{
	  for (; __first != __last; ++__first, ++__cur)
    4018:	e13ffc04 	addi	r4,fp,-16
    401c:	0003f780 	call	3f78 <_ZN9__gnu_cxx17__normal_iteratorIPK6MyRectSt6vectorIS1_SaIS1_EEEppEv>
    4020:	e0bffb17 	ldw	r2,-20(fp)
    4024:	10800404 	addi	r2,r2,16
    4028:	e0bffb15 	stw	r2,-20(fp)
    402c:	e13ffc04 	addi	r4,fp,-16
    4030:	e17ffd04 	addi	r5,fp,-12
    4034:	0003f280 	call	3f28 <_ZN9__gnu_cxxneIPK6MyRectSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
    4038:	10803fcc 	andi	r2,r2,255
    403c:	1004c03a 	cmpne	r2,r2,zero
    4040:	103ff01e 	bne	r2,zero,4004 <_ZSt24__uninitialized_copy_auxIN9__gnu_cxx17__normal_iteratorIPK6MyRectSt6vectorIS2_SaIS2_EEEEPS2_ET0_T_SB_SA_12__false_type+0x2c>
	    std::_Construct(&*__cur, *__first);
	  return __cur;
    4044:	e0bffb17 	ldw	r2,-20(fp)
	}
      catch(...)
	{
	  std::_Destroy(__result, __cur);
	  __throw_exception_again;
    4048:	e037883a 	mov	sp,fp
    404c:	dfc00117 	ldw	ra,4(sp)
    4050:	df000017 	ldw	fp,0(sp)
    4054:	dec00204 	addi	sp,sp,8
    4058:	f800283a 	ret

0000405c <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPK6MyRectSt6vectorIS2_SaIS2_EEEEPS2_ET0_T_SB_SA_>:
   *  Like copy(), but does not require an initialized output range.
  */
  template<typename _InputIterator, typename _ForwardIterator>
    inline _ForwardIterator
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
		       _ForwardIterator __result)
    405c:	defffa04 	addi	sp,sp,-24
    4060:	dfc00515 	stw	ra,20(sp)
    4064:	df000415 	stw	fp,16(sp)
    4068:	df000404 	addi	fp,sp,16
    406c:	e13ffc15 	stw	r4,-16(fp)
    4070:	e17ffd15 	stw	r5,-12(fp)
    4074:	e1bffe15 	stw	r6,-8(fp)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type _ValueType;
      typedef typename std::__is_scalar<_ValueType>::__type _Is_POD;
      return std::__uninitialized_copy_aux(__first, __last, __result,
					   _Is_POD());
    4078:	e13ffc17 	ldw	r4,-16(fp)
    407c:	e17ffd17 	ldw	r5,-12(fp)
    4080:	e1bffe17 	ldw	r6,-8(fp)
    4084:	e1ffff03 	ldbu	r7,-4(fp)
    4088:	0003fd80 	call	3fd8 <_ZSt24__uninitialized_copy_auxIN9__gnu_cxx17__normal_iteratorIPK6MyRectSt6vectorIS2_SaIS2_EEEEPS2_ET0_T_SB_SA_12__false_type>
    408c:	e037883a 	mov	sp,fp
    4090:	dfc00117 	ldw	ra,4(sp)
    4094:	df000017 	ldw	fp,0(sp)
    4098:	dec00204 	addi	sp,sp,8
    409c:	f800283a 	ret

000040a0 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPK6MyRectSt6vectorIS2_SaIS2_EEEEPS2_S2_ET0_T_SB_SA_SaIT1_E>:

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
			   _ForwardIterator __result,
			   allocator<_Tp>)
    40a0:	defffa04 	addi	sp,sp,-24
    40a4:	dfc00515 	stw	ra,20(sp)
    40a8:	df000415 	stw	fp,16(sp)
    40ac:	df000404 	addi	fp,sp,16
    40b0:	e13ffc15 	stw	r4,-16(fp)
    40b4:	e17ffd15 	stw	r5,-12(fp)
    40b8:	e1bffe15 	stw	r6,-8(fp)
    40bc:	e1ffff15 	stw	r7,-4(fp)
    {
      return std::uninitialized_copy(__first, __last, __result);
    40c0:	e13ffc17 	ldw	r4,-16(fp)
    40c4:	e17ffd17 	ldw	r5,-12(fp)
    40c8:	e1bffe17 	ldw	r6,-8(fp)
    40cc:	000405c0 	call	405c <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPK6MyRectSt6vectorIS2_SaIS2_EEEEPS2_ET0_T_SB_SA_>
    40d0:	e037883a 	mov	sp,fp
    40d4:	dfc00117 	ldw	ra,4(sp)
    40d8:	df000017 	ldw	fp,0(sp)
    40dc:	dec00204 	addi	sp,sp,8
    40e0:	f800283a 	ret

000040e4 <_ZNSt6__copyILb0ESt26random_access_iterator_tagE4copyIPK6MyRectPS3_EET0_T_S8_S7_>:
  template<bool _BoolType>
    struct __copy<_BoolType, random_access_iterator_tag>
    {
      template<typename _II, typename _OI>
        static _OI
        copy(_II __first, _II __last, _OI __result)
    40e4:	defffb04 	addi	sp,sp,-20
    40e8:	df000415 	stw	fp,16(sp)
    40ec:	df000404 	addi	fp,sp,16
    40f0:	e13ffd15 	stw	r4,-12(fp)
    40f4:	e17ffe15 	stw	r5,-8(fp)
    40f8:	e1bfff15 	stw	r6,-4(fp)
        { 
	  typedef typename iterator_traits<_II>::difference_type _Distance;
	  for(_Distance __n = __last - __first; __n > 0; --__n)
    40fc:	e0fffe17 	ldw	r3,-8(fp)
    4100:	e0bffd17 	ldw	r2,-12(fp)
    4104:	1885c83a 	sub	r2,r3,r2
    4108:	1005d13a 	srai	r2,r2,4
    410c:	e0bffc15 	stw	r2,-16(fp)
    4110:	00001306 	br	4160 <_ZNSt6__copyILb0ESt26random_access_iterator_tagE4copyIPK6MyRectPS3_EET0_T_S8_S7_+0x7c>
	    {
	      *__result = *__first;
    4114:	e13fff17 	ldw	r4,-4(fp)
    4118:	e0fffd17 	ldw	r3,-12(fp)
    411c:	18800017 	ldw	r2,0(r3)
    4120:	20800015 	stw	r2,0(r4)
    4124:	18800117 	ldw	r2,4(r3)
    4128:	20800115 	stw	r2,4(r4)
    412c:	18800217 	ldw	r2,8(r3)
    4130:	20800215 	stw	r2,8(r4)
    4134:	18800317 	ldw	r2,12(r3)
    4138:	20800315 	stw	r2,12(r4)
	      ++__first;
    413c:	e0bffd17 	ldw	r2,-12(fp)
    4140:	10800404 	addi	r2,r2,16
    4144:	e0bffd15 	stw	r2,-12(fp)
	      ++__result;
    4148:	e0bfff17 	ldw	r2,-4(fp)
    414c:	10800404 	addi	r2,r2,16
    4150:	e0bfff15 	stw	r2,-4(fp)
      template<typename _II, typename _OI>
        static _OI
        copy(_II __first, _II __last, _OI __result)
        { 
	  typedef typename iterator_traits<_II>::difference_type _Distance;
	  for(_Distance __n = __last - __first; __n > 0; --__n)
    4154:	e0bffc17 	ldw	r2,-16(fp)
    4158:	10bfffc4 	addi	r2,r2,-1
    415c:	e0bffc15 	stw	r2,-16(fp)
    4160:	e0bffc17 	ldw	r2,-16(fp)
    4164:	10800048 	cmpgei	r2,r2,1
    4168:	103fea1e 	bne	r2,zero,4114 <_ZNSt6__copyILb0ESt26random_access_iterator_tagE4copyIPK6MyRectPS3_EET0_T_S8_S7_+0x30>
	    {
	      *__result = *__first;
	      ++__first;
	      ++__result;
	    }
	  return __result;
    416c:	e0bfff17 	ldw	r2,-4(fp)
    4170:	e037883a 	mov	sp,fp
    4174:	df000017 	ldw	fp,0(sp)
    4178:	dec00104 	addi	sp,sp,4
    417c:	f800283a 	ret

00004180 <_ZSt10__copy_auxIPK6MyRectPS0_ET0_T_S5_S4_>:
	}
    };

  template<typename _II, typename _OI>
    inline _OI
    __copy_aux(_II __first, _II __last, _OI __result)
    4180:	defffa04 	addi	sp,sp,-24
    4184:	dfc00515 	stw	ra,20(sp)
    4188:	df000415 	stw	fp,16(sp)
    418c:	df000404 	addi	fp,sp,16
    4190:	e13ffd15 	stw	r4,-12(fp)
    4194:	e17ffe15 	stw	r5,-8(fp)
    4198:	e1bfff15 	stw	r6,-4(fp)
      typedef typename iterator_traits<_OI>::value_type _ValueTypeO;
      typedef typename iterator_traits<_II>::iterator_category _Category;
      const bool __simple = (__is_scalar<_ValueTypeI>::__value
	                     && __is_pointer<_II>::__value
	                     && __is_pointer<_OI>::__value
			     && __are_same<_ValueTypeI, _ValueTypeO>::__value);
    419c:	e03ffc05 	stb	zero,-16(fp)

      return std::__copy<__simple, _Category>::copy(__first, __last, __result);
    41a0:	e13ffd17 	ldw	r4,-12(fp)
    41a4:	e17ffe17 	ldw	r5,-8(fp)
    41a8:	e1bfff17 	ldw	r6,-4(fp)
    41ac:	00040e40 	call	40e4 <_ZNSt6__copyILb0ESt26random_access_iterator_tagE4copyIPK6MyRectPS3_EET0_T_S8_S7_>
    41b0:	e037883a 	mov	sp,fp
    41b4:	dfc00117 	ldw	ra,4(sp)
    41b8:	df000017 	ldw	fp,0(sp)
    41bc:	dec00204 	addi	sp,sp,8
    41c0:	f800283a 	ret

000041c4 <_ZNSt13__copy_normalILb1ELb1EE6copy_nIN9__gnu_cxx17__normal_iteratorIPK6MyRectSt6vectorIS4_SaIS4_EEEENS3_IPS4_S9_EEEET0_T_SE_SD_>:
  template<>
    struct __copy_normal<true, true>
    {
      template<typename _II, typename _OI>
        static _OI
        copy_n(_II __first, _II __last, _OI __result)
    41c4:	defff704 	addi	sp,sp,-36
    41c8:	dfc00815 	stw	ra,32(sp)
    41cc:	df000715 	stw	fp,28(sp)
    41d0:	dc400615 	stw	r17,24(sp)
    41d4:	dc000515 	stw	r16,20(sp)
    41d8:	df000504 	addi	fp,sp,20
    41dc:	e13ffd15 	stw	r4,-12(fp)
    41e0:	e17ffe15 	stw	r5,-8(fp)
    41e4:	e1bfff15 	stw	r6,-4(fp)
        { return _OI(std::__copy_aux(__first.base(), __last.base(),
				     __result.base())); }
    41e8:	e13ffd04 	addi	r4,fp,-12
    41ec:	0002e480 	call	2e48 <_ZNK9__gnu_cxx17__normal_iteratorIPK6MyRectSt6vectorIS1_SaIS1_EEE4baseEv>
    41f0:	14400017 	ldw	r17,0(r2)
    41f4:	e13ffe04 	addi	r4,fp,-8
    41f8:	0002e480 	call	2e48 <_ZNK9__gnu_cxx17__normal_iteratorIPK6MyRectSt6vectorIS1_SaIS1_EEE4baseEv>
    41fc:	14000017 	ldw	r16,0(r2)
    4200:	e13fff04 	addi	r4,fp,-4
    4204:	0002db40 	call	2db4 <_ZNK9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS1_SaIS1_EEE4baseEv>
    4208:	11800017 	ldw	r6,0(r2)
    420c:	8809883a 	mov	r4,r17
    4210:	800b883a 	mov	r5,r16
    4214:	00041800 	call	4180 <_ZSt10__copy_auxIPK6MyRectPS0_ET0_T_S5_S4_>
    4218:	e0bffb15 	stw	r2,-20(fp)
    421c:	e13ffc04 	addi	r4,fp,-16
    4220:	e17ffb04 	addi	r5,fp,-20
    4224:	0002cf40 	call	2cf4 <_ZN9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS1_SaIS1_EEEC1ERKS2_>
    4228:	e0bffc17 	ldw	r2,-16(fp)
    422c:	e037883a 	mov	sp,fp
    4230:	dfc00317 	ldw	ra,12(sp)
    4234:	df000217 	ldw	fp,8(sp)
    4238:	dc400117 	ldw	r17,4(sp)
    423c:	dc000017 	ldw	r16,0(sp)
    4240:	dec00404 	addi	sp,sp,16
    4244:	f800283a 	ret

00004248 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPK6MyRectSt6vectorIS2_SaIS2_EEEENS1_IPS2_S7_EEET0_T_SC_SB_>:
   *  within [first,last).
  */
  template<typename _InputIterator, typename _OutputIterator>
    inline _OutputIterator
    copy(_InputIterator __first, _InputIterator __last,
	 _OutputIterator __result)
    4248:	defffa04 	addi	sp,sp,-24
    424c:	dfc00515 	stw	ra,20(sp)
    4250:	df000415 	stw	fp,16(sp)
    4254:	df000404 	addi	fp,sp,16
    4258:	e13ffd15 	stw	r4,-12(fp)
    425c:	e17ffe15 	stw	r5,-8(fp)
    4260:	e1bfff15 	stw	r6,-4(fp)
      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
      __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,
	    typename iterator_traits<_InputIterator>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);

       const bool __in = __is_normal_iterator<_InputIterator>::__value;
    4264:	00800044 	movi	r2,1
    4268:	e0bffc45 	stb	r2,-15(fp)
       const bool __out = __is_normal_iterator<_OutputIterator>::__value;
    426c:	00800044 	movi	r2,1
    4270:	e0bffc05 	stb	r2,-16(fp)
       return std::__copy_normal<__in, __out>::copy_n(__first, __last,
						      __result);
    4274:	e13ffd17 	ldw	r4,-12(fp)
    4278:	e17ffe17 	ldw	r5,-8(fp)
    427c:	e1bfff17 	ldw	r6,-4(fp)
    4280:	00041c40 	call	41c4 <_ZNSt13__copy_normalILb1ELb1EE6copy_nIN9__gnu_cxx17__normal_iteratorIPK6MyRectSt6vectorIS4_SaIS4_EEEENS3_IPS4_S9_EEEET0_T_SE_SD_>
    4284:	e037883a 	mov	sp,fp
    4288:	dfc00117 	ldw	ra,4(sp)
    428c:	df000017 	ldw	fp,0(sp)
    4290:	dec00204 	addi	sp,sp,8
    4294:	f800283a 	ret

00004298 <_ZNSt13__copy_normalILb1ELb0EE6copy_nIN9__gnu_cxx17__normal_iteratorIPK6MyRectSt6vectorIS4_SaIS4_EEEEPS4_EET0_T_SD_SC_>:
  template<>
    struct __copy_normal<true, false>
    {
      template<typename _II, typename _OI>
        static _OI
        copy_n(_II __first, _II __last, _OI __result)
    4298:	defffa04 	addi	sp,sp,-24
    429c:	dfc00515 	stw	ra,20(sp)
    42a0:	df000415 	stw	fp,16(sp)
    42a4:	dc000315 	stw	r16,12(sp)
    42a8:	df000304 	addi	fp,sp,12
    42ac:	e13ffd15 	stw	r4,-12(fp)
    42b0:	e17ffe15 	stw	r5,-8(fp)
    42b4:	e1bfff15 	stw	r6,-4(fp)
        { return std::__copy_aux(__first.base(), __last.base(), __result); }
    42b8:	e13ffd04 	addi	r4,fp,-12
    42bc:	0002e480 	call	2e48 <_ZNK9__gnu_cxx17__normal_iteratorIPK6MyRectSt6vectorIS1_SaIS1_EEE4baseEv>
    42c0:	14000017 	ldw	r16,0(r2)
    42c4:	e13ffe04 	addi	r4,fp,-8
    42c8:	0002e480 	call	2e48 <_ZNK9__gnu_cxx17__normal_iteratorIPK6MyRectSt6vectorIS1_SaIS1_EEE4baseEv>
    42cc:	11400017 	ldw	r5,0(r2)
    42d0:	8009883a 	mov	r4,r16
    42d4:	e1bfff17 	ldw	r6,-4(fp)
    42d8:	00041800 	call	4180 <_ZSt10__copy_auxIPK6MyRectPS0_ET0_T_S5_S4_>
    42dc:	e037883a 	mov	sp,fp
    42e0:	dfc00217 	ldw	ra,8(sp)
    42e4:	df000117 	ldw	fp,4(sp)
    42e8:	dc000017 	ldw	r16,0(sp)
    42ec:	dec00304 	addi	sp,sp,12
    42f0:	f800283a 	ret

000042f4 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPK6MyRectSt6vectorIS2_SaIS2_EEEEPS2_ET0_T_SB_SA_>:
   *  within [first,last).
  */
  template<typename _InputIterator, typename _OutputIterator>
    inline _OutputIterator
    copy(_InputIterator __first, _InputIterator __last,
	 _OutputIterator __result)
    42f4:	defffa04 	addi	sp,sp,-24
    42f8:	dfc00515 	stw	ra,20(sp)
    42fc:	df000415 	stw	fp,16(sp)
    4300:	df000404 	addi	fp,sp,16
    4304:	e13ffd15 	stw	r4,-12(fp)
    4308:	e17ffe15 	stw	r5,-8(fp)
    430c:	e1bfff15 	stw	r6,-4(fp)
      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
      __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,
	    typename iterator_traits<_InputIterator>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);

       const bool __in = __is_normal_iterator<_InputIterator>::__value;
    4310:	00800044 	movi	r2,1
    4314:	e0bffc45 	stb	r2,-15(fp)
       const bool __out = __is_normal_iterator<_OutputIterator>::__value;
    4318:	e03ffc05 	stb	zero,-16(fp)
       return std::__copy_normal<__in, __out>::copy_n(__first, __last,
						      __result);
    431c:	e13ffd17 	ldw	r4,-12(fp)
    4320:	e17ffe17 	ldw	r5,-8(fp)
    4324:	e1bfff17 	ldw	r6,-4(fp)
    4328:	00042980 	call	4298 <_ZNSt13__copy_normalILb1ELb0EE6copy_nIN9__gnu_cxx17__normal_iteratorIPK6MyRectSt6vectorIS4_SaIS4_EEEEPS4_EET0_T_SD_SC_>
    432c:	e037883a 	mov	sp,fp
    4330:	dfc00117 	ldw	ra,4(sp)
    4334:	df000017 	ldw	fp,0(sp)
    4338:	dec00204 	addi	sp,sp,8
    433c:	f800283a 	ret

00004340 <_ZNSt6vectorI6MyRectSaIS0_EE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKS0_S2_EEEEPS0_mT_SA_>:
       *  @endif
       */
      template<typename _ForwardIterator>
        pointer
        _M_allocate_and_copy(size_type __n,
			     _ForwardIterator __first, _ForwardIterator __last)
    4340:	defff804 	addi	sp,sp,-32
    4344:	dfc00715 	stw	ra,28(sp)
    4348:	df000615 	stw	fp,24(sp)
    434c:	df000604 	addi	fp,sp,24
    4350:	e13ffc15 	stw	r4,-16(fp)
    4354:	e17ffd15 	stw	r5,-12(fp)
    4358:	e1bffe15 	stw	r6,-8(fp)
    435c:	e1ffff15 	stw	r7,-4(fp)
        {
	  pointer __result = this->_M_allocate(__n);
    4360:	e13ffc17 	ldw	r4,-16(fp)
    4364:	e17ffd17 	ldw	r5,-12(fp)
    4368:	00035300 	call	3530 <_ZNSt12_Vector_baseI6MyRectSaIS0_EE11_M_allocateEm>
    436c:	e0bffa15 	stw	r2,-24(fp)
	  try
	    {
	      std::__uninitialized_copy_a(__first, __last, __result,
    4370:	e13ffc17 	ldw	r4,-16(fp)
    4374:	0002ad40 	call	2ad4 <_ZNSt12_Vector_baseI6MyRectSaIS0_EE19_M_get_Tp_allocatorEv>
    4378:	100b883a 	mov	r5,r2
    437c:	e13ffb04 	addi	r4,fp,-20
    4380:	0002a340 	call	2a34 <_ZNSaI6MyRectEC1ERKS0_>
    4384:	e1fffb04 	addi	r7,fp,-20
    4388:	e13ffe17 	ldw	r4,-8(fp)
    438c:	e17fff17 	ldw	r5,-4(fp)
    4390:	e1bffa17 	ldw	r6,-24(fp)
    4394:	00040a00 	call	40a0 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPK6MyRectSt6vectorIS2_SaIS2_EEEEPS2_S2_ET0_T_SB_SA_SaIT1_E>
    4398:	e13ffb04 	addi	r4,fp,-20
    439c:	00029b00 	call	29b0 <_ZNSaI6MyRectED1Ev>
					  _M_get_Tp_allocator());
	      return __result;
    43a0:	e0bffa17 	ldw	r2,-24(fp)
	    }
	  catch(...)
	    {
	      _M_deallocate(__result, __n);
	      __throw_exception_again;
    43a4:	e037883a 	mov	sp,fp
    43a8:	dfc00117 	ldw	ra,4(sp)
    43ac:	df000017 	ldw	fp,0(sp)
    43b0:	dec00204 	addi	sp,sp,8
    43b4:	f800283a 	ret

000043b8 <_ZNSt6vectorI6MyRectSaIS0_EEaSERKS2_>:
    }

  template<typename _Tp, typename _Alloc>
    vector<_Tp, _Alloc>&
    vector<_Tp, _Alloc>::
    operator=(const vector<_Tp, _Alloc>& __x)
    43b8:	defff004 	addi	sp,sp,-64
    43bc:	dfc00f15 	stw	ra,60(sp)
    43c0:	df000e15 	stw	fp,56(sp)
    43c4:	dc800d15 	stw	r18,52(sp)
    43c8:	dc400c15 	stw	r17,48(sp)
    43cc:	dc000b15 	stw	r16,44(sp)
    43d0:	df000b04 	addi	fp,sp,44
    43d4:	e13ffe15 	stw	r4,-8(fp)
    43d8:	e17fff15 	stw	r5,-4(fp)
    {
      if (&__x != this)
    43dc:	e0ffff17 	ldw	r3,-4(fp)
    43e0:	e0bffe17 	ldw	r2,-8(fp)
    43e4:	18809326 	beq	r3,r2,4634 <_ZNSt6vectorI6MyRectSaIS0_EEaSERKS2_+0x27c>
	{
	  const size_type __xlen = __x.size();
    43e8:	e13fff17 	ldw	r4,-4(fp)
    43ec:	0002ec40 	call	2ec4 <_ZNKSt6vectorI6MyRectSaIS0_EE4sizeEv>
    43f0:	e0bff615 	stw	r2,-40(fp)
	  if (__xlen > capacity())
    43f4:	e13ffe17 	ldw	r4,-8(fp)
    43f8:	0003ed00 	call	3ed0 <_ZNKSt6vectorI6MyRectSaIS0_EE8capacityEv>
    43fc:	1007883a 	mov	r3,r2
    4400:	e0bff617 	ldw	r2,-40(fp)
    4404:	1885803a 	cmpltu	r2,r3,r2
    4408:	10803fcc 	andi	r2,r2,255
    440c:	1005003a 	cmpeq	r2,r2,zero
    4410:	1000311e 	bne	r2,zero,44d8 <_ZNSt6vectorI6MyRectSaIS0_EEaSERKS2_+0x120>
	    {
	      pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
						   __x.end());
    4414:	e13fff17 	ldw	r4,-4(fp)
    4418:	0002cb00 	call	2cb0 <_ZNKSt6vectorI6MyRectSaIS0_EE5beginEv>
    441c:	1021883a 	mov	r16,r2
    4420:	e13fff17 	ldw	r4,-4(fp)
    4424:	0002c6c0 	call	2c6c <_ZNKSt6vectorI6MyRectSaIS0_EE3endEv>
    4428:	100f883a 	mov	r7,r2
    442c:	e13ffe17 	ldw	r4,-8(fp)
    4430:	e17ff617 	ldw	r5,-40(fp)
    4434:	800d883a 	mov	r6,r16
    4438:	00043400 	call	4340 <_ZNSt6vectorI6MyRectSaIS0_EE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKS0_S2_EEEEPS0_mT_SA_>
    443c:	e0bff515 	stw	r2,-44(fp)
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    4440:	e0bffe17 	ldw	r2,-8(fp)
    4444:	14000017 	ldw	r16,0(r2)
    4448:	e0bffe17 	ldw	r2,-8(fp)
    444c:	14400117 	ldw	r17,4(r2)
    4450:	e13ffe17 	ldw	r4,-8(fp)
    4454:	0002ad40 	call	2ad4 <_ZNSt12_Vector_baseI6MyRectSaIS0_EE19_M_get_Tp_allocatorEv>
    4458:	100b883a 	mov	r5,r2
    445c:	e13ffc44 	addi	r4,fp,-15
    4460:	0002a340 	call	2a34 <_ZNSaI6MyRectEC1ERKS0_>
    4464:	e1bffc44 	addi	r6,fp,-15
    4468:	8009883a 	mov	r4,r16
    446c:	880b883a 	mov	r5,r17
    4470:	0002ff00 	call	2ff0 <_ZSt8_DestroyIP6MyRectS0_EvT_S2_SaIT0_E>
    4474:	e13ffc44 	addi	r4,fp,-15
    4478:	00029b00 	call	29b0 <_ZNSaI6MyRectED1Ev>
			    _M_get_Tp_allocator());
	      _M_deallocate(this->_M_impl._M_start,
    447c:	e13ffe17 	ldw	r4,-8(fp)
    4480:	e0bffe17 	ldw	r2,-8(fp)
    4484:	11400017 	ldw	r5,0(r2)
    4488:	e0bffe17 	ldw	r2,-8(fp)
    448c:	10800217 	ldw	r2,8(r2)
    4490:	1007883a 	mov	r3,r2
    4494:	e0bffe17 	ldw	r2,-8(fp)
    4498:	10800017 	ldw	r2,0(r2)
    449c:	1885c83a 	sub	r2,r3,r2
    44a0:	1005d13a 	srai	r2,r2,4
    44a4:	100d883a 	mov	r6,r2
    44a8:	00035a80 	call	35a8 <_ZNSt12_Vector_baseI6MyRectSaIS0_EE13_M_deallocateEPS0_m>
			    this->_M_impl._M_end_of_storage
			    - this->_M_impl._M_start);
	      this->_M_impl._M_start = __tmp;
    44ac:	e0fffe17 	ldw	r3,-8(fp)
    44b0:	e0bff517 	ldw	r2,-44(fp)
    44b4:	18800015 	stw	r2,0(r3)
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
    44b8:	e0bffe17 	ldw	r2,-8(fp)
    44bc:	10c00017 	ldw	r3,0(r2)
    44c0:	e0bff617 	ldw	r2,-40(fp)
    44c4:	1004913a 	slli	r2,r2,4
    44c8:	1887883a 	add	r3,r3,r2
    44cc:	e0bffe17 	ldw	r2,-8(fp)
    44d0:	10c00215 	stw	r3,8(r2)
    44d4:	00005006 	br	4618 <_ZNSt6vectorI6MyRectSaIS0_EEaSERKS2_+0x260>
	    }
	  else if (size() >= __xlen)
    44d8:	e13ffe17 	ldw	r4,-8(fp)
    44dc:	0002ec40 	call	2ec4 <_ZNKSt6vectorI6MyRectSaIS0_EE4sizeEv>
    44e0:	1007883a 	mov	r3,r2
    44e4:	e0bff617 	ldw	r2,-40(fp)
    44e8:	1885403a 	cmpgeu	r2,r3,r2
    44ec:	10803fcc 	andi	r2,r2,255
    44f0:	1005003a 	cmpeq	r2,r2,zero
    44f4:	10001c1e 	bne	r2,zero,4568 <_ZNSt6vectorI6MyRectSaIS0_EEaSERKS2_+0x1b0>
	    {
	      iterator __i(std::copy(__x.begin(), __x.end(), begin()));
    44f8:	e13fff17 	ldw	r4,-4(fp)
    44fc:	0002cb00 	call	2cb0 <_ZNKSt6vectorI6MyRectSaIS0_EE5beginEv>
    4500:	1021883a 	mov	r16,r2
    4504:	e13fff17 	ldw	r4,-4(fp)
    4508:	0002c6c0 	call	2c6c <_ZNKSt6vectorI6MyRectSaIS0_EE3endEv>
    450c:	1023883a 	mov	r17,r2
    4510:	e13ffe17 	ldw	r4,-8(fp)
    4514:	0002e100 	call	2e10 <_ZNSt6vectorI6MyRectSaIS0_EE5beginEv>
    4518:	100d883a 	mov	r6,r2
    451c:	8009883a 	mov	r4,r16
    4520:	880b883a 	mov	r5,r17
    4524:	00042480 	call	4248 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPK6MyRectSt6vectorIS2_SaIS2_EEEENS1_IPS2_S7_EEET0_T_SC_SB_>
    4528:	e0bffd15 	stw	r2,-12(fp)
	      std::_Destroy(__i, end(), _M_get_Tp_allocator());
    452c:	e13ffe17 	ldw	r4,-8(fp)
    4530:	0002d280 	call	2d28 <_ZNSt6vectorI6MyRectSaIS0_EE3endEv>
    4534:	1021883a 	mov	r16,r2
    4538:	e13ffe17 	ldw	r4,-8(fp)
    453c:	0002ad40 	call	2ad4 <_ZNSt12_Vector_baseI6MyRectSaIS0_EE19_M_get_Tp_allocatorEv>
    4540:	100b883a 	mov	r5,r2
    4544:	e13ffc04 	addi	r4,fp,-16
    4548:	0002a340 	call	2a34 <_ZNSaI6MyRectEC1ERKS0_>
    454c:	e1bffc04 	addi	r6,fp,-16
    4550:	e13ffd17 	ldw	r4,-12(fp)
    4554:	800b883a 	mov	r5,r16
    4558:	00034900 	call	3490 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIP6MyRectSt6vectorIS2_SaIS2_EEEES2_EvT_S8_SaIT0_E>
    455c:	e13ffc04 	addi	r4,fp,-16
    4560:	00029b00 	call	29b0 <_ZNSaI6MyRectED1Ev>
    4564:	00002c06 	br	4618 <_ZNSt6vectorI6MyRectSaIS0_EEaSERKS2_+0x260>
	    }
	  else
	    {
	      std::copy(__x.begin(), __x.begin() + size(),
    4568:	e13fff17 	ldw	r4,-4(fp)
    456c:	0002cb00 	call	2cb0 <_ZNKSt6vectorI6MyRectSaIS0_EE5beginEv>
    4570:	1021883a 	mov	r16,r2
    4574:	e13fff17 	ldw	r4,-4(fp)
    4578:	0002cb00 	call	2cb0 <_ZNKSt6vectorI6MyRectSaIS0_EE5beginEv>
    457c:	e0bffb15 	stw	r2,-20(fp)
    4580:	e13ffe17 	ldw	r4,-8(fp)
    4584:	0002ec40 	call	2ec4 <_ZNKSt6vectorI6MyRectSaIS0_EE4sizeEv>
    4588:	e0bffa15 	stw	r2,-24(fp)
    458c:	e13ffb04 	addi	r4,fp,-20
    4590:	e17ffa04 	addi	r5,fp,-24
    4594:	0003dc80 	call	3dc8 <_ZNK9__gnu_cxx17__normal_iteratorIPK6MyRectSt6vectorIS1_SaIS1_EEEplERKl>
    4598:	100b883a 	mov	r5,r2
    459c:	e0bffe17 	ldw	r2,-8(fp)
    45a0:	11800017 	ldw	r6,0(r2)
    45a4:	8009883a 	mov	r4,r16
    45a8:	00042f40 	call	42f4 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPK6MyRectSt6vectorIS2_SaIS2_EEEEPS2_ET0_T_SB_SA_>
			this->_M_impl._M_start);
	      std::__uninitialized_copy_a(__x.begin() + size(),
    45ac:	e13fff17 	ldw	r4,-4(fp)
    45b0:	0002cb00 	call	2cb0 <_ZNKSt6vectorI6MyRectSaIS0_EE5beginEv>
    45b4:	e0bff915 	stw	r2,-28(fp)
    45b8:	e13ffe17 	ldw	r4,-8(fp)
    45bc:	0002ec40 	call	2ec4 <_ZNKSt6vectorI6MyRectSaIS0_EE4sizeEv>
    45c0:	e0bff815 	stw	r2,-32(fp)
    45c4:	e13ff904 	addi	r4,fp,-28
    45c8:	e17ff804 	addi	r5,fp,-32
    45cc:	0003dc80 	call	3dc8 <_ZNK9__gnu_cxx17__normal_iteratorIPK6MyRectSt6vectorIS1_SaIS1_EEEplERKl>
    45d0:	1021883a 	mov	r16,r2
    45d4:	e13fff17 	ldw	r4,-4(fp)
    45d8:	0002c6c0 	call	2c6c <_ZNKSt6vectorI6MyRectSaIS0_EE3endEv>
    45dc:	1023883a 	mov	r17,r2
    45e0:	e0bffe17 	ldw	r2,-8(fp)
    45e4:	14800117 	ldw	r18,4(r2)
    45e8:	e13ffe17 	ldw	r4,-8(fp)
    45ec:	0002ad40 	call	2ad4 <_ZNSt12_Vector_baseI6MyRectSaIS0_EE19_M_get_Tp_allocatorEv>
    45f0:	100b883a 	mov	r5,r2
    45f4:	e13ff704 	addi	r4,fp,-36
    45f8:	0002a340 	call	2a34 <_ZNSaI6MyRectEC1ERKS0_>
    45fc:	e1fff704 	addi	r7,fp,-36
    4600:	8009883a 	mov	r4,r16
    4604:	880b883a 	mov	r5,r17
    4608:	900d883a 	mov	r6,r18
    460c:	00040a00 	call	40a0 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPK6MyRectSt6vectorIS2_SaIS2_EEEEPS2_S2_ET0_T_SB_SA_SaIT1_E>
    4610:	e13ff704 	addi	r4,fp,-36
    4614:	00029b00 	call	29b0 <_ZNSaI6MyRectED1Ev>
					  __x.end(), this->_M_impl._M_finish,
					  _M_get_Tp_allocator());
	    }
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
    4618:	e0bffe17 	ldw	r2,-8(fp)
    461c:	10c00017 	ldw	r3,0(r2)
    4620:	e0bff617 	ldw	r2,-40(fp)
    4624:	1004913a 	slli	r2,r2,4
    4628:	1887883a 	add	r3,r3,r2
    462c:	e0bffe17 	ldw	r2,-8(fp)
    4630:	10c00115 	stw	r3,4(r2)
	}
      return *this;
    4634:	e0bffe17 	ldw	r2,-8(fp)
    4638:	e037883a 	mov	sp,fp
    463c:	dfc00417 	ldw	ra,16(sp)
    4640:	df000317 	ldw	fp,12(sp)
    4644:	dc800217 	ldw	r18,8(sp)
    4648:	dc400117 	ldw	r17,4(sp)
    464c:	dc000017 	ldw	r16,0(sp)
    4650:	dec00504 	addi	sp,sp,20
    4654:	f800283a 	ret

00004658 <_Z5myMaxii>:
#include "haar.h"

int partition(std::vector<MyRect>& _vec, std::vector<int>& labels, float eps);

int myMax(int a, int b)
    4658:	defffc04 	addi	sp,sp,-16
    465c:	df000315 	stw	fp,12(sp)
    4660:	df000304 	addi	fp,sp,12
    4664:	e13ffd15 	stw	r4,-12(fp)
    4668:	e17ffe15 	stw	r5,-8(fp)
{
  if (a >= b)
    466c:	e0fffd17 	ldw	r3,-12(fp)
    4670:	e0bffe17 	ldw	r2,-8(fp)
    4674:	18800316 	blt	r3,r2,4684 <_Z5myMaxii+0x2c>
    return a;
    4678:	e0bffd17 	ldw	r2,-12(fp)
    467c:	e0bfff15 	stw	r2,-4(fp)
    4680:	00000206 	br	468c <_Z5myMaxii+0x34>
  else
    return b;
    4684:	e0bffe17 	ldw	r2,-8(fp)
    4688:	e0bfff15 	stw	r2,-4(fp)
    468c:	e0bfff17 	ldw	r2,-4(fp)
}
    4690:	e037883a 	mov	sp,fp
    4694:	df000017 	ldw	fp,0(sp)
    4698:	dec00104 	addi	sp,sp,4
    469c:	f800283a 	ret

000046a0 <_Z5myMinii>:

int myMin(int a, int b)
    46a0:	defffc04 	addi	sp,sp,-16
    46a4:	df000315 	stw	fp,12(sp)
    46a8:	df000304 	addi	fp,sp,12
    46ac:	e13ffd15 	stw	r4,-12(fp)
    46b0:	e17ffe15 	stw	r5,-8(fp)
{
  if (a <= b)
    46b4:	e0fffd17 	ldw	r3,-12(fp)
    46b8:	e0bffe17 	ldw	r2,-8(fp)
    46bc:	10c00316 	blt	r2,r3,46cc <_Z5myMinii+0x2c>
    return a;
    46c0:	e0bffd17 	ldw	r2,-12(fp)
    46c4:	e0bfff15 	stw	r2,-4(fp)
    46c8:	00000206 	br	46d4 <_Z5myMinii+0x34>
  else
    return b;
    46cc:	e0bffe17 	ldw	r2,-8(fp)
    46d0:	e0bfff15 	stw	r2,-4(fp)
    46d4:	e0bfff17 	ldw	r2,-4(fp)
}
    46d8:	e037883a 	mov	sp,fp
    46dc:	df000017 	ldw	fp,0(sp)
    46e0:	dec00104 	addi	sp,sp,4
    46e4:	f800283a 	ret

000046e8 <_Z5myAbsi>:
inline  int  myRound( float value )
{
  return (int)(value + (value >= 0 ? 0.5 : -0.5));
}

int myAbs(int n)
    46e8:	defffd04 	addi	sp,sp,-12
    46ec:	df000215 	stw	fp,8(sp)
    46f0:	df000204 	addi	fp,sp,8
    46f4:	e13ffe15 	stw	r4,-8(fp)
{
  if (n >= 0)
    46f8:	e0bffe17 	ldw	r2,-8(fp)
    46fc:	1004803a 	cmplt	r2,r2,zero
    4700:	1000031e 	bne	r2,zero,4710 <_Z5myAbsi+0x28>
    return n;
    4704:	e0bffe17 	ldw	r2,-8(fp)
    4708:	e0bfff15 	stw	r2,-4(fp)
    470c:	00000306 	br	471c <_Z5myAbsi+0x34>
  else
    return -n;
    4710:	e0bffe17 	ldw	r2,-8(fp)
    4714:	0085c83a 	sub	r2,zero,r2
    4718:	e0bfff15 	stw	r2,-4(fp)
    471c:	e0bfff17 	ldw	r2,-4(fp)
}
    4720:	e037883a 	mov	sp,fp
    4724:	df000017 	ldw	fp,0(sp)
    4728:	dec00104 	addi	sp,sp,4
    472c:	f800283a 	ret

00004730 <_Z9predicatefR6MyRectS0_>:

int predicate(float eps, MyRect& r1, MyRect& r2)
    4730:	defff404 	addi	sp,sp,-48
    4734:	dfc00b15 	stw	ra,44(sp)
    4738:	df000a15 	stw	fp,40(sp)
    473c:	dc000915 	stw	r16,36(sp)
    4740:	df000904 	addi	fp,sp,36
    4744:	e13ff815 	stw	r4,-32(fp)
    4748:	e17ff915 	stw	r5,-28(fp)
    474c:	e1bffa15 	stw	r6,-24(fp)
{
  float delta = eps*(myMin(r1.width, r2.width) + myMin(r1.height, r2.height))*0.5;
    4750:	e0bff917 	ldw	r2,-28(fp)
    4754:	11000217 	ldw	r4,8(r2)
    4758:	e0bffa17 	ldw	r2,-24(fp)
    475c:	11400217 	ldw	r5,8(r2)
    4760:	00046a00 	call	46a0 <_Z5myMinii>
    4764:	1021883a 	mov	r16,r2
    4768:	e0bff917 	ldw	r2,-28(fp)
    476c:	11000317 	ldw	r4,12(r2)
    4770:	e0bffa17 	ldw	r2,-24(fp)
    4774:	11400317 	ldw	r5,12(r2)
    4778:	00046a00 	call	46a0 <_Z5myMinii>
    477c:	8089883a 	add	r4,r16,r2
    4780:	000fa2c0 	call	fa2c <__floatsisf>
    4784:	1009883a 	mov	r4,r2
    4788:	e17ff817 	ldw	r5,-32(fp)
    478c:	000f5e80 	call	f5e8 <__mulsf3>
    4790:	1009883a 	mov	r4,r2
    4794:	014fc034 	movhi	r5,16128
    4798:	000f5e80 	call	f5e8 <__mulsf3>
    479c:	e0bff715 	stw	r2,-36(fp)
  return myAbs(r1.x - r2.x) <= delta &&
    myAbs(r1.y - r2.y) <= delta &&
    myAbs(r1.x + r1.width - r2.x - r2.width) <= delta &&
    myAbs(r1.y + r1.height - r2.y - r2.height) <= delta;
    47a0:	e0bff917 	ldw	r2,-28(fp)
    47a4:	10c00017 	ldw	r3,0(r2)
    47a8:	e0bffa17 	ldw	r2,-24(fp)
    47ac:	10800017 	ldw	r2,0(r2)
    47b0:	1889c83a 	sub	r4,r3,r2
    47b4:	00046e80 	call	46e8 <_Z5myAbsi>
    47b8:	1009883a 	mov	r4,r2
    47bc:	000fa2c0 	call	fa2c <__floatsisf>
    47c0:	e03ffe05 	stb	zero,-8(fp)
    47c4:	1009883a 	mov	r4,r2
    47c8:	e17ff717 	ldw	r5,-36(fp)
    47cc:	000f9b40 	call	f9b4 <__lesf2>
    47d0:	10800050 	cmplti	r2,r2,1
    47d4:	1000011e 	bne	r2,zero,47dc <_Z9predicatefR6MyRectS0_+0xac>
    47d8:	00000206 	br	47e4 <_Z9predicatefR6MyRectS0_+0xb4>
    47dc:	00800044 	movi	r2,1
    47e0:	e0bffe05 	stb	r2,-8(fp)
    47e4:	e0fffe03 	ldbu	r3,-8(fp)
    47e8:	1880005c 	xori	r2,r3,1
    47ec:	10803fcc 	andi	r2,r2,255
    47f0:	1004c03a 	cmpne	r2,r2,zero
    47f4:	1000511e 	bne	r2,zero,493c <_Z9predicatefR6MyRectS0_+0x20c>
    47f8:	e0bff917 	ldw	r2,-28(fp)
    47fc:	10c00117 	ldw	r3,4(r2)
    4800:	e0bffa17 	ldw	r2,-24(fp)
    4804:	10800117 	ldw	r2,4(r2)
    4808:	1889c83a 	sub	r4,r3,r2
    480c:	00046e80 	call	46e8 <_Z5myAbsi>
    4810:	1009883a 	mov	r4,r2
    4814:	000fa2c0 	call	fa2c <__floatsisf>
    4818:	e03ffd05 	stb	zero,-12(fp)
    481c:	1009883a 	mov	r4,r2
    4820:	e17ff717 	ldw	r5,-36(fp)
    4824:	000f9b40 	call	f9b4 <__lesf2>
    4828:	10800050 	cmplti	r2,r2,1
    482c:	1000011e 	bne	r2,zero,4834 <_Z9predicatefR6MyRectS0_+0x104>
    4830:	00000206 	br	483c <_Z9predicatefR6MyRectS0_+0x10c>
    4834:	00800044 	movi	r2,1
    4838:	e0bffd05 	stb	r2,-12(fp)
    483c:	e0fffd03 	ldbu	r3,-12(fp)
    4840:	1880005c 	xori	r2,r3,1
    4844:	10803fcc 	andi	r2,r2,255
    4848:	1004c03a 	cmpne	r2,r2,zero
    484c:	10003b1e 	bne	r2,zero,493c <_Z9predicatefR6MyRectS0_+0x20c>
    4850:	e0bff917 	ldw	r2,-28(fp)
    4854:	10c00017 	ldw	r3,0(r2)
    4858:	e0bff917 	ldw	r2,-28(fp)
    485c:	10800217 	ldw	r2,8(r2)
    4860:	1887883a 	add	r3,r3,r2
    4864:	e0bffa17 	ldw	r2,-24(fp)
    4868:	10800017 	ldw	r2,0(r2)
    486c:	1887c83a 	sub	r3,r3,r2
    4870:	e0bffa17 	ldw	r2,-24(fp)
    4874:	10800217 	ldw	r2,8(r2)
    4878:	1889c83a 	sub	r4,r3,r2
    487c:	00046e80 	call	46e8 <_Z5myAbsi>
    4880:	1009883a 	mov	r4,r2
    4884:	000fa2c0 	call	fa2c <__floatsisf>
    4888:	e03ffc05 	stb	zero,-16(fp)
    488c:	1009883a 	mov	r4,r2
    4890:	e17ff717 	ldw	r5,-36(fp)
    4894:	000f9b40 	call	f9b4 <__lesf2>
    4898:	10800050 	cmplti	r2,r2,1
    489c:	1000011e 	bne	r2,zero,48a4 <_Z9predicatefR6MyRectS0_+0x174>
    48a0:	00000206 	br	48ac <_Z9predicatefR6MyRectS0_+0x17c>
    48a4:	00800044 	movi	r2,1
    48a8:	e0bffc05 	stb	r2,-16(fp)
    48ac:	e0fffc03 	ldbu	r3,-16(fp)
    48b0:	1880005c 	xori	r2,r3,1
    48b4:	10803fcc 	andi	r2,r2,255
    48b8:	1004c03a 	cmpne	r2,r2,zero
    48bc:	10001f1e 	bne	r2,zero,493c <_Z9predicatefR6MyRectS0_+0x20c>
    48c0:	e0bff917 	ldw	r2,-28(fp)
    48c4:	10c00117 	ldw	r3,4(r2)
    48c8:	e0bff917 	ldw	r2,-28(fp)
    48cc:	10800317 	ldw	r2,12(r2)
    48d0:	1887883a 	add	r3,r3,r2
    48d4:	e0bffa17 	ldw	r2,-24(fp)
    48d8:	10800117 	ldw	r2,4(r2)
    48dc:	1887c83a 	sub	r3,r3,r2
    48e0:	e0bffa17 	ldw	r2,-24(fp)
    48e4:	10800317 	ldw	r2,12(r2)
    48e8:	1889c83a 	sub	r4,r3,r2
    48ec:	00046e80 	call	46e8 <_Z5myAbsi>
    48f0:	1009883a 	mov	r4,r2
    48f4:	000fa2c0 	call	fa2c <__floatsisf>
    48f8:	e03ffb05 	stb	zero,-20(fp)
    48fc:	1009883a 	mov	r4,r2
    4900:	e17ff717 	ldw	r5,-36(fp)
    4904:	000f9b40 	call	f9b4 <__lesf2>
    4908:	10800050 	cmplti	r2,r2,1
    490c:	1000011e 	bne	r2,zero,4914 <_Z9predicatefR6MyRectS0_+0x1e4>
    4910:	00000206 	br	491c <_Z9predicatefR6MyRectS0_+0x1ec>
    4914:	00800044 	movi	r2,1
    4918:	e0bffb05 	stb	r2,-20(fp)
    491c:	e0fffb03 	ldbu	r3,-20(fp)
    4920:	1880005c 	xori	r2,r3,1
    4924:	10803fcc 	andi	r2,r2,255
    4928:	1004c03a 	cmpne	r2,r2,zero
    492c:	1000031e 	bne	r2,zero,493c <_Z9predicatefR6MyRectS0_+0x20c>
    4930:	00800044 	movi	r2,1
    4934:	e0bfff05 	stb	r2,-4(fp)
    4938:	00000106 	br	4940 <_Z9predicatefR6MyRectS0_+0x210>
    493c:	e03fff05 	stb	zero,-4(fp)
    4940:	e0bfff03 	ldbu	r2,-4(fp)
}
    4944:	e037883a 	mov	sp,fp
    4948:	dfc00217 	ldw	ra,8(sp)
    494c:	df000117 	ldw	fp,4(sp)
    4950:	dc000017 	ldw	r16,0(sp)
    4954:	dec00304 	addi	sp,sp,12
    4958:	f800283a 	ret

0000495c <drawRectangle>:
  return nclasses;
}


/* draw white bounding boxes around detected faces */
void drawRectangle(MyImage* image, MyRect r)
    495c:	defff904 	addi	sp,sp,-28
    4960:	df000315 	stw	fp,12(sp)
    4964:	df000304 	addi	fp,sp,12
    4968:	e13fff15 	stw	r4,-4(fp)
    496c:	e1400115 	stw	r5,4(fp)
    4970:	e1800215 	stw	r6,8(fp)
    4974:	e1c00315 	stw	r7,12(fp)
{
	int i;
	int col = image->width;
    4978:	e0bfff17 	ldw	r2,-4(fp)
    497c:	10800017 	ldw	r2,0(r2)
    4980:	e0bffd15 	stw	r2,-12(fp)

	for (i = 0; i < r.width; i++)
    4984:	e03ffe15 	stw	zero,-8(fp)
    4988:	00000f06 	br	49c8 <drawRectangle+0x6c>
	{
      image->data[col*r.y + r.x + i] = 255;
    498c:	e0bfff17 	ldw	r2,-4(fp)
    4990:	11000317 	ldw	r4,12(r2)
    4994:	e0c00217 	ldw	r3,8(fp)
    4998:	e0bffd17 	ldw	r2,-12(fp)
    499c:	1887383a 	mul	r3,r3,r2
    49a0:	e0800117 	ldw	r2,4(fp)
    49a4:	1887883a 	add	r3,r3,r2
    49a8:	e0bffe17 	ldw	r2,-8(fp)
    49ac:	1885883a 	add	r2,r3,r2
    49b0:	2087883a 	add	r3,r4,r2
    49b4:	00bfffc4 	movi	r2,-1
    49b8:	18800005 	stb	r2,0(r3)
void drawRectangle(MyImage* image, MyRect r)
{
	int i;
	int col = image->width;

	for (i = 0; i < r.width; i++)
    49bc:	e0bffe17 	ldw	r2,-8(fp)
    49c0:	10800044 	addi	r2,r2,1
    49c4:	e0bffe15 	stw	r2,-8(fp)
    49c8:	e0c00317 	ldw	r3,12(fp)
    49cc:	e0bffe17 	ldw	r2,-8(fp)
    49d0:	10ffee16 	blt	r2,r3,498c <drawRectangle+0x30>
	{
      image->data[col*r.y + r.x + i] = 255;
	}
	for (i = 0; i < r.height; i++)
    49d4:	e03ffe15 	stw	zero,-8(fp)
    49d8:	00001106 	br	4a20 <drawRectangle+0xc4>
	{
		image->data[col*(r.y+i) + r.x + r.width] = 255;
    49dc:	e0bfff17 	ldw	r2,-4(fp)
    49e0:	11000317 	ldw	r4,12(r2)
    49e4:	e0c00217 	ldw	r3,8(fp)
    49e8:	e0bffe17 	ldw	r2,-8(fp)
    49ec:	1887883a 	add	r3,r3,r2
    49f0:	e0bffd17 	ldw	r2,-12(fp)
    49f4:	1887383a 	mul	r3,r3,r2
    49f8:	e0800117 	ldw	r2,4(fp)
    49fc:	1887883a 	add	r3,r3,r2
    4a00:	e0800317 	ldw	r2,12(fp)
    4a04:	1885883a 	add	r2,r3,r2
    4a08:	2087883a 	add	r3,r4,r2
    4a0c:	00bfffc4 	movi	r2,-1
    4a10:	18800005 	stb	r2,0(r3)

	for (i = 0; i < r.width; i++)
	{
      image->data[col*r.y + r.x + i] = 255;
	}
	for (i = 0; i < r.height; i++)
    4a14:	e0bffe17 	ldw	r2,-8(fp)
    4a18:	10800044 	addi	r2,r2,1
    4a1c:	e0bffe15 	stw	r2,-8(fp)
    4a20:	e0c00417 	ldw	r3,16(fp)
    4a24:	e0bffe17 	ldw	r2,-8(fp)
    4a28:	10ffec16 	blt	r2,r3,49dc <drawRectangle+0x80>
	{
		image->data[col*(r.y+i) + r.x + r.width] = 255;
	}
	for (i = 0; i < r.width; i++)
    4a2c:	e03ffe15 	stw	zero,-8(fp)
    4a30:	00001306 	br	4a80 <drawRectangle+0x124>
	{
		image->data[col*(r.y + r.height) + r.x + r.width - i] = 255;
    4a34:	e0bfff17 	ldw	r2,-4(fp)
    4a38:	11000317 	ldw	r4,12(r2)
    4a3c:	e0c00217 	ldw	r3,8(fp)
    4a40:	e0800417 	ldw	r2,16(fp)
    4a44:	1887883a 	add	r3,r3,r2
    4a48:	e0bffd17 	ldw	r2,-12(fp)
    4a4c:	1887383a 	mul	r3,r3,r2
    4a50:	e0800117 	ldw	r2,4(fp)
    4a54:	1887883a 	add	r3,r3,r2
    4a58:	e0800317 	ldw	r2,12(fp)
    4a5c:	1887883a 	add	r3,r3,r2
    4a60:	e0bffe17 	ldw	r2,-8(fp)
    4a64:	1885c83a 	sub	r2,r3,r2
    4a68:	2087883a 	add	r3,r4,r2
    4a6c:	00bfffc4 	movi	r2,-1
    4a70:	18800005 	stb	r2,0(r3)
	}
	for (i = 0; i < r.height; i++)
	{
		image->data[col*(r.y+i) + r.x + r.width] = 255;
	}
	for (i = 0; i < r.width; i++)
    4a74:	e0bffe17 	ldw	r2,-8(fp)
    4a78:	10800044 	addi	r2,r2,1
    4a7c:	e0bffe15 	stw	r2,-8(fp)
    4a80:	e0c00317 	ldw	r3,12(fp)
    4a84:	e0bffe17 	ldw	r2,-8(fp)
    4a88:	10ffea16 	blt	r2,r3,4a34 <drawRectangle+0xd8>
	{
		image->data[col*(r.y + r.height) + r.x + r.width - i] = 255;
	}
	for (i = 0; i < r.height; i++)
    4a8c:	e03ffe15 	stw	zero,-8(fp)
    4a90:	00001106 	br	4ad8 <drawRectangle+0x17c>
	{
		image->data[col*(r.y + r.height - i) + r.x] = 255;
    4a94:	e0bfff17 	ldw	r2,-4(fp)
    4a98:	11000317 	ldw	r4,12(r2)
    4a9c:	e0c00217 	ldw	r3,8(fp)
    4aa0:	e0800417 	ldw	r2,16(fp)
    4aa4:	1887883a 	add	r3,r3,r2
    4aa8:	e0bffe17 	ldw	r2,-8(fp)
    4aac:	1887c83a 	sub	r3,r3,r2
    4ab0:	e0bffd17 	ldw	r2,-12(fp)
    4ab4:	1887383a 	mul	r3,r3,r2
    4ab8:	e0800117 	ldw	r2,4(fp)
    4abc:	1885883a 	add	r2,r3,r2
    4ac0:	2087883a 	add	r3,r4,r2
    4ac4:	00bfffc4 	movi	r2,-1
    4ac8:	18800005 	stb	r2,0(r3)
	}
	for (i = 0; i < r.width; i++)
	{
		image->data[col*(r.y + r.height) + r.x + r.width - i] = 255;
	}
	for (i = 0; i < r.height; i++)
    4acc:	e0bffe17 	ldw	r2,-8(fp)
    4ad0:	10800044 	addi	r2,r2,1
    4ad4:	e0bffe15 	stw	r2,-8(fp)
    4ad8:	e0c00417 	ldw	r3,16(fp)
    4adc:	e0bffe17 	ldw	r2,-8(fp)
    4ae0:	10ffec16 	blt	r2,r3,4a94 <drawRectangle+0x138>
	{
		image->data[col*(r.y + r.height - i) + r.x] = 255;
	}

}
    4ae4:	e037883a 	mov	sp,fp
    4ae8:	df000017 	ldw	fp,0(sp)
    4aec:	dec00404 	addi	sp,sp,16
    4af0:	f800283a 	ret

00004af4 <_Z9partitionRSt6vectorI6MyRectSaIS0_EERS_IiSaIiEEf>:
    }

}


int partition(std::vector<MyRect>& _vec, std::vector<int>& labels, float eps)
    4af4:	deffcb04 	addi	sp,sp,-212
    4af8:	dfc03415 	stw	ra,208(sp)
    4afc:	df003315 	stw	fp,204(sp)
    4b00:	ddc03215 	stw	r23,200(sp)
    4b04:	dd803115 	stw	r22,196(sp)
    4b08:	dd403015 	stw	r21,192(sp)
    4b0c:	dd002f15 	stw	r20,188(sp)
    4b10:	dcc02e15 	stw	r19,184(sp)
    4b14:	dc802d15 	stw	r18,180(sp)
    4b18:	dc402c15 	stw	r17,176(sp)
    4b1c:	dc002b15 	stw	r16,172(sp)
    4b20:	df002b04 	addi	fp,sp,172
    4b24:	e13fe915 	stw	r4,-92(fp)
    4b28:	e17fea15 	stw	r5,-88(fp)
    4b2c:	e1bfeb15 	stw	r6,-84(fp)
    4b30:	00800074 	movhi	r2,1
    4b34:	10b95604 	addi	r2,r2,-6824
    4b38:	e0bff215 	stw	r2,-56(fp)
    4b3c:	008000b4 	movhi	r2,2
    4b40:	10b91084 	addi	r2,r2,-7102
    4b44:	e0bff315 	stw	r2,-52(fp)
    4b48:	e0bff404 	addi	r2,fp,-48
    4b4c:	e0ffd504 	addi	r3,fp,-172
    4b50:	10c00015 	stw	r3,0(r2)
    4b54:	00c00034 	movhi	r3,0
    4b58:	18d41204 	addi	r3,r3,20552
    4b5c:	10c00115 	stw	r3,4(r2)
    4b60:	16c00215 	stw	sp,8(r2)
    4b64:	e13fec04 	addi	r4,fp,-80
    4b68:	00108500 	call	10850 <_Unwind_SjLj_Register>
{
  int i, j, N = (int)_vec.size();
    4b6c:	e13fe917 	ldw	r4,-92(fp)
    4b70:	0002ec40 	call	2ec4 <_ZNKSt6vectorI6MyRectSaIS0_EE4sizeEv>
    4b74:	e0bfe115 	stw	r2,-124(fp)

  MyRect* vec = &_vec[0];
    4b78:	e13fe917 	ldw	r4,-92(fp)
    4b7c:	000b883a 	mov	r5,zero
    4b80:	0003e780 	call	3e78 <_ZNSt6vectorI6MyRectSaIS0_EEixEm>
    4b84:	e0bfe015 	stw	r2,-128(fp)

  const int PARENT=0;
    4b88:	e03fdf15 	stw	zero,-132(fp)
  const int RANK=1;
    4b8c:	00800044 	movi	r2,1
    4b90:	e0bfde15 	stw	r2,-136(fp)

  std::vector<int> _nodes(N*2);
    4b94:	e0bfe117 	ldw	r2,-124(fp)
    4b98:	1085883a 	add	r2,r2,r2
    4b9c:	e0bffd15 	stw	r2,-12(fp)
    4ba0:	e03fe515 	stw	zero,-108(fp)
    4ba4:	e13fe404 	addi	r4,fp,-112
    4ba8:	00058200 	call	5820 <_ZNSaIiEC1Ev>
    4bac:	e13fe604 	addi	r4,fp,-104
    4bb0:	e1bfe504 	addi	r6,fp,-108
    4bb4:	e1ffe404 	addi	r7,fp,-112
    4bb8:	00800084 	movi	r2,2
    4bbc:	e0bfed15 	stw	r2,-76(fp)
    4bc0:	e17ffd17 	ldw	r5,-12(fp)
    4bc4:	0006b100 	call	6b10 <_ZNSt6vectorIiSaIiEEC1EmRKiRKS0_>
    4bc8:	e13fe404 	addi	r4,fp,-112
    4bcc:	00058a00 	call	58a0 <_ZNSaIiED1Ev>

  int (*nodes)[2] = (int(*)[2])&_nodes[0];
    4bd0:	e13fe604 	addi	r4,fp,-104
    4bd4:	000b883a 	mov	r5,zero
    4bd8:	0005d8c0 	call	5d8c <_ZNSt6vectorIiSaIiEEixEm>
    4bdc:	e0bfdd15 	stw	r2,-140(fp)

  /* The first O(N) pass: create N single-vertex trees */
  for(i = 0; i < N; i++)
    4be0:	e03fe315 	stw	zero,-116(fp)
    4be4:	00001a06 	br	4c50 <_Z9partitionRSt6vectorI6MyRectSaIS0_EERS_IiSaIiEEf+0x15c>
    4be8:	e0bfff17 	ldw	r2,-4(fp)
    4bec:	e0bffa15 	stw	r2,-24(fp)
  MyRect* vec = &_vec[0];

  const int PARENT=0;
  const int RANK=1;

  std::vector<int> _nodes(N*2);
    4bf0:	e13fe404 	addi	r4,fp,-112
    4bf4:	00058a00 	call	58a0 <_ZNSaIiED1Ev>
    4bf8:	e0fffa17 	ldw	r3,-24(fp)
    4bfc:	e0ffff15 	stw	r3,-4(fp)
    4c00:	00bfffc4 	movi	r2,-1
    4c04:	e0bfed15 	stw	r2,-76(fp)
    4c08:	e13fff17 	ldw	r4,-4(fp)
    4c0c:	0010b1c0 	call	10b1c <_Unwind_SjLj_Resume>
  int (*nodes)[2] = (int(*)[2])&_nodes[0];

  /* The first O(N) pass: create N single-vertex trees */
  for(i = 0; i < N; i++)
    {
      nodes[i][PARENT]=-1;
    4c10:	e0bfe317 	ldw	r2,-116(fp)
    4c14:	100490fa 	slli	r2,r2,3
    4c18:	1007883a 	mov	r3,r2
    4c1c:	e0bfdd17 	ldw	r2,-140(fp)
    4c20:	1887883a 	add	r3,r3,r2
    4c24:	00bfffc4 	movi	r2,-1
    4c28:	18800015 	stw	r2,0(r3)
      nodes[i][RANK] = 0;
    4c2c:	e0bfe317 	ldw	r2,-116(fp)
    4c30:	100490fa 	slli	r2,r2,3
    4c34:	1007883a 	mov	r3,r2
    4c38:	e0bfdd17 	ldw	r2,-140(fp)
    4c3c:	1885883a 	add	r2,r3,r2
    4c40:	10000115 	stw	zero,4(r2)
  std::vector<int> _nodes(N*2);

  int (*nodes)[2] = (int(*)[2])&_nodes[0];

  /* The first O(N) pass: create N single-vertex trees */
  for(i = 0; i < N; i++)
    4c44:	e0bfe317 	ldw	r2,-116(fp)
    4c48:	10800044 	addi	r2,r2,1
    4c4c:	e0bfe315 	stw	r2,-116(fp)
    4c50:	e0ffe317 	ldw	r3,-116(fp)
    4c54:	e0bfe117 	ldw	r2,-124(fp)
    4c58:	18bfed16 	blt	r3,r2,4c10 <_Z9partitionRSt6vectorI6MyRectSaIS0_EERS_IiSaIiEEf+0x11c>
      nodes[i][PARENT]=-1;
      nodes[i][RANK] = 0;
    }

  /* The main O(N^2) pass: merge connected components */
  for( i = 0; i < N; i++ )
    4c5c:	e03fe315 	stw	zero,-116(fp)
    4c60:	0000af06 	br	4f20 <_Z9partitionRSt6vectorI6MyRectSaIS0_EERS_IiSaIiEEf+0x42c>
    {
      int root = i;
    4c64:	e0bfe317 	ldw	r2,-116(fp)
    4c68:	e0bfdb15 	stw	r2,-148(fp)

      /* find root */
      while( nodes[root][PARENT] >= 0 )
    4c6c:	00000706 	br	4c8c <_Z9partitionRSt6vectorI6MyRectSaIS0_EERS_IiSaIiEEf+0x198>
	root = nodes[root][PARENT];
    4c70:	e0bfdb17 	ldw	r2,-148(fp)
    4c74:	100490fa 	slli	r2,r2,3
    4c78:	1007883a 	mov	r3,r2
    4c7c:	e0bfdd17 	ldw	r2,-140(fp)
    4c80:	1885883a 	add	r2,r3,r2
    4c84:	10800017 	ldw	r2,0(r2)
    4c88:	e0bfdb15 	stw	r2,-148(fp)
  for( i = 0; i < N; i++ )
    {
      int root = i;

      /* find root */
      while( nodes[root][PARENT] >= 0 )
    4c8c:	e0bfdb17 	ldw	r2,-148(fp)
    4c90:	100490fa 	slli	r2,r2,3
    4c94:	1007883a 	mov	r3,r2
    4c98:	e0bfdd17 	ldw	r2,-140(fp)
    4c9c:	1885883a 	add	r2,r3,r2
    4ca0:	10800017 	ldw	r2,0(r2)
    4ca4:	1004403a 	cmpge	r2,r2,zero
    4ca8:	103ff11e 	bne	r2,zero,4c70 <_Z9partitionRSt6vectorI6MyRectSaIS0_EERS_IiSaIiEEf+0x17c>
	root = nodes[root][PARENT];

      for( j = 0; j < N; j++ )
    4cac:	e03fe215 	stw	zero,-120(fp)
    4cb0:	00009506 	br	4f08 <_Z9partitionRSt6vectorI6MyRectSaIS0_EERS_IiSaIiEEf+0x414>
	{
	  if( i == j || !predicate(eps, vec[i], vec[j]))
    4cb4:	e0ffe317 	ldw	r3,-116(fp)
    4cb8:	e0bfe217 	ldw	r2,-120(fp)
    4cbc:	18800e26 	beq	r3,r2,4cf8 <_Z9partitionRSt6vectorI6MyRectSaIS0_EERS_IiSaIiEEf+0x204>
    4cc0:	e0bfe317 	ldw	r2,-116(fp)
    4cc4:	1004913a 	slli	r2,r2,4
    4cc8:	1007883a 	mov	r3,r2
    4ccc:	e0bfe017 	ldw	r2,-128(fp)
    4cd0:	188b883a 	add	r5,r3,r2
    4cd4:	e0bfe217 	ldw	r2,-120(fp)
    4cd8:	1004913a 	slli	r2,r2,4
    4cdc:	1007883a 	mov	r3,r2
    4ce0:	e0bfe017 	ldw	r2,-128(fp)
    4ce4:	188d883a 	add	r6,r3,r2
    4ce8:	e13feb17 	ldw	r4,-84(fp)
    4cec:	00047300 	call	4730 <_Z9predicatefR6MyRectS0_>
    4cf0:	1004c03a 	cmpne	r2,r2,zero
    4cf4:	1000031e 	bne	r2,zero,4d04 <_Z9partitionRSt6vectorI6MyRectSaIS0_EERS_IiSaIiEEf+0x210>
    4cf8:	00800044 	movi	r2,1
    4cfc:	e0bffc05 	stb	r2,-16(fp)
    4d00:	00000106 	br	4d08 <_Z9partitionRSt6vectorI6MyRectSaIS0_EERS_IiSaIiEEf+0x214>
    4d04:	e03ffc05 	stb	zero,-16(fp)
    4d08:	e0bffc03 	ldbu	r2,-16(fp)
    4d0c:	10803fcc 	andi	r2,r2,255
    4d10:	1004c03a 	cmpne	r2,r2,zero
    4d14:	1000791e 	bne	r2,zero,4efc <_Z9partitionRSt6vectorI6MyRectSaIS0_EERS_IiSaIiEEf+0x408>
	    continue;
	  int root2 = j;
    4d18:	e0bfe217 	ldw	r2,-120(fp)
    4d1c:	e0bfda15 	stw	r2,-152(fp)

	  while( nodes[root2][PARENT] >= 0 )
    4d20:	00000706 	br	4d40 <_Z9partitionRSt6vectorI6MyRectSaIS0_EERS_IiSaIiEEf+0x24c>
	    root2 = nodes[root2][PARENT];
    4d24:	e0bfda17 	ldw	r2,-152(fp)
    4d28:	100490fa 	slli	r2,r2,3
    4d2c:	1007883a 	mov	r3,r2
    4d30:	e0bfdd17 	ldw	r2,-140(fp)
    4d34:	1885883a 	add	r2,r3,r2
    4d38:	10800017 	ldw	r2,0(r2)
    4d3c:	e0bfda15 	stw	r2,-152(fp)
	{
	  if( i == j || !predicate(eps, vec[i], vec[j]))
	    continue;
	  int root2 = j;

	  while( nodes[root2][PARENT] >= 0 )
    4d40:	e0bfda17 	ldw	r2,-152(fp)
    4d44:	100490fa 	slli	r2,r2,3
    4d48:	1007883a 	mov	r3,r2
    4d4c:	e0bfdd17 	ldw	r2,-140(fp)
    4d50:	1885883a 	add	r2,r3,r2
    4d54:	10800017 	ldw	r2,0(r2)
    4d58:	1004403a 	cmpge	r2,r2,zero
    4d5c:	103ff11e 	bne	r2,zero,4d24 <_Z9partitionRSt6vectorI6MyRectSaIS0_EERS_IiSaIiEEf+0x230>
	    root2 = nodes[root2][PARENT];

	  if( root2 != root )
    4d60:	e0ffda17 	ldw	r3,-152(fp)
    4d64:	e0bfdb17 	ldw	r2,-148(fp)
    4d68:	18806426 	beq	r3,r2,4efc <_Z9partitionRSt6vectorI6MyRectSaIS0_EERS_IiSaIiEEf+0x408>
	    {
	      /* unite both trees */
	      int rank = nodes[root][RANK], rank2 = nodes[root2][RANK];
    4d6c:	e0bfdb17 	ldw	r2,-148(fp)
    4d70:	100490fa 	slli	r2,r2,3
    4d74:	1007883a 	mov	r3,r2
    4d78:	e0bfdd17 	ldw	r2,-140(fp)
    4d7c:	1885883a 	add	r2,r3,r2
    4d80:	10800117 	ldw	r2,4(r2)
    4d84:	e0bfd915 	stw	r2,-156(fp)
    4d88:	e0bfda17 	ldw	r2,-152(fp)
    4d8c:	100490fa 	slli	r2,r2,3
    4d90:	1007883a 	mov	r3,r2
    4d94:	e0bfdd17 	ldw	r2,-140(fp)
    4d98:	1885883a 	add	r2,r3,r2
    4d9c:	10800117 	ldw	r2,4(r2)
    4da0:	e0bfd815 	stw	r2,-160(fp)
	      if( rank > rank2 )
    4da4:	e0ffd917 	ldw	r3,-156(fp)
    4da8:	e0bfd817 	ldw	r2,-160(fp)
    4dac:	10c0080e 	bge	r2,r3,4dd0 <_Z9partitionRSt6vectorI6MyRectSaIS0_EERS_IiSaIiEEf+0x2dc>
		nodes[root2][PARENT] = root;
    4db0:	e0bfda17 	ldw	r2,-152(fp)
    4db4:	100490fa 	slli	r2,r2,3
    4db8:	1007883a 	mov	r3,r2
    4dbc:	e0bfdd17 	ldw	r2,-140(fp)
    4dc0:	1887883a 	add	r3,r3,r2
    4dc4:	e0bfdb17 	ldw	r2,-148(fp)
    4dc8:	18800015 	stw	r2,0(r3)
    4dcc:	00001906 	br	4e34 <_Z9partitionRSt6vectorI6MyRectSaIS0_EERS_IiSaIiEEf+0x340>
	      else
		{
		  nodes[root][PARENT] = root2;
    4dd0:	e0bfdb17 	ldw	r2,-148(fp)
    4dd4:	100490fa 	slli	r2,r2,3
    4dd8:	1007883a 	mov	r3,r2
    4ddc:	e0bfdd17 	ldw	r2,-140(fp)
    4de0:	1887883a 	add	r3,r3,r2
    4de4:	e0bfda17 	ldw	r2,-152(fp)
    4de8:	18800015 	stw	r2,0(r3)
		  nodes[root2][RANK] += rank == rank2;
    4dec:	e0bfda17 	ldw	r2,-152(fp)
    4df0:	100490fa 	slli	r2,r2,3
    4df4:	1007883a 	mov	r3,r2
    4df8:	e0bfdd17 	ldw	r2,-140(fp)
    4dfc:	188b883a 	add	r5,r3,r2
    4e00:	e0bfda17 	ldw	r2,-152(fp)
    4e04:	100490fa 	slli	r2,r2,3
    4e08:	1007883a 	mov	r3,r2
    4e0c:	e0bfdd17 	ldw	r2,-140(fp)
    4e10:	1885883a 	add	r2,r3,r2
    4e14:	11000117 	ldw	r4,4(r2)
    4e18:	e0ffd917 	ldw	r3,-156(fp)
    4e1c:	e0bfd817 	ldw	r2,-160(fp)
    4e20:	1885003a 	cmpeq	r2,r3,r2
    4e24:	2085883a 	add	r2,r4,r2
    4e28:	28800115 	stw	r2,4(r5)
		  root = root2;
    4e2c:	e0bfda17 	ldw	r2,-152(fp)
    4e30:	e0bfdb15 	stw	r2,-148(fp)
		}

	      int k = j, parent;
    4e34:	e0bfe217 	ldw	r2,-120(fp)
    4e38:	e0bfd715 	stw	r2,-164(fp)

	      /* compress the path from node2 to root */
	      while( (parent = nodes[k][PARENT]) >= 0 )
    4e3c:	00000906 	br	4e64 <_Z9partitionRSt6vectorI6MyRectSaIS0_EERS_IiSaIiEEf+0x370>
		{
		  nodes[k][PARENT] = root;
    4e40:	e0bfd717 	ldw	r2,-164(fp)
    4e44:	100490fa 	slli	r2,r2,3
    4e48:	1007883a 	mov	r3,r2
    4e4c:	e0bfdd17 	ldw	r2,-140(fp)
    4e50:	1887883a 	add	r3,r3,r2
    4e54:	e0bfdb17 	ldw	r2,-148(fp)
    4e58:	18800015 	stw	r2,0(r3)
		  k = parent;
    4e5c:	e0bfd617 	ldw	r2,-168(fp)
    4e60:	e0bfd715 	stw	r2,-164(fp)
		}

	      int k = j, parent;

	      /* compress the path from node2 to root */
	      while( (parent = nodes[k][PARENT]) >= 0 )
    4e64:	e0bfd717 	ldw	r2,-164(fp)
    4e68:	100490fa 	slli	r2,r2,3
    4e6c:	1007883a 	mov	r3,r2
    4e70:	e0bfdd17 	ldw	r2,-140(fp)
    4e74:	1885883a 	add	r2,r3,r2
    4e78:	10800017 	ldw	r2,0(r2)
    4e7c:	e0bfd615 	stw	r2,-168(fp)
    4e80:	e0bfd617 	ldw	r2,-168(fp)
    4e84:	0084303a 	nor	r2,zero,r2
    4e88:	1004d7fa 	srli	r2,r2,31
    4e8c:	10803fcc 	andi	r2,r2,255
    4e90:	1004c03a 	cmpne	r2,r2,zero
    4e94:	103fea1e 	bne	r2,zero,4e40 <_Z9partitionRSt6vectorI6MyRectSaIS0_EERS_IiSaIiEEf+0x34c>
		  nodes[k][PARENT] = root;
		  k = parent;
		}

	      /* compress the path from node to root */
	      k = i;
    4e98:	e0bfe317 	ldw	r2,-116(fp)
    4e9c:	e0bfd715 	stw	r2,-164(fp)
	      while( (parent = nodes[k][PARENT]) >= 0 )
    4ea0:	00000906 	br	4ec8 <_Z9partitionRSt6vectorI6MyRectSaIS0_EERS_IiSaIiEEf+0x3d4>
		{
		  nodes[k][PARENT] = root;
    4ea4:	e0bfd717 	ldw	r2,-164(fp)
    4ea8:	100490fa 	slli	r2,r2,3
    4eac:	1007883a 	mov	r3,r2
    4eb0:	e0bfdd17 	ldw	r2,-140(fp)
    4eb4:	1887883a 	add	r3,r3,r2
    4eb8:	e0bfdb17 	ldw	r2,-148(fp)
    4ebc:	18800015 	stw	r2,0(r3)
		  k = parent;
    4ec0:	e0bfd617 	ldw	r2,-168(fp)
    4ec4:	e0bfd715 	stw	r2,-164(fp)
		  k = parent;
		}

	      /* compress the path from node to root */
	      k = i;
	      while( (parent = nodes[k][PARENT]) >= 0 )
    4ec8:	e0bfd717 	ldw	r2,-164(fp)
    4ecc:	100490fa 	slli	r2,r2,3
    4ed0:	1007883a 	mov	r3,r2
    4ed4:	e0bfdd17 	ldw	r2,-140(fp)
    4ed8:	1885883a 	add	r2,r3,r2
    4edc:	10800017 	ldw	r2,0(r2)
    4ee0:	e0bfd615 	stw	r2,-168(fp)
    4ee4:	e0bfd617 	ldw	r2,-168(fp)
    4ee8:	0084303a 	nor	r2,zero,r2
    4eec:	1004d7fa 	srli	r2,r2,31
    4ef0:	10803fcc 	andi	r2,r2,255
    4ef4:	1004c03a 	cmpne	r2,r2,zero
    4ef8:	103fea1e 	bne	r2,zero,4ea4 <_Z9partitionRSt6vectorI6MyRectSaIS0_EERS_IiSaIiEEf+0x3b0>

      /* find root */
      while( nodes[root][PARENT] >= 0 )
	root = nodes[root][PARENT];

      for( j = 0; j < N; j++ )
    4efc:	e0bfe217 	ldw	r2,-120(fp)
    4f00:	10800044 	addi	r2,r2,1
    4f04:	e0bfe215 	stw	r2,-120(fp)
    4f08:	e0ffe217 	ldw	r3,-120(fp)
    4f0c:	e0bfe117 	ldw	r2,-124(fp)
    4f10:	18bf6816 	blt	r3,r2,4cb4 <_Z9partitionRSt6vectorI6MyRectSaIS0_EERS_IiSaIiEEf+0x1c0>
      nodes[i][PARENT]=-1;
      nodes[i][RANK] = 0;
    }

  /* The main O(N^2) pass: merge connected components */
  for( i = 0; i < N; i++ )
    4f14:	e0bfe317 	ldw	r2,-116(fp)
    4f18:	10800044 	addi	r2,r2,1
    4f1c:	e0bfe315 	stw	r2,-116(fp)
    4f20:	e0ffe317 	ldw	r3,-116(fp)
    4f24:	e0bfe117 	ldw	r2,-124(fp)
    4f28:	18bf4e16 	blt	r3,r2,4c64 <_Z9partitionRSt6vectorI6MyRectSaIS0_EERS_IiSaIiEEf+0x170>
	    }
	}
    }

  /* Final O(N) pass: enumerate classes */
  labels.resize(N);
    4f2c:	e17fe117 	ldw	r5,-124(fp)
    4f30:	00800044 	movi	r2,1
    4f34:	e0bfed15 	stw	r2,-76(fp)
    4f38:	e13fea17 	ldw	r4,-88(fp)
    4f3c:	000d883a 	mov	r6,zero
    4f40:	00079040 	call	7904 <_ZNSt6vectorIiSaIiEE6resizeEmi>
  int nclasses = 0;
    4f44:	e03fdc15 	stw	zero,-144(fp)

  for( i = 0; i < N; i++ )
    4f48:	e03fe315 	stw	zero,-116(fp)
    4f4c:	00003406 	br	5020 <_Z9partitionRSt6vectorI6MyRectSaIS0_EERS_IiSaIiEEf+0x52c>
    {
      int root = i;
    4f50:	e0bfe317 	ldw	r2,-116(fp)
    4f54:	e0bfd515 	stw	r2,-172(fp)
      while( nodes[root][PARENT] >= 0 )
    4f58:	00000706 	br	4f78 <_Z9partitionRSt6vectorI6MyRectSaIS0_EERS_IiSaIiEEf+0x484>
	root = nodes[root][PARENT];
    4f5c:	e0bfd517 	ldw	r2,-172(fp)
    4f60:	100490fa 	slli	r2,r2,3
    4f64:	1007883a 	mov	r3,r2
    4f68:	e0bfdd17 	ldw	r2,-140(fp)
    4f6c:	1885883a 	add	r2,r3,r2
    4f70:	10800017 	ldw	r2,0(r2)
    4f74:	e0bfd515 	stw	r2,-172(fp)
  int nclasses = 0;

  for( i = 0; i < N; i++ )
    {
      int root = i;
      while( nodes[root][PARENT] >= 0 )
    4f78:	e0bfd517 	ldw	r2,-172(fp)
    4f7c:	100490fa 	slli	r2,r2,3
    4f80:	1007883a 	mov	r3,r2
    4f84:	e0bfdd17 	ldw	r2,-140(fp)
    4f88:	1885883a 	add	r2,r3,r2
    4f8c:	10800017 	ldw	r2,0(r2)
    4f90:	1004403a 	cmpge	r2,r2,zero
    4f94:	103ff11e 	bne	r2,zero,4f5c <_Z9partitionRSt6vectorI6MyRectSaIS0_EERS_IiSaIiEEf+0x468>
	root = nodes[root][PARENT];
      /* re-use the rank as the class label */
      if( nodes[root][RANK] >= 0 )
    4f98:	e0bfd517 	ldw	r2,-172(fp)
    4f9c:	100490fa 	slli	r2,r2,3
    4fa0:	1007883a 	mov	r3,r2
    4fa4:	e0bfdd17 	ldw	r2,-140(fp)
    4fa8:	1885883a 	add	r2,r3,r2
    4fac:	10800117 	ldw	r2,4(r2)
    4fb0:	1004803a 	cmplt	r2,r2,zero
    4fb4:	10000b1e 	bne	r2,zero,4fe4 <_Z9partitionRSt6vectorI6MyRectSaIS0_EERS_IiSaIiEEf+0x4f0>
	nodes[root][RANK] = ~nclasses++;
    4fb8:	e0bfd517 	ldw	r2,-172(fp)
    4fbc:	100490fa 	slli	r2,r2,3
    4fc0:	1007883a 	mov	r3,r2
    4fc4:	e0bfdd17 	ldw	r2,-140(fp)
    4fc8:	1887883a 	add	r3,r3,r2
    4fcc:	e0bfdc17 	ldw	r2,-144(fp)
    4fd0:	0084303a 	nor	r2,zero,r2
    4fd4:	18800115 	stw	r2,4(r3)
    4fd8:	e0bfdc17 	ldw	r2,-144(fp)
    4fdc:	10800044 	addi	r2,r2,1
    4fe0:	e0bfdc15 	stw	r2,-144(fp)
      labels[i] = ~nodes[root][RANK];
    4fe4:	e17fe317 	ldw	r5,-116(fp)
    4fe8:	e13fea17 	ldw	r4,-88(fp)
    4fec:	0005d8c0 	call	5d8c <_ZNSt6vectorIiSaIiEEixEm>
    4ff0:	1009883a 	mov	r4,r2
    4ff4:	e0bfd517 	ldw	r2,-172(fp)
    4ff8:	100490fa 	slli	r2,r2,3
    4ffc:	1007883a 	mov	r3,r2
    5000:	e0bfdd17 	ldw	r2,-140(fp)
    5004:	1885883a 	add	r2,r3,r2
    5008:	10800117 	ldw	r2,4(r2)
    500c:	0084303a 	nor	r2,zero,r2
    5010:	20800015 	stw	r2,0(r4)

  /* Final O(N) pass: enumerate classes */
  labels.resize(N);
  int nclasses = 0;

  for( i = 0; i < N; i++ )
    5014:	e0bfe317 	ldw	r2,-116(fp)
    5018:	10800044 	addi	r2,r2,1
    501c:	e0bfe315 	stw	r2,-116(fp)
    5020:	e0ffe317 	ldw	r3,-116(fp)
    5024:	e0bfe117 	ldw	r2,-124(fp)
    5028:	18bfc916 	blt	r3,r2,4f50 <_Z9partitionRSt6vectorI6MyRectSaIS0_EERS_IiSaIiEEf+0x45c>
      if( nodes[root][RANK] >= 0 )
	nodes[root][RANK] = ~nclasses++;
      labels[i] = ~nodes[root][RANK];
    }

  return nclasses;
    502c:	e0ffdc17 	ldw	r3,-144(fp)
    5030:	e0fffb15 	stw	r3,-20(fp)
    5034:	e13fe604 	addi	r4,fp,-104
    5038:	0006bb40 	call	6bb4 <_ZNSt6vectorIiSaIiEED1Ev>
    503c:	e0bffb17 	ldw	r2,-20(fp)
    5040:	e0bffe15 	stw	r2,-8(fp)
    5044:	00001006 	br	5088 <_Z9partitionRSt6vectorI6MyRectSaIS0_EERS_IiSaIiEEf+0x594>
    5048:	e7002b04 	addi	fp,fp,172
    504c:	e0bfed17 	ldw	r2,-76(fp)
    5050:	e0ffee17 	ldw	r3,-72(fp)
    5054:	e0ffff15 	stw	r3,-4(fp)
    5058:	10800060 	cmpeqi	r2,r2,1
    505c:	103ee21e 	bne	r2,zero,4be8 <_Z9partitionRSt6vectorI6MyRectSaIS0_EERS_IiSaIiEEf+0xf4>
    5060:	e0bfff17 	ldw	r2,-4(fp)
    5064:	e0bff915 	stw	r2,-28(fp)
    5068:	e13fe604 	addi	r4,fp,-104
    506c:	0006bb40 	call	6bb4 <_ZNSt6vectorIiSaIiEED1Ev>
    5070:	e0fff917 	ldw	r3,-28(fp)
    5074:	e0ffff15 	stw	r3,-4(fp)
    5078:	00bfffc4 	movi	r2,-1
    507c:	e0bfed15 	stw	r2,-76(fp)
    5080:	e13fff17 	ldw	r4,-4(fp)
    5084:	0010b1c0 	call	10b1c <_Unwind_SjLj_Resume>
    5088:	e13fec04 	addi	r4,fp,-80
    508c:	00108600 	call	10860 <_Unwind_SjLj_Unregister>
}
    5090:	e0bffe17 	ldw	r2,-8(fp)
    5094:	e037883a 	mov	sp,fp
    5098:	dfc00917 	ldw	ra,36(sp)
    509c:	df000817 	ldw	fp,32(sp)
    50a0:	ddc00717 	ldw	r23,28(sp)
    50a4:	dd800617 	ldw	r22,24(sp)
    50a8:	dd400517 	ldw	r21,20(sp)
    50ac:	dd000417 	ldw	r20,16(sp)
    50b0:	dcc00317 	ldw	r19,12(sp)
    50b4:	dc800217 	ldw	r18,8(sp)
    50b8:	dc400117 	ldw	r17,4(sp)
    50bc:	dc000017 	ldw	r16,0(sp)
    50c0:	dec00a04 	addi	sp,sp,40
    50c4:	f800283a 	ret

000050c8 <groupRectangles>:
    myAbs(r1.y - r2.y) <= delta &&
    myAbs(r1.x + r1.width - r2.x - r2.width) <= delta &&
    myAbs(r1.y + r1.height - r2.y - r2.height) <= delta;
}

void groupRectangles(std::vector<MyRect>& rectList, int groupThreshold, float eps)
    50c8:	deffa804 	addi	sp,sp,-352
    50cc:	dfc05715 	stw	ra,348(sp)
    50d0:	df005615 	stw	fp,344(sp)
    50d4:	ddc05515 	stw	r23,340(sp)
    50d8:	dd805415 	stw	r22,336(sp)
    50dc:	dd405315 	stw	r21,332(sp)
    50e0:	dd005215 	stw	r20,328(sp)
    50e4:	dcc05115 	stw	r19,324(sp)
    50e8:	dc805015 	stw	r18,320(sp)
    50ec:	dc404f15 	stw	r17,316(sp)
    50f0:	dc004e15 	stw	r16,312(sp)
    50f4:	df004e04 	addi	fp,sp,312
    50f8:	e13fd915 	stw	r4,-156(fp)
    50fc:	e17fda15 	stw	r5,-152(fp)
    5100:	e1bfdb15 	stw	r6,-148(fp)
    5104:	00800074 	movhi	r2,1
    5108:	10b95604 	addi	r2,r2,-6824
    510c:	e0bfe215 	stw	r2,-120(fp)
    5110:	008000b4 	movhi	r2,2
    5114:	10b91284 	addi	r2,r2,-7094
    5118:	e0bfe315 	stw	r2,-116(fp)
    511c:	e0bfe404 	addi	r2,fp,-112
    5120:	e0ffb204 	addi	r3,fp,-312
    5124:	10c00015 	stw	r3,0(r2)
    5128:	00c00034 	movhi	r3,0
    512c:	18d5cd04 	addi	r3,r3,22324
    5130:	10c00115 	stw	r3,4(r2)
    5134:	16c00215 	stw	sp,8(r2)
    5138:	e13fdc04 	addi	r4,fp,-144
    513c:	00108500 	call	10850 <_Unwind_SjLj_Register>
{
  if( groupThreshold <= 0 || rectList.empty() )
    5140:	e0bfda17 	ldw	r2,-152(fp)
    5144:	10800050 	cmplti	r2,r2,1
    5148:	1000051e 	bne	r2,zero,5160 <groupRectangles+0x98>
    514c:	e13fd917 	ldw	r4,-156(fp)
    5150:	0005a300 	call	5a30 <_ZNKSt6vectorI6MyRectSaIS0_EE5emptyEv>
    5154:	10803fcc 	andi	r2,r2,255
    5158:	1005003a 	cmpeq	r2,r2,zero
    515c:	1000031e 	bne	r2,zero,516c <groupRectangles+0xa4>
    5160:	00800044 	movi	r2,1
    5164:	e0bffd05 	stb	r2,-12(fp)
    5168:	00000106 	br	5170 <groupRectangles+0xa8>
    516c:	e03ffd05 	stb	zero,-12(fp)
    5170:	e0bffd03 	ldbu	r2,-12(fp)
    5174:	10803fcc 	andi	r2,r2,255
    5178:	1004c03a 	cmpne	r2,r2,zero
    517c:	1001911e 	bne	r2,zero,57c4 <groupRectangles+0x6fc>
    return;


  std::vector<int> labels;
    5180:	e13fc304 	addi	r4,fp,-244
    5184:	00058200 	call	5820 <_ZNSaIiEC1Ev>
    5188:	e13fc404 	addi	r4,fp,-240
    518c:	e17fc304 	addi	r5,fp,-244
    5190:	0005b080 	call	5b08 <_ZNSt6vectorIiSaIiEEC1ERKS0_>
    5194:	e13fc304 	addi	r4,fp,-244
    5198:	00058a00 	call	58a0 <_ZNSaIiED1Ev>

  int nclasses = partition(rectList, labels, eps);
    519c:	e17fc404 	addi	r5,fp,-240
    51a0:	00800104 	movi	r2,4
    51a4:	e0bfdd15 	stw	r2,-140(fp)
    51a8:	e13fd917 	ldw	r4,-156(fp)
    51ac:	e1bfdb17 	ldw	r6,-148(fp)
    51b0:	0004af40 	call	4af4 <_Z9partitionRSt6vectorI6MyRectSaIS0_EERS_IiSaIiEEf>
    51b4:	e0bfbb15 	stw	r2,-276(fp)

  std::vector<MyRect> rrects(nclasses);
    51b8:	e0ffbb17 	ldw	r3,-276(fp)
    51bc:	e0fffc15 	stw	r3,-16(fp)
    51c0:	e03fbf15 	stw	zero,-260(fp)
    51c4:	e03fc015 	stw	zero,-256(fp)
    51c8:	e03fc115 	stw	zero,-252(fp)
    51cc:	e03fc215 	stw	zero,-248(fp)
    51d0:	e13fbe04 	addi	r4,fp,-264
    51d4:	00029600 	call	2960 <_ZNSaI6MyRectEC1Ev>
    51d8:	e13fc704 	addi	r4,fp,-228
    51dc:	e1bfbf04 	addi	r6,fp,-260
    51e0:	e1ffbe04 	addi	r7,fp,-264
    51e4:	008000c4 	movi	r2,3
    51e8:	e0bfdd15 	stw	r2,-140(fp)
    51ec:	e17ffc17 	ldw	r5,-16(fp)
    51f0:	0006c300 	call	6c30 <_ZNSt6vectorI6MyRectSaIS0_EEC1EmRKS0_RKS1_>
    51f4:	e13fbe04 	addi	r4,fp,-264
    51f8:	00029b00 	call	29b0 <_ZNSaI6MyRectED1Ev>
  std::vector<int> rweights(nclasses);
    51fc:	e0bfbb17 	ldw	r2,-276(fp)
    5200:	e0bffb15 	stw	r2,-20(fp)
    5204:	e03fbd15 	stw	zero,-268(fp)
    5208:	e13fbc04 	addi	r4,fp,-272
    520c:	00058200 	call	5820 <_ZNSaIiEC1Ev>
    5210:	e13fca04 	addi	r4,fp,-216
    5214:	e1bfbd04 	addi	r6,fp,-268
    5218:	e1ffbc04 	addi	r7,fp,-272
    521c:	00800084 	movi	r2,2
    5220:	e0bfdd15 	stw	r2,-140(fp)
    5224:	e17ffb17 	ldw	r5,-20(fp)
    5228:	0006b100 	call	6b10 <_ZNSt6vectorIiSaIiEEC1EmRKiRKS0_>
    522c:	00000706 	br	524c <groupRectangles+0x184>
    5230:	e0fffe17 	ldw	r3,-8(fp)
    5234:	e0ffed15 	stw	r3,-76(fp)

  std::vector<int> labels;

  int nclasses = partition(rectList, labels, eps);

  std::vector<MyRect> rrects(nclasses);
    5238:	e13fbe04 	addi	r4,fp,-264
    523c:	00029b00 	call	29b0 <_ZNSaI6MyRectED1Ev>
    5240:	e0bfed17 	ldw	r2,-76(fp)
    5244:	e0bffe15 	stw	r2,-8(fp)
    5248:	00015406 	br	579c <groupRectangles+0x6d4>
  std::vector<int> rweights(nclasses);
    524c:	e13fbc04 	addi	r4,fp,-272
    5250:	00058a00 	call	58a0 <_ZNSaIiED1Ev>

  int i, j, nlabels = (int)labels.size();
    5254:	e13fc404 	addi	r4,fp,-240
    5258:	0005c780 	call	5c78 <_ZNKSt6vectorIiSaIiEE4sizeEv>
    525c:	e0bfb815 	stw	r2,-288(fp)


  for( i = 0; i < nlabels; i++ )
    5260:	e03fba15 	stw	zero,-280(fp)
    5264:	00005206 	br	53b0 <groupRectangles+0x2e8>
    5268:	e0fffe17 	ldw	r3,-8(fp)
    526c:	e0ffec15 	stw	r3,-80(fp)
  std::vector<int> labels;

  int nclasses = partition(rectList, labels, eps);

  std::vector<MyRect> rrects(nclasses);
  std::vector<int> rweights(nclasses);
    5270:	e13fbc04 	addi	r4,fp,-272
    5274:	00058a00 	call	58a0 <_ZNSaIiED1Ev>
    5278:	e0bfec17 	ldw	r2,-80(fp)
    527c:	e0bffe15 	stw	r2,-8(fp)
    5280:	00014006 	br	5784 <groupRectangles+0x6bc>
  int i, j, nlabels = (int)labels.size();


  for( i = 0; i < nlabels; i++ )
    {
      int cls = labels[i];
    5284:	e17fba17 	ldw	r5,-280(fp)
    5288:	e13fc404 	addi	r4,fp,-240
    528c:	0005d8c0 	call	5d8c <_ZNSt6vectorIiSaIiEEixEm>
    5290:	10800017 	ldw	r2,0(r2)
    5294:	e0bfb715 	stw	r2,-292(fp)
      rrects[cls].x += rectList[i].x;
    5298:	e17fb717 	ldw	r5,-292(fp)
    529c:	e13fc704 	addi	r4,fp,-228
    52a0:	0003e780 	call	3e78 <_ZNSt6vectorI6MyRectSaIS0_EEixEm>
    52a4:	e0bffa15 	stw	r2,-24(fp)
    52a8:	e0fffa17 	ldw	r3,-24(fp)
    52ac:	18c00017 	ldw	r3,0(r3)
    52b0:	e0fff915 	stw	r3,-28(fp)
    52b4:	e17fba17 	ldw	r5,-280(fp)
    52b8:	e13fd917 	ldw	r4,-156(fp)
    52bc:	0003e780 	call	3e78 <_ZNSt6vectorI6MyRectSaIS0_EEixEm>
    52c0:	10800017 	ldw	r2,0(r2)
    52c4:	e0fff917 	ldw	r3,-28(fp)
    52c8:	1885883a 	add	r2,r3,r2
    52cc:	e0fffa17 	ldw	r3,-24(fp)
    52d0:	18800015 	stw	r2,0(r3)
      rrects[cls].y += rectList[i].y;
    52d4:	e17fb717 	ldw	r5,-292(fp)
    52d8:	e13fc704 	addi	r4,fp,-228
    52dc:	0003e780 	call	3e78 <_ZNSt6vectorI6MyRectSaIS0_EEixEm>
    52e0:	e0bff815 	stw	r2,-32(fp)
    52e4:	e0bff817 	ldw	r2,-32(fp)
    52e8:	10800117 	ldw	r2,4(r2)
    52ec:	e0bff715 	stw	r2,-36(fp)
    52f0:	e17fba17 	ldw	r5,-280(fp)
    52f4:	e13fd917 	ldw	r4,-156(fp)
    52f8:	0003e780 	call	3e78 <_ZNSt6vectorI6MyRectSaIS0_EEixEm>
    52fc:	10800117 	ldw	r2,4(r2)
    5300:	e0fff717 	ldw	r3,-36(fp)
    5304:	1885883a 	add	r2,r3,r2
    5308:	e0fff817 	ldw	r3,-32(fp)
    530c:	18800115 	stw	r2,4(r3)
      rrects[cls].width += rectList[i].width;
    5310:	e17fb717 	ldw	r5,-292(fp)
    5314:	e13fc704 	addi	r4,fp,-228
    5318:	0003e780 	call	3e78 <_ZNSt6vectorI6MyRectSaIS0_EEixEm>
    531c:	e0bff615 	stw	r2,-40(fp)
    5320:	e0bff617 	ldw	r2,-40(fp)
    5324:	10800217 	ldw	r2,8(r2)
    5328:	e0bff515 	stw	r2,-44(fp)
    532c:	e17fba17 	ldw	r5,-280(fp)
    5330:	e13fd917 	ldw	r4,-156(fp)
    5334:	0003e780 	call	3e78 <_ZNSt6vectorI6MyRectSaIS0_EEixEm>
    5338:	10800217 	ldw	r2,8(r2)
    533c:	e0fff517 	ldw	r3,-44(fp)
    5340:	1885883a 	add	r2,r3,r2
    5344:	e0fff617 	ldw	r3,-40(fp)
    5348:	18800215 	stw	r2,8(r3)
      rrects[cls].height += rectList[i].height;
    534c:	e17fb717 	ldw	r5,-292(fp)
    5350:	e13fc704 	addi	r4,fp,-228
    5354:	0003e780 	call	3e78 <_ZNSt6vectorI6MyRectSaIS0_EEixEm>
    5358:	e0bff415 	stw	r2,-48(fp)
    535c:	e0bff417 	ldw	r2,-48(fp)
    5360:	10800317 	ldw	r2,12(r2)
    5364:	e0bff315 	stw	r2,-52(fp)
    5368:	e17fba17 	ldw	r5,-280(fp)
    536c:	e13fd917 	ldw	r4,-156(fp)
    5370:	0003e780 	call	3e78 <_ZNSt6vectorI6MyRectSaIS0_EEixEm>
    5374:	10800317 	ldw	r2,12(r2)
    5378:	e0fff317 	ldw	r3,-52(fp)
    537c:	1885883a 	add	r2,r3,r2
    5380:	e0fff417 	ldw	r3,-48(fp)
    5384:	18800315 	stw	r2,12(r3)
      rweights[cls]++;
    5388:	e17fb717 	ldw	r5,-292(fp)
    538c:	e13fca04 	addi	r4,fp,-216
    5390:	0005d8c0 	call	5d8c <_ZNSt6vectorIiSaIiEEixEm>
    5394:	1007883a 	mov	r3,r2
    5398:	18800017 	ldw	r2,0(r3)
    539c:	10800044 	addi	r2,r2,1
    53a0:	18800015 	stw	r2,0(r3)
  std::vector<int> rweights(nclasses);

  int i, j, nlabels = (int)labels.size();


  for( i = 0; i < nlabels; i++ )
    53a4:	e0bfba17 	ldw	r2,-280(fp)
    53a8:	10800044 	addi	r2,r2,1
    53ac:	e0bfba15 	stw	r2,-280(fp)
    53b0:	e0ffba17 	ldw	r3,-280(fp)
    53b4:	e0bfb817 	ldw	r2,-288(fp)
    53b8:	18bfb216 	blt	r3,r2,5284 <groupRectangles+0x1bc>
      rrects[cls].y += rectList[i].y;
      rrects[cls].width += rectList[i].width;
      rrects[cls].height += rectList[i].height;
      rweights[cls]++;
    }
  for( i = 0; i < nclasses; i++ )
    53bc:	e03fba15 	stw	zero,-280(fp)
    53c0:	00004c06 	br	54f4 <groupRectangles+0x42c>
    {
      MyRect r = rrects[i];
    53c4:	e17fba17 	ldw	r5,-280(fp)
    53c8:	e13fc704 	addi	r4,fp,-228
    53cc:	0003e780 	call	3e78 <_ZNSt6vectorI6MyRectSaIS0_EEixEm>
    53d0:	1007883a 	mov	r3,r2
    53d4:	18800017 	ldw	r2,0(r3)
    53d8:	e0bfcd15 	stw	r2,-204(fp)
    53dc:	18800117 	ldw	r2,4(r3)
    53e0:	e0bfce15 	stw	r2,-200(fp)
    53e4:	18800217 	ldw	r2,8(r3)
    53e8:	e0bfcf15 	stw	r2,-196(fp)
    53ec:	18800317 	ldw	r2,12(r3)
    53f0:	e0bfd015 	stw	r2,-192(fp)
      float s = 1.f/rweights[i];
    53f4:	e17fba17 	ldw	r5,-280(fp)
    53f8:	e13fca04 	addi	r4,fp,-216
    53fc:	0005d8c0 	call	5d8c <_ZNSt6vectorIiSaIiEEixEm>
    5400:	11000017 	ldw	r4,0(r2)
    5404:	000fa2c0 	call	fa2c <__floatsisf>
    5408:	010fe034 	movhi	r4,16256
    540c:	100b883a 	mov	r5,r2
    5410:	000f7c80 	call	f7c8 <__divsf3>
    5414:	e0bfb615 	stw	r2,-296(fp)
      rrects[i].x = myRound(r.x*s);
    5418:	e17fba17 	ldw	r5,-280(fp)
    541c:	e13fc704 	addi	r4,fp,-228
    5420:	0003e780 	call	3e78 <_ZNSt6vectorI6MyRectSaIS0_EEixEm>
    5424:	e0bff215 	stw	r2,-56(fp)
    5428:	e13fcd17 	ldw	r4,-204(fp)
    542c:	000fa2c0 	call	fa2c <__floatsisf>
    5430:	1009883a 	mov	r4,r2
    5434:	e17fb617 	ldw	r5,-296(fp)
    5438:	000f5e80 	call	f5e8 <__mulsf3>
    543c:	1009883a 	mov	r4,r2
    5440:	00024b80 	call	24b8 <_Z7myRoundf>
    5444:	e0fff217 	ldw	r3,-56(fp)
    5448:	18800015 	stw	r2,0(r3)
      rrects[i].y = myRound(r.y*s);
    544c:	e17fba17 	ldw	r5,-280(fp)
    5450:	e13fc704 	addi	r4,fp,-228
    5454:	0003e780 	call	3e78 <_ZNSt6vectorI6MyRectSaIS0_EEixEm>
    5458:	e0bff115 	stw	r2,-60(fp)
    545c:	e13fce17 	ldw	r4,-200(fp)
    5460:	000fa2c0 	call	fa2c <__floatsisf>
    5464:	1009883a 	mov	r4,r2
    5468:	e17fb617 	ldw	r5,-296(fp)
    546c:	000f5e80 	call	f5e8 <__mulsf3>
    5470:	1009883a 	mov	r4,r2
    5474:	00024b80 	call	24b8 <_Z7myRoundf>
    5478:	e0fff117 	ldw	r3,-60(fp)
    547c:	18800115 	stw	r2,4(r3)
      rrects[i].width = myRound(r.width*s);
    5480:	e17fba17 	ldw	r5,-280(fp)
    5484:	e13fc704 	addi	r4,fp,-228
    5488:	0003e780 	call	3e78 <_ZNSt6vectorI6MyRectSaIS0_EEixEm>
    548c:	e0bff015 	stw	r2,-64(fp)
    5490:	e13fcf17 	ldw	r4,-196(fp)
    5494:	000fa2c0 	call	fa2c <__floatsisf>
    5498:	1009883a 	mov	r4,r2
    549c:	e17fb617 	ldw	r5,-296(fp)
    54a0:	000f5e80 	call	f5e8 <__mulsf3>
    54a4:	1009883a 	mov	r4,r2
    54a8:	00024b80 	call	24b8 <_Z7myRoundf>
    54ac:	e0fff017 	ldw	r3,-64(fp)
    54b0:	18800215 	stw	r2,8(r3)
      rrects[i].height = myRound(r.height*s);
    54b4:	e17fba17 	ldw	r5,-280(fp)
    54b8:	e13fc704 	addi	r4,fp,-228
    54bc:	0003e780 	call	3e78 <_ZNSt6vectorI6MyRectSaIS0_EEixEm>
    54c0:	e0bfef15 	stw	r2,-68(fp)
    54c4:	e13fd017 	ldw	r4,-192(fp)
    54c8:	000fa2c0 	call	fa2c <__floatsisf>
    54cc:	1009883a 	mov	r4,r2
    54d0:	e17fb617 	ldw	r5,-296(fp)
    54d4:	000f5e80 	call	f5e8 <__mulsf3>
    54d8:	1009883a 	mov	r4,r2
    54dc:	00024b80 	call	24b8 <_Z7myRoundf>
    54e0:	e0ffef17 	ldw	r3,-68(fp)
    54e4:	18800315 	stw	r2,12(r3)
      rrects[cls].y += rectList[i].y;
      rrects[cls].width += rectList[i].width;
      rrects[cls].height += rectList[i].height;
      rweights[cls]++;
    }
  for( i = 0; i < nclasses; i++ )
    54e8:	e0bfba17 	ldw	r2,-280(fp)
    54ec:	10800044 	addi	r2,r2,1
    54f0:	e0bfba15 	stw	r2,-280(fp)
    54f4:	e0ffba17 	ldw	r3,-280(fp)
    54f8:	e0bfbb17 	ldw	r2,-276(fp)
    54fc:	18bfb116 	blt	r3,r2,53c4 <groupRectangles+0x2fc>
      rrects[i].width = myRound(r.width*s);
      rrects[i].height = myRound(r.height*s);

    }

  rectList.clear();
    5500:	e13fd917 	ldw	r4,-156(fp)
    5504:	00061540 	call	6154 <_ZNSt6vectorI6MyRectSaIS0_EE5clearEv>

  for( i = 0; i < nclasses; i++ )
    5508:	e03fba15 	stw	zero,-280(fp)
    550c:	00007f06 	br	570c <groupRectangles+0x644>
    {
      MyRect r1 = rrects[i];
    5510:	e17fba17 	ldw	r5,-280(fp)
    5514:	e13fc704 	addi	r4,fp,-228
    5518:	0003e780 	call	3e78 <_ZNSt6vectorI6MyRectSaIS0_EEixEm>
    551c:	1007883a 	mov	r3,r2
    5520:	18800017 	ldw	r2,0(r3)
    5524:	e0bfd115 	stw	r2,-188(fp)
    5528:	18800117 	ldw	r2,4(r3)
    552c:	e0bfd215 	stw	r2,-184(fp)
    5530:	18800217 	ldw	r2,8(r3)
    5534:	e0bfd315 	stw	r2,-180(fp)
    5538:	18800317 	ldw	r2,12(r3)
    553c:	e0bfd415 	stw	r2,-176(fp)
      int n1 = rweights[i];
    5540:	e17fba17 	ldw	r5,-280(fp)
    5544:	e13fca04 	addi	r4,fp,-216
    5548:	0005d8c0 	call	5d8c <_ZNSt6vectorIiSaIiEEixEm>
    554c:	10800017 	ldw	r2,0(r2)
    5550:	e0bfb515 	stw	r2,-300(fp)
      if( n1 <= groupThreshold )
    5554:	e0ffb517 	ldw	r3,-300(fp)
    5558:	e0bfda17 	ldw	r2,-152(fp)
    555c:	10c0680e 	bge	r2,r3,5700 <groupRectangles+0x638>
	continue;
      /* filter out small face rectangles inside large rectangles */
      for( j = 0; j < nclasses; j++ )
    5560:	e03fb915 	stw	zero,-284(fp)
    5564:	00005b06 	br	56d4 <groupRectangles+0x60c>
        {
	  int n2 = rweights[j];
    5568:	e17fb917 	ldw	r5,-284(fp)
    556c:	e13fca04 	addi	r4,fp,-216
    5570:	0005d8c0 	call	5d8c <_ZNSt6vectorIiSaIiEEixEm>
    5574:	10800017 	ldw	r2,0(r2)
    5578:	e0bfb415 	stw	r2,-304(fp)
	  /*********************************
	   * if it is the same rectangle, 
	   * or the number of rectangles in class j is < group threshold, 
	   * do nothing 
	   ********************************/
	  if( j == i || n2 <= groupThreshold )
    557c:	e0ffb917 	ldw	r3,-284(fp)
    5580:	e0bfba17 	ldw	r2,-280(fp)
    5584:	18805026 	beq	r3,r2,56c8 <groupRectangles+0x600>
    5588:	e0ffb417 	ldw	r3,-304(fp)
    558c:	e0bfda17 	ldw	r2,-152(fp)
    5590:	10c00116 	blt	r2,r3,5598 <groupRectangles+0x4d0>
	    continue;
    5594:	00004c06 	br	56c8 <groupRectangles+0x600>
	  MyRect r2 = rrects[j];
    5598:	e17fb917 	ldw	r5,-284(fp)
    559c:	e13fc704 	addi	r4,fp,-228
    55a0:	0003e780 	call	3e78 <_ZNSt6vectorI6MyRectSaIS0_EEixEm>
    55a4:	1007883a 	mov	r3,r2
    55a8:	18800017 	ldw	r2,0(r3)
    55ac:	e0bfd515 	stw	r2,-172(fp)
    55b0:	18800117 	ldw	r2,4(r3)
    55b4:	e0bfd615 	stw	r2,-168(fp)
    55b8:	18800217 	ldw	r2,8(r3)
    55bc:	e0bfd715 	stw	r2,-164(fp)
    55c0:	18800317 	ldw	r2,12(r3)
    55c4:	e0bfd815 	stw	r2,-160(fp)

	  int dx = myRound( r2.width * eps );
    55c8:	e13fd717 	ldw	r4,-164(fp)
    55cc:	000fa2c0 	call	fa2c <__floatsisf>
    55d0:	1009883a 	mov	r4,r2
    55d4:	e17fdb17 	ldw	r5,-148(fp)
    55d8:	000f5e80 	call	f5e8 <__mulsf3>
    55dc:	1009883a 	mov	r4,r2
    55e0:	00024b80 	call	24b8 <_Z7myRoundf>
    55e4:	e0bfb315 	stw	r2,-308(fp)
	  int dy = myRound( r2.height * eps );
    55e8:	e13fd817 	ldw	r4,-160(fp)
    55ec:	000fa2c0 	call	fa2c <__floatsisf>
    55f0:	1009883a 	mov	r4,r2
    55f4:	e17fdb17 	ldw	r5,-148(fp)
    55f8:	000f5e80 	call	f5e8 <__mulsf3>
    55fc:	1009883a 	mov	r4,r2
    5600:	00024b80 	call	24b8 <_Z7myRoundf>
    5604:	e0bfb215 	stw	r2,-312(fp)

	  if( i != j &&
    5608:	e0ffba17 	ldw	r3,-280(fp)
    560c:	e0bfb917 	ldw	r2,-284(fp)
    5610:	18802826 	beq	r3,r2,56b4 <groupRectangles+0x5ec>
    5614:	e13fd117 	ldw	r4,-188(fp)
    5618:	e0ffd517 	ldw	r3,-172(fp)
    561c:	e0bfb317 	ldw	r2,-308(fp)
    5620:	1885c83a 	sub	r2,r3,r2
    5624:	20802316 	blt	r4,r2,56b4 <groupRectangles+0x5ec>
    5628:	e13fd217 	ldw	r4,-184(fp)
    562c:	e0ffd617 	ldw	r3,-168(fp)
    5630:	e0bfb217 	ldw	r2,-312(fp)
    5634:	1885c83a 	sub	r2,r3,r2
    5638:	20801e16 	blt	r4,r2,56b4 <groupRectangles+0x5ec>
    563c:	e0ffd117 	ldw	r3,-188(fp)
    5640:	e0bfd317 	ldw	r2,-180(fp)
    5644:	1889883a 	add	r4,r3,r2
    5648:	e0ffd517 	ldw	r3,-172(fp)
    564c:	e0bfd717 	ldw	r2,-164(fp)
    5650:	1887883a 	add	r3,r3,r2
    5654:	e0bfb317 	ldw	r2,-308(fp)
    5658:	1885883a 	add	r2,r3,r2
    565c:	11001516 	blt	r2,r4,56b4 <groupRectangles+0x5ec>
    5660:	e0ffd217 	ldw	r3,-184(fp)
    5664:	e0bfd417 	ldw	r2,-176(fp)
    5668:	1889883a 	add	r4,r3,r2
    566c:	e0ffd617 	ldw	r3,-168(fp)
    5670:	e0bfd817 	ldw	r2,-160(fp)
    5674:	1887883a 	add	r3,r3,r2
    5678:	e0bfb217 	ldw	r2,-312(fp)
    567c:	1885883a 	add	r2,r3,r2
    5680:	11000c16 	blt	r2,r4,56b4 <groupRectangles+0x5ec>
    5684:	010000c4 	movi	r4,3
    5688:	e17fb517 	ldw	r5,-300(fp)
    568c:	00046580 	call	4658 <_Z5myMaxii>
    5690:	1007883a 	mov	r3,r2
    5694:	e0bfb417 	ldw	r2,-304(fp)
    5698:	18800316 	blt	r3,r2,56a8 <groupRectangles+0x5e0>
    569c:	e0bfb517 	ldw	r2,-300(fp)
    56a0:	108000c8 	cmpgei	r2,r2,3
    56a4:	1000031e 	bne	r2,zero,56b4 <groupRectangles+0x5ec>
    56a8:	00800044 	movi	r2,1
    56ac:	e0bfee05 	stb	r2,-72(fp)
    56b0:	00000106 	br	56b8 <groupRectangles+0x5f0>
    56b4:	e03fee05 	stb	zero,-72(fp)
    56b8:	e0bfee03 	ldbu	r2,-72(fp)
    56bc:	10803fcc 	andi	r2,r2,255
    56c0:	1004c03a 	cmpne	r2,r2,zero
    56c4:	1000061e 	bne	r2,zero,56e0 <groupRectangles+0x618>
      MyRect r1 = rrects[i];
      int n1 = rweights[i];
      if( n1 <= groupThreshold )
	continue;
      /* filter out small face rectangles inside large rectangles */
      for( j = 0; j < nclasses; j++ )
    56c8:	e0bfb917 	ldw	r2,-284(fp)
    56cc:	10800044 	addi	r2,r2,1
    56d0:	e0bfb915 	stw	r2,-284(fp)
    56d4:	e0ffb917 	ldw	r3,-284(fp)
    56d8:	e0bfbb17 	ldw	r2,-276(fp)
    56dc:	18bfa216 	blt	r3,r2,5568 <groupRectangles+0x4a0>
	      r1.y + r1.height <= r2.y + r2.height + dy &&
	      (n2 > myMax(3, n1) || n1 < 3) )
	    break;
        }

      if( j == nclasses )
    56e0:	e0ffb917 	ldw	r3,-284(fp)
    56e4:	e0bfbb17 	ldw	r2,-276(fp)
    56e8:	1880051e 	bne	r3,r2,5700 <groupRectangles+0x638>
        {
	  rectList.push_back(r1); // insert back r1
    56ec:	e17fd104 	addi	r5,fp,-188
    56f0:	00800044 	movi	r2,1
    56f4:	e0bfdd15 	stw	r2,-140(fp)
    56f8:	e13fd917 	ldw	r4,-156(fp)
    56fc:	00039240 	call	3924 <_ZNSt6vectorI6MyRectSaIS0_EE9push_backERKS0_>

    }

  rectList.clear();

  for( i = 0; i < nclasses; i++ )
    5700:	e0bfba17 	ldw	r2,-280(fp)
    5704:	10800044 	addi	r2,r2,1
    5708:	e0bfba15 	stw	r2,-280(fp)
    570c:	e0ffba17 	ldw	r3,-280(fp)
    5710:	e0bfbb17 	ldw	r2,-276(fp)
    5714:	18bf7e16 	blt	r3,r2,5510 <groupRectangles+0x448>

      if( j == nclasses )
        {
	  rectList.push_back(r1); // insert back r1
        }
    }
    5718:	e13fca04 	addi	r4,fp,-216
    571c:	0006bb40 	call	6bb4 <_ZNSt6vectorIiSaIiEED1Ev>
    5720:	e13fc704 	addi	r4,fp,-228
    5724:	0003a0c0 	call	3a0c <_ZNSt6vectorI6MyRectSaIS0_EED1Ev>
    5728:	e13fc404 	addi	r4,fp,-240
    572c:	0006bb40 	call	6bb4 <_ZNSt6vectorIiSaIiEED1Ev>
    5730:	00002406 	br	57c4 <groupRectangles+0x6fc>
    5734:	e7004e04 	addi	fp,fp,312
    5738:	e0ffdd17 	ldw	r3,-140(fp)
    573c:	e0ffff15 	stw	r3,-4(fp)
    5740:	e0bfde17 	ldw	r2,-136(fp)
    5744:	e0bffe15 	stw	r2,-8(fp)
    5748:	e0ffff17 	ldw	r3,-4(fp)
    574c:	18800060 	cmpeqi	r2,r3,1
    5750:	103ec51e 	bne	r2,zero,5268 <groupRectangles+0x1a0>
    5754:	e0ffff17 	ldw	r3,-4(fp)
    5758:	188000a0 	cmpeqi	r2,r3,2
    575c:	103eb41e 	bne	r2,zero,5230 <groupRectangles+0x168>
    5760:	e0ffff17 	ldw	r3,-4(fp)
    5764:	188000e0 	cmpeqi	r2,r3,3
    5768:	10000c1e 	bne	r2,zero,579c <groupRectangles+0x6d4>
    576c:	e0bffe17 	ldw	r2,-8(fp)
    5770:	e0bfeb15 	stw	r2,-84(fp)
    5774:	e13fca04 	addi	r4,fp,-216
    5778:	0006bb40 	call	6bb4 <_ZNSt6vectorIiSaIiEED1Ev>
    577c:	e0ffeb17 	ldw	r3,-84(fp)
    5780:	e0fffe15 	stw	r3,-8(fp)
    5784:	e0bffe17 	ldw	r2,-8(fp)
    5788:	e0bfea15 	stw	r2,-88(fp)
    578c:	e13fc704 	addi	r4,fp,-228
    5790:	0003a0c0 	call	3a0c <_ZNSt6vectorI6MyRectSaIS0_EED1Ev>
    5794:	e0ffea17 	ldw	r3,-88(fp)
    5798:	e0fffe15 	stw	r3,-8(fp)
    579c:	e0bffe17 	ldw	r2,-8(fp)
    57a0:	e0bfe915 	stw	r2,-92(fp)
    57a4:	e13fc404 	addi	r4,fp,-240
    57a8:	0006bb40 	call	6bb4 <_ZNSt6vectorIiSaIiEED1Ev>
    57ac:	e0ffe917 	ldw	r3,-92(fp)
    57b0:	e0fffe15 	stw	r3,-8(fp)
    57b4:	00bfffc4 	movi	r2,-1
    57b8:	e0bfdd15 	stw	r2,-140(fp)
    57bc:	e13ffe17 	ldw	r4,-8(fp)
    57c0:	0010b1c0 	call	10b1c <_Unwind_SjLj_Resume>
    57c4:	e13fdc04 	addi	r4,fp,-144
    57c8:	00108600 	call	10860 <_Unwind_SjLj_Unregister>

}
    57cc:	e037883a 	mov	sp,fp
    57d0:	dfc00917 	ldw	ra,36(sp)
    57d4:	df000817 	ldw	fp,32(sp)
    57d8:	ddc00717 	ldw	r23,28(sp)
    57dc:	dd800617 	ldw	r22,24(sp)
    57e0:	dd400517 	ldw	r21,20(sp)
    57e4:	dd000417 	ldw	r20,16(sp)
    57e8:	dcc00317 	ldw	r19,12(sp)
    57ec:	dc800217 	ldw	r18,8(sp)
    57f0:	dc400117 	ldw	r17,4(sp)
    57f4:	dc000017 	ldw	r16,0(sp)
    57f8:	dec00a04 	addi	sp,sp,40
    57fc:	f800283a 	ret

00005800 <_ZN9__gnu_cxx13new_allocatorIiEC2Ev>:

      template<typename _Tp1>
        struct rebind
        { typedef new_allocator<_Tp1> other; };

      new_allocator() throw() { }
    5800:	defffe04 	addi	sp,sp,-8
    5804:	df000115 	stw	fp,4(sp)
    5808:	df000104 	addi	fp,sp,4
    580c:	e13fff15 	stw	r4,-4(fp)
    5810:	e037883a 	mov	sp,fp
    5814:	df000017 	ldw	fp,0(sp)
    5818:	dec00104 	addi	sp,sp,4
    581c:	f800283a 	ret

00005820 <_ZNSaIiEC1Ev>:

      template<typename _Tp1>
        struct rebind
        { typedef allocator<_Tp1> other; };

      allocator() throw() { }
    5820:	defffd04 	addi	sp,sp,-12
    5824:	dfc00215 	stw	ra,8(sp)
    5828:	df000115 	stw	fp,4(sp)
    582c:	df000104 	addi	fp,sp,4
    5830:	e13fff15 	stw	r4,-4(fp)
    5834:	e13fff17 	ldw	r4,-4(fp)
    5838:	00058000 	call	5800 <_ZN9__gnu_cxx13new_allocatorIiEC2Ev>
    583c:	e037883a 	mov	sp,fp
    5840:	dfc00117 	ldw	ra,4(sp)
    5844:	df000017 	ldw	fp,0(sp)
    5848:	dec00204 	addi	sp,sp,8
    584c:	f800283a 	ret

00005850 <_ZN9__gnu_cxx13new_allocatorIiED2Ev>:
      new_allocator(const new_allocator&) throw() { }

      template<typename _Tp1>
        new_allocator(const new_allocator<_Tp1>&) throw() { }

      ~new_allocator() throw() { }
    5850:	defffe04 	addi	sp,sp,-8
    5854:	df000115 	stw	fp,4(sp)
    5858:	df000104 	addi	fp,sp,4
    585c:	e13fff15 	stw	r4,-4(fp)
    5860:	e037883a 	mov	sp,fp
    5864:	df000017 	ldw	fp,0(sp)
    5868:	dec00104 	addi	sp,sp,4
    586c:	f800283a 	ret

00005870 <_ZNSaIiED2Ev>:
      : __glibcxx_base_allocator<_Tp>(__a) { }

      template<typename _Tp1>
        allocator(const allocator<_Tp1>&) throw() { }

      ~allocator() throw() { }
    5870:	defffd04 	addi	sp,sp,-12
    5874:	dfc00215 	stw	ra,8(sp)
    5878:	df000115 	stw	fp,4(sp)
    587c:	df000104 	addi	fp,sp,4
    5880:	e13fff15 	stw	r4,-4(fp)
    5884:	e13fff17 	ldw	r4,-4(fp)
    5888:	00058500 	call	5850 <_ZN9__gnu_cxx13new_allocatorIiED2Ev>
    588c:	e037883a 	mov	sp,fp
    5890:	dfc00117 	ldw	ra,4(sp)
    5894:	df000017 	ldw	fp,0(sp)
    5898:	dec00204 	addi	sp,sp,8
    589c:	f800283a 	ret

000058a0 <_ZNSaIiED1Ev>:
    58a0:	defffd04 	addi	sp,sp,-12
    58a4:	dfc00215 	stw	ra,8(sp)
    58a8:	df000115 	stw	fp,4(sp)
    58ac:	df000104 	addi	fp,sp,4
    58b0:	e13fff15 	stw	r4,-4(fp)
    58b4:	e13fff17 	ldw	r4,-4(fp)
    58b8:	00058500 	call	5850 <_ZN9__gnu_cxx13new_allocatorIiED2Ev>
    58bc:	e037883a 	mov	sp,fp
    58c0:	dfc00117 	ldw	ra,4(sp)
    58c4:	df000017 	ldw	fp,0(sp)
    58c8:	dec00204 	addi	sp,sp,8
    58cc:	f800283a 	ret

000058d0 <_ZN9__gnu_cxx13new_allocatorIiEC2ERKS1_>:
        struct rebind
        { typedef new_allocator<_Tp1> other; };

      new_allocator() throw() { }

      new_allocator(const new_allocator&) throw() { }
    58d0:	defffd04 	addi	sp,sp,-12
    58d4:	df000215 	stw	fp,8(sp)
    58d8:	df000204 	addi	fp,sp,8
    58dc:	e13ffe15 	stw	r4,-8(fp)
    58e0:	e17fff15 	stw	r5,-4(fp)
    58e4:	e037883a 	mov	sp,fp
    58e8:	df000017 	ldw	fp,0(sp)
    58ec:	dec00104 	addi	sp,sp,4
    58f0:	f800283a 	ret

000058f4 <_ZNSaIiEC2ERKS_>:
        struct rebind
        { typedef allocator<_Tp1> other; };

      allocator() throw() { }

      allocator(const allocator& __a) throw()
    58f4:	defffc04 	addi	sp,sp,-16
    58f8:	dfc00315 	stw	ra,12(sp)
    58fc:	df000215 	stw	fp,8(sp)
    5900:	df000204 	addi	fp,sp,8
    5904:	e13ffe15 	stw	r4,-8(fp)
    5908:	e17fff15 	stw	r5,-4(fp)
      : __glibcxx_base_allocator<_Tp>(__a) { }
    590c:	e13ffe17 	ldw	r4,-8(fp)
    5910:	e17fff17 	ldw	r5,-4(fp)
    5914:	00058d00 	call	58d0 <_ZN9__gnu_cxx13new_allocatorIiEC2ERKS1_>
    5918:	e037883a 	mov	sp,fp
    591c:	dfc00117 	ldw	ra,4(sp)
    5920:	df000017 	ldw	fp,0(sp)
    5924:	dec00204 	addi	sp,sp,8
    5928:	f800283a 	ret

0000592c <_ZNSaIiEC1ERKS_>:
        struct rebind
        { typedef allocator<_Tp1> other; };

      allocator() throw() { }

      allocator(const allocator& __a) throw()
    592c:	defffc04 	addi	sp,sp,-16
    5930:	dfc00315 	stw	ra,12(sp)
    5934:	df000215 	stw	fp,8(sp)
    5938:	df000204 	addi	fp,sp,8
    593c:	e13ffe15 	stw	r4,-8(fp)
    5940:	e17fff15 	stw	r5,-4(fp)
      : __glibcxx_base_allocator<_Tp>(__a) { }
    5944:	e13ffe17 	ldw	r4,-8(fp)
    5948:	e17fff17 	ldw	r5,-4(fp)
    594c:	00058d00 	call	58d0 <_ZN9__gnu_cxx13new_allocatorIiEC2ERKS1_>
    5950:	e037883a 	mov	sp,fp
    5954:	dfc00117 	ldw	ra,4(sp)
    5958:	df000017 	ldw	fp,0(sp)
    595c:	dec00204 	addi	sp,sp,8
    5960:	f800283a 	ret

00005964 <_ZNSt12_Vector_baseIiSaIiEE12_Vector_implD1Ev>:
    {
      typedef typename _Alloc::template rebind<_Tp>::other _Tp_alloc_type;

      struct _Vector_impl 
      : public _Tp_alloc_type
      {
    5964:	defffd04 	addi	sp,sp,-12
    5968:	dfc00215 	stw	ra,8(sp)
    596c:	df000115 	stw	fp,4(sp)
    5970:	df000104 	addi	fp,sp,4
    5974:	e13fff15 	stw	r4,-4(fp)
    5978:	e13fff17 	ldw	r4,-4(fp)
    597c:	00058700 	call	5870 <_ZNSaIiED2Ev>
    5980:	e037883a 	mov	sp,fp
    5984:	dfc00117 	ldw	ra,4(sp)
    5988:	df000017 	ldw	fp,0(sp)
    598c:	dec00204 	addi	sp,sp,8
    5990:	f800283a 	ret

00005994 <_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv>:
      
    public:
      typedef _Alloc allocator_type;

      _Tp_alloc_type&
      _M_get_Tp_allocator()
    5994:	defffe04 	addi	sp,sp,-8
    5998:	df000115 	stw	fp,4(sp)
    599c:	df000104 	addi	fp,sp,4
    59a0:	e13fff15 	stw	r4,-4(fp)
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
    59a4:	e0bfff17 	ldw	r2,-4(fp)
    59a8:	e037883a 	mov	sp,fp
    59ac:	df000017 	ldw	fp,0(sp)
    59b0:	dec00104 	addi	sp,sp,4
    59b4:	f800283a 	ret

000059b8 <_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEdeEv>:
			  >::__type>& __i)
        : _M_current(__i.base()) { }

      // Forward iterator requirements
      reference
      operator*() const
    59b8:	defffe04 	addi	sp,sp,-8
    59bc:	df000115 	stw	fp,4(sp)
    59c0:	df000104 	addi	fp,sp,4
    59c4:	e13fff15 	stw	r4,-4(fp)
      { return *_M_current; }
    59c8:	e0bfff17 	ldw	r2,-4(fp)
    59cc:	10800017 	ldw	r2,0(r2)
    59d0:	e037883a 	mov	sp,fp
    59d4:	df000017 	ldw	fp,0(sp)
    59d8:	dec00104 	addi	sp,sp,4
    59dc:	f800283a 	ret

000059e0 <_ZN9__gnu_cxxeqIPK6MyRectSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    { return __lhs.base() == __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    59e0:	defffb04 	addi	sp,sp,-20
    59e4:	dfc00415 	stw	ra,16(sp)
    59e8:	df000315 	stw	fp,12(sp)
    59ec:	dc000215 	stw	r16,8(sp)
    59f0:	df000204 	addi	fp,sp,8
    59f4:	e13ffe15 	stw	r4,-8(fp)
    59f8:	e17fff15 	stw	r5,-4(fp)
    { return __lhs.base() == __rhs.base(); }
    59fc:	e13ffe17 	ldw	r4,-8(fp)
    5a00:	0002e480 	call	2e48 <_ZNK9__gnu_cxx17__normal_iteratorIPK6MyRectSt6vectorIS1_SaIS1_EEE4baseEv>
    5a04:	14000017 	ldw	r16,0(r2)
    5a08:	e13fff17 	ldw	r4,-4(fp)
    5a0c:	0002e480 	call	2e48 <_ZNK9__gnu_cxx17__normal_iteratorIPK6MyRectSt6vectorIS1_SaIS1_EEE4baseEv>
    5a10:	10800017 	ldw	r2,0(r2)
    5a14:	8085003a 	cmpeq	r2,r16,r2
    5a18:	e037883a 	mov	sp,fp
    5a1c:	dfc00217 	ldw	ra,8(sp)
    5a20:	df000117 	ldw	fp,4(sp)
    5a24:	dc000017 	ldw	r16,0(sp)
    5a28:	dec00304 	addi	sp,sp,12
    5a2c:	f800283a 	ret

00005a30 <_ZNKSt6vectorI6MyRectSaIS0_EE5emptyEv>:
      /**
       *  Returns true if the %vector is empty.  (Thus begin() would
       *  equal end().)
       */
      bool
      empty() const
    5a30:	defffb04 	addi	sp,sp,-20
    5a34:	dfc00415 	stw	ra,16(sp)
    5a38:	df000315 	stw	fp,12(sp)
    5a3c:	df000304 	addi	fp,sp,12
    5a40:	e13fff15 	stw	r4,-4(fp)
      { return begin() == end(); }
    5a44:	e13fff17 	ldw	r4,-4(fp)
    5a48:	0002cb00 	call	2cb0 <_ZNKSt6vectorI6MyRectSaIS0_EE5beginEv>
    5a4c:	e0bffe15 	stw	r2,-8(fp)
    5a50:	e13fff17 	ldw	r4,-4(fp)
    5a54:	0002c6c0 	call	2c6c <_ZNKSt6vectorI6MyRectSaIS0_EE3endEv>
    5a58:	e0bffd15 	stw	r2,-12(fp)
    5a5c:	e13ffe04 	addi	r4,fp,-8
    5a60:	e17ffd04 	addi	r5,fp,-12
    5a64:	00059e00 	call	59e0 <_ZN9__gnu_cxxeqIPK6MyRectSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
    5a68:	10803fcc 	andi	r2,r2,255
    5a6c:	e037883a 	mov	sp,fp
    5a70:	dfc00117 	ldw	ra,4(sp)
    5a74:	df000017 	ldw	fp,0(sp)
    5a78:	dec00204 	addi	sp,sp,8
    5a7c:	f800283a 	ret

00005a80 <_ZNSt12_Vector_baseIiSaIiEE12_Vector_implC1ERKS0_>:
      : public _Tp_alloc_type
      {
	_Tp*           _M_start;
	_Tp*           _M_finish;
	_Tp*           _M_end_of_storage;
	_Vector_impl(_Tp_alloc_type const& __a)
    5a80:	defffc04 	addi	sp,sp,-16
    5a84:	dfc00315 	stw	ra,12(sp)
    5a88:	df000215 	stw	fp,8(sp)
    5a8c:	df000204 	addi	fp,sp,8
    5a90:	e13ffe15 	stw	r4,-8(fp)
    5a94:	e17fff15 	stw	r5,-4(fp)
	: _Tp_alloc_type(__a), _M_start(0), _M_finish(0), _M_end_of_storage(0)
    5a98:	e13ffe17 	ldw	r4,-8(fp)
    5a9c:	e17fff17 	ldw	r5,-4(fp)
    5aa0:	00058f40 	call	58f4 <_ZNSaIiEC2ERKS_>
    5aa4:	e0bffe17 	ldw	r2,-8(fp)
    5aa8:	10000015 	stw	zero,0(r2)
    5aac:	e0bffe17 	ldw	r2,-8(fp)
    5ab0:	10000115 	stw	zero,4(r2)
    5ab4:	e0bffe17 	ldw	r2,-8(fp)
    5ab8:	10000215 	stw	zero,8(r2)
	{ }
    5abc:	e037883a 	mov	sp,fp
    5ac0:	dfc00117 	ldw	ra,4(sp)
    5ac4:	df000017 	ldw	fp,0(sp)
    5ac8:	dec00204 	addi	sp,sp,8
    5acc:	f800283a 	ret

00005ad0 <_ZNSt12_Vector_baseIiSaIiEEC2ERKS0_>:

      allocator_type
      get_allocator() const
      { return _M_get_Tp_allocator(); }

      _Vector_base(const allocator_type& __a)
    5ad0:	defffc04 	addi	sp,sp,-16
    5ad4:	dfc00315 	stw	ra,12(sp)
    5ad8:	df000215 	stw	fp,8(sp)
    5adc:	df000204 	addi	fp,sp,8
    5ae0:	e13ffe15 	stw	r4,-8(fp)
    5ae4:	e17fff15 	stw	r5,-4(fp)
      : _M_impl(__a)
    5ae8:	e13ffe17 	ldw	r4,-8(fp)
    5aec:	e17fff17 	ldw	r5,-4(fp)
    5af0:	0005a800 	call	5a80 <_ZNSt12_Vector_baseIiSaIiEE12_Vector_implC1ERKS0_>
      { }
    5af4:	e037883a 	mov	sp,fp
    5af8:	dfc00117 	ldw	ra,4(sp)
    5afc:	df000017 	ldw	fp,0(sp)
    5b00:	dec00204 	addi	sp,sp,8
    5b04:	f800283a 	ret

00005b08 <_ZNSt6vectorIiSaIiEEC1ERKS0_>:
      // (assign() and get_allocator() are also listed in this section)
      /**
       *  @brief  Default constructor creates no elements.
       */
      explicit
      vector(const allocator_type& __a = allocator_type())
    5b08:	defffc04 	addi	sp,sp,-16
    5b0c:	dfc00315 	stw	ra,12(sp)
    5b10:	df000215 	stw	fp,8(sp)
    5b14:	df000204 	addi	fp,sp,8
    5b18:	e13ffe15 	stw	r4,-8(fp)
    5b1c:	e17fff15 	stw	r5,-4(fp)
      : _Base(__a)
    5b20:	e13ffe17 	ldw	r4,-8(fp)
    5b24:	e17fff17 	ldw	r5,-4(fp)
    5b28:	0005ad00 	call	5ad0 <_ZNSt12_Vector_baseIiSaIiEEC2ERKS0_>
      { }
    5b2c:	e037883a 	mov	sp,fp
    5b30:	dfc00117 	ldw	ra,4(sp)
    5b34:	df000017 	ldw	fp,0(sp)
    5b38:	dec00204 	addi	sp,sp,8
    5b3c:	f800283a 	ret

00005b40 <_ZN9__gnu_cxx17__normal_iteratorIPKiSt6vectorIiSaIiEEEC1ERKS2_>:
      typedef typename iterator_traits<_Iterator>::pointer   pointer;

      __normal_iterator() : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) : _M_current(__i) { }
    5b40:	defffd04 	addi	sp,sp,-12
    5b44:	df000215 	stw	fp,8(sp)
    5b48:	df000204 	addi	fp,sp,8
    5b4c:	e13ffe15 	stw	r4,-8(fp)
    5b50:	e17fff15 	stw	r5,-4(fp)
    5b54:	e0bfff17 	ldw	r2,-4(fp)
    5b58:	10c00017 	ldw	r3,0(r2)
    5b5c:	e0bffe17 	ldw	r2,-8(fp)
    5b60:	10c00015 	stw	r3,0(r2)
    5b64:	e037883a 	mov	sp,fp
    5b68:	df000017 	ldw	fp,0(sp)
    5b6c:	dec00104 	addi	sp,sp,4
    5b70:	f800283a 	ret

00005b74 <_ZNKSt6vectorIiSaIiEE3endEv>:
       *  Returns a read-only (constant) iterator that points one past
       *  the last element in the %vector.  Iteration is done in
       *  ordinary element order.
       */
      const_iterator
      end() const
    5b74:	defffb04 	addi	sp,sp,-20
    5b78:	dfc00415 	stw	ra,16(sp)
    5b7c:	df000315 	stw	fp,12(sp)
    5b80:	df000304 	addi	fp,sp,12
    5b84:	e13fff15 	stw	r4,-4(fp)
      { return const_iterator (this->_M_impl._M_finish); }
    5b88:	e0bfff17 	ldw	r2,-4(fp)
    5b8c:	10800117 	ldw	r2,4(r2)
    5b90:	e0bffd15 	stw	r2,-12(fp)
    5b94:	e13ffe04 	addi	r4,fp,-8
    5b98:	e17ffd04 	addi	r5,fp,-12
    5b9c:	0005b400 	call	5b40 <_ZN9__gnu_cxx17__normal_iteratorIPKiSt6vectorIiSaIiEEEC1ERKS2_>
    5ba0:	e0bffe17 	ldw	r2,-8(fp)
    5ba4:	e037883a 	mov	sp,fp
    5ba8:	dfc00117 	ldw	ra,4(sp)
    5bac:	df000017 	ldw	fp,0(sp)
    5bb0:	dec00204 	addi	sp,sp,8
    5bb4:	f800283a 	ret

00005bb8 <_ZNKSt6vectorIiSaIiEE5beginEv>:
       *  Returns a read-only (constant) iterator that points to the
       *  first element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      const_iterator
      begin() const
    5bb8:	defffb04 	addi	sp,sp,-20
    5bbc:	dfc00415 	stw	ra,16(sp)
    5bc0:	df000315 	stw	fp,12(sp)
    5bc4:	df000304 	addi	fp,sp,12
    5bc8:	e13fff15 	stw	r4,-4(fp)
      { return const_iterator (this->_M_impl._M_start); }
    5bcc:	e0bfff17 	ldw	r2,-4(fp)
    5bd0:	10800017 	ldw	r2,0(r2)
    5bd4:	e0bffd15 	stw	r2,-12(fp)
    5bd8:	e13ffe04 	addi	r4,fp,-8
    5bdc:	e17ffd04 	addi	r5,fp,-12
    5be0:	0005b400 	call	5b40 <_ZN9__gnu_cxx17__normal_iteratorIPKiSt6vectorIiSaIiEEEC1ERKS2_>
    5be4:	e0bffe17 	ldw	r2,-8(fp)
    5be8:	e037883a 	mov	sp,fp
    5bec:	dfc00117 	ldw	ra,4(sp)
    5bf0:	df000017 	ldw	fp,0(sp)
    5bf4:	dec00204 	addi	sp,sp,8
    5bf8:	f800283a 	ret

00005bfc <_ZNK9__gnu_cxx17__normal_iteratorIPKiSt6vectorIiSaIiEEE4baseEv>:
      __normal_iterator
      operator-(const difference_type& __n) const
      { return __normal_iterator(_M_current - __n); }

      const _Iterator&
      base() const
    5bfc:	defffe04 	addi	sp,sp,-8
    5c00:	df000115 	stw	fp,4(sp)
    5c04:	df000104 	addi	fp,sp,4
    5c08:	e13fff15 	stw	r4,-4(fp)
      { return _M_current; }
    5c0c:	e0bfff17 	ldw	r2,-4(fp)
    5c10:	e037883a 	mov	sp,fp
    5c14:	df000017 	ldw	fp,0(sp)
    5c18:	dec00104 	addi	sp,sp,4
    5c1c:	f800283a 	ret

00005c20 <_ZN9__gnu_cxxmiIPKiS2_St6vectorIiSaIiEEEENS_17__normal_iteratorIT_T1_E15difference_typeERKS9_RKNS6_IT0_S8_EE>:
  // operators but also operator- must accept mixed iterator/const_iterator
  // parameters.
  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline typename __normal_iterator<_IteratorL, _Container>::difference_type
    operator-(const __normal_iterator<_IteratorL, _Container>& __lhs,
	      const __normal_iterator<_IteratorR, _Container>& __rhs)
    5c20:	defffb04 	addi	sp,sp,-20
    5c24:	dfc00415 	stw	ra,16(sp)
    5c28:	df000315 	stw	fp,12(sp)
    5c2c:	dc000215 	stw	r16,8(sp)
    5c30:	df000204 	addi	fp,sp,8
    5c34:	e13ffe15 	stw	r4,-8(fp)
    5c38:	e17fff15 	stw	r5,-4(fp)
    { return __lhs.base() - __rhs.base(); }
    5c3c:	e13ffe17 	ldw	r4,-8(fp)
    5c40:	0005bfc0 	call	5bfc <_ZNK9__gnu_cxx17__normal_iteratorIPKiSt6vectorIiSaIiEEE4baseEv>
    5c44:	10800017 	ldw	r2,0(r2)
    5c48:	1021883a 	mov	r16,r2
    5c4c:	e13fff17 	ldw	r4,-4(fp)
    5c50:	0005bfc0 	call	5bfc <_ZNK9__gnu_cxx17__normal_iteratorIPKiSt6vectorIiSaIiEEE4baseEv>
    5c54:	10800017 	ldw	r2,0(r2)
    5c58:	8085c83a 	sub	r2,r16,r2
    5c5c:	1005d0ba 	srai	r2,r2,2
    5c60:	e037883a 	mov	sp,fp
    5c64:	dfc00217 	ldw	ra,8(sp)
    5c68:	df000117 	ldw	fp,4(sp)
    5c6c:	dc000017 	ldw	r16,0(sp)
    5c70:	dec00304 	addi	sp,sp,12
    5c74:	f800283a 	ret

00005c78 <_ZNKSt6vectorIiSaIiEE4sizeEv>:
      { return const_reverse_iterator(begin()); }

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const
    5c78:	defffb04 	addi	sp,sp,-20
    5c7c:	dfc00415 	stw	ra,16(sp)
    5c80:	df000315 	stw	fp,12(sp)
    5c84:	df000304 	addi	fp,sp,12
    5c88:	e13fff15 	stw	r4,-4(fp)
      { return size_type(end() - begin()); }
    5c8c:	e13fff17 	ldw	r4,-4(fp)
    5c90:	0005b740 	call	5b74 <_ZNKSt6vectorIiSaIiEE3endEv>
    5c94:	e0bffe15 	stw	r2,-8(fp)
    5c98:	e13fff17 	ldw	r4,-4(fp)
    5c9c:	0005bb80 	call	5bb8 <_ZNKSt6vectorIiSaIiEE5beginEv>
    5ca0:	e0bffd15 	stw	r2,-12(fp)
    5ca4:	e13ffe04 	addi	r4,fp,-8
    5ca8:	e17ffd04 	addi	r5,fp,-12
    5cac:	0005c200 	call	5c20 <_ZN9__gnu_cxxmiIPKiS2_St6vectorIiSaIiEEEENS_17__normal_iteratorIT_T1_E15difference_typeERKS9_RKNS6_IT0_S8_EE>
    5cb0:	e037883a 	mov	sp,fp
    5cb4:	dfc00117 	ldw	ra,4(sp)
    5cb8:	df000017 	ldw	fp,0(sp)
    5cbc:	dec00204 	addi	sp,sp,8
    5cc0:	f800283a 	ret

00005cc4 <_ZN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEC1ERKS1_>:
      typedef typename iterator_traits<_Iterator>::pointer   pointer;

      __normal_iterator() : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) : _M_current(__i) { }
    5cc4:	defffd04 	addi	sp,sp,-12
    5cc8:	df000215 	stw	fp,8(sp)
    5ccc:	df000204 	addi	fp,sp,8
    5cd0:	e13ffe15 	stw	r4,-8(fp)
    5cd4:	e17fff15 	stw	r5,-4(fp)
    5cd8:	e0bfff17 	ldw	r2,-4(fp)
    5cdc:	10c00017 	ldw	r3,0(r2)
    5ce0:	e0bffe17 	ldw	r2,-8(fp)
    5ce4:	10c00015 	stw	r3,0(r2)
    5ce8:	e037883a 	mov	sp,fp
    5cec:	df000017 	ldw	fp,0(sp)
    5cf0:	dec00104 	addi	sp,sp,4
    5cf4:	f800283a 	ret

00005cf8 <_ZNSt6vectorIiSaIiEE5beginEv>:
       *  Returns a read/write iterator that points to the first
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      iterator
      begin()
    5cf8:	defffc04 	addi	sp,sp,-16
    5cfc:	dfc00315 	stw	ra,12(sp)
    5d00:	df000215 	stw	fp,8(sp)
    5d04:	df000204 	addi	fp,sp,8
    5d08:	e13fff15 	stw	r4,-4(fp)
      { return iterator (this->_M_impl._M_start); }
    5d0c:	e17fff17 	ldw	r5,-4(fp)
    5d10:	e13ffe04 	addi	r4,fp,-8
    5d14:	0005cc40 	call	5cc4 <_ZN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEC1ERKS1_>
    5d18:	e0bffe17 	ldw	r2,-8(fp)
    5d1c:	e037883a 	mov	sp,fp
    5d20:	dfc00117 	ldw	ra,4(sp)
    5d24:	df000017 	ldw	fp,0(sp)
    5d28:	dec00204 	addi	sp,sp,8
    5d2c:	f800283a 	ret

00005d30 <_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEplERKl>:
      __normal_iterator&
      operator+=(const difference_type& __n)
      { _M_current += __n; return *this; }

      __normal_iterator
      operator+(const difference_type& __n) const
    5d30:	defffa04 	addi	sp,sp,-24
    5d34:	dfc00515 	stw	ra,20(sp)
    5d38:	df000415 	stw	fp,16(sp)
    5d3c:	df000404 	addi	fp,sp,16
    5d40:	e13ffe15 	stw	r4,-8(fp)
    5d44:	e17fff15 	stw	r5,-4(fp)
      { return __normal_iterator(_M_current + __n); }
    5d48:	e0bffe17 	ldw	r2,-8(fp)
    5d4c:	10c00017 	ldw	r3,0(r2)
    5d50:	e0bfff17 	ldw	r2,-4(fp)
    5d54:	10800017 	ldw	r2,0(r2)
    5d58:	1085883a 	add	r2,r2,r2
    5d5c:	1085883a 	add	r2,r2,r2
    5d60:	1885883a 	add	r2,r3,r2
    5d64:	e0bffc15 	stw	r2,-16(fp)
    5d68:	e13ffd04 	addi	r4,fp,-12
    5d6c:	e17ffc04 	addi	r5,fp,-16
    5d70:	0005cc40 	call	5cc4 <_ZN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEC1ERKS1_>
    5d74:	e0bffd17 	ldw	r2,-12(fp)
    5d78:	e037883a 	mov	sp,fp
    5d7c:	dfc00117 	ldw	ra,4(sp)
    5d80:	df000017 	ldw	fp,0(sp)
    5d84:	dec00204 	addi	sp,sp,8
    5d88:	f800283a 	ret

00005d8c <_ZNSt6vectorIiSaIiEEixEm>:
       *  Note that data access with this operator is unchecked and
       *  out_of_range lookups are not defined. (For checked lookups
       *  see at().)
       */
      reference
      operator[](size_type __n)
    5d8c:	defff904 	addi	sp,sp,-28
    5d90:	dfc00615 	stw	ra,24(sp)
    5d94:	df000515 	stw	fp,20(sp)
    5d98:	df000504 	addi	fp,sp,20
    5d9c:	e13ffe15 	stw	r4,-8(fp)
    5da0:	e17fff15 	stw	r5,-4(fp)
      { return *(begin() + __n); }
    5da4:	e13ffe17 	ldw	r4,-8(fp)
    5da8:	0005cf80 	call	5cf8 <_ZNSt6vectorIiSaIiEE5beginEv>
    5dac:	e0bffc15 	stw	r2,-16(fp)
    5db0:	e0bfff17 	ldw	r2,-4(fp)
    5db4:	e0bffb15 	stw	r2,-20(fp)
    5db8:	e13ffc04 	addi	r4,fp,-16
    5dbc:	e17ffb04 	addi	r5,fp,-20
    5dc0:	0005d300 	call	5d30 <_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEplERKl>
    5dc4:	e0bffd15 	stw	r2,-12(fp)
    5dc8:	e13ffd04 	addi	r4,fp,-12
    5dcc:	00059b80 	call	59b8 <_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEdeEv>
    5dd0:	e037883a 	mov	sp,fp
    5dd4:	dfc00117 	ldw	ra,4(sp)
    5dd8:	df000017 	ldw	fp,0(sp)
    5ddc:	dec00204 	addi	sp,sp,8
    5de0:	f800283a 	ret

00005de4 <_ZNSt6vectorIiSaIiEE3endEv>:
       *  Returns a read/write iterator that points one past the last
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      iterator
      end()
    5de4:	defffc04 	addi	sp,sp,-16
    5de8:	dfc00315 	stw	ra,12(sp)
    5dec:	df000215 	stw	fp,8(sp)
    5df0:	df000204 	addi	fp,sp,8
    5df4:	e13fff15 	stw	r4,-4(fp)
      { return iterator (this->_M_impl._M_finish); }
    5df8:	e0bfff17 	ldw	r2,-4(fp)
    5dfc:	11400104 	addi	r5,r2,4
    5e00:	e13ffe04 	addi	r4,fp,-8
    5e04:	0005cc40 	call	5cc4 <_ZN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEC1ERKS1_>
    5e08:	e0bffe17 	ldw	r2,-8(fp)
    5e0c:	e037883a 	mov	sp,fp
    5e10:	dfc00117 	ldw	ra,4(sp)
    5e14:	df000017 	ldw	fp,0(sp)
    5e18:	dec00204 	addi	sp,sp,8
    5e1c:	f800283a 	ret

00005e20 <_ZSt13__destroy_auxIPiEvT_S1_11__true_type>:
   * This is a helper function used only by _Destroy().
   * @endif
   */
  template<typename _ForwardIterator>
    inline void
    __destroy_aux(_ForwardIterator, _ForwardIterator, __true_type)
    5e20:	defffc04 	addi	sp,sp,-16
    5e24:	df000315 	stw	fp,12(sp)
    5e28:	df000304 	addi	fp,sp,12
    5e2c:	e13ffd15 	stw	r4,-12(fp)
    5e30:	e17ffe15 	stw	r5,-8(fp)
    5e34:	e1bfff05 	stb	r6,-4(fp)
    { }
    5e38:	e037883a 	mov	sp,fp
    5e3c:	df000017 	ldw	fp,0(sp)
    5e40:	dec00104 	addi	sp,sp,4
    5e44:	f800283a 	ret

00005e48 <_ZSt8_DestroyIPiEvT_S1_>:
   * away, otherwise the objects' destructors must be invoked.
   * @endif
   */
  template<typename _ForwardIterator>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
    5e48:	defffb04 	addi	sp,sp,-20
    5e4c:	dfc00415 	stw	ra,16(sp)
    5e50:	df000315 	stw	fp,12(sp)
    5e54:	df000304 	addi	fp,sp,12
    5e58:	e13ffd15 	stw	r4,-12(fp)
    5e5c:	e17ffe15 	stw	r5,-8(fp)
      typedef typename iterator_traits<_ForwardIterator>::value_type
                       _Value_type;
      typedef typename std::__is_scalar<_Value_type>::__type
	               _Has_trivial_destructor;

      std::__destroy_aux(__first, __last, _Has_trivial_destructor());
    5e60:	e13ffd17 	ldw	r4,-12(fp)
    5e64:	e17ffe17 	ldw	r5,-8(fp)
    5e68:	e1bfff03 	ldbu	r6,-4(fp)
    5e6c:	0005e200 	call	5e20 <_ZSt13__destroy_auxIPiEvT_S1_11__true_type>
    5e70:	e037883a 	mov	sp,fp
    5e74:	dfc00117 	ldw	ra,4(sp)
    5e78:	df000017 	ldw	fp,0(sp)
    5e7c:	dec00204 	addi	sp,sp,8
    5e80:	f800283a 	ret

00005e84 <_ZSt8_DestroyIPiiEvT_S1_SaIT0_E>:
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
	     allocator<_Tp>)
    5e84:	defffb04 	addi	sp,sp,-20
    5e88:	dfc00415 	stw	ra,16(sp)
    5e8c:	df000315 	stw	fp,12(sp)
    5e90:	df000304 	addi	fp,sp,12
    5e94:	e13ffd15 	stw	r4,-12(fp)
    5e98:	e17ffe15 	stw	r5,-8(fp)
    5e9c:	e1bfff15 	stw	r6,-4(fp)
    {
      _Destroy(__first, __last);
    5ea0:	e13ffd17 	ldw	r4,-12(fp)
    5ea4:	e17ffe17 	ldw	r5,-8(fp)
    5ea8:	0005e480 	call	5e48 <_ZSt8_DestroyIPiEvT_S1_>
    5eac:	e037883a 	mov	sp,fp
    5eb0:	dfc00117 	ldw	ra,4(sp)
    5eb4:	df000017 	ldw	fp,0(sp)
    5eb8:	dec00204 	addi	sp,sp,8
    5ebc:	f800283a 	ret

00005ec0 <_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEE4baseEv>:
      __normal_iterator
      operator-(const difference_type& __n) const
      { return __normal_iterator(_M_current - __n); }

      const _Iterator&
      base() const
    5ec0:	defffe04 	addi	sp,sp,-8
    5ec4:	df000115 	stw	fp,4(sp)
    5ec8:	df000104 	addi	fp,sp,4
    5ecc:	e13fff15 	stw	r4,-4(fp)
      { return _M_current; }
    5ed0:	e0bfff17 	ldw	r2,-4(fp)
    5ed4:	e037883a 	mov	sp,fp
    5ed8:	df000017 	ldw	fp,0(sp)
    5edc:	dec00104 	addi	sp,sp,4
    5ee0:	f800283a 	ret

00005ee4 <_ZN9__gnu_cxxmiIPiS1_St6vectorIiSaIiEEEENS_17__normal_iteratorIT_T1_E15difference_typeERKS8_RKNS5_IT0_S7_EE>:
  // operators but also operator- must accept mixed iterator/const_iterator
  // parameters.
  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline typename __normal_iterator<_IteratorL, _Container>::difference_type
    operator-(const __normal_iterator<_IteratorL, _Container>& __lhs,
	      const __normal_iterator<_IteratorR, _Container>& __rhs)
    5ee4:	defffb04 	addi	sp,sp,-20
    5ee8:	dfc00415 	stw	ra,16(sp)
    5eec:	df000315 	stw	fp,12(sp)
    5ef0:	dc000215 	stw	r16,8(sp)
    5ef4:	df000204 	addi	fp,sp,8
    5ef8:	e13ffe15 	stw	r4,-8(fp)
    5efc:	e17fff15 	stw	r5,-4(fp)
    { return __lhs.base() - __rhs.base(); }
    5f00:	e13ffe17 	ldw	r4,-8(fp)
    5f04:	0005ec00 	call	5ec0 <_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEE4baseEv>
    5f08:	10800017 	ldw	r2,0(r2)
    5f0c:	1021883a 	mov	r16,r2
    5f10:	e13fff17 	ldw	r4,-4(fp)
    5f14:	0005ec00 	call	5ec0 <_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEE4baseEv>
    5f18:	10800017 	ldw	r2,0(r2)
    5f1c:	8085c83a 	sub	r2,r16,r2
    5f20:	1005d0ba 	srai	r2,r2,2
    5f24:	e037883a 	mov	sp,fp
    5f28:	dfc00217 	ldw	ra,8(sp)
    5f2c:	df000117 	ldw	fp,4(sp)
    5f30:	dc000017 	ldw	r16,0(sp)
    5f34:	dec00304 	addi	sp,sp,12
    5f38:	f800283a 	ret

00005f3c <_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEmiERKl>:
      __normal_iterator&
      operator-=(const difference_type& __n)
      { _M_current -= __n; return *this; }

      __normal_iterator
      operator-(const difference_type& __n) const
    5f3c:	defffa04 	addi	sp,sp,-24
    5f40:	dfc00515 	stw	ra,20(sp)
    5f44:	df000415 	stw	fp,16(sp)
    5f48:	df000404 	addi	fp,sp,16
    5f4c:	e13ffe15 	stw	r4,-8(fp)
    5f50:	e17fff15 	stw	r5,-4(fp)
      { return __normal_iterator(_M_current - __n); }
    5f54:	e0bffe17 	ldw	r2,-8(fp)
    5f58:	10c00017 	ldw	r3,0(r2)
    5f5c:	e0bfff17 	ldw	r2,-4(fp)
    5f60:	10800017 	ldw	r2,0(r2)
    5f64:	1085883a 	add	r2,r2,r2
    5f68:	1085883a 	add	r2,r2,r2
    5f6c:	1885c83a 	sub	r2,r3,r2
    5f70:	e0bffc15 	stw	r2,-16(fp)
    5f74:	e13ffd04 	addi	r4,fp,-12
    5f78:	e17ffc04 	addi	r5,fp,-16
    5f7c:	0005cc40 	call	5cc4 <_ZN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEC1ERKS1_>
    5f80:	e0bffd17 	ldw	r2,-12(fp)
    5f84:	e037883a 	mov	sp,fp
    5f88:	dfc00117 	ldw	ra,4(sp)
    5f8c:	df000017 	ldw	fp,0(sp)
    5f90:	dec00204 	addi	sp,sp,8
    5f94:	f800283a 	ret

00005f98 <_ZNKSt6vectorIiSaIiEE8max_sizeEv>:
      size() const
      { return size_type(end() - begin()); }

      /**  Returns the size() of the largest possible %vector.  */
      size_type
      max_size() const
    5f98:	defffe04 	addi	sp,sp,-8
    5f9c:	df000115 	stw	fp,4(sp)
    5fa0:	df000104 	addi	fp,sp,4
    5fa4:	e13fff15 	stw	r4,-4(fp)
      { return size_type(-1) / sizeof(value_type); }
    5fa8:	00900034 	movhi	r2,16384
    5fac:	10bfffc4 	addi	r2,r2,-1
    5fb0:	e037883a 	mov	sp,fp
    5fb4:	df000017 	ldw	fp,0(sp)
    5fb8:	dec00104 	addi	sp,sp,4
    5fbc:	f800283a 	ret

00005fc0 <_ZSt3maxImERKT_S2_S2_>:
   *  temporary expressions, since they are only evaluated once, unlike a
   *  preprocessor macro.
  */
  template<typename _Tp>
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
    5fc0:	defffc04 	addi	sp,sp,-16
    5fc4:	df000315 	stw	fp,12(sp)
    5fc8:	df000304 	addi	fp,sp,12
    5fcc:	e13ffd15 	stw	r4,-12(fp)
    5fd0:	e17ffe15 	stw	r5,-8(fp)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
    5fd4:	e0bffd17 	ldw	r2,-12(fp)
    5fd8:	10c00017 	ldw	r3,0(r2)
    5fdc:	e0bffe17 	ldw	r2,-8(fp)
    5fe0:	10800017 	ldw	r2,0(r2)
    5fe4:	1880032e 	bgeu	r3,r2,5ff4 <_ZSt3maxImERKT_S2_S2_+0x34>
	return __b;
    5fe8:	e0bffe17 	ldw	r2,-8(fp)
    5fec:	e0bfff15 	stw	r2,-4(fp)
    5ff0:	00000206 	br	5ffc <_ZSt3maxImERKT_S2_S2_+0x3c>
      return __a;
    5ff4:	e0bffd17 	ldw	r2,-12(fp)
    5ff8:	e0bfff15 	stw	r2,-4(fp)
    5ffc:	e0bfff17 	ldw	r2,-4(fp)
    6000:	e037883a 	mov	sp,fp
    6004:	df000017 	ldw	fp,0(sp)
    6008:	dec00104 	addi	sp,sp,4
    600c:	f800283a 	ret

00006010 <_ZN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEpLERKl>:
      reference
      operator[](const difference_type& __n) const
      { return _M_current[__n]; }

      __normal_iterator&
      operator+=(const difference_type& __n)
    6010:	defffd04 	addi	sp,sp,-12
    6014:	df000215 	stw	fp,8(sp)
    6018:	df000204 	addi	fp,sp,8
    601c:	e13ffe15 	stw	r4,-8(fp)
    6020:	e17fff15 	stw	r5,-4(fp)
      { _M_current += __n; return *this; }
    6024:	e0bffe17 	ldw	r2,-8(fp)
    6028:	10c00017 	ldw	r3,0(r2)
    602c:	e0bfff17 	ldw	r2,-4(fp)
    6030:	10800017 	ldw	r2,0(r2)
    6034:	1085883a 	add	r2,r2,r2
    6038:	1085883a 	add	r2,r2,r2
    603c:	1887883a 	add	r3,r3,r2
    6040:	e0bffe17 	ldw	r2,-8(fp)
    6044:	10c00015 	stw	r3,0(r2)
    6048:	e0bffe17 	ldw	r2,-8(fp)
    604c:	e037883a 	mov	sp,fp
    6050:	df000017 	ldw	fp,0(sp)
    6054:	dec00104 	addi	sp,sp,4
    6058:	f800283a 	ret

0000605c <_ZSt26__uninitialized_fill_n_auxIP6MyRectmS0_EvT_T0_RKT1_12__false_type>:
    { std::fill_n(__first, __n, __x); }

  template<typename _ForwardIterator, typename _Size, typename _Tp>
    void
    __uninitialized_fill_n_aux(_ForwardIterator __first, _Size __n,
			       const _Tp& __x, __false_type)
    605c:	defff904 	addi	sp,sp,-28
    6060:	dfc00615 	stw	ra,24(sp)
    6064:	df000515 	stw	fp,20(sp)
    6068:	df000504 	addi	fp,sp,20
    606c:	e13ffc15 	stw	r4,-16(fp)
    6070:	e17ffd15 	stw	r5,-12(fp)
    6074:	e1bffe15 	stw	r6,-8(fp)
    6078:	e1ffff05 	stb	r7,-4(fp)
    {
      _ForwardIterator __cur = __first;
    607c:	e0bffc17 	ldw	r2,-16(fp)
    6080:	e0bffb15 	stw	r2,-20(fp)
      try
	{
	  for (; __n > 0; --__n, ++__cur)
    6084:	00000906 	br	60ac <_ZSt26__uninitialized_fill_n_auxIP6MyRectmS0_EvT_T0_RKT1_12__false_type+0x50>
	    std::_Construct(&*__cur, __x);
    6088:	e13ffb17 	ldw	r4,-20(fp)
    608c:	e17ffe17 	ldw	r5,-8(fp)
    6090:	00030540 	call	3054 <_ZSt10_ConstructI6MyRectS0_EvPT_RKT0_>
			       const _Tp& __x, __false_type)
    {
      _ForwardIterator __cur = __first;
      try
	{
	  for (; __n > 0; --__n, ++__cur)
    6094:	e0bffd17 	ldw	r2,-12(fp)
    6098:	10bfffc4 	addi	r2,r2,-1
    609c:	e0bffd15 	stw	r2,-12(fp)
    60a0:	e0bffb17 	ldw	r2,-20(fp)
    60a4:	10800404 	addi	r2,r2,16
    60a8:	e0bffb15 	stw	r2,-20(fp)
    60ac:	e0bffd17 	ldw	r2,-12(fp)
    60b0:	1004c03a 	cmpne	r2,r2,zero
    60b4:	103ff41e 	bne	r2,zero,6088 <_ZSt26__uninitialized_fill_n_auxIP6MyRectmS0_EvT_T0_RKT1_12__false_type+0x2c>
	    std::_Construct(&*__cur, __x);
	}
      catch(...)
	{
	  std::_Destroy(__first, __cur);
	  __throw_exception_again;
    60b8:	e037883a 	mov	sp,fp
    60bc:	dfc00117 	ldw	ra,4(sp)
    60c0:	df000017 	ldw	fp,0(sp)
    60c4:	dec00204 	addi	sp,sp,8
    60c8:	f800283a 	ret

000060cc <_ZSt20uninitialized_fill_nIP6MyRectmS0_EvT_T0_RKT1_>:
   *
   *  Like fill_n(), but does not require an initialized output range.
  */
  template<typename _ForwardIterator, typename _Size, typename _Tp>
    inline void
    uninitialized_fill_n(_ForwardIterator __first, _Size __n, const _Tp& __x)
    60cc:	defffa04 	addi	sp,sp,-24
    60d0:	dfc00515 	stw	ra,20(sp)
    60d4:	df000415 	stw	fp,16(sp)
    60d8:	df000404 	addi	fp,sp,16
    60dc:	e13ffc15 	stw	r4,-16(fp)
    60e0:	e17ffd15 	stw	r5,-12(fp)
    60e4:	e1bffe15 	stw	r6,-8(fp)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type _ValueType;
      typedef typename std::__is_scalar<_ValueType>::__type _Is_POD;
      std::__uninitialized_fill_n_aux(__first, __n, __x, _Is_POD());
    60e8:	e13ffc17 	ldw	r4,-16(fp)
    60ec:	e17ffd17 	ldw	r5,-12(fp)
    60f0:	e1bffe17 	ldw	r6,-8(fp)
    60f4:	e1ffff03 	ldbu	r7,-4(fp)
    60f8:	000605c0 	call	605c <_ZSt26__uninitialized_fill_n_auxIP6MyRectmS0_EvT_T0_RKT1_12__false_type>
    60fc:	e037883a 	mov	sp,fp
    6100:	dfc00117 	ldw	ra,4(sp)
    6104:	df000017 	ldw	fp,0(sp)
    6108:	dec00204 	addi	sp,sp,8
    610c:	f800283a 	ret

00006110 <_ZSt24__uninitialized_fill_n_aIP6MyRectmS0_S0_EvT_T0_RKT1_SaIT2_E>:
  template<typename _ForwardIterator, typename _Size, typename _Tp,
	   typename _Tp2>
    void
    __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n, 
			     const _Tp& __x,
			     allocator<_Tp2>)
    6110:	defffa04 	addi	sp,sp,-24
    6114:	dfc00515 	stw	ra,20(sp)
    6118:	df000415 	stw	fp,16(sp)
    611c:	df000404 	addi	fp,sp,16
    6120:	e13ffc15 	stw	r4,-16(fp)
    6124:	e17ffd15 	stw	r5,-12(fp)
    6128:	e1bffe15 	stw	r6,-8(fp)
    612c:	e1ffff15 	stw	r7,-4(fp)
    {
      std::uninitialized_fill_n(__first, __n, __x);
    6130:	e13ffc17 	ldw	r4,-16(fp)
    6134:	e17ffd17 	ldw	r5,-12(fp)
    6138:	e1bffe17 	ldw	r6,-8(fp)
    613c:	00060cc0 	call	60cc <_ZSt20uninitialized_fill_nIP6MyRectmS0_EvT_T0_RKT1_>
    6140:	e037883a 	mov	sp,fp
    6144:	dfc00117 	ldw	ra,4(sp)
    6148:	df000017 	ldw	fp,0(sp)
    614c:	dec00204 	addi	sp,sp,8
    6150:	f800283a 	ret

00006154 <_ZNSt6vectorI6MyRectSaIS0_EE5clearEv>:
       *  elements, and that if the elements themselves are pointers, the
       *  pointed-to memory is not touched in any way.  Managing the pointer is
       *  the user's responsibilty.
       */
      void
      clear()
    6154:	defffa04 	addi	sp,sp,-24
    6158:	dfc00515 	stw	ra,20(sp)
    615c:	df000415 	stw	fp,16(sp)
    6160:	dc400315 	stw	r17,12(sp)
    6164:	dc000215 	stw	r16,8(sp)
    6168:	df000204 	addi	fp,sp,8
    616c:	e13fff15 	stw	r4,-4(fp)
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    6170:	e0bfff17 	ldw	r2,-4(fp)
    6174:	14000017 	ldw	r16,0(r2)
    6178:	e0bfff17 	ldw	r2,-4(fp)
    617c:	14400117 	ldw	r17,4(r2)
    6180:	e13fff17 	ldw	r4,-4(fp)
    6184:	0002ad40 	call	2ad4 <_ZNSt12_Vector_baseI6MyRectSaIS0_EE19_M_get_Tp_allocatorEv>
    6188:	100b883a 	mov	r5,r2
    618c:	e13ffe04 	addi	r4,fp,-8
    6190:	0002a340 	call	2a34 <_ZNSaI6MyRectEC1ERKS0_>
    6194:	8009883a 	mov	r4,r16
    6198:	880b883a 	mov	r5,r17
    619c:	e1bffe04 	addi	r6,fp,-8
    61a0:	0002ff00 	call	2ff0 <_ZSt8_DestroyIP6MyRectS0_EvT_S2_SaIT0_E>
    61a4:	e13ffe04 	addi	r4,fp,-8
    61a8:	00029b00 	call	29b0 <_ZNSaI6MyRectED1Ev>
		      _M_get_Tp_allocator());
	this->_M_impl._M_finish = this->_M_impl._M_start;
    61ac:	e0bfff17 	ldw	r2,-4(fp)
    61b0:	10c00017 	ldw	r3,0(r2)
    61b4:	e0bfff17 	ldw	r2,-4(fp)
    61b8:	10c00115 	stw	r3,4(r2)
    61bc:	e037883a 	mov	sp,fp
    61c0:	dfc00317 	ldw	ra,12(sp)
    61c4:	df000217 	ldw	fp,8(sp)
    61c8:	dc400117 	ldw	r17,4(sp)
    61cc:	dc000017 	ldw	r16,0(sp)
    61d0:	dec00404 	addi	sp,sp,16
    61d4:	f800283a 	ret

000061d8 <_ZNK9__gnu_cxx13new_allocatorIiE8max_sizeEv>:
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }

      size_type
      max_size() const throw() 
    61d8:	defffe04 	addi	sp,sp,-8
    61dc:	df000115 	stw	fp,4(sp)
    61e0:	df000104 	addi	fp,sp,4
    61e4:	e13fff15 	stw	r4,-4(fp)
      { return size_t(-1) / sizeof(_Tp); }
    61e8:	00900034 	movhi	r2,16384
    61ec:	10bfffc4 	addi	r2,r2,-1
    61f0:	e037883a 	mov	sp,fp
    61f4:	df000017 	ldw	fp,0(sp)
    61f8:	dec00104 	addi	sp,sp,4
    61fc:	f800283a 	ret

00006200 <_ZSt13__destroy_auxIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEvT_S7_11__true_type>:
   * This is a helper function used only by _Destroy().
   * @endif
   */
  template<typename _ForwardIterator>
    inline void
    __destroy_aux(_ForwardIterator, _ForwardIterator, __true_type)
    6200:	defffc04 	addi	sp,sp,-16
    6204:	df000315 	stw	fp,12(sp)
    6208:	df000304 	addi	fp,sp,12
    620c:	e13ffd15 	stw	r4,-12(fp)
    6210:	e17ffe15 	stw	r5,-8(fp)
    6214:	e1bfff05 	stb	r6,-4(fp)
    { }
    6218:	e037883a 	mov	sp,fp
    621c:	df000017 	ldw	fp,0(sp)
    6220:	dec00104 	addi	sp,sp,4
    6224:	f800283a 	ret

00006228 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEvT_S7_>:
   * away, otherwise the objects' destructors must be invoked.
   * @endif
   */
  template<typename _ForwardIterator>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
    6228:	defffb04 	addi	sp,sp,-20
    622c:	dfc00415 	stw	ra,16(sp)
    6230:	df000315 	stw	fp,12(sp)
    6234:	df000304 	addi	fp,sp,12
    6238:	e13ffd15 	stw	r4,-12(fp)
    623c:	e17ffe15 	stw	r5,-8(fp)
      typedef typename iterator_traits<_ForwardIterator>::value_type
                       _Value_type;
      typedef typename std::__is_scalar<_Value_type>::__type
	               _Has_trivial_destructor;

      std::__destroy_aux(__first, __last, _Has_trivial_destructor());
    6240:	e13ffd17 	ldw	r4,-12(fp)
    6244:	e17ffe17 	ldw	r5,-8(fp)
    6248:	e1bfff03 	ldbu	r6,-4(fp)
    624c:	00062000 	call	6200 <_ZSt13__destroy_auxIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEvT_S7_11__true_type>
    6250:	e037883a 	mov	sp,fp
    6254:	dfc00117 	ldw	ra,4(sp)
    6258:	df000017 	ldw	fp,0(sp)
    625c:	dec00204 	addi	sp,sp,8
    6260:	f800283a 	ret

00006264 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiEvT_S7_SaIT0_E>:
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
	     allocator<_Tp>)
    6264:	defffb04 	addi	sp,sp,-20
    6268:	dfc00415 	stw	ra,16(sp)
    626c:	df000315 	stw	fp,12(sp)
    6270:	df000304 	addi	fp,sp,12
    6274:	e13ffd15 	stw	r4,-12(fp)
    6278:	e17ffe15 	stw	r5,-8(fp)
    627c:	e1bfff15 	stw	r6,-4(fp)
    {
      _Destroy(__first, __last);
    6280:	e13ffd17 	ldw	r4,-12(fp)
    6284:	e17ffe17 	ldw	r5,-8(fp)
    6288:	00062280 	call	6228 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEEvT_S7_>
    628c:	e037883a 	mov	sp,fp
    6290:	dfc00117 	ldw	ra,4(sp)
    6294:	df000017 	ldw	fp,0(sp)
    6298:	dec00204 	addi	sp,sp,8
    629c:	f800283a 	ret

000062a0 <_ZNSt8__fill_nILb1EE6fill_nIPimiEET_S3_T0_RKT1_>:
  template<>
    struct __fill_n<true>
    {
      template<typename _OutputIterator, typename _Size, typename _Tp>
        static _OutputIterator
        fill_n(_OutputIterator __first, _Size __n, const _Tp& __value)
    62a0:	defffb04 	addi	sp,sp,-20
    62a4:	df000415 	stw	fp,16(sp)
    62a8:	df000404 	addi	fp,sp,16
    62ac:	e13ffd15 	stw	r4,-12(fp)
    62b0:	e17ffe15 	stw	r5,-8(fp)
    62b4:	e1bfff15 	stw	r6,-4(fp)
        {
	  const _Tp __tmp = __value;
    62b8:	e0bfff17 	ldw	r2,-4(fp)
    62bc:	10800017 	ldw	r2,0(r2)
    62c0:	e0bffc15 	stw	r2,-16(fp)
	  for (; __n > 0; --__n, ++__first)
    62c4:	00000906 	br	62ec <_ZNSt8__fill_nILb1EE6fill_nIPimiEET_S3_T0_RKT1_+0x4c>
	    *__first = __tmp;
    62c8:	e0fffd17 	ldw	r3,-12(fp)
    62cc:	e0bffc17 	ldw	r2,-16(fp)
    62d0:	18800015 	stw	r2,0(r3)
      template<typename _OutputIterator, typename _Size, typename _Tp>
        static _OutputIterator
        fill_n(_OutputIterator __first, _Size __n, const _Tp& __value)
        {
	  const _Tp __tmp = __value;
	  for (; __n > 0; --__n, ++__first)
    62d4:	e0bffe17 	ldw	r2,-8(fp)
    62d8:	10bfffc4 	addi	r2,r2,-1
    62dc:	e0bffe15 	stw	r2,-8(fp)
    62e0:	e0bffd17 	ldw	r2,-12(fp)
    62e4:	10800104 	addi	r2,r2,4
    62e8:	e0bffd15 	stw	r2,-12(fp)
    62ec:	e0bffe17 	ldw	r2,-8(fp)
    62f0:	1004c03a 	cmpne	r2,r2,zero
    62f4:	103ff41e 	bne	r2,zero,62c8 <_ZNSt8__fill_nILb1EE6fill_nIPimiEET_S3_T0_RKT1_+0x28>
	    *__first = __tmp;
	  return __first;	  
    62f8:	e0bffd17 	ldw	r2,-12(fp)
    62fc:	e037883a 	mov	sp,fp
    6300:	df000017 	ldw	fp,0(sp)
    6304:	dec00104 	addi	sp,sp,4
    6308:	f800283a 	ret

0000630c <_ZSt6fill_nIPimiET_S1_T0_RKT1_>:
   *  types filling contiguous areas of memory, this becomes an inline call to
   *  @c memset.
  */
  template<typename _OutputIterator, typename _Size, typename _Tp>
    _OutputIterator
    fill_n(_OutputIterator __first, _Size __n, const _Tp& __value)
    630c:	defffa04 	addi	sp,sp,-24
    6310:	dfc00515 	stw	ra,20(sp)
    6314:	df000415 	stw	fp,16(sp)
    6318:	df000404 	addi	fp,sp,16
    631c:	e13ffd15 	stw	r4,-12(fp)
    6320:	e17ffe15 	stw	r5,-8(fp)
    6324:	e1bfff15 	stw	r6,-4(fp)
    {
      // concept requirements
      __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator, _Tp>)

      const bool __scalar = __is_scalar<_Tp>::__value;
    6328:	00800044 	movi	r2,1
    632c:	e0bffc05 	stb	r2,-16(fp)
      return std::__fill_n<__scalar>::fill_n(__first, __n, __value);
    6330:	e13ffd17 	ldw	r4,-12(fp)
    6334:	e17ffe17 	ldw	r5,-8(fp)
    6338:	e1bfff17 	ldw	r6,-4(fp)
    633c:	00062a00 	call	62a0 <_ZNSt8__fill_nILb1EE6fill_nIPimiEET_S3_T0_RKT1_>
    6340:	e037883a 	mov	sp,fp
    6344:	dfc00117 	ldw	ra,4(sp)
    6348:	df000017 	ldw	fp,0(sp)
    634c:	dec00204 	addi	sp,sp,8
    6350:	f800283a 	ret

00006354 <_ZSt26__uninitialized_fill_n_auxIPimiEvT_T0_RKT1_11__true_type>:
  // Valid if copy construction is equivalent to assignment, and if the
  //  destructor is trivial.
  template<typename _ForwardIterator, typename _Size, typename _Tp>
    inline void
    __uninitialized_fill_n_aux(_ForwardIterator __first, _Size __n,
			       const _Tp& __x, __true_type)
    6354:	defffa04 	addi	sp,sp,-24
    6358:	dfc00515 	stw	ra,20(sp)
    635c:	df000415 	stw	fp,16(sp)
    6360:	df000404 	addi	fp,sp,16
    6364:	e13ffc15 	stw	r4,-16(fp)
    6368:	e17ffd15 	stw	r5,-12(fp)
    636c:	e1bffe15 	stw	r6,-8(fp)
    6370:	e1ffff05 	stb	r7,-4(fp)
    { std::fill_n(__first, __n, __x); }
    6374:	e13ffc17 	ldw	r4,-16(fp)
    6378:	e17ffd17 	ldw	r5,-12(fp)
    637c:	e1bffe17 	ldw	r6,-8(fp)
    6380:	000630c0 	call	630c <_ZSt6fill_nIPimiET_S1_T0_RKT1_>
    6384:	e037883a 	mov	sp,fp
    6388:	dfc00117 	ldw	ra,4(sp)
    638c:	df000017 	ldw	fp,0(sp)
    6390:	dec00204 	addi	sp,sp,8
    6394:	f800283a 	ret

00006398 <_ZSt20uninitialized_fill_nIPimiEvT_T0_RKT1_>:
   *
   *  Like fill_n(), but does not require an initialized output range.
  */
  template<typename _ForwardIterator, typename _Size, typename _Tp>
    inline void
    uninitialized_fill_n(_ForwardIterator __first, _Size __n, const _Tp& __x)
    6398:	defffa04 	addi	sp,sp,-24
    639c:	dfc00515 	stw	ra,20(sp)
    63a0:	df000415 	stw	fp,16(sp)
    63a4:	df000404 	addi	fp,sp,16
    63a8:	e13ffc15 	stw	r4,-16(fp)
    63ac:	e17ffd15 	stw	r5,-12(fp)
    63b0:	e1bffe15 	stw	r6,-8(fp)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type _ValueType;
      typedef typename std::__is_scalar<_ValueType>::__type _Is_POD;
      std::__uninitialized_fill_n_aux(__first, __n, __x, _Is_POD());
    63b4:	e13ffc17 	ldw	r4,-16(fp)
    63b8:	e17ffd17 	ldw	r5,-12(fp)
    63bc:	e1bffe17 	ldw	r6,-8(fp)
    63c0:	e1ffff03 	ldbu	r7,-4(fp)
    63c4:	00063540 	call	6354 <_ZSt26__uninitialized_fill_n_auxIPimiEvT_T0_RKT1_11__true_type>
    63c8:	e037883a 	mov	sp,fp
    63cc:	dfc00117 	ldw	ra,4(sp)
    63d0:	df000017 	ldw	fp,0(sp)
    63d4:	dec00204 	addi	sp,sp,8
    63d8:	f800283a 	ret

000063dc <_ZSt24__uninitialized_fill_n_aIPimiiEvT_T0_RKT1_SaIT2_E>:
  template<typename _ForwardIterator, typename _Size, typename _Tp,
	   typename _Tp2>
    void
    __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n, 
			     const _Tp& __x,
			     allocator<_Tp2>)
    63dc:	defffa04 	addi	sp,sp,-24
    63e0:	dfc00515 	stw	ra,20(sp)
    63e4:	df000415 	stw	fp,16(sp)
    63e8:	df000404 	addi	fp,sp,16
    63ec:	e13ffc15 	stw	r4,-16(fp)
    63f0:	e17ffd15 	stw	r5,-12(fp)
    63f4:	e1bffe15 	stw	r6,-8(fp)
    63f8:	e1ffff15 	stw	r7,-4(fp)
    {
      std::uninitialized_fill_n(__first, __n, __x);
    63fc:	e13ffc17 	ldw	r4,-16(fp)
    6400:	e17ffd17 	ldw	r5,-12(fp)
    6404:	e1bffe17 	ldw	r6,-8(fp)
    6408:	00063980 	call	6398 <_ZSt20uninitialized_fill_nIPimiEvT_T0_RKT1_>
    640c:	e037883a 	mov	sp,fp
    6410:	dfc00117 	ldw	ra,4(sp)
    6414:	df000017 	ldw	fp,0(sp)
    6418:	dec00204 	addi	sp,sp,8
    641c:	f800283a 	ret

00006420 <_ZN9__gnu_cxxneIPiSt6vectorIiSaIiEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>:
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    6420:	defffb04 	addi	sp,sp,-20
    6424:	dfc00415 	stw	ra,16(sp)
    6428:	df000315 	stw	fp,12(sp)
    642c:	dc000215 	stw	r16,8(sp)
    6430:	df000204 	addi	fp,sp,8
    6434:	e13ffe15 	stw	r4,-8(fp)
    6438:	e17fff15 	stw	r5,-4(fp)
    { return __lhs.base() != __rhs.base(); }
    643c:	e13ffe17 	ldw	r4,-8(fp)
    6440:	0005ec00 	call	5ec0 <_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEE4baseEv>
    6444:	14000017 	ldw	r16,0(r2)
    6448:	e13fff17 	ldw	r4,-4(fp)
    644c:	0005ec00 	call	5ec0 <_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEE4baseEv>
    6450:	10800017 	ldw	r2,0(r2)
    6454:	8084c03a 	cmpne	r2,r16,r2
    6458:	e037883a 	mov	sp,fp
    645c:	dfc00217 	ldw	ra,8(sp)
    6460:	df000117 	ldw	fp,4(sp)
    6464:	dc000017 	ldw	r16,0(sp)
    6468:	dec00304 	addi	sp,sp,12
    646c:	f800283a 	ret

00006470 <_ZN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEppEv>:
      pointer
      operator->() const
      { return _M_current; }

      __normal_iterator&
      operator++()
    6470:	defffe04 	addi	sp,sp,-8
    6474:	df000115 	stw	fp,4(sp)
    6478:	df000104 	addi	fp,sp,4
    647c:	e13fff15 	stw	r4,-4(fp)
      {
	++_M_current;
    6480:	e0bfff17 	ldw	r2,-4(fp)
    6484:	10800017 	ldw	r2,0(r2)
    6488:	10c00104 	addi	r3,r2,4
    648c:	e0bfff17 	ldw	r2,-4(fp)
    6490:	10c00015 	stw	r3,0(r2)
	return *this;
    6494:	e0bfff17 	ldw	r2,-4(fp)
    6498:	e037883a 	mov	sp,fp
    649c:	df000017 	ldw	fp,0(sp)
    64a0:	dec00104 	addi	sp,sp,4
    64a4:	f800283a 	ret

000064a8 <_ZNSt6__fillILb1EE4fillIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiEEvT_S9_RKT0_>:
    struct __fill<true>
    {
      template<typename _ForwardIterator, typename _Tp>
        static void
        fill(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
    64a8:	defffa04 	addi	sp,sp,-24
    64ac:	dfc00515 	stw	ra,20(sp)
    64b0:	df000415 	stw	fp,16(sp)
    64b4:	df000404 	addi	fp,sp,16
    64b8:	e13ffd15 	stw	r4,-12(fp)
    64bc:	e17ffe15 	stw	r5,-8(fp)
    64c0:	e1bfff15 	stw	r6,-4(fp)
        {
	  const _Tp __tmp = __value;
    64c4:	e0bfff17 	ldw	r2,-4(fp)
    64c8:	10800017 	ldw	r2,0(r2)
    64cc:	e0bffc15 	stw	r2,-16(fp)
	  for (; __first != __last; ++__first)
    64d0:	00000706 	br	64f0 <_ZNSt6__fillILb1EE4fillIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiEEvT_S9_RKT0_+0x48>
	    *__first = __tmp;
    64d4:	e13ffd04 	addi	r4,fp,-12
    64d8:	00059b80 	call	59b8 <_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEdeEv>
    64dc:	1007883a 	mov	r3,r2
    64e0:	e0bffc17 	ldw	r2,-16(fp)
    64e4:	18800015 	stw	r2,0(r3)
        static void
        fill(_ForwardIterator __first, _ForwardIterator __last,
	     const _Tp& __value)
        {
	  const _Tp __tmp = __value;
	  for (; __first != __last; ++__first)
    64e8:	e13ffd04 	addi	r4,fp,-12
    64ec:	00064700 	call	6470 <_ZN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEppEv>
    64f0:	e13ffd04 	addi	r4,fp,-12
    64f4:	e17ffe04 	addi	r5,fp,-8
    64f8:	00064200 	call	6420 <_ZN9__gnu_cxxneIPiSt6vectorIiSaIiEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
    64fc:	10803fcc 	andi	r2,r2,255
    6500:	1004c03a 	cmpne	r2,r2,zero
    6504:	103ff31e 	bne	r2,zero,64d4 <_ZNSt6__fillILb1EE4fillIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiEEvT_S9_RKT0_+0x2c>
	    *__first = __tmp;
    6508:	e037883a 	mov	sp,fp
    650c:	dfc00117 	ldw	ra,4(sp)
    6510:	df000017 	ldw	fp,0(sp)
    6514:	dec00204 	addi	sp,sp,8
    6518:	f800283a 	ret

0000651c <_ZSt4fillIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiEvT_S7_RKT0_>:
   *  types filling contiguous areas of memory, this becomes an inline call to
   *  @c memset.
  */
  template<typename _ForwardIterator, typename _Tp>
    void
    fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)
    651c:	defffa04 	addi	sp,sp,-24
    6520:	dfc00515 	stw	ra,20(sp)
    6524:	df000415 	stw	fp,16(sp)
    6528:	df000404 	addi	fp,sp,16
    652c:	e13ffd15 	stw	r4,-12(fp)
    6530:	e17ffe15 	stw	r5,-8(fp)
    6534:	e1bfff15 	stw	r6,-4(fp)
      // concept requirements
      __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
				  _ForwardIterator>)
      __glibcxx_requires_valid_range(__first, __last);

      const bool __scalar = __is_scalar<_Tp>::__value;
    6538:	00800044 	movi	r2,1
    653c:	e0bffc05 	stb	r2,-16(fp)
      std::__fill<__scalar>::fill(__first, __last, __value);
    6540:	e13ffd17 	ldw	r4,-12(fp)
    6544:	e17ffe17 	ldw	r5,-8(fp)
    6548:	e1bfff17 	ldw	r6,-4(fp)
    654c:	00064a80 	call	64a8 <_ZNSt6__fillILb1EE4fillIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiEEvT_S9_RKT0_>
    6550:	e037883a 	mov	sp,fp
    6554:	dfc00117 	ldw	ra,4(sp)
    6558:	df000017 	ldw	fp,0(sp)
    655c:	dec00204 	addi	sp,sp,8
    6560:	f800283a 	ret

00006564 <_ZNSt8__fill_nILb1EE6fill_nIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEmiEET_S9_T0_RKT1_>:
  template<>
    struct __fill_n<true>
    {
      template<typename _OutputIterator, typename _Size, typename _Tp>
        static _OutputIterator
        fill_n(_OutputIterator __first, _Size __n, const _Tp& __value)
    6564:	defffa04 	addi	sp,sp,-24
    6568:	dfc00515 	stw	ra,20(sp)
    656c:	df000415 	stw	fp,16(sp)
    6570:	df000404 	addi	fp,sp,16
    6574:	e13ffd15 	stw	r4,-12(fp)
    6578:	e17ffe15 	stw	r5,-8(fp)
    657c:	e1bfff15 	stw	r6,-4(fp)
        {
	  const _Tp __tmp = __value;
    6580:	e0bfff17 	ldw	r2,-4(fp)
    6584:	10800017 	ldw	r2,0(r2)
    6588:	e0bffc15 	stw	r2,-16(fp)
	  for (; __n > 0; --__n, ++__first)
    658c:	00000a06 	br	65b8 <_ZNSt8__fill_nILb1EE6fill_nIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEmiEET_S9_T0_RKT1_+0x54>
	    *__first = __tmp;
    6590:	e13ffd04 	addi	r4,fp,-12
    6594:	00059b80 	call	59b8 <_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEdeEv>
    6598:	1007883a 	mov	r3,r2
    659c:	e0bffc17 	ldw	r2,-16(fp)
    65a0:	18800015 	stw	r2,0(r3)
      template<typename _OutputIterator, typename _Size, typename _Tp>
        static _OutputIterator
        fill_n(_OutputIterator __first, _Size __n, const _Tp& __value)
        {
	  const _Tp __tmp = __value;
	  for (; __n > 0; --__n, ++__first)
    65a4:	e0bffe17 	ldw	r2,-8(fp)
    65a8:	10bfffc4 	addi	r2,r2,-1
    65ac:	e0bffe15 	stw	r2,-8(fp)
    65b0:	e13ffd04 	addi	r4,fp,-12
    65b4:	00064700 	call	6470 <_ZN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEppEv>
    65b8:	e0bffe17 	ldw	r2,-8(fp)
    65bc:	1004c03a 	cmpne	r2,r2,zero
    65c0:	103ff31e 	bne	r2,zero,6590 <_ZNSt8__fill_nILb1EE6fill_nIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEmiEET_S9_T0_RKT1_+0x2c>
	    *__first = __tmp;
	  return __first;	  
    65c4:	e0bffd17 	ldw	r2,-12(fp)
    65c8:	e037883a 	mov	sp,fp
    65cc:	dfc00117 	ldw	ra,4(sp)
    65d0:	df000017 	ldw	fp,0(sp)
    65d4:	dec00204 	addi	sp,sp,8
    65d8:	f800283a 	ret

000065dc <_ZSt6fill_nIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEmiET_S7_T0_RKT1_>:
   *  types filling contiguous areas of memory, this becomes an inline call to
   *  @c memset.
  */
  template<typename _OutputIterator, typename _Size, typename _Tp>
    _OutputIterator
    fill_n(_OutputIterator __first, _Size __n, const _Tp& __value)
    65dc:	defffa04 	addi	sp,sp,-24
    65e0:	dfc00515 	stw	ra,20(sp)
    65e4:	df000415 	stw	fp,16(sp)
    65e8:	df000404 	addi	fp,sp,16
    65ec:	e13ffd15 	stw	r4,-12(fp)
    65f0:	e17ffe15 	stw	r5,-8(fp)
    65f4:	e1bfff15 	stw	r6,-4(fp)
    {
      // concept requirements
      __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator, _Tp>)

      const bool __scalar = __is_scalar<_Tp>::__value;
    65f8:	00800044 	movi	r2,1
    65fc:	e0bffc05 	stb	r2,-16(fp)
      return std::__fill_n<__scalar>::fill_n(__first, __n, __value);
    6600:	e13ffd17 	ldw	r4,-12(fp)
    6604:	e17ffe17 	ldw	r5,-8(fp)
    6608:	e1bfff17 	ldw	r6,-4(fp)
    660c:	00065640 	call	6564 <_ZNSt8__fill_nILb1EE6fill_nIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEmiEET_S9_T0_RKT1_>
    6610:	e037883a 	mov	sp,fp
    6614:	dfc00117 	ldw	ra,4(sp)
    6618:	df000017 	ldw	fp,0(sp)
    661c:	dec00204 	addi	sp,sp,8
    6620:	f800283a 	ret

00006624 <_ZSt26__uninitialized_fill_n_auxIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEmiEvT_T0_RKT1_11__true_type>:
  // Valid if copy construction is equivalent to assignment, and if the
  //  destructor is trivial.
  template<typename _ForwardIterator, typename _Size, typename _Tp>
    inline void
    __uninitialized_fill_n_aux(_ForwardIterator __first, _Size __n,
			       const _Tp& __x, __true_type)
    6624:	defffa04 	addi	sp,sp,-24
    6628:	dfc00515 	stw	ra,20(sp)
    662c:	df000415 	stw	fp,16(sp)
    6630:	df000404 	addi	fp,sp,16
    6634:	e13ffc15 	stw	r4,-16(fp)
    6638:	e17ffd15 	stw	r5,-12(fp)
    663c:	e1bffe15 	stw	r6,-8(fp)
    6640:	e1ffff05 	stb	r7,-4(fp)
    { std::fill_n(__first, __n, __x); }
    6644:	e13ffc17 	ldw	r4,-16(fp)
    6648:	e17ffd17 	ldw	r5,-12(fp)
    664c:	e1bffe17 	ldw	r6,-8(fp)
    6650:	00065dc0 	call	65dc <_ZSt6fill_nIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEmiET_S7_T0_RKT1_>
    6654:	e037883a 	mov	sp,fp
    6658:	dfc00117 	ldw	ra,4(sp)
    665c:	df000017 	ldw	fp,0(sp)
    6660:	dec00204 	addi	sp,sp,8
    6664:	f800283a 	ret

00006668 <_ZSt20uninitialized_fill_nIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEmiEvT_T0_RKT1_>:
   *
   *  Like fill_n(), but does not require an initialized output range.
  */
  template<typename _ForwardIterator, typename _Size, typename _Tp>
    inline void
    uninitialized_fill_n(_ForwardIterator __first, _Size __n, const _Tp& __x)
    6668:	defffa04 	addi	sp,sp,-24
    666c:	dfc00515 	stw	ra,20(sp)
    6670:	df000415 	stw	fp,16(sp)
    6674:	df000404 	addi	fp,sp,16
    6678:	e13ffc15 	stw	r4,-16(fp)
    667c:	e17ffd15 	stw	r5,-12(fp)
    6680:	e1bffe15 	stw	r6,-8(fp)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type _ValueType;
      typedef typename std::__is_scalar<_ValueType>::__type _Is_POD;
      std::__uninitialized_fill_n_aux(__first, __n, __x, _Is_POD());
    6684:	e13ffc17 	ldw	r4,-16(fp)
    6688:	e17ffd17 	ldw	r5,-12(fp)
    668c:	e1bffe17 	ldw	r6,-8(fp)
    6690:	e1ffff03 	ldbu	r7,-4(fp)
    6694:	00066240 	call	6624 <_ZSt26__uninitialized_fill_n_auxIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEmiEvT_T0_RKT1_11__true_type>
    6698:	e037883a 	mov	sp,fp
    669c:	dfc00117 	ldw	ra,4(sp)
    66a0:	df000017 	ldw	fp,0(sp)
    66a4:	dec00204 	addi	sp,sp,8
    66a8:	f800283a 	ret

000066ac <_ZSt24__uninitialized_fill_n_aIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEmiiEvT_T0_RKT1_SaIT2_E>:
  template<typename _ForwardIterator, typename _Size, typename _Tp,
	   typename _Tp2>
    void
    __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n, 
			     const _Tp& __x,
			     allocator<_Tp2>)
    66ac:	defffa04 	addi	sp,sp,-24
    66b0:	dfc00515 	stw	ra,20(sp)
    66b4:	df000415 	stw	fp,16(sp)
    66b8:	df000404 	addi	fp,sp,16
    66bc:	e13ffc15 	stw	r4,-16(fp)
    66c0:	e17ffd15 	stw	r5,-12(fp)
    66c4:	e1bffe15 	stw	r6,-8(fp)
    66c8:	e1ffff15 	stw	r7,-4(fp)
    {
      std::uninitialized_fill_n(__first, __n, __x);
    66cc:	e13ffc17 	ldw	r4,-16(fp)
    66d0:	e17ffd17 	ldw	r5,-12(fp)
    66d4:	e1bffe17 	ldw	r6,-8(fp)
    66d8:	00066680 	call	6668 <_ZSt20uninitialized_fill_nIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEmiEvT_T0_RKT1_>
    66dc:	e037883a 	mov	sp,fp
    66e0:	dfc00117 	ldw	ra,4(sp)
    66e4:	df000017 	ldw	fp,0(sp)
    66e8:	dec00204 	addi	sp,sp,8
    66ec:	f800283a 	ret

000066f0 <_ZN9__gnu_cxx13new_allocatorIiE8allocateEmPKv>:
      address(const_reference __x) const { return &__x; }

      // NB: __n is permitted to be 0.  The C++ standard says nothing
      // about what the return value is when __n == 0.
      pointer
      allocate(size_type __n, const void* = 0)
    66f0:	defffb04 	addi	sp,sp,-20
    66f4:	dfc00415 	stw	ra,16(sp)
    66f8:	df000315 	stw	fp,12(sp)
    66fc:	df000304 	addi	fp,sp,12
    6700:	e13ffd15 	stw	r4,-12(fp)
    6704:	e17ffe15 	stw	r5,-8(fp)
    6708:	e1bfff15 	stw	r6,-4(fp)
      { 
	if (__builtin_expect(__n > this->max_size(), false))
    670c:	e13ffd17 	ldw	r4,-12(fp)
    6710:	00061d80 	call	61d8 <_ZNK9__gnu_cxx13new_allocatorIiE8max_sizeEv>
    6714:	1007883a 	mov	r3,r2
    6718:	e0bffe17 	ldw	r2,-8(fp)
    671c:	1885803a 	cmpltu	r2,r3,r2
    6720:	1004c03a 	cmpne	r2,r2,zero
    6724:	10803fcc 	andi	r2,r2,255
    6728:	1005003a 	cmpeq	r2,r2,zero
    672c:	1000011e 	bne	r2,zero,6734 <_ZN9__gnu_cxx13new_allocatorIiE8allocateEmPKv+0x44>
	  std::__throw_bad_alloc();
    6730:	0007a340 	call	7a34 <_ZSt17__throw_bad_allocv>

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    6734:	e0bffe17 	ldw	r2,-8(fp)
    6738:	1085883a 	add	r2,r2,r2
    673c:	1085883a 	add	r2,r2,r2
    6740:	1009883a 	mov	r4,r2
    6744:	000ed700 	call	ed70 <_Znwm>
    6748:	e037883a 	mov	sp,fp
    674c:	dfc00117 	ldw	ra,4(sp)
    6750:	df000017 	ldw	fp,0(sp)
    6754:	dec00204 	addi	sp,sp,8
    6758:	f800283a 	ret

0000675c <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEm>:

    public:
      _Vector_impl _M_impl;

      _Tp*
      _M_allocate(size_t __n)
    675c:	defffc04 	addi	sp,sp,-16
    6760:	dfc00315 	stw	ra,12(sp)
    6764:	df000215 	stw	fp,8(sp)
    6768:	df000204 	addi	fp,sp,8
    676c:	e13ffe15 	stw	r4,-8(fp)
    6770:	e17fff15 	stw	r5,-4(fp)
      { return _M_impl.allocate(__n); }
    6774:	e0bffe17 	ldw	r2,-8(fp)
    6778:	1009883a 	mov	r4,r2
    677c:	e17fff17 	ldw	r5,-4(fp)
    6780:	000d883a 	mov	r6,zero
    6784:	00066f00 	call	66f0 <_ZN9__gnu_cxx13new_allocatorIiE8allocateEmPKv>
    6788:	e037883a 	mov	sp,fp
    678c:	dfc00117 	ldw	ra,4(sp)
    6790:	df000017 	ldw	fp,0(sp)
    6794:	dec00204 	addi	sp,sp,8
    6798:	f800283a 	ret

0000679c <_ZNSt12_Vector_baseIiSaIiEEC2EmRKS0_>:

      _Vector_base(const allocator_type& __a)
      : _M_impl(__a)
      { }

      _Vector_base(size_t __n, const allocator_type& __a)
    679c:	deffe404 	addi	sp,sp,-112
    67a0:	dfc01b15 	stw	ra,108(sp)
    67a4:	df001a15 	stw	fp,104(sp)
    67a8:	ddc01915 	stw	r23,100(sp)
    67ac:	dd801815 	stw	r22,96(sp)
    67b0:	dd401715 	stw	r21,92(sp)
    67b4:	dd001615 	stw	r20,88(sp)
    67b8:	dcc01515 	stw	r19,84(sp)
    67bc:	dc801415 	stw	r18,80(sp)
    67c0:	dc401315 	stw	r17,76(sp)
    67c4:	dc001215 	stw	r16,72(sp)
    67c8:	df001204 	addi	fp,sp,72
    67cc:	e13fee15 	stw	r4,-72(fp)
    67d0:	e17fef15 	stw	r5,-68(fp)
    67d4:	e1bff015 	stw	r6,-64(fp)
    67d8:	00800074 	movhi	r2,1
    67dc:	10b95604 	addi	r2,r2,-6824
    67e0:	e0bff715 	stw	r2,-36(fp)
    67e4:	008000b4 	movhi	r2,2
    67e8:	10b90d84 	addi	r2,r2,-7114
    67ec:	e0bff815 	stw	r2,-32(fp)
    67f0:	e0bff904 	addi	r2,fp,-28
    67f4:	e0ffee04 	addi	r3,fp,-72
    67f8:	10c00015 	stw	r3,0(r2)
    67fc:	00c00034 	movhi	r3,0
    6800:	18da1d04 	addi	r3,r3,26740
    6804:	10c00115 	stw	r3,4(r2)
    6808:	16c00215 	stw	sp,8(r2)
    680c:	e13ff104 	addi	r4,fp,-60
    6810:	00108500 	call	10850 <_Unwind_SjLj_Register>
      : _M_impl(__a)
    6814:	e13fee17 	ldw	r4,-72(fp)
    6818:	e17ff017 	ldw	r5,-64(fp)
    681c:	0005a800 	call	5a80 <_ZNSt12_Vector_baseIiSaIiEE12_Vector_implC1ERKS0_>
      {
	this->_M_impl._M_start = this->_M_allocate(__n);
    6820:	00800044 	movi	r2,1
    6824:	e0bff215 	stw	r2,-56(fp)
    6828:	e13fee17 	ldw	r4,-72(fp)
    682c:	e17fef17 	ldw	r5,-68(fp)
    6830:	000675c0 	call	675c <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEm>
    6834:	1007883a 	mov	r3,r2
    6838:	e0bfee17 	ldw	r2,-72(fp)
    683c:	10c00015 	stw	r3,0(r2)
	this->_M_impl._M_finish = this->_M_impl._M_start;
    6840:	e0bfee17 	ldw	r2,-72(fp)
    6844:	10c00017 	ldw	r3,0(r2)
    6848:	e0bfee17 	ldw	r2,-72(fp)
    684c:	10c00115 	stw	r3,4(r2)
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    6850:	e0bfee17 	ldw	r2,-72(fp)
    6854:	10c00017 	ldw	r3,0(r2)
    6858:	e0bfef17 	ldw	r2,-68(fp)
    685c:	1085883a 	add	r2,r2,r2
    6860:	1085883a 	add	r2,r2,r2
    6864:	1887883a 	add	r3,r3,r2
    6868:	e0bfee17 	ldw	r2,-72(fp)
    686c:	10c00215 	stw	r3,8(r2)
    6870:	00000d06 	br	68a8 <_ZNSt12_Vector_baseIiSaIiEEC2EmRKS0_+0x10c>
    6874:	e7001204 	addi	fp,fp,72
    6878:	e0bff317 	ldw	r2,-52(fp)
    687c:	e0bfff15 	stw	r2,-4(fp)
    6880:	e0ffff17 	ldw	r3,-4(fp)
    6884:	e0fffe15 	stw	r3,-8(fp)
    6888:	e13fee17 	ldw	r4,-72(fp)
    688c:	00059640 	call	5964 <_ZNSt12_Vector_baseIiSaIiEE12_Vector_implD1Ev>
    6890:	e0bffe17 	ldw	r2,-8(fp)
    6894:	e0bfff15 	stw	r2,-4(fp)
    6898:	00bfffc4 	movi	r2,-1
    689c:	e0bff215 	stw	r2,-56(fp)
    68a0:	e13fff17 	ldw	r4,-4(fp)
    68a4:	0010b1c0 	call	10b1c <_Unwind_SjLj_Resume>
    68a8:	e13ff104 	addi	r4,fp,-60
    68ac:	00108600 	call	10860 <_Unwind_SjLj_Unregister>
    68b0:	e037883a 	mov	sp,fp
    68b4:	dfc00917 	ldw	ra,36(sp)
    68b8:	df000817 	ldw	fp,32(sp)
    68bc:	ddc00717 	ldw	r23,28(sp)
    68c0:	dd800617 	ldw	r22,24(sp)
    68c4:	dd400517 	ldw	r21,20(sp)
    68c8:	dd000417 	ldw	r20,16(sp)
    68cc:	dcc00317 	ldw	r19,12(sp)
    68d0:	dc800217 	ldw	r18,8(sp)
    68d4:	dc400117 	ldw	r17,4(sp)
    68d8:	dc000017 	ldw	r16,0(sp)
    68dc:	dec00a04 	addi	sp,sp,40
    68e0:	f800283a 	ret

000068e4 <_ZNSt12_Vector_baseI6MyRectSaIS0_EEC2EmRKS1_>:

      _Vector_base(const allocator_type& __a)
      : _M_impl(__a)
      { }

      _Vector_base(size_t __n, const allocator_type& __a)
    68e4:	deffe404 	addi	sp,sp,-112
    68e8:	dfc01b15 	stw	ra,108(sp)
    68ec:	df001a15 	stw	fp,104(sp)
    68f0:	ddc01915 	stw	r23,100(sp)
    68f4:	dd801815 	stw	r22,96(sp)
    68f8:	dd401715 	stw	r21,92(sp)
    68fc:	dd001615 	stw	r20,88(sp)
    6900:	dcc01515 	stw	r19,84(sp)
    6904:	dc801415 	stw	r18,80(sp)
    6908:	dc401315 	stw	r17,76(sp)
    690c:	dc001215 	stw	r16,72(sp)
    6910:	df001204 	addi	fp,sp,72
    6914:	e13fee15 	stw	r4,-72(fp)
    6918:	e17fef15 	stw	r5,-68(fp)
    691c:	e1bff015 	stw	r6,-64(fp)
    6920:	00800074 	movhi	r2,1
    6924:	10b95604 	addi	r2,r2,-6824
    6928:	e0bff715 	stw	r2,-36(fp)
    692c:	008000b4 	movhi	r2,2
    6930:	10b90f04 	addi	r2,r2,-7108
    6934:	e0bff815 	stw	r2,-32(fp)
    6938:	e0bff904 	addi	r2,fp,-28
    693c:	e0ffee04 	addi	r3,fp,-72
    6940:	10c00015 	stw	r3,0(r2)
    6944:	00c00034 	movhi	r3,0
    6948:	18da6e04 	addi	r3,r3,27064
    694c:	10c00115 	stw	r3,4(r2)
    6950:	16c00215 	stw	sp,8(r2)
    6954:	e13ff104 	addi	r4,fp,-60
    6958:	00108500 	call	10850 <_Unwind_SjLj_Register>
      : _M_impl(__a)
    695c:	e13fee17 	ldw	r4,-72(fp)
    6960:	e17ff017 	ldw	r5,-64(fp)
    6964:	0002b780 	call	2b78 <_ZNSt12_Vector_baseI6MyRectSaIS0_EE12_Vector_implC1ERKS1_>
      {
	this->_M_impl._M_start = this->_M_allocate(__n);
    6968:	00800044 	movi	r2,1
    696c:	e0bff215 	stw	r2,-56(fp)
    6970:	e13fee17 	ldw	r4,-72(fp)
    6974:	e17fef17 	ldw	r5,-68(fp)
    6978:	00035300 	call	3530 <_ZNSt12_Vector_baseI6MyRectSaIS0_EE11_M_allocateEm>
    697c:	1007883a 	mov	r3,r2
    6980:	e0bfee17 	ldw	r2,-72(fp)
    6984:	10c00015 	stw	r3,0(r2)
	this->_M_impl._M_finish = this->_M_impl._M_start;
    6988:	e0bfee17 	ldw	r2,-72(fp)
    698c:	10c00017 	ldw	r3,0(r2)
    6990:	e0bfee17 	ldw	r2,-72(fp)
    6994:	10c00115 	stw	r3,4(r2)
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    6998:	e0bfee17 	ldw	r2,-72(fp)
    699c:	10c00017 	ldw	r3,0(r2)
    69a0:	e0bfef17 	ldw	r2,-68(fp)
    69a4:	1004913a 	slli	r2,r2,4
    69a8:	1887883a 	add	r3,r3,r2
    69ac:	e0bfee17 	ldw	r2,-72(fp)
    69b0:	10c00215 	stw	r3,8(r2)
    69b4:	00000d06 	br	69ec <_ZNSt12_Vector_baseI6MyRectSaIS0_EEC2EmRKS1_+0x108>
    69b8:	e7001204 	addi	fp,fp,72
    69bc:	e0bff317 	ldw	r2,-52(fp)
    69c0:	e0bfff15 	stw	r2,-4(fp)
    69c4:	e0ffff17 	ldw	r3,-4(fp)
    69c8:	e0fffe15 	stw	r3,-8(fp)
    69cc:	e13fee17 	ldw	r4,-72(fp)
    69d0:	0002aa40 	call	2aa4 <_ZNSt12_Vector_baseI6MyRectSaIS0_EE12_Vector_implD1Ev>
    69d4:	e0bffe17 	ldw	r2,-8(fp)
    69d8:	e0bfff15 	stw	r2,-4(fp)
    69dc:	00bfffc4 	movi	r2,-1
    69e0:	e0bff215 	stw	r2,-56(fp)
    69e4:	e13fff17 	ldw	r4,-4(fp)
    69e8:	0010b1c0 	call	10b1c <_Unwind_SjLj_Resume>
    69ec:	e13ff104 	addi	r4,fp,-60
    69f0:	00108600 	call	10860 <_Unwind_SjLj_Unregister>
    69f4:	e037883a 	mov	sp,fp
    69f8:	dfc00917 	ldw	ra,36(sp)
    69fc:	df000817 	ldw	fp,32(sp)
    6a00:	ddc00717 	ldw	r23,28(sp)
    6a04:	dd800617 	ldw	r22,24(sp)
    6a08:	dd400517 	ldw	r21,20(sp)
    6a0c:	dd000417 	ldw	r20,16(sp)
    6a10:	dcc00317 	ldw	r19,12(sp)
    6a14:	dc800217 	ldw	r18,8(sp)
    6a18:	dc400117 	ldw	r17,4(sp)
    6a1c:	dc000017 	ldw	r16,0(sp)
    6a20:	dec00a04 	addi	sp,sp,40
    6a24:	f800283a 	ret

00006a28 <_ZN9__gnu_cxx13new_allocatorIiE10deallocateEPim>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
    6a28:	defffb04 	addi	sp,sp,-20
    6a2c:	dfc00415 	stw	ra,16(sp)
    6a30:	df000315 	stw	fp,12(sp)
    6a34:	df000304 	addi	fp,sp,12
    6a38:	e13ffd15 	stw	r4,-12(fp)
    6a3c:	e17ffe15 	stw	r5,-8(fp)
    6a40:	e1bfff15 	stw	r6,-4(fp)
      { ::operator delete(__p); }
    6a44:	e13ffe17 	ldw	r4,-8(fp)
    6a48:	000de400 	call	de40 <_ZdlPv>
    6a4c:	e037883a 	mov	sp,fp
    6a50:	dfc00117 	ldw	ra,4(sp)
    6a54:	df000017 	ldw	fp,0(sp)
    6a58:	dec00204 	addi	sp,sp,8
    6a5c:	f800283a 	ret

00006a60 <_ZNSt12_Vector_baseIiSaIiEE13_M_deallocateEPim>:
      _Tp*
      _M_allocate(size_t __n)
      { return _M_impl.allocate(__n); }

      void
      _M_deallocate(_Tp* __p, size_t __n)
    6a60:	defffb04 	addi	sp,sp,-20
    6a64:	dfc00415 	stw	ra,16(sp)
    6a68:	df000315 	stw	fp,12(sp)
    6a6c:	df000304 	addi	fp,sp,12
    6a70:	e13ffd15 	stw	r4,-12(fp)
    6a74:	e17ffe15 	stw	r5,-8(fp)
    6a78:	e1bfff15 	stw	r6,-4(fp)
      {
	if (__p)
    6a7c:	e0bffe17 	ldw	r2,-8(fp)
    6a80:	1005003a 	cmpeq	r2,r2,zero
    6a84:	1000051e 	bne	r2,zero,6a9c <_ZNSt12_Vector_baseIiSaIiEE13_M_deallocateEPim+0x3c>
	  _M_impl.deallocate(__p, __n);
    6a88:	e0bffd17 	ldw	r2,-12(fp)
    6a8c:	1009883a 	mov	r4,r2
    6a90:	e17ffe17 	ldw	r5,-8(fp)
    6a94:	e1bfff17 	ldw	r6,-4(fp)
    6a98:	0006a280 	call	6a28 <_ZN9__gnu_cxx13new_allocatorIiE10deallocateEPim>
    6a9c:	e037883a 	mov	sp,fp
    6aa0:	dfc00117 	ldw	ra,4(sp)
    6aa4:	df000017 	ldw	fp,0(sp)
    6aa8:	dec00204 	addi	sp,sp,8
    6aac:	f800283a 	ret

00006ab0 <_ZNSt12_Vector_baseIiSaIiEED2Ev>:
	this->_M_impl._M_start = this->_M_allocate(__n);
	this->_M_impl._M_finish = this->_M_impl._M_start;
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
      }

      ~_Vector_base()
    6ab0:	defffd04 	addi	sp,sp,-12
    6ab4:	dfc00215 	stw	ra,8(sp)
    6ab8:	df000115 	stw	fp,4(sp)
    6abc:	df000104 	addi	fp,sp,4
    6ac0:	e13fff15 	stw	r4,-4(fp)
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
    6ac4:	e0bfff17 	ldw	r2,-4(fp)
    6ac8:	11400017 	ldw	r5,0(r2)
    6acc:	e0bfff17 	ldw	r2,-4(fp)
    6ad0:	10800217 	ldw	r2,8(r2)
    6ad4:	1007883a 	mov	r3,r2
    6ad8:	e0bfff17 	ldw	r2,-4(fp)
    6adc:	10800017 	ldw	r2,0(r2)
    6ae0:	1885c83a 	sub	r2,r3,r2
    6ae4:	1005d0ba 	srai	r2,r2,2
    6ae8:	100d883a 	mov	r6,r2
    6aec:	e13fff17 	ldw	r4,-4(fp)
    6af0:	0006a600 	call	6a60 <_ZNSt12_Vector_baseIiSaIiEE13_M_deallocateEPim>
    6af4:	e13fff17 	ldw	r4,-4(fp)
    6af8:	00059640 	call	5964 <_ZNSt12_Vector_baseIiSaIiEE12_Vector_implD1Ev>
    6afc:	e037883a 	mov	sp,fp
    6b00:	dfc00117 	ldw	ra,4(sp)
    6b04:	df000017 	ldw	fp,0(sp)
    6b08:	dec00204 	addi	sp,sp,8
    6b0c:	f800283a 	ret

00006b10 <_ZNSt6vectorIiSaIiEEC1EmRKiRKS0_>:
       *
       *  This constructor fills the %vector with @a n copies of @a value.
       */
      explicit
      vector(size_type __n, const value_type& __value = value_type(),
	     const allocator_type& __a = allocator_type())
    6b10:	defff804 	addi	sp,sp,-32
    6b14:	dfc00715 	stw	ra,28(sp)
    6b18:	df000615 	stw	fp,24(sp)
    6b1c:	dc000515 	stw	r16,20(sp)
    6b20:	df000504 	addi	fp,sp,20
    6b24:	e13ffc15 	stw	r4,-16(fp)
    6b28:	e17ffd15 	stw	r5,-12(fp)
    6b2c:	e1bffe15 	stw	r6,-8(fp)
    6b30:	e1ffff15 	stw	r7,-4(fp)
      : _Base(__n, __a)
    6b34:	e13ffc17 	ldw	r4,-16(fp)
    6b38:	e17ffd17 	ldw	r5,-12(fp)
    6b3c:	e1bfff17 	ldw	r6,-4(fp)
    6b40:	000679c0 	call	679c <_ZNSt12_Vector_baseIiSaIiEEC2EmRKS0_>
      {
	std::__uninitialized_fill_n_a(this->_M_impl._M_start, __n, __value,
    6b44:	e0bffc17 	ldw	r2,-16(fp)
    6b48:	14000017 	ldw	r16,0(r2)
    6b4c:	e13ffc17 	ldw	r4,-16(fp)
    6b50:	00059940 	call	5994 <_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv>
    6b54:	100b883a 	mov	r5,r2
    6b58:	e13ffb04 	addi	r4,fp,-20
    6b5c:	000592c0 	call	592c <_ZNSaIiEC1ERKS_>
    6b60:	8009883a 	mov	r4,r16
    6b64:	e17ffd17 	ldw	r5,-12(fp)
    6b68:	e1bffe17 	ldw	r6,-8(fp)
    6b6c:	e1fffb04 	addi	r7,fp,-20
    6b70:	00063dc0 	call	63dc <_ZSt24__uninitialized_fill_n_aIPimiiEvT_T0_RKT1_SaIT2_E>
    6b74:	e13ffb04 	addi	r4,fp,-20
    6b78:	00058a00 	call	58a0 <_ZNSaIiED1Ev>
				      _M_get_Tp_allocator());
	this->_M_impl._M_finish = this->_M_impl._M_start + __n;
    6b7c:	e0bffc17 	ldw	r2,-16(fp)
    6b80:	10c00017 	ldw	r3,0(r2)
    6b84:	e0bffd17 	ldw	r2,-12(fp)
    6b88:	1085883a 	add	r2,r2,r2
    6b8c:	1085883a 	add	r2,r2,r2
    6b90:	1887883a 	add	r3,r3,r2
    6b94:	e0bffc17 	ldw	r2,-16(fp)
    6b98:	10c00115 	stw	r3,4(r2)
    6b9c:	e037883a 	mov	sp,fp
    6ba0:	dfc00217 	ldw	ra,8(sp)
    6ba4:	df000117 	ldw	fp,4(sp)
    6ba8:	dc000017 	ldw	r16,0(sp)
    6bac:	dec00304 	addi	sp,sp,12
    6bb0:	f800283a 	ret

00006bb4 <_ZNSt6vectorIiSaIiEED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibilty.
       */
      ~vector()
    6bb4:	defffa04 	addi	sp,sp,-24
    6bb8:	dfc00515 	stw	ra,20(sp)
    6bbc:	df000415 	stw	fp,16(sp)
    6bc0:	dc400315 	stw	r17,12(sp)
    6bc4:	dc000215 	stw	r16,8(sp)
    6bc8:	df000204 	addi	fp,sp,8
    6bcc:	e13fff15 	stw	r4,-4(fp)
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    6bd0:	e0bfff17 	ldw	r2,-4(fp)
    6bd4:	14000017 	ldw	r16,0(r2)
    6bd8:	e0bfff17 	ldw	r2,-4(fp)
    6bdc:	14400117 	ldw	r17,4(r2)
    6be0:	e13fff17 	ldw	r4,-4(fp)
    6be4:	00059940 	call	5994 <_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv>
    6be8:	100b883a 	mov	r5,r2
    6bec:	e13ffe04 	addi	r4,fp,-8
    6bf0:	000592c0 	call	592c <_ZNSaIiEC1ERKS_>
    6bf4:	8009883a 	mov	r4,r16
    6bf8:	880b883a 	mov	r5,r17
    6bfc:	e1bffe04 	addi	r6,fp,-8
    6c00:	0005e840 	call	5e84 <_ZSt8_DestroyIPiiEvT_S1_SaIT0_E>
    6c04:	e13ffe04 	addi	r4,fp,-8
    6c08:	00058a00 	call	58a0 <_ZNSaIiED1Ev>
    6c0c:	e13fff17 	ldw	r4,-4(fp)
    6c10:	0006ab00 	call	6ab0 <_ZNSt12_Vector_baseIiSaIiEED2Ev>
    6c14:	e037883a 	mov	sp,fp
    6c18:	dfc00317 	ldw	ra,12(sp)
    6c1c:	df000217 	ldw	fp,8(sp)
    6c20:	dc400117 	ldw	r17,4(sp)
    6c24:	dc000017 	ldw	r16,0(sp)
    6c28:	dec00404 	addi	sp,sp,16
    6c2c:	f800283a 	ret

00006c30 <_ZNSt6vectorI6MyRectSaIS0_EEC1EmRKS0_RKS1_>:
       *
       *  This constructor fills the %vector with @a n copies of @a value.
       */
      explicit
      vector(size_type __n, const value_type& __value = value_type(),
	     const allocator_type& __a = allocator_type())
    6c30:	defff804 	addi	sp,sp,-32
    6c34:	dfc00715 	stw	ra,28(sp)
    6c38:	df000615 	stw	fp,24(sp)
    6c3c:	dc000515 	stw	r16,20(sp)
    6c40:	df000504 	addi	fp,sp,20
    6c44:	e13ffc15 	stw	r4,-16(fp)
    6c48:	e17ffd15 	stw	r5,-12(fp)
    6c4c:	e1bffe15 	stw	r6,-8(fp)
    6c50:	e1ffff15 	stw	r7,-4(fp)
      : _Base(__n, __a)
    6c54:	e13ffc17 	ldw	r4,-16(fp)
    6c58:	e17ffd17 	ldw	r5,-12(fp)
    6c5c:	e1bfff17 	ldw	r6,-4(fp)
    6c60:	00068e40 	call	68e4 <_ZNSt12_Vector_baseI6MyRectSaIS0_EEC2EmRKS1_>
      {
	std::__uninitialized_fill_n_a(this->_M_impl._M_start, __n, __value,
    6c64:	e0bffc17 	ldw	r2,-16(fp)
    6c68:	14000017 	ldw	r16,0(r2)
    6c6c:	e13ffc17 	ldw	r4,-16(fp)
    6c70:	0002ad40 	call	2ad4 <_ZNSt12_Vector_baseI6MyRectSaIS0_EE19_M_get_Tp_allocatorEv>
    6c74:	100b883a 	mov	r5,r2
    6c78:	e13ffb04 	addi	r4,fp,-20
    6c7c:	0002a340 	call	2a34 <_ZNSaI6MyRectEC1ERKS0_>
    6c80:	8009883a 	mov	r4,r16
    6c84:	e17ffd17 	ldw	r5,-12(fp)
    6c88:	e1bffe17 	ldw	r6,-8(fp)
    6c8c:	e1fffb04 	addi	r7,fp,-20
    6c90:	00061100 	call	6110 <_ZSt24__uninitialized_fill_n_aIP6MyRectmS0_S0_EvT_T0_RKT1_SaIT2_E>
    6c94:	e13ffb04 	addi	r4,fp,-20
    6c98:	00029b00 	call	29b0 <_ZNSaI6MyRectED1Ev>
				      _M_get_Tp_allocator());
	this->_M_impl._M_finish = this->_M_impl._M_start + __n;
    6c9c:	e0bffc17 	ldw	r2,-16(fp)
    6ca0:	10c00017 	ldw	r3,0(r2)
    6ca4:	e0bffd17 	ldw	r2,-12(fp)
    6ca8:	1004913a 	slli	r2,r2,4
    6cac:	1887883a 	add	r3,r3,r2
    6cb0:	e0bffc17 	ldw	r2,-16(fp)
    6cb4:	10c00115 	stw	r3,4(r2)
    6cb8:	e037883a 	mov	sp,fp
    6cbc:	dfc00217 	ldw	ra,8(sp)
    6cc0:	df000117 	ldw	fp,4(sp)
    6cc4:	dc000017 	ldw	r16,0(sp)
    6cc8:	dec00304 	addi	sp,sp,12
    6ccc:	f800283a 	ret

00006cd0 <_ZNSt6__copyILb1ESt26random_access_iterator_tagE4copyIiEEPT_PKS3_S6_S4_>:
  template<>
    struct __copy<true, random_access_iterator_tag>
    {
      template<typename _Tp>
        static _Tp*
        copy(const _Tp* __first, const _Tp* __last, _Tp* __result)
    6cd0:	defffb04 	addi	sp,sp,-20
    6cd4:	dfc00415 	stw	ra,16(sp)
    6cd8:	df000315 	stw	fp,12(sp)
    6cdc:	df000304 	addi	fp,sp,12
    6ce0:	e13ffd15 	stw	r4,-12(fp)
    6ce4:	e17ffe15 	stw	r5,-8(fp)
    6ce8:	e1bfff15 	stw	r6,-4(fp)
        { 
	  std::memmove(__result, __first, sizeof(_Tp) * (__last - __first));
    6cec:	e0fffe17 	ldw	r3,-8(fp)
    6cf0:	e0bffd17 	ldw	r2,-12(fp)
    6cf4:	1885c83a 	sub	r2,r3,r2
    6cf8:	100d883a 	mov	r6,r2
    6cfc:	e13fff17 	ldw	r4,-4(fp)
    6d00:	e17ffd17 	ldw	r5,-12(fp)
    6d04:	0013ac40 	call	13ac4 <memmove>
	  return __result + (__last - __first);
    6d08:	e0fffe17 	ldw	r3,-8(fp)
    6d0c:	e0bffd17 	ldw	r2,-12(fp)
    6d10:	1885c83a 	sub	r2,r3,r2
    6d14:	1007883a 	mov	r3,r2
    6d18:	e0bfff17 	ldw	r2,-4(fp)
    6d1c:	1885883a 	add	r2,r3,r2
    6d20:	e037883a 	mov	sp,fp
    6d24:	dfc00117 	ldw	ra,4(sp)
    6d28:	df000017 	ldw	fp,0(sp)
    6d2c:	dec00204 	addi	sp,sp,8
    6d30:	f800283a 	ret

00006d34 <_ZSt10__copy_auxIPiS0_ET0_T_S2_S1_>:
	}
    };

  template<typename _II, typename _OI>
    inline _OI
    __copy_aux(_II __first, _II __last, _OI __result)
    6d34:	defffa04 	addi	sp,sp,-24
    6d38:	dfc00515 	stw	ra,20(sp)
    6d3c:	df000415 	stw	fp,16(sp)
    6d40:	df000404 	addi	fp,sp,16
    6d44:	e13ffd15 	stw	r4,-12(fp)
    6d48:	e17ffe15 	stw	r5,-8(fp)
    6d4c:	e1bfff15 	stw	r6,-4(fp)
      typedef typename iterator_traits<_OI>::value_type _ValueTypeO;
      typedef typename iterator_traits<_II>::iterator_category _Category;
      const bool __simple = (__is_scalar<_ValueTypeI>::__value
	                     && __is_pointer<_II>::__value
	                     && __is_pointer<_OI>::__value
			     && __are_same<_ValueTypeI, _ValueTypeO>::__value);
    6d50:	00800044 	movi	r2,1
    6d54:	e0bffc05 	stb	r2,-16(fp)

      return std::__copy<__simple, _Category>::copy(__first, __last, __result);
    6d58:	e13ffd17 	ldw	r4,-12(fp)
    6d5c:	e17ffe17 	ldw	r5,-8(fp)
    6d60:	e1bfff17 	ldw	r6,-4(fp)
    6d64:	0006cd00 	call	6cd0 <_ZNSt6__copyILb1ESt26random_access_iterator_tagE4copyIiEEPT_PKS3_S6_S4_>
    6d68:	e037883a 	mov	sp,fp
    6d6c:	dfc00117 	ldw	ra,4(sp)
    6d70:	df000017 	ldw	fp,0(sp)
    6d74:	dec00204 	addi	sp,sp,8
    6d78:	f800283a 	ret

00006d7c <_ZNSt13__copy_normalILb1ELb1EE6copy_nIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEES8_EET0_T_SA_S9_>:
  template<>
    struct __copy_normal<true, true>
    {
      template<typename _II, typename _OI>
        static _OI
        copy_n(_II __first, _II __last, _OI __result)
    6d7c:	defff704 	addi	sp,sp,-36
    6d80:	dfc00815 	stw	ra,32(sp)
    6d84:	df000715 	stw	fp,28(sp)
    6d88:	dc400615 	stw	r17,24(sp)
    6d8c:	dc000515 	stw	r16,20(sp)
    6d90:	df000504 	addi	fp,sp,20
    6d94:	e13ffd15 	stw	r4,-12(fp)
    6d98:	e17ffe15 	stw	r5,-8(fp)
    6d9c:	e1bfff15 	stw	r6,-4(fp)
        { return _OI(std::__copy_aux(__first.base(), __last.base(),
				     __result.base())); }
    6da0:	e13ffd04 	addi	r4,fp,-12
    6da4:	0005ec00 	call	5ec0 <_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEE4baseEv>
    6da8:	14400017 	ldw	r17,0(r2)
    6dac:	e13ffe04 	addi	r4,fp,-8
    6db0:	0005ec00 	call	5ec0 <_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEE4baseEv>
    6db4:	14000017 	ldw	r16,0(r2)
    6db8:	e13fff04 	addi	r4,fp,-4
    6dbc:	0005ec00 	call	5ec0 <_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEE4baseEv>
    6dc0:	11800017 	ldw	r6,0(r2)
    6dc4:	8809883a 	mov	r4,r17
    6dc8:	800b883a 	mov	r5,r16
    6dcc:	0006d340 	call	6d34 <_ZSt10__copy_auxIPiS0_ET0_T_S2_S1_>
    6dd0:	e0bffb15 	stw	r2,-20(fp)
    6dd4:	e13ffc04 	addi	r4,fp,-16
    6dd8:	e17ffb04 	addi	r5,fp,-20
    6ddc:	0005cc40 	call	5cc4 <_ZN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEC1ERKS1_>
    6de0:	e0bffc17 	ldw	r2,-16(fp)
    6de4:	e037883a 	mov	sp,fp
    6de8:	dfc00317 	ldw	ra,12(sp)
    6dec:	df000217 	ldw	fp,8(sp)
    6df0:	dc400117 	ldw	r17,4(sp)
    6df4:	dc000017 	ldw	r16,0(sp)
    6df8:	dec00404 	addi	sp,sp,16
    6dfc:	f800283a 	ret

00006e00 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEES6_ET0_T_S8_S7_>:
   *  within [first,last).
  */
  template<typename _InputIterator, typename _OutputIterator>
    inline _OutputIterator
    copy(_InputIterator __first, _InputIterator __last,
	 _OutputIterator __result)
    6e00:	defffa04 	addi	sp,sp,-24
    6e04:	dfc00515 	stw	ra,20(sp)
    6e08:	df000415 	stw	fp,16(sp)
    6e0c:	df000404 	addi	fp,sp,16
    6e10:	e13ffd15 	stw	r4,-12(fp)
    6e14:	e17ffe15 	stw	r5,-8(fp)
    6e18:	e1bfff15 	stw	r6,-4(fp)
      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
      __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,
	    typename iterator_traits<_InputIterator>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);

       const bool __in = __is_normal_iterator<_InputIterator>::__value;
    6e1c:	00800044 	movi	r2,1
    6e20:	e0bffc45 	stb	r2,-15(fp)
       const bool __out = __is_normal_iterator<_OutputIterator>::__value;
    6e24:	00800044 	movi	r2,1
    6e28:	e0bffc05 	stb	r2,-16(fp)
       return std::__copy_normal<__in, __out>::copy_n(__first, __last,
						      __result);
    6e2c:	e13ffd17 	ldw	r4,-12(fp)
    6e30:	e17ffe17 	ldw	r5,-8(fp)
    6e34:	e1bfff17 	ldw	r6,-4(fp)
    6e38:	0006d7c0 	call	6d7c <_ZNSt13__copy_normalILb1ELb1EE6copy_nIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEES8_EET0_T_SA_S9_>
    6e3c:	e037883a 	mov	sp,fp
    6e40:	dfc00117 	ldw	ra,4(sp)
    6e44:	df000017 	ldw	fp,0(sp)
    6e48:	dec00204 	addi	sp,sp,8
    6e4c:	f800283a 	ret

00006e50 <_ZNSt6vectorIiSaIiEE5eraseEN9__gnu_cxx17__normal_iteratorIPiS1_EES5_>:
    }

  template<typename _Tp, typename _Alloc>
    typename vector<_Tp, _Alloc>::iterator
    vector<_Tp, _Alloc>::
    erase(iterator __first, iterator __last)
    6e50:	defff804 	addi	sp,sp,-32
    6e54:	dfc00715 	stw	ra,28(sp)
    6e58:	df000615 	stw	fp,24(sp)
    6e5c:	dc000515 	stw	r16,20(sp)
    6e60:	df000504 	addi	fp,sp,20
    6e64:	e13ffd15 	stw	r4,-12(fp)
    6e68:	e17ffe15 	stw	r5,-8(fp)
    6e6c:	e1bfff15 	stw	r6,-4(fp)
    {
      iterator __i(std::copy(__last, end(), __first));
    6e70:	e13ffd17 	ldw	r4,-12(fp)
    6e74:	0005de40 	call	5de4 <_ZNSt6vectorIiSaIiEE3endEv>
    6e78:	100b883a 	mov	r5,r2
    6e7c:	e13fff17 	ldw	r4,-4(fp)
    6e80:	e1bffe17 	ldw	r6,-8(fp)
    6e84:	0006e000 	call	6e00 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEES6_ET0_T_S8_S7_>
    6e88:	e0bffc15 	stw	r2,-16(fp)
      std::_Destroy(__i, end(), _M_get_Tp_allocator());
    6e8c:	e13ffd17 	ldw	r4,-12(fp)
    6e90:	0005de40 	call	5de4 <_ZNSt6vectorIiSaIiEE3endEv>
    6e94:	1021883a 	mov	r16,r2
    6e98:	e13ffd17 	ldw	r4,-12(fp)
    6e9c:	00059940 	call	5994 <_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv>
    6ea0:	100b883a 	mov	r5,r2
    6ea4:	e13ffb04 	addi	r4,fp,-20
    6ea8:	000592c0 	call	592c <_ZNSaIiEC1ERKS_>
    6eac:	e13ffc17 	ldw	r4,-16(fp)
    6eb0:	800b883a 	mov	r5,r16
    6eb4:	e1bffb04 	addi	r6,fp,-20
    6eb8:	00062640 	call	6264 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiEvT_S7_SaIT0_E>
    6ebc:	e13ffb04 	addi	r4,fp,-20
    6ec0:	00058a00 	call	58a0 <_ZNSaIiED1Ev>
      this->_M_impl._M_finish = this->_M_impl._M_finish - (__last - __first);
    6ec4:	e0bffd17 	ldw	r2,-12(fp)
    6ec8:	14000117 	ldw	r16,4(r2)
    6ecc:	e13fff04 	addi	r4,fp,-4
    6ed0:	e17ffe04 	addi	r5,fp,-8
    6ed4:	0005ee40 	call	5ee4 <_ZN9__gnu_cxxmiIPiS1_St6vectorIiSaIiEEEENS_17__normal_iteratorIT_T1_E15difference_typeERKS8_RKNS5_IT0_S7_EE>
    6ed8:	1085883a 	add	r2,r2,r2
    6edc:	1085883a 	add	r2,r2,r2
    6ee0:	8087c83a 	sub	r3,r16,r2
    6ee4:	e0bffd17 	ldw	r2,-12(fp)
    6ee8:	10c00115 	stw	r3,4(r2)
      return __first;
    6eec:	e0bffe17 	ldw	r2,-8(fp)
    6ef0:	e037883a 	mov	sp,fp
    6ef4:	dfc00217 	ldw	ra,8(sp)
    6ef8:	df000117 	ldw	fp,4(sp)
    6efc:	dc000017 	ldw	r16,0(sp)
    6f00:	dec00304 	addi	sp,sp,12
    6f04:	f800283a 	ret

00006f08 <_ZSt24__uninitialized_copy_auxIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEES6_ET0_T_S8_S7_11__true_type>:
  // uninitialized_copy
  template<typename _InputIterator, typename _ForwardIterator>
    inline _ForwardIterator
    __uninitialized_copy_aux(_InputIterator __first, _InputIterator __last,
			     _ForwardIterator __result,
			     __true_type)
    6f08:	defffa04 	addi	sp,sp,-24
    6f0c:	dfc00515 	stw	ra,20(sp)
    6f10:	df000415 	stw	fp,16(sp)
    6f14:	df000404 	addi	fp,sp,16
    6f18:	e13ffc15 	stw	r4,-16(fp)
    6f1c:	e17ffd15 	stw	r5,-12(fp)
    6f20:	e1bffe15 	stw	r6,-8(fp)
    6f24:	e1ffff05 	stb	r7,-4(fp)
    { return std::copy(__first, __last, __result); }
    6f28:	e13ffc17 	ldw	r4,-16(fp)
    6f2c:	e17ffd17 	ldw	r5,-12(fp)
    6f30:	e1bffe17 	ldw	r6,-8(fp)
    6f34:	0006e000 	call	6e00 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEES6_ET0_T_S8_S7_>
    6f38:	e037883a 	mov	sp,fp
    6f3c:	dfc00117 	ldw	ra,4(sp)
    6f40:	df000017 	ldw	fp,0(sp)
    6f44:	dec00204 	addi	sp,sp,8
    6f48:	f800283a 	ret

00006f4c <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEES6_ET0_T_S8_S7_>:
   *  Like copy(), but does not require an initialized output range.
  */
  template<typename _InputIterator, typename _ForwardIterator>
    inline _ForwardIterator
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
		       _ForwardIterator __result)
    6f4c:	defffa04 	addi	sp,sp,-24
    6f50:	dfc00515 	stw	ra,20(sp)
    6f54:	df000415 	stw	fp,16(sp)
    6f58:	df000404 	addi	fp,sp,16
    6f5c:	e13ffc15 	stw	r4,-16(fp)
    6f60:	e17ffd15 	stw	r5,-12(fp)
    6f64:	e1bffe15 	stw	r6,-8(fp)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type _ValueType;
      typedef typename std::__is_scalar<_ValueType>::__type _Is_POD;
      return std::__uninitialized_copy_aux(__first, __last, __result,
					   _Is_POD());
    6f68:	e13ffc17 	ldw	r4,-16(fp)
    6f6c:	e17ffd17 	ldw	r5,-12(fp)
    6f70:	e1bffe17 	ldw	r6,-8(fp)
    6f74:	e1ffff03 	ldbu	r7,-4(fp)
    6f78:	0006f080 	call	6f08 <_ZSt24__uninitialized_copy_auxIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEES6_ET0_T_S8_S7_11__true_type>
    6f7c:	e037883a 	mov	sp,fp
    6f80:	dfc00117 	ldw	ra,4(sp)
    6f84:	df000017 	ldw	fp,0(sp)
    6f88:	dec00204 	addi	sp,sp,8
    6f8c:	f800283a 	ret

00006f90 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEES6_iET0_T_S8_S7_SaIT1_E>:

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
			   _ForwardIterator __result,
			   allocator<_Tp>)
    6f90:	defffa04 	addi	sp,sp,-24
    6f94:	dfc00515 	stw	ra,20(sp)
    6f98:	df000415 	stw	fp,16(sp)
    6f9c:	df000404 	addi	fp,sp,16
    6fa0:	e13ffc15 	stw	r4,-16(fp)
    6fa4:	e17ffd15 	stw	r5,-12(fp)
    6fa8:	e1bffe15 	stw	r6,-8(fp)
    6fac:	e1ffff15 	stw	r7,-4(fp)
    {
      return std::uninitialized_copy(__first, __last, __result);
    6fb0:	e13ffc17 	ldw	r4,-16(fp)
    6fb4:	e17ffd17 	ldw	r5,-12(fp)
    6fb8:	e1bffe17 	ldw	r6,-8(fp)
    6fbc:	0006f4c0 	call	6f4c <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEES6_ET0_T_S8_S7_>
    6fc0:	e037883a 	mov	sp,fp
    6fc4:	dfc00117 	ldw	ra,4(sp)
    6fc8:	df000017 	ldw	fp,0(sp)
    6fcc:	dec00204 	addi	sp,sp,8
    6fd0:	f800283a 	ret

00006fd4 <_ZNSt13__copy_normalILb0ELb0EE6copy_nIPiS2_EET0_T_S4_S3_>:
  template<bool, bool>
    struct __copy_normal
    {
      template<typename _II, typename _OI>
        static _OI
        copy_n(_II __first, _II __last, _OI __result)
    6fd4:	defffb04 	addi	sp,sp,-20
    6fd8:	dfc00415 	stw	ra,16(sp)
    6fdc:	df000315 	stw	fp,12(sp)
    6fe0:	df000304 	addi	fp,sp,12
    6fe4:	e13ffd15 	stw	r4,-12(fp)
    6fe8:	e17ffe15 	stw	r5,-8(fp)
    6fec:	e1bfff15 	stw	r6,-4(fp)
        { return std::__copy_aux(__first, __last, __result); }
    6ff0:	e13ffd17 	ldw	r4,-12(fp)
    6ff4:	e17ffe17 	ldw	r5,-8(fp)
    6ff8:	e1bfff17 	ldw	r6,-4(fp)
    6ffc:	0006d340 	call	6d34 <_ZSt10__copy_auxIPiS0_ET0_T_S2_S1_>
    7000:	e037883a 	mov	sp,fp
    7004:	dfc00117 	ldw	ra,4(sp)
    7008:	df000017 	ldw	fp,0(sp)
    700c:	dec00204 	addi	sp,sp,8
    7010:	f800283a 	ret

00007014 <_ZSt4copyIPiS0_ET0_T_S2_S1_>:
   *  within [first,last).
  */
  template<typename _InputIterator, typename _OutputIterator>
    inline _OutputIterator
    copy(_InputIterator __first, _InputIterator __last,
	 _OutputIterator __result)
    7014:	defffa04 	addi	sp,sp,-24
    7018:	dfc00515 	stw	ra,20(sp)
    701c:	df000415 	stw	fp,16(sp)
    7020:	df000404 	addi	fp,sp,16
    7024:	e13ffd15 	stw	r4,-12(fp)
    7028:	e17ffe15 	stw	r5,-8(fp)
    702c:	e1bfff15 	stw	r6,-4(fp)
      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
      __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,
	    typename iterator_traits<_InputIterator>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);

       const bool __in = __is_normal_iterator<_InputIterator>::__value;
    7030:	e03ffc45 	stb	zero,-15(fp)
       const bool __out = __is_normal_iterator<_OutputIterator>::__value;
    7034:	e03ffc05 	stb	zero,-16(fp)
       return std::__copy_normal<__in, __out>::copy_n(__first, __last,
						      __result);
    7038:	e13ffd17 	ldw	r4,-12(fp)
    703c:	e17ffe17 	ldw	r5,-8(fp)
    7040:	e1bfff17 	ldw	r6,-4(fp)
    7044:	0006fd40 	call	6fd4 <_ZNSt13__copy_normalILb0ELb0EE6copy_nIPiS2_EET0_T_S4_S3_>
    7048:	e037883a 	mov	sp,fp
    704c:	dfc00117 	ldw	ra,4(sp)
    7050:	df000017 	ldw	fp,0(sp)
    7054:	dec00204 	addi	sp,sp,8
    7058:	f800283a 	ret

0000705c <_ZSt24__uninitialized_copy_auxIPiS0_ET0_T_S2_S1_11__true_type>:
  // uninitialized_copy
  template<typename _InputIterator, typename _ForwardIterator>
    inline _ForwardIterator
    __uninitialized_copy_aux(_InputIterator __first, _InputIterator __last,
			     _ForwardIterator __result,
			     __true_type)
    705c:	defffa04 	addi	sp,sp,-24
    7060:	dfc00515 	stw	ra,20(sp)
    7064:	df000415 	stw	fp,16(sp)
    7068:	df000404 	addi	fp,sp,16
    706c:	e13ffc15 	stw	r4,-16(fp)
    7070:	e17ffd15 	stw	r5,-12(fp)
    7074:	e1bffe15 	stw	r6,-8(fp)
    7078:	e1ffff05 	stb	r7,-4(fp)
    { return std::copy(__first, __last, __result); }
    707c:	e13ffc17 	ldw	r4,-16(fp)
    7080:	e17ffd17 	ldw	r5,-12(fp)
    7084:	e1bffe17 	ldw	r6,-8(fp)
    7088:	00070140 	call	7014 <_ZSt4copyIPiS0_ET0_T_S2_S1_>
    708c:	e037883a 	mov	sp,fp
    7090:	dfc00117 	ldw	ra,4(sp)
    7094:	df000017 	ldw	fp,0(sp)
    7098:	dec00204 	addi	sp,sp,8
    709c:	f800283a 	ret

000070a0 <_ZSt18uninitialized_copyIPiS0_ET0_T_S2_S1_>:
   *  Like copy(), but does not require an initialized output range.
  */
  template<typename _InputIterator, typename _ForwardIterator>
    inline _ForwardIterator
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
		       _ForwardIterator __result)
    70a0:	defffa04 	addi	sp,sp,-24
    70a4:	dfc00515 	stw	ra,20(sp)
    70a8:	df000415 	stw	fp,16(sp)
    70ac:	df000404 	addi	fp,sp,16
    70b0:	e13ffc15 	stw	r4,-16(fp)
    70b4:	e17ffd15 	stw	r5,-12(fp)
    70b8:	e1bffe15 	stw	r6,-8(fp)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type _ValueType;
      typedef typename std::__is_scalar<_ValueType>::__type _Is_POD;
      return std::__uninitialized_copy_aux(__first, __last, __result,
					   _Is_POD());
    70bc:	e13ffc17 	ldw	r4,-16(fp)
    70c0:	e17ffd17 	ldw	r5,-12(fp)
    70c4:	e1bffe17 	ldw	r6,-8(fp)
    70c8:	e1ffff03 	ldbu	r7,-4(fp)
    70cc:	000705c0 	call	705c <_ZSt24__uninitialized_copy_auxIPiS0_ET0_T_S2_S1_11__true_type>
    70d0:	e037883a 	mov	sp,fp
    70d4:	dfc00117 	ldw	ra,4(sp)
    70d8:	df000017 	ldw	fp,0(sp)
    70dc:	dec00204 	addi	sp,sp,8
    70e0:	f800283a 	ret

000070e4 <_ZSt22__uninitialized_copy_aIPiS0_iET0_T_S2_S1_SaIT1_E>:

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
			   _ForwardIterator __result,
			   allocator<_Tp>)
    70e4:	defffa04 	addi	sp,sp,-24
    70e8:	dfc00515 	stw	ra,20(sp)
    70ec:	df000415 	stw	fp,16(sp)
    70f0:	df000404 	addi	fp,sp,16
    70f4:	e13ffc15 	stw	r4,-16(fp)
    70f8:	e17ffd15 	stw	r5,-12(fp)
    70fc:	e1bffe15 	stw	r6,-8(fp)
    7100:	e1ffff15 	stw	r7,-4(fp)
    {
      return std::uninitialized_copy(__first, __last, __result);
    7104:	e13ffc17 	ldw	r4,-16(fp)
    7108:	e17ffd17 	ldw	r5,-12(fp)
    710c:	e1bffe17 	ldw	r6,-8(fp)
    7110:	00070a00 	call	70a0 <_ZSt18uninitialized_copyIPiS0_ET0_T_S2_S1_>
    7114:	e037883a 	mov	sp,fp
    7118:	dfc00117 	ldw	ra,4(sp)
    711c:	df000017 	ldw	fp,0(sp)
    7120:	dec00204 	addi	sp,sp,8
    7124:	f800283a 	ret

00007128 <_ZNSt13__copy_normalILb1ELb0EE6copy_nIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEES4_EET0_T_SA_S9_>:
  template<>
    struct __copy_normal<true, false>
    {
      template<typename _II, typename _OI>
        static _OI
        copy_n(_II __first, _II __last, _OI __result)
    7128:	defffa04 	addi	sp,sp,-24
    712c:	dfc00515 	stw	ra,20(sp)
    7130:	df000415 	stw	fp,16(sp)
    7134:	dc000315 	stw	r16,12(sp)
    7138:	df000304 	addi	fp,sp,12
    713c:	e13ffd15 	stw	r4,-12(fp)
    7140:	e17ffe15 	stw	r5,-8(fp)
    7144:	e1bfff15 	stw	r6,-4(fp)
        { return std::__copy_aux(__first.base(), __last.base(), __result); }
    7148:	e13ffd04 	addi	r4,fp,-12
    714c:	0005ec00 	call	5ec0 <_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEE4baseEv>
    7150:	14000017 	ldw	r16,0(r2)
    7154:	e13ffe04 	addi	r4,fp,-8
    7158:	0005ec00 	call	5ec0 <_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEE4baseEv>
    715c:	11400017 	ldw	r5,0(r2)
    7160:	8009883a 	mov	r4,r16
    7164:	e1bfff17 	ldw	r6,-4(fp)
    7168:	0006d340 	call	6d34 <_ZSt10__copy_auxIPiS0_ET0_T_S2_S1_>
    716c:	e037883a 	mov	sp,fp
    7170:	dfc00217 	ldw	ra,8(sp)
    7174:	df000117 	ldw	fp,4(sp)
    7178:	dc000017 	ldw	r16,0(sp)
    717c:	dec00304 	addi	sp,sp,12
    7180:	f800283a 	ret

00007184 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEES2_ET0_T_S8_S7_>:
   *  within [first,last).
  */
  template<typename _InputIterator, typename _OutputIterator>
    inline _OutputIterator
    copy(_InputIterator __first, _InputIterator __last,
	 _OutputIterator __result)
    7184:	defffa04 	addi	sp,sp,-24
    7188:	dfc00515 	stw	ra,20(sp)
    718c:	df000415 	stw	fp,16(sp)
    7190:	df000404 	addi	fp,sp,16
    7194:	e13ffd15 	stw	r4,-12(fp)
    7198:	e17ffe15 	stw	r5,-8(fp)
    719c:	e1bfff15 	stw	r6,-4(fp)
      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
      __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,
	    typename iterator_traits<_InputIterator>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);

       const bool __in = __is_normal_iterator<_InputIterator>::__value;
    71a0:	00800044 	movi	r2,1
    71a4:	e0bffc45 	stb	r2,-15(fp)
       const bool __out = __is_normal_iterator<_OutputIterator>::__value;
    71a8:	e03ffc05 	stb	zero,-16(fp)
       return std::__copy_normal<__in, __out>::copy_n(__first, __last,
						      __result);
    71ac:	e13ffd17 	ldw	r4,-12(fp)
    71b0:	e17ffe17 	ldw	r5,-8(fp)
    71b4:	e1bfff17 	ldw	r6,-4(fp)
    71b8:	00071280 	call	7128 <_ZNSt13__copy_normalILb1ELb0EE6copy_nIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEES4_EET0_T_SA_S9_>
    71bc:	e037883a 	mov	sp,fp
    71c0:	dfc00117 	ldw	ra,4(sp)
    71c4:	df000017 	ldw	fp,0(sp)
    71c8:	dec00204 	addi	sp,sp,8
    71cc:	f800283a 	ret

000071d0 <_ZSt24__uninitialized_copy_auxIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEES2_ET0_T_S8_S7_11__true_type>:
  // uninitialized_copy
  template<typename _InputIterator, typename _ForwardIterator>
    inline _ForwardIterator
    __uninitialized_copy_aux(_InputIterator __first, _InputIterator __last,
			     _ForwardIterator __result,
			     __true_type)
    71d0:	defffa04 	addi	sp,sp,-24
    71d4:	dfc00515 	stw	ra,20(sp)
    71d8:	df000415 	stw	fp,16(sp)
    71dc:	df000404 	addi	fp,sp,16
    71e0:	e13ffc15 	stw	r4,-16(fp)
    71e4:	e17ffd15 	stw	r5,-12(fp)
    71e8:	e1bffe15 	stw	r6,-8(fp)
    71ec:	e1ffff05 	stb	r7,-4(fp)
    { return std::copy(__first, __last, __result); }
    71f0:	e13ffc17 	ldw	r4,-16(fp)
    71f4:	e17ffd17 	ldw	r5,-12(fp)
    71f8:	e1bffe17 	ldw	r6,-8(fp)
    71fc:	00071840 	call	7184 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEES2_ET0_T_S8_S7_>
    7200:	e037883a 	mov	sp,fp
    7204:	dfc00117 	ldw	ra,4(sp)
    7208:	df000017 	ldw	fp,0(sp)
    720c:	dec00204 	addi	sp,sp,8
    7210:	f800283a 	ret

00007214 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEES2_ET0_T_S8_S7_>:
   *  Like copy(), but does not require an initialized output range.
  */
  template<typename _InputIterator, typename _ForwardIterator>
    inline _ForwardIterator
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
		       _ForwardIterator __result)
    7214:	defffa04 	addi	sp,sp,-24
    7218:	dfc00515 	stw	ra,20(sp)
    721c:	df000415 	stw	fp,16(sp)
    7220:	df000404 	addi	fp,sp,16
    7224:	e13ffc15 	stw	r4,-16(fp)
    7228:	e17ffd15 	stw	r5,-12(fp)
    722c:	e1bffe15 	stw	r6,-8(fp)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type _ValueType;
      typedef typename std::__is_scalar<_ValueType>::__type _Is_POD;
      return std::__uninitialized_copy_aux(__first, __last, __result,
					   _Is_POD());
    7230:	e13ffc17 	ldw	r4,-16(fp)
    7234:	e17ffd17 	ldw	r5,-12(fp)
    7238:	e1bffe17 	ldw	r6,-8(fp)
    723c:	e1ffff03 	ldbu	r7,-4(fp)
    7240:	00071d00 	call	71d0 <_ZSt24__uninitialized_copy_auxIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEES2_ET0_T_S8_S7_11__true_type>
    7244:	e037883a 	mov	sp,fp
    7248:	dfc00117 	ldw	ra,4(sp)
    724c:	df000017 	ldw	fp,0(sp)
    7250:	dec00204 	addi	sp,sp,8
    7254:	f800283a 	ret

00007258 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEES2_iET0_T_S8_S7_SaIT1_E>:

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
			   _ForwardIterator __result,
			   allocator<_Tp>)
    7258:	defffa04 	addi	sp,sp,-24
    725c:	dfc00515 	stw	ra,20(sp)
    7260:	df000415 	stw	fp,16(sp)
    7264:	df000404 	addi	fp,sp,16
    7268:	e13ffc15 	stw	r4,-16(fp)
    726c:	e17ffd15 	stw	r5,-12(fp)
    7270:	e1bffe15 	stw	r6,-8(fp)
    7274:	e1ffff15 	stw	r7,-4(fp)
    {
      return std::uninitialized_copy(__first, __last, __result);
    7278:	e13ffc17 	ldw	r4,-16(fp)
    727c:	e17ffd17 	ldw	r5,-12(fp)
    7280:	e1bffe17 	ldw	r6,-8(fp)
    7284:	00072140 	call	7214 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEES2_ET0_T_S8_S7_>
    7288:	e037883a 	mov	sp,fp
    728c:	dfc00117 	ldw	ra,4(sp)
    7290:	df000017 	ldw	fp,0(sp)
    7294:	dec00204 	addi	sp,sp,8
    7298:	f800283a 	ret

0000729c <_ZNSt15__copy_backwardILb1ESt26random_access_iterator_tagE6copy_bIiEEPT_PKS3_S6_S4_>:
  template<>
    struct __copy_backward<true, random_access_iterator_tag>
    {
      template<typename _Tp>
        static _Tp*
        copy_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
    729c:	defffa04 	addi	sp,sp,-24
    72a0:	dfc00515 	stw	ra,20(sp)
    72a4:	df000415 	stw	fp,16(sp)
    72a8:	df000404 	addi	fp,sp,16
    72ac:	e13ffd15 	stw	r4,-12(fp)
    72b0:	e17ffe15 	stw	r5,-8(fp)
    72b4:	e1bfff15 	stw	r6,-4(fp)
        { 
	  const ptrdiff_t _Num = __last - __first;
    72b8:	e0fffe17 	ldw	r3,-8(fp)
    72bc:	e0bffd17 	ldw	r2,-12(fp)
    72c0:	1885c83a 	sub	r2,r3,r2
    72c4:	1005d0ba 	srai	r2,r2,2
    72c8:	e0bffc15 	stw	r2,-16(fp)
	  std::memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
    72cc:	e0bffc17 	ldw	r2,-16(fp)
    72d0:	1085883a 	add	r2,r2,r2
    72d4:	1085883a 	add	r2,r2,r2
    72d8:	1007883a 	mov	r3,r2
    72dc:	e0bfff17 	ldw	r2,-4(fp)
    72e0:	10c9c83a 	sub	r4,r2,r3
    72e4:	e0bffc17 	ldw	r2,-16(fp)
    72e8:	1085883a 	add	r2,r2,r2
    72ec:	1085883a 	add	r2,r2,r2
    72f0:	100d883a 	mov	r6,r2
    72f4:	e17ffd17 	ldw	r5,-12(fp)
    72f8:	0013ac40 	call	13ac4 <memmove>
	  return __result - _Num;
    72fc:	e0bffc17 	ldw	r2,-16(fp)
    7300:	1085883a 	add	r2,r2,r2
    7304:	1085883a 	add	r2,r2,r2
    7308:	1007883a 	mov	r3,r2
    730c:	e0bfff17 	ldw	r2,-4(fp)
    7310:	10c5c83a 	sub	r2,r2,r3
    7314:	e037883a 	mov	sp,fp
    7318:	dfc00117 	ldw	ra,4(sp)
    731c:	df000017 	ldw	fp,0(sp)
    7320:	dec00204 	addi	sp,sp,8
    7324:	f800283a 	ret

00007328 <_ZSt19__copy_backward_auxIPiS0_ET0_T_S2_S1_>:
	}
    };

  template<typename _BI1, typename _BI2>
    inline _BI2
    __copy_backward_aux(_BI1 __first, _BI1 __last, _BI2 __result)
    7328:	defffa04 	addi	sp,sp,-24
    732c:	dfc00515 	stw	ra,20(sp)
    7330:	df000415 	stw	fp,16(sp)
    7334:	df000404 	addi	fp,sp,16
    7338:	e13ffd15 	stw	r4,-12(fp)
    733c:	e17ffe15 	stw	r5,-8(fp)
    7340:	e1bfff15 	stw	r6,-4(fp)
      typedef typename iterator_traits<_BI2>::value_type _ValueType2;
      typedef typename iterator_traits<_BI1>::iterator_category _Category;
      const bool __simple = (__is_scalar<_ValueType1>::__value
	                     && __is_pointer<_BI1>::__value
	                     && __is_pointer<_BI2>::__value
			     && __are_same<_ValueType1, _ValueType2>::__value);
    7344:	00800044 	movi	r2,1
    7348:	e0bffc05 	stb	r2,-16(fp)

      return std::__copy_backward<__simple, _Category>::copy_b(__first, __last,
							       __result);
    734c:	e13ffd17 	ldw	r4,-12(fp)
    7350:	e17ffe17 	ldw	r5,-8(fp)
    7354:	e1bfff17 	ldw	r6,-4(fp)
    7358:	000729c0 	call	729c <_ZNSt15__copy_backwardILb1ESt26random_access_iterator_tagE6copy_bIiEEPT_PKS3_S6_S4_>
    735c:	e037883a 	mov	sp,fp
    7360:	dfc00117 	ldw	ra,4(sp)
    7364:	df000017 	ldw	fp,0(sp)
    7368:	dec00204 	addi	sp,sp,8
    736c:	f800283a 	ret

00007370 <_ZNSt22__copy_backward_normalILb1ELb1EE8copy_b_nIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEES8_EET0_T_SA_S9_>:
  template<>
    struct __copy_backward_normal<true, true>
    {
      template<typename _BI1, typename _BI2>
        static _BI2
        copy_b_n(_BI1 __first, _BI1 __last, _BI2 __result)
    7370:	defff704 	addi	sp,sp,-36
    7374:	dfc00815 	stw	ra,32(sp)
    7378:	df000715 	stw	fp,28(sp)
    737c:	dc400615 	stw	r17,24(sp)
    7380:	dc000515 	stw	r16,20(sp)
    7384:	df000504 	addi	fp,sp,20
    7388:	e13ffd15 	stw	r4,-12(fp)
    738c:	e17ffe15 	stw	r5,-8(fp)
    7390:	e1bfff15 	stw	r6,-4(fp)
        { return _BI2(std::__copy_backward_aux(__first.base(), __last.base(),
					       __result.base())); }
    7394:	e13ffd04 	addi	r4,fp,-12
    7398:	0005ec00 	call	5ec0 <_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEE4baseEv>
    739c:	14400017 	ldw	r17,0(r2)
    73a0:	e13ffe04 	addi	r4,fp,-8
    73a4:	0005ec00 	call	5ec0 <_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEE4baseEv>
    73a8:	14000017 	ldw	r16,0(r2)
    73ac:	e13fff04 	addi	r4,fp,-4
    73b0:	0005ec00 	call	5ec0 <_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEE4baseEv>
    73b4:	11800017 	ldw	r6,0(r2)
    73b8:	8809883a 	mov	r4,r17
    73bc:	800b883a 	mov	r5,r16
    73c0:	00073280 	call	7328 <_ZSt19__copy_backward_auxIPiS0_ET0_T_S2_S1_>
    73c4:	e0bffb15 	stw	r2,-20(fp)
    73c8:	e13ffc04 	addi	r4,fp,-16
    73cc:	e17ffb04 	addi	r5,fp,-20
    73d0:	0005cc40 	call	5cc4 <_ZN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEC1ERKS1_>
    73d4:	e0bffc17 	ldw	r2,-16(fp)
    73d8:	e037883a 	mov	sp,fp
    73dc:	dfc00317 	ldw	ra,12(sp)
    73e0:	df000217 	ldw	fp,8(sp)
    73e4:	dc400117 	ldw	r17,4(sp)
    73e8:	dc000017 	ldw	r16,0(sp)
    73ec:	dec00404 	addi	sp,sp,16
    73f0:	f800283a 	ret

000073f4 <_ZSt13copy_backwardIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEES6_ET0_T_S8_S7_>:
   *  Result may not be in the range [first,last).  Use copy instead.  Note
   *  that the start of the output range may overlap [first,last).
  */
  template <typename _BI1, typename _BI2>
    inline _BI2
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
    73f4:	defffa04 	addi	sp,sp,-24
    73f8:	dfc00515 	stw	ra,20(sp)
    73fc:	df000415 	stw	fp,16(sp)
    7400:	df000404 	addi	fp,sp,16
    7404:	e13ffd15 	stw	r4,-12(fp)
    7408:	e17ffe15 	stw	r5,-8(fp)
    740c:	e1bfff15 	stw	r6,-4(fp)
      __glibcxx_function_requires(_ConvertibleConcept<
	    typename iterator_traits<_BI1>::value_type,
	    typename iterator_traits<_BI2>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);

      const bool __bi1 = __is_normal_iterator<_BI1>::__value;
    7410:	00800044 	movi	r2,1
    7414:	e0bffc45 	stb	r2,-15(fp)
      const bool __bi2 = __is_normal_iterator<_BI2>::__value;
    7418:	00800044 	movi	r2,1
    741c:	e0bffc05 	stb	r2,-16(fp)
      return std::__copy_backward_normal<__bi1, __bi2>::copy_b_n(__first, __last,
								 __result);
    7420:	e13ffd17 	ldw	r4,-12(fp)
    7424:	e17ffe17 	ldw	r5,-8(fp)
    7428:	e1bfff17 	ldw	r6,-4(fp)
    742c:	00073700 	call	7370 <_ZNSt22__copy_backward_normalILb1ELb1EE8copy_b_nIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEES8_EET0_T_SA_S9_>
    7430:	e037883a 	mov	sp,fp
    7434:	dfc00117 	ldw	ra,4(sp)
    7438:	df000017 	ldw	fp,0(sp)
    743c:	dec00204 	addi	sp,sp,8
    7440:	f800283a 	ret

00007444 <_ZNSt6vectorIiSaIiEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPiS1_EEmRKi>:
    }

  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
    _M_fill_insert(iterator __position, size_type __n, const value_type& __x)
    7444:	deffe704 	addi	sp,sp,-100
    7448:	dfc01815 	stw	ra,96(sp)
    744c:	df001715 	stw	fp,92(sp)
    7450:	dc801615 	stw	r18,88(sp)
    7454:	dc401515 	stw	r17,84(sp)
    7458:	dc001415 	stw	r16,80(sp)
    745c:	df001404 	addi	fp,sp,80
    7460:	e13ffc15 	stw	r4,-16(fp)
    7464:	e17ffd15 	stw	r5,-12(fp)
    7468:	e1bffe15 	stw	r6,-8(fp)
    746c:	e1ffff15 	stw	r7,-4(fp)
    {
      if (__n != 0)
    7470:	e0bffe17 	ldw	r2,-8(fp)
    7474:	1005003a 	cmpeq	r2,r2,zero
    7478:	1001081e 	bne	r2,zero,789c <_ZNSt6vectorIiSaIiEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPiS1_EEmRKi+0x458>
	{
	  if (size_type(this->_M_impl._M_end_of_storage
    747c:	e0bffc17 	ldw	r2,-16(fp)
    7480:	10800217 	ldw	r2,8(r2)
    7484:	1007883a 	mov	r3,r2
    7488:	e0bffc17 	ldw	r2,-16(fp)
    748c:	10800117 	ldw	r2,4(r2)
    7490:	1885c83a 	sub	r2,r3,r2
    7494:	1005d0ba 	srai	r2,r2,2
    7498:	1007883a 	mov	r3,r2
    749c:	e0bffe17 	ldw	r2,-8(fp)
    74a0:	18807836 	bltu	r3,r2,7684 <_ZNSt6vectorIiSaIiEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPiS1_EEmRKi+0x240>
			- this->_M_impl._M_finish) >= __n)
	    {
	      value_type __x_copy = __x;
    74a4:	e0bfff17 	ldw	r2,-4(fp)
    74a8:	10800017 	ldw	r2,0(r2)
    74ac:	e0bff715 	stw	r2,-36(fp)
	      const size_type __elems_after = end() - __position;
    74b0:	e13ffc17 	ldw	r4,-16(fp)
    74b4:	0005de40 	call	5de4 <_ZNSt6vectorIiSaIiEE3endEv>
    74b8:	e0bff615 	stw	r2,-40(fp)
    74bc:	e13ff604 	addi	r4,fp,-40
    74c0:	e17ffd04 	addi	r5,fp,-12
    74c4:	0005ee40 	call	5ee4 <_ZN9__gnu_cxxmiIPiS1_St6vectorIiSaIiEEEENS_17__normal_iteratorIT_T1_E15difference_typeERKS8_RKNS5_IT0_S7_EE>
    74c8:	e0bfed15 	stw	r2,-76(fp)
	      iterator __old_finish(this->_M_impl._M_finish);
    74cc:	e0bffc17 	ldw	r2,-16(fp)
    74d0:	11400104 	addi	r5,r2,4
    74d4:	e13ff804 	addi	r4,fp,-32
    74d8:	0005cc40 	call	5cc4 <_ZN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEC1ERKS1_>
	      if (__elems_after > __n)
    74dc:	e0fffe17 	ldw	r3,-8(fp)
    74e0:	e0bfed17 	ldw	r2,-76(fp)
    74e4:	1880312e 	bgeu	r3,r2,75ac <_ZNSt6vectorIiSaIiEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPiS1_EEmRKi+0x168>
		{
		  std::__uninitialized_copy_a(this->_M_impl._M_finish - __n,
    74e8:	e0bffc17 	ldw	r2,-16(fp)
    74ec:	10c00117 	ldw	r3,4(r2)
    74f0:	e0bffe17 	ldw	r2,-8(fp)
    74f4:	1085883a 	add	r2,r2,r2
    74f8:	1085883a 	add	r2,r2,r2
    74fc:	18a1c83a 	sub	r16,r3,r2
    7500:	e0bffc17 	ldw	r2,-16(fp)
    7504:	14400117 	ldw	r17,4(r2)
    7508:	e0bffc17 	ldw	r2,-16(fp)
    750c:	14800117 	ldw	r18,4(r2)
    7510:	e13ffc17 	ldw	r4,-16(fp)
    7514:	00059940 	call	5994 <_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv>
    7518:	100b883a 	mov	r5,r2
    751c:	e13ff504 	addi	r4,fp,-44
    7520:	000592c0 	call	592c <_ZNSaIiEC1ERKS_>
    7524:	e1fff504 	addi	r7,fp,-44
    7528:	8009883a 	mov	r4,r16
    752c:	880b883a 	mov	r5,r17
    7530:	900d883a 	mov	r6,r18
    7534:	00070e40 	call	70e4 <_ZSt22__uninitialized_copy_aIPiS0_iET0_T_S2_S1_SaIT1_E>
    7538:	e13ff504 	addi	r4,fp,-44
    753c:	00058a00 	call	58a0 <_ZNSaIiED1Ev>
					      this->_M_impl._M_finish,
					      this->_M_impl._M_finish,
					      _M_get_Tp_allocator());
		  this->_M_impl._M_finish += __n;
    7540:	e0bffc17 	ldw	r2,-16(fp)
    7544:	10c00117 	ldw	r3,4(r2)
    7548:	e0bffe17 	ldw	r2,-8(fp)
    754c:	1085883a 	add	r2,r2,r2
    7550:	1085883a 	add	r2,r2,r2
    7554:	1887883a 	add	r3,r3,r2
    7558:	e0bffc17 	ldw	r2,-16(fp)
    755c:	10c00115 	stw	r3,4(r2)
		  std::copy_backward(__position, __old_finish - __n,
    7560:	e0bffe17 	ldw	r2,-8(fp)
    7564:	e0bff415 	stw	r2,-48(fp)
    7568:	e13ff804 	addi	r4,fp,-32
    756c:	e17ff404 	addi	r5,fp,-48
    7570:	0005f3c0 	call	5f3c <_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEmiERKl>
    7574:	100b883a 	mov	r5,r2
    7578:	e13ffd17 	ldw	r4,-12(fp)
    757c:	e1bff817 	ldw	r6,-32(fp)
    7580:	00073f40 	call	73f4 <_ZSt13copy_backwardIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEES6_ET0_T_S8_S7_>
				     __old_finish);
		  std::fill(__position, __position + __n, __x_copy);
    7584:	e0bffe17 	ldw	r2,-8(fp)
    7588:	e0bff315 	stw	r2,-52(fp)
    758c:	e13ffd04 	addi	r4,fp,-12
    7590:	e17ff304 	addi	r5,fp,-52
    7594:	0005d300 	call	5d30 <_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEplERKl>
    7598:	100b883a 	mov	r5,r2
    759c:	e1bff704 	addi	r6,fp,-36
    75a0:	e13ffd17 	ldw	r4,-12(fp)
    75a4:	000651c0 	call	651c <_ZSt4fillIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiEvT_S7_RKT0_>
    75a8:	0000bc06 	br	789c <_ZNSt6vectorIiSaIiEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPiS1_EEmRKi+0x458>
		}
	      else
		{
		  std::__uninitialized_fill_n_a(this->_M_impl._M_finish,
    75ac:	e0bffc17 	ldw	r2,-16(fp)
    75b0:	14000117 	ldw	r16,4(r2)
    75b4:	e0fffe17 	ldw	r3,-8(fp)
    75b8:	e0bfed17 	ldw	r2,-76(fp)
    75bc:	18a3c83a 	sub	r17,r3,r2
    75c0:	e13ffc17 	ldw	r4,-16(fp)
    75c4:	00059940 	call	5994 <_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv>
    75c8:	100b883a 	mov	r5,r2
    75cc:	e13ff244 	addi	r4,fp,-55
    75d0:	000592c0 	call	592c <_ZNSaIiEC1ERKS_>
    75d4:	e1bff704 	addi	r6,fp,-36
    75d8:	e1fff244 	addi	r7,fp,-55
    75dc:	8009883a 	mov	r4,r16
    75e0:	880b883a 	mov	r5,r17
    75e4:	00063dc0 	call	63dc <_ZSt24__uninitialized_fill_n_aIPimiiEvT_T0_RKT1_SaIT2_E>
    75e8:	e13ff244 	addi	r4,fp,-55
    75ec:	00058a00 	call	58a0 <_ZNSaIiED1Ev>
						__n - __elems_after,
						__x_copy,
						_M_get_Tp_allocator());
		  this->_M_impl._M_finish += __n - __elems_after;
    75f0:	e0bffc17 	ldw	r2,-16(fp)
    75f4:	11000117 	ldw	r4,4(r2)
    75f8:	e0fffe17 	ldw	r3,-8(fp)
    75fc:	e0bfed17 	ldw	r2,-76(fp)
    7600:	1885c83a 	sub	r2,r3,r2
    7604:	1085883a 	add	r2,r2,r2
    7608:	1085883a 	add	r2,r2,r2
    760c:	2087883a 	add	r3,r4,r2
    7610:	e0bffc17 	ldw	r2,-16(fp)
    7614:	10c00115 	stw	r3,4(r2)
		  std::__uninitialized_copy_a(__position, __old_finish,
    7618:	e0bffc17 	ldw	r2,-16(fp)
    761c:	14000117 	ldw	r16,4(r2)
    7620:	e13ffc17 	ldw	r4,-16(fp)
    7624:	00059940 	call	5994 <_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv>
    7628:	100b883a 	mov	r5,r2
    762c:	e13ff204 	addi	r4,fp,-56
    7630:	000592c0 	call	592c <_ZNSaIiEC1ERKS_>
    7634:	e1fff204 	addi	r7,fp,-56
    7638:	e13ffd17 	ldw	r4,-12(fp)
    763c:	e17ff817 	ldw	r5,-32(fp)
    7640:	800d883a 	mov	r6,r16
    7644:	00072580 	call	7258 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEES2_iET0_T_S8_S7_SaIT1_E>
    7648:	e13ff204 	addi	r4,fp,-56
    764c:	00058a00 	call	58a0 <_ZNSaIiED1Ev>
					      this->_M_impl._M_finish,
					      _M_get_Tp_allocator());
		  this->_M_impl._M_finish += __elems_after;
    7650:	e0bffc17 	ldw	r2,-16(fp)
    7654:	10c00117 	ldw	r3,4(r2)
    7658:	e0bfed17 	ldw	r2,-76(fp)
    765c:	1085883a 	add	r2,r2,r2
    7660:	1085883a 	add	r2,r2,r2
    7664:	1887883a 	add	r3,r3,r2
    7668:	e0bffc17 	ldw	r2,-16(fp)
    766c:	10c00115 	stw	r3,4(r2)
		  std::fill(__position, __old_finish, __x_copy);
    7670:	e1bff704 	addi	r6,fp,-36
    7674:	e13ffd17 	ldw	r4,-12(fp)
    7678:	e17ff817 	ldw	r5,-32(fp)
    767c:	000651c0 	call	651c <_ZSt4fillIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEiEvT_S7_RKT0_>
    7680:	00008606 	br	789c <_ZNSt6vectorIiSaIiEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPiS1_EEmRKi+0x458>
		}
	    }
	  else
	    {
	      const size_type __old_size = size();
    7684:	e13ffc17 	ldw	r4,-16(fp)
    7688:	0005c780 	call	5c78 <_ZNKSt6vectorIiSaIiEE4sizeEv>
    768c:	e0bff915 	stw	r2,-28(fp)
	      if (this->max_size() - __old_size < __n)
    7690:	e13ffc17 	ldw	r4,-16(fp)
    7694:	0005f980 	call	5f98 <_ZNKSt6vectorIiSaIiEE8max_sizeEv>
    7698:	1007883a 	mov	r3,r2
    769c:	e0bff917 	ldw	r2,-28(fp)
    76a0:	1887c83a 	sub	r3,r3,r2
    76a4:	e0bffe17 	ldw	r2,-8(fp)
    76a8:	1885803a 	cmpltu	r2,r3,r2
    76ac:	10803fcc 	andi	r2,r2,255
    76b0:	1005003a 	cmpeq	r2,r2,zero
    76b4:	1000031e 	bne	r2,zero,76c4 <_ZNSt6vectorIiSaIiEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPiS1_EEmRKi+0x280>
		__throw_length_error(__N("vector::_M_fill_insert"));
    76b8:	010000b4 	movhi	r4,2
    76bc:	213a2504 	addi	r4,r4,-5996
    76c0:	00088240 	call	8824 <_ZSt20__throw_length_errorPKc>
	      
	      // See _M_insert_aux above.
	      size_type __len = __old_size + std::max(__old_size, __n);
    76c4:	e13ff904 	addi	r4,fp,-28
    76c8:	e17ffe04 	addi	r5,fp,-8
    76cc:	0005fc00 	call	5fc0 <_ZSt3maxImERKT_S2_S2_>
    76d0:	10c00017 	ldw	r3,0(r2)
    76d4:	e0bff917 	ldw	r2,-28(fp)
    76d8:	1885883a 	add	r2,r3,r2
    76dc:	e0bfec15 	stw	r2,-80(fp)
	      if (__len < __old_size)
    76e0:	e0fff917 	ldw	r3,-28(fp)
    76e4:	e0bfec17 	ldw	r2,-80(fp)
    76e8:	10c0032e 	bgeu	r2,r3,76f8 <_ZNSt6vectorIiSaIiEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPiS1_EEmRKi+0x2b4>
		__len = this->max_size();
    76ec:	e13ffc17 	ldw	r4,-16(fp)
    76f0:	0005f980 	call	5f98 <_ZNKSt6vectorIiSaIiEE8max_sizeEv>
    76f4:	e0bfec15 	stw	r2,-80(fp)

	      iterator __new_start(this->_M_allocate(__len));
    76f8:	e13ffc17 	ldw	r4,-16(fp)
    76fc:	e17fec17 	ldw	r5,-80(fp)
    7700:	000675c0 	call	675c <_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEm>
    7704:	e0bff115 	stw	r2,-60(fp)
    7708:	e13ffa04 	addi	r4,fp,-24
    770c:	e17ff104 	addi	r5,fp,-60
    7710:	0005cc40 	call	5cc4 <_ZN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEC1ERKS1_>
	      iterator __new_finish(__new_start);
    7714:	e0bffa17 	ldw	r2,-24(fp)
    7718:	e0bffb15 	stw	r2,-20(fp)
	      try
		{
		  __new_finish =
    771c:	e13ffc17 	ldw	r4,-16(fp)
    7720:	0005cf80 	call	5cf8 <_ZNSt6vectorIiSaIiEE5beginEv>
    7724:	1021883a 	mov	r16,r2
    7728:	e13ffc17 	ldw	r4,-16(fp)
    772c:	00059940 	call	5994 <_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv>
    7730:	100b883a 	mov	r5,r2
    7734:	e13ff044 	addi	r4,fp,-63
    7738:	000592c0 	call	592c <_ZNSaIiEC1ERKS_>
    773c:	e1fff044 	addi	r7,fp,-63
    7740:	8009883a 	mov	r4,r16
    7744:	e17ffd17 	ldw	r5,-12(fp)
    7748:	e1bffa17 	ldw	r6,-24(fp)
    774c:	0006f900 	call	6f90 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEES6_iET0_T_S8_S7_SaIT1_E>
    7750:	e0bffb15 	stw	r2,-20(fp)
    7754:	e13ff044 	addi	r4,fp,-63
    7758:	00058a00 	call	58a0 <_ZNSaIiED1Ev>
		    std::__uninitialized_copy_a(begin(), __position,
						__new_start,
						_M_get_Tp_allocator());
		  std::__uninitialized_fill_n_a(__new_finish, __n, __x,
    775c:	e43ffe17 	ldw	r16,-8(fp)
    7760:	e13ffc17 	ldw	r4,-16(fp)
    7764:	00059940 	call	5994 <_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv>
    7768:	100b883a 	mov	r5,r2
    776c:	e13ff004 	addi	r4,fp,-64
    7770:	000592c0 	call	592c <_ZNSaIiEC1ERKS_>
    7774:	e1fff004 	addi	r7,fp,-64
    7778:	e13ffb17 	ldw	r4,-20(fp)
    777c:	800b883a 	mov	r5,r16
    7780:	e1bfff17 	ldw	r6,-4(fp)
    7784:	00066ac0 	call	66ac <_ZSt24__uninitialized_fill_n_aIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEmiiEvT_T0_RKT1_SaIT2_E>
    7788:	e13ff004 	addi	r4,fp,-64
    778c:	00058a00 	call	58a0 <_ZNSaIiED1Ev>
						_M_get_Tp_allocator());
		  __new_finish += __n;
    7790:	e0bffe17 	ldw	r2,-8(fp)
    7794:	e0bfef15 	stw	r2,-68(fp)
    7798:	e13ffb04 	addi	r4,fp,-20
    779c:	e17fef04 	addi	r5,fp,-68
    77a0:	00060100 	call	6010 <_ZN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEpLERKl>
		  __new_finish =
    77a4:	e13ffc17 	ldw	r4,-16(fp)
    77a8:	0005de40 	call	5de4 <_ZNSt6vectorIiSaIiEE3endEv>
    77ac:	1021883a 	mov	r16,r2
    77b0:	e13ffc17 	ldw	r4,-16(fp)
    77b4:	00059940 	call	5994 <_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv>
    77b8:	100b883a 	mov	r5,r2
    77bc:	e13fee84 	addi	r4,fp,-70
    77c0:	000592c0 	call	592c <_ZNSaIiEC1ERKS_>
    77c4:	e1ffee84 	addi	r7,fp,-70
    77c8:	e13ffd17 	ldw	r4,-12(fp)
    77cc:	800b883a 	mov	r5,r16
    77d0:	e1bffb17 	ldw	r6,-20(fp)
    77d4:	0006f900 	call	6f90 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEES6_iET0_T_S8_S7_SaIT1_E>
    77d8:	e0bffb15 	stw	r2,-20(fp)
    77dc:	e13fee84 	addi	r4,fp,-70
    77e0:	00058a00 	call	58a0 <_ZNSaIiED1Ev>
		  std::_Destroy(__new_start, __new_finish,
				_M_get_Tp_allocator());
		  _M_deallocate(__new_start.base(), __len);
		  __throw_exception_again;
		}
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    77e4:	e0bffc17 	ldw	r2,-16(fp)
    77e8:	14000017 	ldw	r16,0(r2)
    77ec:	e0bffc17 	ldw	r2,-16(fp)
    77f0:	14400117 	ldw	r17,4(r2)
    77f4:	e13ffc17 	ldw	r4,-16(fp)
    77f8:	00059940 	call	5994 <_ZNSt12_Vector_baseIiSaIiEE19_M_get_Tp_allocatorEv>
    77fc:	100b883a 	mov	r5,r2
    7800:	e13fee04 	addi	r4,fp,-72
    7804:	000592c0 	call	592c <_ZNSaIiEC1ERKS_>
    7808:	e1bfee04 	addi	r6,fp,-72
    780c:	8009883a 	mov	r4,r16
    7810:	880b883a 	mov	r5,r17
    7814:	0005e840 	call	5e84 <_ZSt8_DestroyIPiiEvT_S1_SaIT0_E>
    7818:	e13fee04 	addi	r4,fp,-72
    781c:	00058a00 	call	58a0 <_ZNSaIiED1Ev>
			    _M_get_Tp_allocator());
	      _M_deallocate(this->_M_impl._M_start,
    7820:	e13ffc17 	ldw	r4,-16(fp)
    7824:	e0bffc17 	ldw	r2,-16(fp)
    7828:	11400017 	ldw	r5,0(r2)
    782c:	e0bffc17 	ldw	r2,-16(fp)
    7830:	10800217 	ldw	r2,8(r2)
    7834:	1007883a 	mov	r3,r2
    7838:	e0bffc17 	ldw	r2,-16(fp)
    783c:	10800017 	ldw	r2,0(r2)
    7840:	1885c83a 	sub	r2,r3,r2
    7844:	1005d0ba 	srai	r2,r2,2
    7848:	100d883a 	mov	r6,r2
    784c:	0006a600 	call	6a60 <_ZNSt12_Vector_baseIiSaIiEE13_M_deallocateEPim>
			    this->_M_impl._M_end_of_storage
			    - this->_M_impl._M_start);
	      this->_M_impl._M_start = __new_start.base();
    7850:	e13ffa04 	addi	r4,fp,-24
    7854:	0005ec00 	call	5ec0 <_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEE4baseEv>
    7858:	10c00017 	ldw	r3,0(r2)
    785c:	e0bffc17 	ldw	r2,-16(fp)
    7860:	10c00015 	stw	r3,0(r2)
	      this->_M_impl._M_finish = __new_finish.base();
    7864:	e13ffb04 	addi	r4,fp,-20
    7868:	0005ec00 	call	5ec0 <_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEE4baseEv>
    786c:	10c00017 	ldw	r3,0(r2)
    7870:	e0bffc17 	ldw	r2,-16(fp)
    7874:	10c00115 	stw	r3,4(r2)
	      this->_M_impl._M_end_of_storage = __new_start.base() + __len;
    7878:	e13ffa04 	addi	r4,fp,-24
    787c:	0005ec00 	call	5ec0 <_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEE4baseEv>
    7880:	10c00017 	ldw	r3,0(r2)
    7884:	e0bfec17 	ldw	r2,-80(fp)
    7888:	1085883a 	add	r2,r2,r2
    788c:	1085883a 	add	r2,r2,r2
    7890:	1887883a 	add	r3,r3,r2
    7894:	e0bffc17 	ldw	r2,-16(fp)
    7898:	10c00215 	stw	r3,8(r2)
    789c:	e037883a 	mov	sp,fp
    78a0:	dfc00417 	ldw	ra,16(sp)
    78a4:	df000317 	ldw	fp,12(sp)
    78a8:	dc800217 	ldw	r18,8(sp)
    78ac:	dc400117 	ldw	r17,4(sp)
    78b0:	dc000017 	ldw	r16,0(sp)
    78b4:	dec00504 	addi	sp,sp,20
    78b8:	f800283a 	ret

000078bc <_ZNSt6vectorIiSaIiEE6insertEN9__gnu_cxx17__normal_iteratorIPiS1_EEmRKi>:
       *  Note that this kind of operation could be expensive for a
       *  %vector and if it is frequently used the user should
       *  consider using std::list.
       */
      void
      insert(iterator __position, size_type __n, const value_type& __x)
    78bc:	defffa04 	addi	sp,sp,-24
    78c0:	dfc00515 	stw	ra,20(sp)
    78c4:	df000415 	stw	fp,16(sp)
    78c8:	df000404 	addi	fp,sp,16
    78cc:	e13ffc15 	stw	r4,-16(fp)
    78d0:	e17ffd15 	stw	r5,-12(fp)
    78d4:	e1bffe15 	stw	r6,-8(fp)
    78d8:	e1ffff15 	stw	r7,-4(fp)
      { _M_fill_insert(__position, __n, __x); }
    78dc:	e13ffc17 	ldw	r4,-16(fp)
    78e0:	e17ffd17 	ldw	r5,-12(fp)
    78e4:	e1bffe17 	ldw	r6,-8(fp)
    78e8:	e1ffff17 	ldw	r7,-4(fp)
    78ec:	00074440 	call	7444 <_ZNSt6vectorIiSaIiEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPiS1_EEmRKi>
    78f0:	e037883a 	mov	sp,fp
    78f4:	dfc00117 	ldw	ra,4(sp)
    78f8:	df000017 	ldw	fp,0(sp)
    78fc:	dec00204 	addi	sp,sp,8
    7900:	f800283a 	ret

00007904 <_ZNSt6vectorIiSaIiEE6resizeEmi>:
       *  %vector's current size the %vector is truncated, otherwise
       *  the %vector is extended and new elements are populated with
       *  given data.
       */
      void
      resize(size_type __new_size, value_type __x = value_type())
    7904:	defff804 	addi	sp,sp,-32
    7908:	dfc00715 	stw	ra,28(sp)
    790c:	df000615 	stw	fp,24(sp)
    7910:	dc000515 	stw	r16,20(sp)
    7914:	df000504 	addi	fp,sp,20
    7918:	e13ffd15 	stw	r4,-12(fp)
    791c:	e17ffe15 	stw	r5,-8(fp)
    7920:	e1bfff15 	stw	r6,-4(fp)
      {
	if (__new_size < size())
    7924:	e13ffd17 	ldw	r4,-12(fp)
    7928:	0005c780 	call	5c78 <_ZNKSt6vectorIiSaIiEE4sizeEv>
    792c:	1007883a 	mov	r3,r2
    7930:	e0bffe17 	ldw	r2,-8(fp)
    7934:	10c5803a 	cmpltu	r2,r2,r3
    7938:	10803fcc 	andi	r2,r2,255
    793c:	1005003a 	cmpeq	r2,r2,zero
    7940:	1000101e 	bne	r2,zero,7984 <_ZNSt6vectorIiSaIiEE6resizeEmi+0x80>
	  erase(begin() + __new_size, end());
    7944:	e13ffd17 	ldw	r4,-12(fp)
    7948:	0005cf80 	call	5cf8 <_ZNSt6vectorIiSaIiEE5beginEv>
    794c:	e0bffc15 	stw	r2,-16(fp)
    7950:	e0bffe17 	ldw	r2,-8(fp)
    7954:	e0bffb15 	stw	r2,-20(fp)
    7958:	e13ffc04 	addi	r4,fp,-16
    795c:	e17ffb04 	addi	r5,fp,-20
    7960:	0005d300 	call	5d30 <_ZNK9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEplERKl>
    7964:	1021883a 	mov	r16,r2
    7968:	e13ffd17 	ldw	r4,-12(fp)
    796c:	0005de40 	call	5de4 <_ZNSt6vectorIiSaIiEE3endEv>
    7970:	100d883a 	mov	r6,r2
    7974:	e13ffd17 	ldw	r4,-12(fp)
    7978:	800b883a 	mov	r5,r16
    797c:	0006e500 	call	6e50 <_ZNSt6vectorIiSaIiEE5eraseEN9__gnu_cxx17__normal_iteratorIPiS1_EES5_>
    7980:	00000c06 	br	79b4 <_ZNSt6vectorIiSaIiEE6resizeEmi+0xb0>
	else
	  insert(end(), __new_size - size(), __x);
    7984:	e13ffd17 	ldw	r4,-12(fp)
    7988:	0005de40 	call	5de4 <_ZNSt6vectorIiSaIiEE3endEv>
    798c:	1021883a 	mov	r16,r2
    7990:	e13ffd17 	ldw	r4,-12(fp)
    7994:	0005c780 	call	5c78 <_ZNKSt6vectorIiSaIiEE4sizeEv>
    7998:	1007883a 	mov	r3,r2
    799c:	e0bffe17 	ldw	r2,-8(fp)
    79a0:	10cdc83a 	sub	r6,r2,r3
    79a4:	e1ffff04 	addi	r7,fp,-4
    79a8:	e13ffd17 	ldw	r4,-12(fp)
    79ac:	800b883a 	mov	r5,r16
    79b0:	00078bc0 	call	78bc <_ZNSt6vectorIiSaIiEE6insertEN9__gnu_cxx17__normal_iteratorIPiS1_EEmRKi>
    79b4:	e037883a 	mov	sp,fp
    79b8:	dfc00217 	ldw	ra,8(sp)
    79bc:	df000117 	ldw	fp,4(sp)
    79c0:	dc000017 	ldw	r16,0(sp)
    79c4:	dec00304 	addi	sp,sp,12
    79c8:	f800283a 	ret

000079cc <_ZSt18__throw_bad_typeidv>:
    79cc:	deffff04 	addi	sp,sp,-4
    79d0:	01000104 	movi	r4,4
    79d4:	dfc00015 	stw	ra,0(sp)
    79d8:	000efe80 	call	efe8 <__cxa_allocate_exception>
    79dc:	1009883a 	mov	r4,r2
    79e0:	008000b4 	movhi	r2,2
    79e4:	10bb0e04 	addi	r2,r2,-5064
    79e8:	20800015 	stw	r2,0(r4)
    79ec:	014000b4 	movhi	r5,2
    79f0:	297b1504 	addi	r5,r5,-5036
    79f4:	01800074 	movhi	r6,1
    79f8:	31b6bd04 	addi	r6,r6,-9484
    79fc:	000db880 	call	db88 <__cxa_throw>

00007a00 <_ZSt16__throw_bad_castv>:
    7a00:	deffff04 	addi	sp,sp,-4
    7a04:	01000104 	movi	r4,4
    7a08:	dfc00015 	stw	ra,0(sp)
    7a0c:	000efe80 	call	efe8 <__cxa_allocate_exception>
    7a10:	1009883a 	mov	r4,r2
    7a14:	008000b4 	movhi	r2,2
    7a18:	10bb1a04 	addi	r2,r2,-5016
    7a1c:	20800015 	stw	r2,0(r4)
    7a20:	014000b4 	movhi	r5,2
    7a24:	297b2004 	addi	r5,r5,-4992
    7a28:	01800074 	movhi	r6,1
    7a2c:	31ba9b04 	addi	r6,r6,-5524
    7a30:	000db880 	call	db88 <__cxa_throw>

00007a34 <_ZSt17__throw_bad_allocv>:
    7a34:	deffff04 	addi	sp,sp,-4
    7a38:	01000104 	movi	r4,4
    7a3c:	dfc00015 	stw	ra,0(sp)
    7a40:	000efe80 	call	efe8 <__cxa_allocate_exception>
    7a44:	1009883a 	mov	r4,r2
    7a48:	008000b4 	movhi	r2,2
    7a4c:	10bb5304 	addi	r2,r2,-4788
    7a50:	20800015 	stw	r2,0(r4)
    7a54:	014000b4 	movhi	r5,2
    7a58:	297b5a04 	addi	r5,r5,-4760
    7a5c:	01800074 	movhi	r6,1
    7a60:	31bbe204 	addi	r6,r6,-4216
    7a64:	000db880 	call	db88 <__cxa_throw>

00007a68 <_ZSt21__throw_bad_exceptionv>:
    7a68:	deffff04 	addi	sp,sp,-4
    7a6c:	01000104 	movi	r4,4
    7a70:	dfc00015 	stw	ra,0(sp)
    7a74:	000efe80 	call	efe8 <__cxa_allocate_exception>
    7a78:	1009883a 	mov	r4,r2
    7a7c:	008000b4 	movhi	r2,2
    7a80:	10bb3d04 	addi	r2,r2,-4876
    7a84:	20800015 	stw	r2,0(r4)
    7a88:	014000b4 	movhi	r5,2
    7a8c:	297b4a04 	addi	r5,r5,-4824
    7a90:	01800074 	movhi	r6,1
    7a94:	31bbca04 	addi	r6,r6,-4312
    7a98:	000db880 	call	db88 <__cxa_throw>

00007a9c <_ZSt19__throw_ios_failurePKc>:
    7a9c:	deffeb04 	addi	sp,sp,-84
    7aa0:	00800074 	movhi	r2,1
    7aa4:	10b95604 	addi	r2,r2,-6824
    7aa8:	d8800815 	stw	r2,32(sp)
    7aac:	00c000b4 	movhi	r3,2
    7ab0:	18f91604 	addi	r3,r3,-7080
    7ab4:	00800034 	movhi	r2,0
    7ab8:	109ede04 	addi	r2,r2,31608
    7abc:	d9001115 	stw	r4,68(sp)
    7ac0:	d9000204 	addi	r4,sp,8
    7ac4:	d8800b15 	stw	r2,44(sp)
    7ac8:	dfc01415 	stw	ra,80(sp)
    7acc:	df001315 	stw	fp,76(sp)
    7ad0:	ddc01215 	stw	r23,72(sp)
    7ad4:	d8c00915 	stw	r3,36(sp)
    7ad8:	dec00a15 	stw	sp,40(sp)
    7adc:	dec00c15 	stw	sp,48(sp)
    7ae0:	00108500 	call	10850 <_Unwind_SjLj_Register>
    7ae4:	00800084 	movi	r2,2
    7ae8:	d8800315 	stw	r2,12(sp)
    7aec:	d9401117 	ldw	r5,68(sp)
    7af0:	d9000104 	addi	r4,sp,4
    7af4:	d9800044 	addi	r6,sp,1
    7af8:	000b7940 	call	b794 <_ZNSsC1EPKcRKSaIcE>
    7afc:	01000204 	movi	r4,8
    7b00:	000efe80 	call	efe8 <__cxa_allocate_exception>
    7b04:	1009883a 	mov	r4,r2
    7b08:	d9400104 	addi	r5,sp,4
    7b0c:	d8801015 	stw	r2,64(sp)
    7b10:	0008c9c0 	call	8c9c <_ZNSt8ios_base7failureC1ERKSs>
    7b14:	d8800117 	ldw	r2,4(sp)
    7b18:	00c000b4 	movhi	r3,2
    7b1c:	18cac004 	addi	r3,r3,11008
    7b20:	10bffd04 	addi	r2,r2,-12
    7b24:	d8800f15 	stw	r2,60(sp)
    7b28:	10c0081e 	bne	r2,r3,7b4c <_ZSt19__throw_ios_failurePKc+0xb0>
    7b2c:	d9001017 	ldw	r4,64(sp)
    7b30:	00bfffc4 	movi	r2,-1
    7b34:	014000b4 	movhi	r5,2
    7b38:	297a9704 	addi	r5,r5,-5540
    7b3c:	01800074 	movhi	r6,1
    7b40:	31a2e604 	addi	r6,r6,-29800
    7b44:	d8800315 	stw	r2,12(sp)
    7b48:	000db880 	call	db88 <__cxa_throw>
    7b4c:	00800044 	movi	r2,1
    7b50:	d8800315 	stw	r2,12(sp)
    7b54:	d8800f17 	ldw	r2,60(sp)
    7b58:	017fffc4 	movi	r5,-1
    7b5c:	11000204 	addi	r4,r2,8
    7b60:	000daa80 	call	daa8 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
    7b64:	00bff116 	blt	zero,r2,7b2c <_ZSt19__throw_ios_failurePKc+0x90>
    7b68:	d9000f17 	ldw	r4,60(sp)
    7b6c:	d80b883a 	mov	r5,sp
    7b70:	000a5380 	call	a538 <_ZNSs4_Rep10_M_destroyERKSaIcE>
    7b74:	003fed06 	br	7b2c <_ZSt19__throw_ios_failurePKc+0x90>
    7b78:	d8c00317 	ldw	r3,12(sp)
    7b7c:	00800044 	movi	r2,1
    7b80:	d9000417 	ldw	r4,16(sp)
    7b84:	d9400517 	ldw	r5,20(sp)
    7b88:	18800226 	beq	r3,r2,7b94 <_ZSt19__throw_ios_failurePKc+0xf8>
    7b8c:	00bfffc4 	movi	r2,-1
    7b90:	28800326 	beq	r5,r2,7ba0 <_ZSt19__throw_ios_failurePKc+0x104>
    7b94:	00bfffc4 	movi	r2,-1
    7b98:	d8800315 	stw	r2,12(sp)
    7b9c:	0010b1c0 	call	10b1c <_Unwind_SjLj_Resume>
    7ba0:	000ed300 	call	ed30 <_ZSt9terminatev>

00007ba4 <_ZSt19__throw_logic_errorPKc>:
    7ba4:	deffe704 	addi	sp,sp,-100
    7ba8:	00800074 	movhi	r2,1
    7bac:	10b95604 	addi	r2,r2,-6824
    7bb0:	d8800815 	stw	r2,32(sp)
    7bb4:	00c000b4 	movhi	r3,2
    7bb8:	18f91b04 	addi	r3,r3,-7060
    7bbc:	00800034 	movhi	r2,0
    7bc0:	109f2404 	addi	r2,r2,31888
    7bc4:	d9001315 	stw	r4,76(sp)
    7bc8:	d9000204 	addi	r4,sp,8
    7bcc:	d8800b15 	stw	r2,44(sp)
    7bd0:	dfc01815 	stw	ra,96(sp)
    7bd4:	df001715 	stw	fp,92(sp)
    7bd8:	ddc01615 	stw	r23,88(sp)
    7bdc:	d8c00915 	stw	r3,36(sp)
    7be0:	dec00a15 	stw	sp,40(sp)
    7be4:	dec00c15 	stw	sp,48(sp)
    7be8:	00108500 	call	10850 <_Unwind_SjLj_Register>
    7bec:	00800104 	movi	r2,4
    7bf0:	d8800315 	stw	r2,12(sp)
    7bf4:	d885883a 	add	r2,sp,r2
    7bf8:	d8801415 	stw	r2,80(sp)
    7bfc:	d9401317 	ldw	r5,76(sp)
    7c00:	1009883a 	mov	r4,r2
    7c04:	d9800084 	addi	r6,sp,2
    7c08:	000b7940 	call	b794 <_ZNSsC1EPKcRKSaIcE>
    7c0c:	01000204 	movi	r4,8
    7c10:	000efe80 	call	efe8 <__cxa_allocate_exception>
    7c14:	d8801215 	stw	r2,72(sp)
    7c18:	008000c4 	movi	r2,3
    7c1c:	d8800315 	stw	r2,12(sp)
    7c20:	d9401417 	ldw	r5,80(sp)
    7c24:	d9001217 	ldw	r4,72(sp)
    7c28:	00093280 	call	9328 <_ZNSt11logic_errorC1ERKSs>
    7c2c:	d8800117 	ldw	r2,4(sp)
    7c30:	00c000b4 	movhi	r3,2
    7c34:	18cac004 	addi	r3,r3,11008
    7c38:	10bffd04 	addi	r2,r2,-12
    7c3c:	d8800f15 	stw	r2,60(sp)
    7c40:	10c0081e 	bne	r2,r3,7c64 <_ZSt19__throw_logic_errorPKc+0xc0>
    7c44:	d9001217 	ldw	r4,72(sp)
    7c48:	00bfffc4 	movi	r2,-1
    7c4c:	014000b4 	movhi	r5,2
    7c50:	297ab004 	addi	r5,r5,-5440
    7c54:	01800074 	movhi	r6,1
    7c58:	31a41504 	addi	r6,r6,-28588
    7c5c:	d8800315 	stw	r2,12(sp)
    7c60:	000db880 	call	db88 <__cxa_throw>
    7c64:	00800044 	movi	r2,1
    7c68:	d8800315 	stw	r2,12(sp)
    7c6c:	d8800f17 	ldw	r2,60(sp)
    7c70:	017fffc4 	movi	r5,-1
    7c74:	11000204 	addi	r4,r2,8
    7c78:	000daa80 	call	daa8 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
    7c7c:	00bff116 	blt	zero,r2,7c44 <_ZSt19__throw_logic_errorPKc+0xa0>
    7c80:	d9000f17 	ldw	r4,60(sp)
    7c84:	d80b883a 	mov	r5,sp
    7c88:	000a5380 	call	a538 <_ZNSs4_Rep10_M_destroyERKSaIcE>
    7c8c:	003fed06 	br	7c44 <_ZSt19__throw_logic_errorPKc+0xa0>
    7c90:	d8800417 	ldw	r2,16(sp)
    7c94:	d8c00317 	ldw	r3,12(sp)
    7c98:	d9000517 	ldw	r4,20(sp)
    7c9c:	d8801515 	stw	r2,84(sp)
    7ca0:	00800044 	movi	r2,1
    7ca4:	18800426 	beq	r3,r2,7cb8 <_ZSt19__throw_logic_errorPKc+0x114>
    7ca8:	00800084 	movi	r2,2
    7cac:	18800826 	beq	r3,r2,7cd0 <_ZSt19__throw_logic_errorPKc+0x12c>
    7cb0:	008000c4 	movi	r2,3
    7cb4:	18800226 	beq	r3,r2,7cc0 <_ZSt19__throw_logic_errorPKc+0x11c>
    7cb8:	00bfffc4 	movi	r2,-1
    7cbc:	20801126 	beq	r4,r2,7d04 <_ZSt19__throw_logic_errorPKc+0x160>
    7cc0:	d9001517 	ldw	r4,84(sp)
    7cc4:	00bfffc4 	movi	r2,-1
    7cc8:	d8800315 	stw	r2,12(sp)
    7ccc:	0010b1c0 	call	10b1c <_Unwind_SjLj_Resume>
    7cd0:	d9001217 	ldw	r4,72(sp)
    7cd4:	000efa80 	call	efa8 <__cxa_free_exception>
    7cd8:	d8801517 	ldw	r2,84(sp)
    7cdc:	00c000b4 	movhi	r3,2
    7ce0:	18cac004 	addi	r3,r3,11008
    7ce4:	d8801115 	stw	r2,68(sp)
    7ce8:	d8800117 	ldw	r2,4(sp)
    7cec:	10bffd04 	addi	r2,r2,-12
    7cf0:	d8801015 	stw	r2,64(sp)
    7cf4:	10c0041e 	bne	r2,r3,7d08 <_ZSt19__throw_logic_errorPKc+0x164>
    7cf8:	d8801117 	ldw	r2,68(sp)
    7cfc:	d8801515 	stw	r2,84(sp)
    7d00:	003fef06 	br	7cc0 <_ZSt19__throw_logic_errorPKc+0x11c>
    7d04:	000ed300 	call	ed30 <_ZSt9terminatev>
    7d08:	00800084 	movi	r2,2
    7d0c:	d8800315 	stw	r2,12(sp)
    7d10:	d8801017 	ldw	r2,64(sp)
    7d14:	017fffc4 	movi	r5,-1
    7d18:	11000204 	addi	r4,r2,8
    7d1c:	000daa80 	call	daa8 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
    7d20:	00bff516 	blt	zero,r2,7cf8 <_ZSt19__throw_logic_errorPKc+0x154>
    7d24:	d9001017 	ldw	r4,64(sp)
    7d28:	d9400044 	addi	r5,sp,1
    7d2c:	000a5380 	call	a538 <_ZNSs4_Rep10_M_destroyERKSaIcE>
    7d30:	003ff106 	br	7cf8 <_ZSt19__throw_logic_errorPKc+0x154>

00007d34 <_ZSt23__throw_underflow_errorPKc>:
    7d34:	deffe704 	addi	sp,sp,-100
    7d38:	00800074 	movhi	r2,1
    7d3c:	10b95604 	addi	r2,r2,-6824
    7d40:	d8800815 	stw	r2,32(sp)
    7d44:	00c000b4 	movhi	r3,2
    7d48:	18f92104 	addi	r3,r3,-7036
    7d4c:	00800034 	movhi	r2,0
    7d50:	109f8804 	addi	r2,r2,32288
    7d54:	d9001315 	stw	r4,76(sp)
    7d58:	d9000204 	addi	r4,sp,8
    7d5c:	d8800b15 	stw	r2,44(sp)
    7d60:	dfc01815 	stw	ra,96(sp)
    7d64:	df001715 	stw	fp,92(sp)
    7d68:	ddc01615 	stw	r23,88(sp)
    7d6c:	d8c00915 	stw	r3,36(sp)
    7d70:	dec00a15 	stw	sp,40(sp)
    7d74:	dec00c15 	stw	sp,48(sp)
    7d78:	00108500 	call	10850 <_Unwind_SjLj_Register>
    7d7c:	00800104 	movi	r2,4
    7d80:	d8800315 	stw	r2,12(sp)
    7d84:	d885883a 	add	r2,sp,r2
    7d88:	d8801415 	stw	r2,80(sp)
    7d8c:	d9401317 	ldw	r5,76(sp)
    7d90:	1009883a 	mov	r4,r2
    7d94:	d9800084 	addi	r6,sp,2
    7d98:	000b7940 	call	b794 <_ZNSsC1EPKcRKSaIcE>
    7d9c:	01000204 	movi	r4,8
    7da0:	000efe80 	call	efe8 <__cxa_allocate_exception>
    7da4:	d8801215 	stw	r2,72(sp)
    7da8:	008000c4 	movi	r2,3
    7dac:	d8800315 	stw	r2,12(sp)
    7db0:	d9401417 	ldw	r5,80(sp)
    7db4:	d9001217 	ldw	r4,72(sp)
    7db8:	00092080 	call	9208 <_ZNSt15underflow_errorC1ERKSs>
    7dbc:	d8800117 	ldw	r2,4(sp)
    7dc0:	00c000b4 	movhi	r3,2
    7dc4:	18cac004 	addi	r3,r3,11008
    7dc8:	10bffd04 	addi	r2,r2,-12
    7dcc:	d8800f15 	stw	r2,60(sp)
    7dd0:	10c0081e 	bne	r2,r3,7df4 <_ZSt23__throw_underflow_errorPKc+0xc0>
    7dd4:	d9001217 	ldw	r4,72(sp)
    7dd8:	00bfffc4 	movi	r2,-1
    7ddc:	014000b4 	movhi	r5,2
    7de0:	297a3104 	addi	r5,r5,-5948
    7de4:	01800074 	movhi	r6,1
    7de8:	31a27a04 	addi	r6,r6,-30232
    7dec:	d8800315 	stw	r2,12(sp)
    7df0:	000db880 	call	db88 <__cxa_throw>
    7df4:	00800044 	movi	r2,1
    7df8:	d8800315 	stw	r2,12(sp)
    7dfc:	d8800f17 	ldw	r2,60(sp)
    7e00:	017fffc4 	movi	r5,-1
    7e04:	11000204 	addi	r4,r2,8
    7e08:	000daa80 	call	daa8 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
    7e0c:	00bff116 	blt	zero,r2,7dd4 <_ZSt23__throw_underflow_errorPKc+0xa0>
    7e10:	d9000f17 	ldw	r4,60(sp)
    7e14:	d80b883a 	mov	r5,sp
    7e18:	000a5380 	call	a538 <_ZNSs4_Rep10_M_destroyERKSaIcE>
    7e1c:	003fed06 	br	7dd4 <_ZSt23__throw_underflow_errorPKc+0xa0>
    7e20:	d8800417 	ldw	r2,16(sp)
    7e24:	d8c00317 	ldw	r3,12(sp)
    7e28:	d9000517 	ldw	r4,20(sp)
    7e2c:	d8801515 	stw	r2,84(sp)
    7e30:	00800044 	movi	r2,1
    7e34:	18800426 	beq	r3,r2,7e48 <_ZSt23__throw_underflow_errorPKc+0x114>
    7e38:	00800084 	movi	r2,2
    7e3c:	18800826 	beq	r3,r2,7e60 <_ZSt23__throw_underflow_errorPKc+0x12c>
    7e40:	008000c4 	movi	r2,3
    7e44:	18800226 	beq	r3,r2,7e50 <_ZSt23__throw_underflow_errorPKc+0x11c>
    7e48:	00bfffc4 	movi	r2,-1
    7e4c:	20801126 	beq	r4,r2,7e94 <_ZSt23__throw_underflow_errorPKc+0x160>
    7e50:	d9001517 	ldw	r4,84(sp)
    7e54:	00bfffc4 	movi	r2,-1
    7e58:	d8800315 	stw	r2,12(sp)
    7e5c:	0010b1c0 	call	10b1c <_Unwind_SjLj_Resume>
    7e60:	d9001217 	ldw	r4,72(sp)
    7e64:	000efa80 	call	efa8 <__cxa_free_exception>
    7e68:	d8801517 	ldw	r2,84(sp)
    7e6c:	00c000b4 	movhi	r3,2
    7e70:	18cac004 	addi	r3,r3,11008
    7e74:	d8801115 	stw	r2,68(sp)
    7e78:	d8800117 	ldw	r2,4(sp)
    7e7c:	10bffd04 	addi	r2,r2,-12
    7e80:	d8801015 	stw	r2,64(sp)
    7e84:	10c0041e 	bne	r2,r3,7e98 <_ZSt23__throw_underflow_errorPKc+0x164>
    7e88:	d8801117 	ldw	r2,68(sp)
    7e8c:	d8801515 	stw	r2,84(sp)
    7e90:	003fef06 	br	7e50 <_ZSt23__throw_underflow_errorPKc+0x11c>
    7e94:	000ed300 	call	ed30 <_ZSt9terminatev>
    7e98:	00800084 	movi	r2,2
    7e9c:	d8800315 	stw	r2,12(sp)
    7ea0:	d8801017 	ldw	r2,64(sp)
    7ea4:	017fffc4 	movi	r5,-1
    7ea8:	11000204 	addi	r4,r2,8
    7eac:	000daa80 	call	daa8 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
    7eb0:	00bff516 	blt	zero,r2,7e88 <_ZSt23__throw_underflow_errorPKc+0x154>
    7eb4:	d9001017 	ldw	r4,64(sp)
    7eb8:	d9400044 	addi	r5,sp,1
    7ebc:	000a5380 	call	a538 <_ZNSs4_Rep10_M_destroyERKSaIcE>
    7ec0:	003ff106 	br	7e88 <_ZSt23__throw_underflow_errorPKc+0x154>

00007ec4 <_ZSt22__throw_overflow_errorPKc>:
    7ec4:	deffe704 	addi	sp,sp,-100
    7ec8:	00800074 	movhi	r2,1
    7ecc:	10b95604 	addi	r2,r2,-6824
    7ed0:	d8800815 	stw	r2,32(sp)
    7ed4:	00c000b4 	movhi	r3,2
    7ed8:	18f92704 	addi	r3,r3,-7012
    7edc:	00800034 	movhi	r2,0
    7ee0:	109fec04 	addi	r2,r2,32688
    7ee4:	d9001315 	stw	r4,76(sp)
    7ee8:	d9000204 	addi	r4,sp,8
    7eec:	d8800b15 	stw	r2,44(sp)
    7ef0:	dfc01815 	stw	ra,96(sp)
    7ef4:	df001715 	stw	fp,92(sp)
    7ef8:	ddc01615 	stw	r23,88(sp)
    7efc:	d8c00915 	stw	r3,36(sp)
    7f00:	dec00a15 	stw	sp,40(sp)
    7f04:	dec00c15 	stw	sp,48(sp)
    7f08:	00108500 	call	10850 <_Unwind_SjLj_Register>
    7f0c:	00800104 	movi	r2,4
    7f10:	d8800315 	stw	r2,12(sp)
    7f14:	d885883a 	add	r2,sp,r2
    7f18:	d8801415 	stw	r2,80(sp)
    7f1c:	d9401317 	ldw	r5,76(sp)
    7f20:	1009883a 	mov	r4,r2
    7f24:	d9800084 	addi	r6,sp,2
    7f28:	000b7940 	call	b794 <_ZNSsC1EPKcRKSaIcE>
    7f2c:	01000204 	movi	r4,8
    7f30:	000efe80 	call	efe8 <__cxa_allocate_exception>
    7f34:	d8801215 	stw	r2,72(sp)
    7f38:	008000c4 	movi	r2,3
    7f3c:	d8800315 	stw	r2,12(sp)
    7f40:	d9401417 	ldw	r5,80(sp)
    7f44:	d9001217 	ldw	r4,72(sp)
    7f48:	00092680 	call	9268 <_ZNSt14overflow_errorC1ERKSs>
    7f4c:	d8800117 	ldw	r2,4(sp)
    7f50:	00c000b4 	movhi	r3,2
    7f54:	18cac004 	addi	r3,r3,11008
    7f58:	10bffd04 	addi	r2,r2,-12
    7f5c:	d8800f15 	stw	r2,60(sp)
    7f60:	10c0081e 	bne	r2,r3,7f84 <_ZSt22__throw_overflow_errorPKc+0xc0>
    7f64:	d9001217 	ldw	r4,72(sp)
    7f68:	00bfffc4 	movi	r2,-1
    7f6c:	014000b4 	movhi	r5,2
    7f70:	297a3e04 	addi	r5,r5,-5896
    7f74:	01800074 	movhi	r6,1
    7f78:	31a28b04 	addi	r6,r6,-30164
    7f7c:	d8800315 	stw	r2,12(sp)
    7f80:	000db880 	call	db88 <__cxa_throw>
    7f84:	00800044 	movi	r2,1
    7f88:	d8800315 	stw	r2,12(sp)
    7f8c:	d8800f17 	ldw	r2,60(sp)
    7f90:	017fffc4 	movi	r5,-1
    7f94:	11000204 	addi	r4,r2,8
    7f98:	000daa80 	call	daa8 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
    7f9c:	00bff116 	blt	zero,r2,7f64 <_ZSt22__throw_overflow_errorPKc+0xa0>
    7fa0:	d9000f17 	ldw	r4,60(sp)
    7fa4:	d80b883a 	mov	r5,sp
    7fa8:	000a5380 	call	a538 <_ZNSs4_Rep10_M_destroyERKSaIcE>
    7fac:	003fed06 	br	7f64 <_ZSt22__throw_overflow_errorPKc+0xa0>
    7fb0:	d8800417 	ldw	r2,16(sp)
    7fb4:	d8c00317 	ldw	r3,12(sp)
    7fb8:	d9000517 	ldw	r4,20(sp)
    7fbc:	d8801515 	stw	r2,84(sp)
    7fc0:	00800044 	movi	r2,1
    7fc4:	18800426 	beq	r3,r2,7fd8 <_ZSt22__throw_overflow_errorPKc+0x114>
    7fc8:	00800084 	movi	r2,2
    7fcc:	18800826 	beq	r3,r2,7ff0 <_ZSt22__throw_overflow_errorPKc+0x12c>
    7fd0:	008000c4 	movi	r2,3
    7fd4:	18800226 	beq	r3,r2,7fe0 <_ZSt22__throw_overflow_errorPKc+0x11c>
    7fd8:	00bfffc4 	movi	r2,-1
    7fdc:	20801126 	beq	r4,r2,8024 <_ZSt22__throw_overflow_errorPKc+0x160>
    7fe0:	d9001517 	ldw	r4,84(sp)
    7fe4:	00bfffc4 	movi	r2,-1
    7fe8:	d8800315 	stw	r2,12(sp)
    7fec:	0010b1c0 	call	10b1c <_Unwind_SjLj_Resume>
    7ff0:	d9001217 	ldw	r4,72(sp)
    7ff4:	000efa80 	call	efa8 <__cxa_free_exception>
    7ff8:	d8801517 	ldw	r2,84(sp)
    7ffc:	00c000b4 	movhi	r3,2
    8000:	18cac004 	addi	r3,r3,11008
    8004:	d8801115 	stw	r2,68(sp)
    8008:	d8800117 	ldw	r2,4(sp)
    800c:	10bffd04 	addi	r2,r2,-12
    8010:	d8801015 	stw	r2,64(sp)
    8014:	10c0041e 	bne	r2,r3,8028 <_ZSt22__throw_overflow_errorPKc+0x164>
    8018:	d8801117 	ldw	r2,68(sp)
    801c:	d8801515 	stw	r2,84(sp)
    8020:	003fef06 	br	7fe0 <_ZSt22__throw_overflow_errorPKc+0x11c>
    8024:	000ed300 	call	ed30 <_ZSt9terminatev>
    8028:	00800084 	movi	r2,2
    802c:	d8800315 	stw	r2,12(sp)
    8030:	d8801017 	ldw	r2,64(sp)
    8034:	017fffc4 	movi	r5,-1
    8038:	11000204 	addi	r4,r2,8
    803c:	000daa80 	call	daa8 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
    8040:	00bff516 	blt	zero,r2,8018 <_ZSt22__throw_overflow_errorPKc+0x154>
    8044:	d9001017 	ldw	r4,64(sp)
    8048:	d9400044 	addi	r5,sp,1
    804c:	000a5380 	call	a538 <_ZNSs4_Rep10_M_destroyERKSaIcE>
    8050:	003ff106 	br	8018 <_ZSt22__throw_overflow_errorPKc+0x154>

00008054 <_ZSt24__throw_invalid_argumentPKc>:
    8054:	deffe704 	addi	sp,sp,-100
    8058:	00800074 	movhi	r2,1
    805c:	10b95604 	addi	r2,r2,-6824
    8060:	d8800815 	stw	r2,32(sp)
    8064:	00c000b4 	movhi	r3,2
    8068:	18f92d04 	addi	r3,r3,-6988
    806c:	00800074 	movhi	r2,1
    8070:	10a05004 	addi	r2,r2,-32448
    8074:	d9001315 	stw	r4,76(sp)
    8078:	d9000204 	addi	r4,sp,8
    807c:	d8800b15 	stw	r2,44(sp)
    8080:	dfc01815 	stw	ra,96(sp)
    8084:	df001715 	stw	fp,92(sp)
    8088:	ddc01615 	stw	r23,88(sp)
    808c:	d8c00915 	stw	r3,36(sp)
    8090:	dec00a15 	stw	sp,40(sp)
    8094:	dec00c15 	stw	sp,48(sp)
    8098:	00108500 	call	10850 <_Unwind_SjLj_Register>
    809c:	00800104 	movi	r2,4
    80a0:	d8800315 	stw	r2,12(sp)
    80a4:	d885883a 	add	r2,sp,r2
    80a8:	d8801415 	stw	r2,80(sp)
    80ac:	d9401317 	ldw	r5,76(sp)
    80b0:	1009883a 	mov	r4,r2
    80b4:	d9800084 	addi	r6,sp,2
    80b8:	000b7940 	call	b794 <_ZNSsC1EPKcRKSaIcE>
    80bc:	01000204 	movi	r4,8
    80c0:	000efe80 	call	efe8 <__cxa_allocate_exception>
    80c4:	d8801215 	stw	r2,72(sp)
    80c8:	008000c4 	movi	r2,3
    80cc:	d8800315 	stw	r2,12(sp)
    80d0:	d9401417 	ldw	r5,80(sp)
    80d4:	d9001217 	ldw	r4,72(sp)
    80d8:	00095480 	call	9548 <_ZNSt16invalid_argumentC1ERKSs>
    80dc:	d8800117 	ldw	r2,4(sp)
    80e0:	00c000b4 	movhi	r3,2
    80e4:	18cac004 	addi	r3,r3,11008
    80e8:	10bffd04 	addi	r2,r2,-12
    80ec:	d8800f15 	stw	r2,60(sp)
    80f0:	10c0081e 	bne	r2,r3,8114 <_ZSt24__throw_invalid_argumentPKc+0xc0>
    80f4:	d9001217 	ldw	r4,72(sp)
    80f8:	00bfffc4 	movi	r2,-1
    80fc:	014000b4 	movhi	r5,2
    8100:	297a7104 	addi	r5,r5,-5692
    8104:	01800074 	movhi	r6,1
    8108:	31a2cf04 	addi	r6,r6,-29892
    810c:	d8800315 	stw	r2,12(sp)
    8110:	000db880 	call	db88 <__cxa_throw>
    8114:	00800044 	movi	r2,1
    8118:	d8800315 	stw	r2,12(sp)
    811c:	d8800f17 	ldw	r2,60(sp)
    8120:	017fffc4 	movi	r5,-1
    8124:	11000204 	addi	r4,r2,8
    8128:	000daa80 	call	daa8 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
    812c:	00bff116 	blt	zero,r2,80f4 <_ZSt24__throw_invalid_argumentPKc+0xa0>
    8130:	d9000f17 	ldw	r4,60(sp)
    8134:	d80b883a 	mov	r5,sp
    8138:	000a5380 	call	a538 <_ZNSs4_Rep10_M_destroyERKSaIcE>
    813c:	003fed06 	br	80f4 <_ZSt24__throw_invalid_argumentPKc+0xa0>
    8140:	d8800417 	ldw	r2,16(sp)
    8144:	d8c00317 	ldw	r3,12(sp)
    8148:	d9000517 	ldw	r4,20(sp)
    814c:	d8801515 	stw	r2,84(sp)
    8150:	00800044 	movi	r2,1
    8154:	18800426 	beq	r3,r2,8168 <_ZSt24__throw_invalid_argumentPKc+0x114>
    8158:	00800084 	movi	r2,2
    815c:	18800826 	beq	r3,r2,8180 <_ZSt24__throw_invalid_argumentPKc+0x12c>
    8160:	008000c4 	movi	r2,3
    8164:	18800226 	beq	r3,r2,8170 <_ZSt24__throw_invalid_argumentPKc+0x11c>
    8168:	00bfffc4 	movi	r2,-1
    816c:	20801126 	beq	r4,r2,81b4 <_ZSt24__throw_invalid_argumentPKc+0x160>
    8170:	d9001517 	ldw	r4,84(sp)
    8174:	00bfffc4 	movi	r2,-1
    8178:	d8800315 	stw	r2,12(sp)
    817c:	0010b1c0 	call	10b1c <_Unwind_SjLj_Resume>
    8180:	d9001217 	ldw	r4,72(sp)
    8184:	000efa80 	call	efa8 <__cxa_free_exception>
    8188:	d8801517 	ldw	r2,84(sp)
    818c:	00c000b4 	movhi	r3,2
    8190:	18cac004 	addi	r3,r3,11008
    8194:	d8801115 	stw	r2,68(sp)
    8198:	d8800117 	ldw	r2,4(sp)
    819c:	10bffd04 	addi	r2,r2,-12
    81a0:	d8801015 	stw	r2,64(sp)
    81a4:	10c0041e 	bne	r2,r3,81b8 <_ZSt24__throw_invalid_argumentPKc+0x164>
    81a8:	d8801117 	ldw	r2,68(sp)
    81ac:	d8801515 	stw	r2,84(sp)
    81b0:	003fef06 	br	8170 <_ZSt24__throw_invalid_argumentPKc+0x11c>
    81b4:	000ed300 	call	ed30 <_ZSt9terminatev>
    81b8:	00800084 	movi	r2,2
    81bc:	d8800315 	stw	r2,12(sp)
    81c0:	d8801017 	ldw	r2,64(sp)
    81c4:	017fffc4 	movi	r5,-1
    81c8:	11000204 	addi	r4,r2,8
    81cc:	000daa80 	call	daa8 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
    81d0:	00bff516 	blt	zero,r2,81a8 <_ZSt24__throw_invalid_argumentPKc+0x154>
    81d4:	d9001017 	ldw	r4,64(sp)
    81d8:	d9400044 	addi	r5,sp,1
    81dc:	000a5380 	call	a538 <_ZNSs4_Rep10_M_destroyERKSaIcE>
    81e0:	003ff106 	br	81a8 <_ZSt24__throw_invalid_argumentPKc+0x154>

000081e4 <_ZSt20__throw_domain_errorPKc>:
    81e4:	deffe704 	addi	sp,sp,-100
    81e8:	00800074 	movhi	r2,1
    81ec:	10b95604 	addi	r2,r2,-6824
    81f0:	d8800815 	stw	r2,32(sp)
    81f4:	00c000b4 	movhi	r3,2
    81f8:	18f93304 	addi	r3,r3,-6964
    81fc:	00800074 	movhi	r2,1
    8200:	10a0b404 	addi	r2,r2,-32048
    8204:	d9001315 	stw	r4,76(sp)
    8208:	d9000204 	addi	r4,sp,8
    820c:	d8800b15 	stw	r2,44(sp)
    8210:	dfc01815 	stw	ra,96(sp)
    8214:	df001715 	stw	fp,92(sp)
    8218:	ddc01615 	stw	r23,88(sp)
    821c:	d8c00915 	stw	r3,36(sp)
    8220:	dec00a15 	stw	sp,40(sp)
    8224:	dec00c15 	stw	sp,48(sp)
    8228:	00108500 	call	10850 <_Unwind_SjLj_Register>
    822c:	00800104 	movi	r2,4
    8230:	d8800315 	stw	r2,12(sp)
    8234:	d885883a 	add	r2,sp,r2
    8238:	d8801415 	stw	r2,80(sp)
    823c:	d9401317 	ldw	r5,76(sp)
    8240:	1009883a 	mov	r4,r2
    8244:	d9800084 	addi	r6,sp,2
    8248:	000b7940 	call	b794 <_ZNSsC1EPKcRKSaIcE>
    824c:	01000204 	movi	r4,8
    8250:	000efe80 	call	efe8 <__cxa_allocate_exception>
    8254:	d8801215 	stw	r2,72(sp)
    8258:	008000c4 	movi	r2,3
    825c:	d8800315 	stw	r2,12(sp)
    8260:	d9401417 	ldw	r5,80(sp)
    8264:	d9001217 	ldw	r4,72(sp)
    8268:	00095a80 	call	95a8 <_ZNSt12domain_errorC1ERKSs>
    826c:	d8800117 	ldw	r2,4(sp)
    8270:	00c000b4 	movhi	r3,2
    8274:	18cac004 	addi	r3,r3,11008
    8278:	10bffd04 	addi	r2,r2,-12
    827c:	d8800f15 	stw	r2,60(sp)
    8280:	10c0081e 	bne	r2,r3,82a4 <_ZSt20__throw_domain_errorPKc+0xc0>
    8284:	d9001217 	ldw	r4,72(sp)
    8288:	00bfffc4 	movi	r2,-1
    828c:	014000b4 	movhi	r5,2
    8290:	297a7f04 	addi	r5,r5,-5636
    8294:	01800074 	movhi	r6,1
    8298:	31a2e004 	addi	r6,r6,-29824
    829c:	d8800315 	stw	r2,12(sp)
    82a0:	000db880 	call	db88 <__cxa_throw>
    82a4:	00800044 	movi	r2,1
    82a8:	d8800315 	stw	r2,12(sp)
    82ac:	d8800f17 	ldw	r2,60(sp)
    82b0:	017fffc4 	movi	r5,-1
    82b4:	11000204 	addi	r4,r2,8
    82b8:	000daa80 	call	daa8 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
    82bc:	00bff116 	blt	zero,r2,8284 <_ZSt20__throw_domain_errorPKc+0xa0>
    82c0:	d9000f17 	ldw	r4,60(sp)
    82c4:	d80b883a 	mov	r5,sp
    82c8:	000a5380 	call	a538 <_ZNSs4_Rep10_M_destroyERKSaIcE>
    82cc:	003fed06 	br	8284 <_ZSt20__throw_domain_errorPKc+0xa0>
    82d0:	d8800417 	ldw	r2,16(sp)
    82d4:	d8c00317 	ldw	r3,12(sp)
    82d8:	d9000517 	ldw	r4,20(sp)
    82dc:	d8801515 	stw	r2,84(sp)
    82e0:	00800044 	movi	r2,1
    82e4:	18800426 	beq	r3,r2,82f8 <_ZSt20__throw_domain_errorPKc+0x114>
    82e8:	00800084 	movi	r2,2
    82ec:	18800826 	beq	r3,r2,8310 <_ZSt20__throw_domain_errorPKc+0x12c>
    82f0:	008000c4 	movi	r2,3
    82f4:	18800226 	beq	r3,r2,8300 <_ZSt20__throw_domain_errorPKc+0x11c>
    82f8:	00bfffc4 	movi	r2,-1
    82fc:	20801126 	beq	r4,r2,8344 <_ZSt20__throw_domain_errorPKc+0x160>
    8300:	d9001517 	ldw	r4,84(sp)
    8304:	00bfffc4 	movi	r2,-1
    8308:	d8800315 	stw	r2,12(sp)
    830c:	0010b1c0 	call	10b1c <_Unwind_SjLj_Resume>
    8310:	d9001217 	ldw	r4,72(sp)
    8314:	000efa80 	call	efa8 <__cxa_free_exception>
    8318:	d8801517 	ldw	r2,84(sp)
    831c:	00c000b4 	movhi	r3,2
    8320:	18cac004 	addi	r3,r3,11008
    8324:	d8801115 	stw	r2,68(sp)
    8328:	d8800117 	ldw	r2,4(sp)
    832c:	10bffd04 	addi	r2,r2,-12
    8330:	d8801015 	stw	r2,64(sp)
    8334:	10c0041e 	bne	r2,r3,8348 <_ZSt20__throw_domain_errorPKc+0x164>
    8338:	d8801117 	ldw	r2,68(sp)
    833c:	d8801515 	stw	r2,84(sp)
    8340:	003fef06 	br	8300 <_ZSt20__throw_domain_errorPKc+0x11c>
    8344:	000ed300 	call	ed30 <_ZSt9terminatev>
    8348:	00800084 	movi	r2,2
    834c:	d8800315 	stw	r2,12(sp)
    8350:	d8801017 	ldw	r2,64(sp)
    8354:	017fffc4 	movi	r5,-1
    8358:	11000204 	addi	r4,r2,8
    835c:	000daa80 	call	daa8 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
    8360:	00bff516 	blt	zero,r2,8338 <_ZSt20__throw_domain_errorPKc+0x154>
    8364:	d9001017 	ldw	r4,64(sp)
    8368:	d9400044 	addi	r5,sp,1
    836c:	000a5380 	call	a538 <_ZNSs4_Rep10_M_destroyERKSaIcE>
    8370:	003ff106 	br	8338 <_ZSt20__throw_domain_errorPKc+0x154>

00008374 <_ZSt19__throw_range_errorPKc>:
    8374:	deffe704 	addi	sp,sp,-100
    8378:	00800074 	movhi	r2,1
    837c:	10b95604 	addi	r2,r2,-6824
    8380:	d8800815 	stw	r2,32(sp)
    8384:	00c000b4 	movhi	r3,2
    8388:	18f93904 	addi	r3,r3,-6940
    838c:	00800074 	movhi	r2,1
    8390:	10a11804 	addi	r2,r2,-31648
    8394:	d9001315 	stw	r4,76(sp)
    8398:	d9000204 	addi	r4,sp,8
    839c:	d8800b15 	stw	r2,44(sp)
    83a0:	dfc01815 	stw	ra,96(sp)
    83a4:	df001715 	stw	fp,92(sp)
    83a8:	ddc01615 	stw	r23,88(sp)
    83ac:	d8c00915 	stw	r3,36(sp)
    83b0:	dec00a15 	stw	sp,40(sp)
    83b4:	dec00c15 	stw	sp,48(sp)
    83b8:	00108500 	call	10850 <_Unwind_SjLj_Register>
    83bc:	00800104 	movi	r2,4
    83c0:	d8800315 	stw	r2,12(sp)
    83c4:	d885883a 	add	r2,sp,r2
    83c8:	d8801415 	stw	r2,80(sp)
    83cc:	d9401317 	ldw	r5,76(sp)
    83d0:	1009883a 	mov	r4,r2
    83d4:	d9800084 	addi	r6,sp,2
    83d8:	000b7940 	call	b794 <_ZNSsC1EPKcRKSaIcE>
    83dc:	01000204 	movi	r4,8
    83e0:	000efe80 	call	efe8 <__cxa_allocate_exception>
    83e4:	d8801215 	stw	r2,72(sp)
    83e8:	008000c4 	movi	r2,3
    83ec:	d8800315 	stw	r2,12(sp)
    83f0:	d9401417 	ldw	r5,80(sp)
    83f4:	d9001217 	ldw	r4,72(sp)
    83f8:	00092c80 	call	92c8 <_ZNSt11range_errorC1ERKSs>
    83fc:	d8800117 	ldw	r2,4(sp)
    8400:	00c000b4 	movhi	r3,2
    8404:	18cac004 	addi	r3,r3,11008
    8408:	10bffd04 	addi	r2,r2,-12
    840c:	d8800f15 	stw	r2,60(sp)
    8410:	10c0081e 	bne	r2,r3,8434 <_ZSt19__throw_range_errorPKc+0xc0>
    8414:	d9001217 	ldw	r4,72(sp)
    8418:	00bfffc4 	movi	r2,-1
    841c:	014000b4 	movhi	r5,2
    8420:	297a4b04 	addi	r5,r5,-5844
    8424:	01800074 	movhi	r6,1
    8428:	31a29c04 	addi	r6,r6,-30096
    842c:	d8800315 	stw	r2,12(sp)
    8430:	000db880 	call	db88 <__cxa_throw>
    8434:	00800044 	movi	r2,1
    8438:	d8800315 	stw	r2,12(sp)
    843c:	d8800f17 	ldw	r2,60(sp)
    8440:	017fffc4 	movi	r5,-1
    8444:	11000204 	addi	r4,r2,8
    8448:	000daa80 	call	daa8 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
    844c:	00bff116 	blt	zero,r2,8414 <_ZSt19__throw_range_errorPKc+0xa0>
    8450:	d9000f17 	ldw	r4,60(sp)
    8454:	d80b883a 	mov	r5,sp
    8458:	000a5380 	call	a538 <_ZNSs4_Rep10_M_destroyERKSaIcE>
    845c:	003fed06 	br	8414 <_ZSt19__throw_range_errorPKc+0xa0>
    8460:	d8800417 	ldw	r2,16(sp)
    8464:	d8c00317 	ldw	r3,12(sp)
    8468:	d9000517 	ldw	r4,20(sp)
    846c:	d8801515 	stw	r2,84(sp)
    8470:	00800044 	movi	r2,1
    8474:	18800426 	beq	r3,r2,8488 <_ZSt19__throw_range_errorPKc+0x114>
    8478:	00800084 	movi	r2,2
    847c:	18800826 	beq	r3,r2,84a0 <_ZSt19__throw_range_errorPKc+0x12c>
    8480:	008000c4 	movi	r2,3
    8484:	18800226 	beq	r3,r2,8490 <_ZSt19__throw_range_errorPKc+0x11c>
    8488:	00bfffc4 	movi	r2,-1
    848c:	20801126 	beq	r4,r2,84d4 <_ZSt19__throw_range_errorPKc+0x160>
    8490:	d9001517 	ldw	r4,84(sp)
    8494:	00bfffc4 	movi	r2,-1
    8498:	d8800315 	stw	r2,12(sp)
    849c:	0010b1c0 	call	10b1c <_Unwind_SjLj_Resume>
    84a0:	d9001217 	ldw	r4,72(sp)
    84a4:	000efa80 	call	efa8 <__cxa_free_exception>
    84a8:	d8801517 	ldw	r2,84(sp)
    84ac:	00c000b4 	movhi	r3,2
    84b0:	18cac004 	addi	r3,r3,11008
    84b4:	d8801115 	stw	r2,68(sp)
    84b8:	d8800117 	ldw	r2,4(sp)
    84bc:	10bffd04 	addi	r2,r2,-12
    84c0:	d8801015 	stw	r2,64(sp)
    84c4:	10c0041e 	bne	r2,r3,84d8 <_ZSt19__throw_range_errorPKc+0x164>
    84c8:	d8801117 	ldw	r2,68(sp)
    84cc:	d8801515 	stw	r2,84(sp)
    84d0:	003fef06 	br	8490 <_ZSt19__throw_range_errorPKc+0x11c>
    84d4:	000ed300 	call	ed30 <_ZSt9terminatev>
    84d8:	00800084 	movi	r2,2
    84dc:	d8800315 	stw	r2,12(sp)
    84e0:	d8801017 	ldw	r2,64(sp)
    84e4:	017fffc4 	movi	r5,-1
    84e8:	11000204 	addi	r4,r2,8
    84ec:	000daa80 	call	daa8 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
    84f0:	00bff516 	blt	zero,r2,84c8 <_ZSt19__throw_range_errorPKc+0x154>
    84f4:	d9001017 	ldw	r4,64(sp)
    84f8:	d9400044 	addi	r5,sp,1
    84fc:	000a5380 	call	a538 <_ZNSs4_Rep10_M_destroyERKSaIcE>
    8500:	003ff106 	br	84c8 <_ZSt19__throw_range_errorPKc+0x154>

00008504 <_ZSt21__throw_runtime_errorPKc>:
    8504:	deffe704 	addi	sp,sp,-100
    8508:	00800074 	movhi	r2,1
    850c:	10b95604 	addi	r2,r2,-6824
    8510:	d8800815 	stw	r2,32(sp)
    8514:	00c000b4 	movhi	r3,2
    8518:	18f93f04 	addi	r3,r3,-6916
    851c:	00800074 	movhi	r2,1
    8520:	10a17c04 	addi	r2,r2,-31248
    8524:	d9001315 	stw	r4,76(sp)
    8528:	d9000204 	addi	r4,sp,8
    852c:	d8800b15 	stw	r2,44(sp)
    8530:	dfc01815 	stw	ra,96(sp)
    8534:	df001715 	stw	fp,92(sp)
    8538:	ddc01615 	stw	r23,88(sp)
    853c:	d8c00915 	stw	r3,36(sp)
    8540:	dec00a15 	stw	sp,40(sp)
    8544:	dec00c15 	stw	sp,48(sp)
    8548:	00108500 	call	10850 <_Unwind_SjLj_Register>
    854c:	00800104 	movi	r2,4
    8550:	d8800315 	stw	r2,12(sp)
    8554:	d885883a 	add	r2,sp,r2
    8558:	d8801415 	stw	r2,80(sp)
    855c:	d9401317 	ldw	r5,76(sp)
    8560:	1009883a 	mov	r4,r2
    8564:	d9800084 	addi	r6,sp,2
    8568:	000b7940 	call	b794 <_ZNSsC1EPKcRKSaIcE>
    856c:	01000204 	movi	r4,8
    8570:	000efe80 	call	efe8 <__cxa_allocate_exception>
    8574:	d8801215 	stw	r2,72(sp)
    8578:	008000c4 	movi	r2,3
    857c:	d8800315 	stw	r2,12(sp)
    8580:	d9401417 	ldw	r5,80(sp)
    8584:	d9001217 	ldw	r4,72(sp)
    8588:	00096100 	call	9610 <_ZNSt13runtime_errorC1ERKSs>
    858c:	d8800117 	ldw	r2,4(sp)
    8590:	00c000b4 	movhi	r3,2
    8594:	18cac004 	addi	r3,r3,11008
    8598:	10bffd04 	addi	r2,r2,-12
    859c:	d8800f15 	stw	r2,60(sp)
    85a0:	10c0081e 	bne	r2,r3,85c4 <_ZSt21__throw_runtime_errorPKc+0xc0>
    85a4:	d9001217 	ldw	r4,72(sp)
    85a8:	00bfffc4 	movi	r2,-1
    85ac:	014000b4 	movhi	r5,2
    85b0:	297aa904 	addi	r5,r5,-5468
    85b4:	01800074 	movhi	r6,1
    85b8:	31a5b004 	addi	r6,r6,-26944
    85bc:	d8800315 	stw	r2,12(sp)
    85c0:	000db880 	call	db88 <__cxa_throw>
    85c4:	00800044 	movi	r2,1
    85c8:	d8800315 	stw	r2,12(sp)
    85cc:	d8800f17 	ldw	r2,60(sp)
    85d0:	017fffc4 	movi	r5,-1
    85d4:	11000204 	addi	r4,r2,8
    85d8:	000daa80 	call	daa8 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
    85dc:	00bff116 	blt	zero,r2,85a4 <_ZSt21__throw_runtime_errorPKc+0xa0>
    85e0:	d9000f17 	ldw	r4,60(sp)
    85e4:	d80b883a 	mov	r5,sp
    85e8:	000a5380 	call	a538 <_ZNSs4_Rep10_M_destroyERKSaIcE>
    85ec:	003fed06 	br	85a4 <_ZSt21__throw_runtime_errorPKc+0xa0>
    85f0:	d8800417 	ldw	r2,16(sp)
    85f4:	d8c00317 	ldw	r3,12(sp)
    85f8:	d9000517 	ldw	r4,20(sp)
    85fc:	d8801515 	stw	r2,84(sp)
    8600:	00800044 	movi	r2,1
    8604:	18800426 	beq	r3,r2,8618 <_ZSt21__throw_runtime_errorPKc+0x114>
    8608:	00800084 	movi	r2,2
    860c:	18800826 	beq	r3,r2,8630 <_ZSt21__throw_runtime_errorPKc+0x12c>
    8610:	008000c4 	movi	r2,3
    8614:	18800226 	beq	r3,r2,8620 <_ZSt21__throw_runtime_errorPKc+0x11c>
    8618:	00bfffc4 	movi	r2,-1
    861c:	20801126 	beq	r4,r2,8664 <_ZSt21__throw_runtime_errorPKc+0x160>
    8620:	d9001517 	ldw	r4,84(sp)
    8624:	00bfffc4 	movi	r2,-1
    8628:	d8800315 	stw	r2,12(sp)
    862c:	0010b1c0 	call	10b1c <_Unwind_SjLj_Resume>
    8630:	d9001217 	ldw	r4,72(sp)
    8634:	000efa80 	call	efa8 <__cxa_free_exception>
    8638:	d8801517 	ldw	r2,84(sp)
    863c:	00c000b4 	movhi	r3,2
    8640:	18cac004 	addi	r3,r3,11008
    8644:	d8801115 	stw	r2,68(sp)
    8648:	d8800117 	ldw	r2,4(sp)
    864c:	10bffd04 	addi	r2,r2,-12
    8650:	d8801015 	stw	r2,64(sp)
    8654:	10c0041e 	bne	r2,r3,8668 <_ZSt21__throw_runtime_errorPKc+0x164>
    8658:	d8801117 	ldw	r2,68(sp)
    865c:	d8801515 	stw	r2,84(sp)
    8660:	003fef06 	br	8620 <_ZSt21__throw_runtime_errorPKc+0x11c>
    8664:	000ed300 	call	ed30 <_ZSt9terminatev>
    8668:	00800084 	movi	r2,2
    866c:	d8800315 	stw	r2,12(sp)
    8670:	d8801017 	ldw	r2,64(sp)
    8674:	017fffc4 	movi	r5,-1
    8678:	11000204 	addi	r4,r2,8
    867c:	000daa80 	call	daa8 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
    8680:	00bff516 	blt	zero,r2,8658 <_ZSt21__throw_runtime_errorPKc+0x154>
    8684:	d9001017 	ldw	r4,64(sp)
    8688:	d9400044 	addi	r5,sp,1
    868c:	000a5380 	call	a538 <_ZNSs4_Rep10_M_destroyERKSaIcE>
    8690:	003ff106 	br	8658 <_ZSt21__throw_runtime_errorPKc+0x154>

00008694 <_ZSt20__throw_out_of_rangePKc>:
    8694:	deffe704 	addi	sp,sp,-100
    8698:	00800074 	movhi	r2,1
    869c:	10b95604 	addi	r2,r2,-6824
    86a0:	d8800815 	stw	r2,32(sp)
    86a4:	00c000b4 	movhi	r3,2
    86a8:	18f94504 	addi	r3,r3,-6892
    86ac:	00800074 	movhi	r2,1
    86b0:	10a1e004 	addi	r2,r2,-30848
    86b4:	d9001315 	stw	r4,76(sp)
    86b8:	d9000204 	addi	r4,sp,8
    86bc:	d8800b15 	stw	r2,44(sp)
    86c0:	dfc01815 	stw	ra,96(sp)
    86c4:	df001715 	stw	fp,92(sp)
    86c8:	ddc01615 	stw	r23,88(sp)
    86cc:	d8c00915 	stw	r3,36(sp)
    86d0:	dec00a15 	stw	sp,40(sp)
    86d4:	dec00c15 	stw	sp,48(sp)
    86d8:	00108500 	call	10850 <_Unwind_SjLj_Register>
    86dc:	00800104 	movi	r2,4
    86e0:	d8800315 	stw	r2,12(sp)
    86e4:	d885883a 	add	r2,sp,r2
    86e8:	d8801415 	stw	r2,80(sp)
    86ec:	d9401317 	ldw	r5,76(sp)
    86f0:	1009883a 	mov	r4,r2
    86f4:	d9800084 	addi	r6,sp,2
    86f8:	000b7940 	call	b794 <_ZNSsC1EPKcRKSaIcE>
    86fc:	01000204 	movi	r4,8
    8700:	000efe80 	call	efe8 <__cxa_allocate_exception>
    8704:	d8801215 	stw	r2,72(sp)
    8708:	008000c4 	movi	r2,3
    870c:	d8800315 	stw	r2,12(sp)
    8710:	d9401417 	ldw	r5,80(sp)
    8714:	d9001217 	ldw	r4,72(sp)
    8718:	00094880 	call	9488 <_ZNSt12out_of_rangeC1ERKSs>
    871c:	d8800117 	ldw	r2,4(sp)
    8720:	00c000b4 	movhi	r3,2
    8724:	18cac004 	addi	r3,r3,11008
    8728:	10bffd04 	addi	r2,r2,-12
    872c:	d8800f15 	stw	r2,60(sp)
    8730:	10c0081e 	bne	r2,r3,8754 <_ZSt20__throw_out_of_rangePKc+0xc0>
    8734:	d9001217 	ldw	r4,72(sp)
    8738:	00bfffc4 	movi	r2,-1
    873c:	014000b4 	movhi	r5,2
    8740:	297a5704 	addi	r5,r5,-5796
    8744:	01800074 	movhi	r6,1
    8748:	31a2ad04 	addi	r6,r6,-30028
    874c:	d8800315 	stw	r2,12(sp)
    8750:	000db880 	call	db88 <__cxa_throw>
    8754:	00800044 	movi	r2,1
    8758:	d8800315 	stw	r2,12(sp)
    875c:	d8800f17 	ldw	r2,60(sp)
    8760:	017fffc4 	movi	r5,-1
    8764:	11000204 	addi	r4,r2,8
    8768:	000daa80 	call	daa8 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
    876c:	00bff116 	blt	zero,r2,8734 <_ZSt20__throw_out_of_rangePKc+0xa0>
    8770:	d9000f17 	ldw	r4,60(sp)
    8774:	d80b883a 	mov	r5,sp
    8778:	000a5380 	call	a538 <_ZNSs4_Rep10_M_destroyERKSaIcE>
    877c:	003fed06 	br	8734 <_ZSt20__throw_out_of_rangePKc+0xa0>
    8780:	d8800417 	ldw	r2,16(sp)
    8784:	d8c00317 	ldw	r3,12(sp)
    8788:	d9000517 	ldw	r4,20(sp)
    878c:	d8801515 	stw	r2,84(sp)
    8790:	00800044 	movi	r2,1
    8794:	18800426 	beq	r3,r2,87a8 <_ZSt20__throw_out_of_rangePKc+0x114>
    8798:	00800084 	movi	r2,2
    879c:	18800826 	beq	r3,r2,87c0 <_ZSt20__throw_out_of_rangePKc+0x12c>
    87a0:	008000c4 	movi	r2,3
    87a4:	18800226 	beq	r3,r2,87b0 <_ZSt20__throw_out_of_rangePKc+0x11c>
    87a8:	00bfffc4 	movi	r2,-1
    87ac:	20801126 	beq	r4,r2,87f4 <_ZSt20__throw_out_of_rangePKc+0x160>
    87b0:	d9001517 	ldw	r4,84(sp)
    87b4:	00bfffc4 	movi	r2,-1
    87b8:	d8800315 	stw	r2,12(sp)
    87bc:	0010b1c0 	call	10b1c <_Unwind_SjLj_Resume>
    87c0:	d9001217 	ldw	r4,72(sp)
    87c4:	000efa80 	call	efa8 <__cxa_free_exception>
    87c8:	d8801517 	ldw	r2,84(sp)
    87cc:	00c000b4 	movhi	r3,2
    87d0:	18cac004 	addi	r3,r3,11008
    87d4:	d8801115 	stw	r2,68(sp)
    87d8:	d8800117 	ldw	r2,4(sp)
    87dc:	10bffd04 	addi	r2,r2,-12
    87e0:	d8801015 	stw	r2,64(sp)
    87e4:	10c0041e 	bne	r2,r3,87f8 <_ZSt20__throw_out_of_rangePKc+0x164>
    87e8:	d8801117 	ldw	r2,68(sp)
    87ec:	d8801515 	stw	r2,84(sp)
    87f0:	003fef06 	br	87b0 <_ZSt20__throw_out_of_rangePKc+0x11c>
    87f4:	000ed300 	call	ed30 <_ZSt9terminatev>
    87f8:	00800084 	movi	r2,2
    87fc:	d8800315 	stw	r2,12(sp)
    8800:	d8801017 	ldw	r2,64(sp)
    8804:	017fffc4 	movi	r5,-1
    8808:	11000204 	addi	r4,r2,8
    880c:	000daa80 	call	daa8 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
    8810:	00bff516 	blt	zero,r2,87e8 <_ZSt20__throw_out_of_rangePKc+0x154>
    8814:	d9001017 	ldw	r4,64(sp)
    8818:	d9400044 	addi	r5,sp,1
    881c:	000a5380 	call	a538 <_ZNSs4_Rep10_M_destroyERKSaIcE>
    8820:	003ff106 	br	87e8 <_ZSt20__throw_out_of_rangePKc+0x154>

00008824 <_ZSt20__throw_length_errorPKc>:
    8824:	deffe704 	addi	sp,sp,-100
    8828:	00800074 	movhi	r2,1
    882c:	10b95604 	addi	r2,r2,-6824
    8830:	d8800815 	stw	r2,32(sp)
    8834:	00c000b4 	movhi	r3,2
    8838:	18f94b04 	addi	r3,r3,-6868
    883c:	00800074 	movhi	r2,1
    8840:	10a24404 	addi	r2,r2,-30448
    8844:	d9001315 	stw	r4,76(sp)
    8848:	d9000204 	addi	r4,sp,8
    884c:	d8800b15 	stw	r2,44(sp)
    8850:	dfc01815 	stw	ra,96(sp)
    8854:	df001715 	stw	fp,92(sp)
    8858:	ddc01615 	stw	r23,88(sp)
    885c:	d8c00915 	stw	r3,36(sp)
    8860:	dec00a15 	stw	sp,40(sp)
    8864:	dec00c15 	stw	sp,48(sp)
    8868:	00108500 	call	10850 <_Unwind_SjLj_Register>
    886c:	00800104 	movi	r2,4
    8870:	d8800315 	stw	r2,12(sp)
    8874:	d885883a 	add	r2,sp,r2
    8878:	d8801415 	stw	r2,80(sp)
    887c:	d9401317 	ldw	r5,76(sp)
    8880:	1009883a 	mov	r4,r2
    8884:	d9800084 	addi	r6,sp,2
    8888:	000b7940 	call	b794 <_ZNSsC1EPKcRKSaIcE>
    888c:	01000204 	movi	r4,8
    8890:	000efe80 	call	efe8 <__cxa_allocate_exception>
    8894:	d8801215 	stw	r2,72(sp)
    8898:	008000c4 	movi	r2,3
    889c:	d8800315 	stw	r2,12(sp)
    88a0:	d9401417 	ldw	r5,80(sp)
    88a4:	d9001217 	ldw	r4,72(sp)
    88a8:	00094e80 	call	94e8 <_ZNSt12length_errorC1ERKSs>
    88ac:	d8800117 	ldw	r2,4(sp)
    88b0:	00c000b4 	movhi	r3,2
    88b4:	18cac004 	addi	r3,r3,11008
    88b8:	10bffd04 	addi	r2,r2,-12
    88bc:	d8800f15 	stw	r2,60(sp)
    88c0:	10c0081e 	bne	r2,r3,88e4 <_ZSt20__throw_length_errorPKc+0xc0>
    88c4:	d9001217 	ldw	r4,72(sp)
    88c8:	00bfffc4 	movi	r2,-1
    88cc:	014000b4 	movhi	r5,2
    88d0:	297a6404 	addi	r5,r5,-5744
    88d4:	01800074 	movhi	r6,1
    88d8:	31a2be04 	addi	r6,r6,-29960
    88dc:	d8800315 	stw	r2,12(sp)
    88e0:	000db880 	call	db88 <__cxa_throw>
    88e4:	00800044 	movi	r2,1
    88e8:	d8800315 	stw	r2,12(sp)
    88ec:	d8800f17 	ldw	r2,60(sp)
    88f0:	017fffc4 	movi	r5,-1
    88f4:	11000204 	addi	r4,r2,8
    88f8:	000daa80 	call	daa8 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
    88fc:	00bff116 	blt	zero,r2,88c4 <_ZSt20__throw_length_errorPKc+0xa0>
    8900:	d9000f17 	ldw	r4,60(sp)
    8904:	d80b883a 	mov	r5,sp
    8908:	000a5380 	call	a538 <_ZNSs4_Rep10_M_destroyERKSaIcE>
    890c:	003fed06 	br	88c4 <_ZSt20__throw_length_errorPKc+0xa0>
    8910:	d8800417 	ldw	r2,16(sp)
    8914:	d8c00317 	ldw	r3,12(sp)
    8918:	d9000517 	ldw	r4,20(sp)
    891c:	d8801515 	stw	r2,84(sp)
    8920:	00800044 	movi	r2,1
    8924:	18800426 	beq	r3,r2,8938 <_ZSt20__throw_length_errorPKc+0x114>
    8928:	00800084 	movi	r2,2
    892c:	18800826 	beq	r3,r2,8950 <_ZSt20__throw_length_errorPKc+0x12c>
    8930:	008000c4 	movi	r2,3
    8934:	18800226 	beq	r3,r2,8940 <_ZSt20__throw_length_errorPKc+0x11c>
    8938:	00bfffc4 	movi	r2,-1
    893c:	20801126 	beq	r4,r2,8984 <_ZSt20__throw_length_errorPKc+0x160>
    8940:	d9001517 	ldw	r4,84(sp)
    8944:	00bfffc4 	movi	r2,-1
    8948:	d8800315 	stw	r2,12(sp)
    894c:	0010b1c0 	call	10b1c <_Unwind_SjLj_Resume>
    8950:	d9001217 	ldw	r4,72(sp)
    8954:	000efa80 	call	efa8 <__cxa_free_exception>
    8958:	d8801517 	ldw	r2,84(sp)
    895c:	00c000b4 	movhi	r3,2
    8960:	18cac004 	addi	r3,r3,11008
    8964:	d8801115 	stw	r2,68(sp)
    8968:	d8800117 	ldw	r2,4(sp)
    896c:	10bffd04 	addi	r2,r2,-12
    8970:	d8801015 	stw	r2,64(sp)
    8974:	10c0041e 	bne	r2,r3,8988 <_ZSt20__throw_length_errorPKc+0x164>
    8978:	d8801117 	ldw	r2,68(sp)
    897c:	d8801515 	stw	r2,84(sp)
    8980:	003fef06 	br	8940 <_ZSt20__throw_length_errorPKc+0x11c>
    8984:	000ed300 	call	ed30 <_ZSt9terminatev>
    8988:	00800084 	movi	r2,2
    898c:	d8800315 	stw	r2,12(sp)
    8990:	d8801017 	ldw	r2,64(sp)
    8994:	017fffc4 	movi	r5,-1
    8998:	11000204 	addi	r4,r2,8
    899c:	000daa80 	call	daa8 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
    89a0:	00bff516 	blt	zero,r2,8978 <_ZSt20__throw_length_errorPKc+0x154>
    89a4:	d9001017 	ldw	r4,64(sp)
    89a8:	d9400044 	addi	r5,sp,1
    89ac:	000a5380 	call	a538 <_ZNSs4_Rep10_M_destroyERKSaIcE>
    89b0:	003ff106 	br	8978 <_ZSt20__throw_length_errorPKc+0x154>

000089b4 <_ZNSt15underflow_errorD0Ev>:
    89b4:	defffe04 	addi	sp,sp,-8
    89b8:	008000b4 	movhi	r2,2
    89bc:	10ba3b04 	addi	r2,r2,-5908
    89c0:	dc400015 	stw	r17,0(sp)
    89c4:	20800015 	stw	r2,0(r4)
    89c8:	2023883a 	mov	r17,r4
    89cc:	dfc00115 	stw	ra,4(sp)
    89d0:	00097c40 	call	97c4 <_ZNSt13runtime_errorD2Ev>
    89d4:	8809883a 	mov	r4,r17
    89d8:	dfc00117 	ldw	ra,4(sp)
    89dc:	dc400017 	ldw	r17,0(sp)
    89e0:	dec00204 	addi	sp,sp,8
    89e4:	000de401 	jmpi	de40 <_ZdlPv>

000089e8 <_ZNSt15underflow_errorD1Ev>:
    89e8:	008000b4 	movhi	r2,2
    89ec:	10ba3b04 	addi	r2,r2,-5908
    89f0:	20800015 	stw	r2,0(r4)
    89f4:	00097c41 	jmpi	97c4 <_ZNSt13runtime_errorD2Ev>

000089f8 <_ZNSt14overflow_errorD0Ev>:
    89f8:	defffe04 	addi	sp,sp,-8
    89fc:	008000b4 	movhi	r2,2
    8a00:	10ba4804 	addi	r2,r2,-5856
    8a04:	dc400015 	stw	r17,0(sp)
    8a08:	20800015 	stw	r2,0(r4)
    8a0c:	2023883a 	mov	r17,r4
    8a10:	dfc00115 	stw	ra,4(sp)
    8a14:	00097c40 	call	97c4 <_ZNSt13runtime_errorD2Ev>
    8a18:	8809883a 	mov	r4,r17
    8a1c:	dfc00117 	ldw	ra,4(sp)
    8a20:	dc400017 	ldw	r17,0(sp)
    8a24:	dec00204 	addi	sp,sp,8
    8a28:	000de401 	jmpi	de40 <_ZdlPv>

00008a2c <_ZNSt14overflow_errorD1Ev>:
    8a2c:	008000b4 	movhi	r2,2
    8a30:	10ba4804 	addi	r2,r2,-5856
    8a34:	20800015 	stw	r2,0(r4)
    8a38:	00097c41 	jmpi	97c4 <_ZNSt13runtime_errorD2Ev>

00008a3c <_ZNSt11range_errorD0Ev>:
    8a3c:	defffe04 	addi	sp,sp,-8
    8a40:	008000b4 	movhi	r2,2
    8a44:	10ba5404 	addi	r2,r2,-5808
    8a48:	dc400015 	stw	r17,0(sp)
    8a4c:	20800015 	stw	r2,0(r4)
    8a50:	2023883a 	mov	r17,r4
    8a54:	dfc00115 	stw	ra,4(sp)
    8a58:	00097c40 	call	97c4 <_ZNSt13runtime_errorD2Ev>
    8a5c:	8809883a 	mov	r4,r17
    8a60:	dfc00117 	ldw	ra,4(sp)
    8a64:	dc400017 	ldw	r17,0(sp)
    8a68:	dec00204 	addi	sp,sp,8
    8a6c:	000de401 	jmpi	de40 <_ZdlPv>

00008a70 <_ZNSt11range_errorD1Ev>:
    8a70:	008000b4 	movhi	r2,2
    8a74:	10ba5404 	addi	r2,r2,-5808
    8a78:	20800015 	stw	r2,0(r4)
    8a7c:	00097c41 	jmpi	97c4 <_ZNSt13runtime_errorD2Ev>

00008a80 <_ZNSt12out_of_rangeD0Ev>:
    8a80:	defffe04 	addi	sp,sp,-8
    8a84:	008000b4 	movhi	r2,2
    8a88:	10ba6104 	addi	r2,r2,-5756
    8a8c:	dc400015 	stw	r17,0(sp)
    8a90:	20800015 	stw	r2,0(r4)
    8a94:	2023883a 	mov	r17,r4
    8a98:	dfc00115 	stw	ra,4(sp)
    8a9c:	00099d40 	call	99d4 <_ZNSt11logic_errorD2Ev>
    8aa0:	8809883a 	mov	r4,r17
    8aa4:	dfc00117 	ldw	ra,4(sp)
    8aa8:	dc400017 	ldw	r17,0(sp)
    8aac:	dec00204 	addi	sp,sp,8
    8ab0:	000de401 	jmpi	de40 <_ZdlPv>

00008ab4 <_ZNSt12out_of_rangeD1Ev>:
    8ab4:	008000b4 	movhi	r2,2
    8ab8:	10ba6104 	addi	r2,r2,-5756
    8abc:	20800015 	stw	r2,0(r4)
    8ac0:	00099d41 	jmpi	99d4 <_ZNSt11logic_errorD2Ev>

00008ac4 <_ZNSt12length_errorD0Ev>:
    8ac4:	defffe04 	addi	sp,sp,-8
    8ac8:	008000b4 	movhi	r2,2
    8acc:	10ba6e04 	addi	r2,r2,-5704
    8ad0:	dc400015 	stw	r17,0(sp)
    8ad4:	20800015 	stw	r2,0(r4)
    8ad8:	2023883a 	mov	r17,r4
    8adc:	dfc00115 	stw	ra,4(sp)
    8ae0:	00099d40 	call	99d4 <_ZNSt11logic_errorD2Ev>
    8ae4:	8809883a 	mov	r4,r17
    8ae8:	dfc00117 	ldw	ra,4(sp)
    8aec:	dc400017 	ldw	r17,0(sp)
    8af0:	dec00204 	addi	sp,sp,8
    8af4:	000de401 	jmpi	de40 <_ZdlPv>

00008af8 <_ZNSt12length_errorD1Ev>:
    8af8:	008000b4 	movhi	r2,2
    8afc:	10ba6e04 	addi	r2,r2,-5704
    8b00:	20800015 	stw	r2,0(r4)
    8b04:	00099d41 	jmpi	99d4 <_ZNSt11logic_errorD2Ev>

00008b08 <_ZNSt16invalid_argumentD0Ev>:
    8b08:	defffe04 	addi	sp,sp,-8
    8b0c:	008000b4 	movhi	r2,2
    8b10:	10ba7c04 	addi	r2,r2,-5648
    8b14:	dc400015 	stw	r17,0(sp)
    8b18:	20800015 	stw	r2,0(r4)
    8b1c:	2023883a 	mov	r17,r4
    8b20:	dfc00115 	stw	ra,4(sp)
    8b24:	00099d40 	call	99d4 <_ZNSt11logic_errorD2Ev>
    8b28:	8809883a 	mov	r4,r17
    8b2c:	dfc00117 	ldw	ra,4(sp)
    8b30:	dc400017 	ldw	r17,0(sp)
    8b34:	dec00204 	addi	sp,sp,8
    8b38:	000de401 	jmpi	de40 <_ZdlPv>

00008b3c <_ZNSt16invalid_argumentD1Ev>:
    8b3c:	008000b4 	movhi	r2,2
    8b40:	10ba7c04 	addi	r2,r2,-5648
    8b44:	20800015 	stw	r2,0(r4)
    8b48:	00099d41 	jmpi	99d4 <_ZNSt11logic_errorD2Ev>

00008b4c <_ZNSt12domain_errorD0Ev>:
    8b4c:	defffe04 	addi	sp,sp,-8
    8b50:	008000b4 	movhi	r2,2
    8b54:	10ba8904 	addi	r2,r2,-5596
    8b58:	dc400015 	stw	r17,0(sp)
    8b5c:	20800015 	stw	r2,0(r4)
    8b60:	2023883a 	mov	r17,r4
    8b64:	dfc00115 	stw	ra,4(sp)
    8b68:	00099d40 	call	99d4 <_ZNSt11logic_errorD2Ev>
    8b6c:	8809883a 	mov	r4,r17
    8b70:	dfc00117 	ldw	ra,4(sp)
    8b74:	dc400017 	ldw	r17,0(sp)
    8b78:	dec00204 	addi	sp,sp,8
    8b7c:	000de401 	jmpi	de40 <_ZdlPv>

00008b80 <_ZNSt12domain_errorD1Ev>:
    8b80:	008000b4 	movhi	r2,2
    8b84:	10ba8904 	addi	r2,r2,-5596
    8b88:	20800015 	stw	r2,0(r4)
    8b8c:	00099d41 	jmpi	99d4 <_ZNSt11logic_errorD2Ev>

00008b90 <_ZNKSt8ios_base7failure4whatEv>:
    8b90:	20800117 	ldw	r2,4(r4)
    8b94:	f800283a 	ret

00008b98 <_ZNSt8ios_base7failureD1Ev>:
    8b98:	deffeb04 	addi	sp,sp,-84
    8b9c:	00800074 	movhi	r2,1
    8ba0:	10b95604 	addi	r2,r2,-6824
    8ba4:	00c000b4 	movhi	r3,2
    8ba8:	18f95104 	addi	r3,r3,-6844
    8bac:	d8800715 	stw	r2,28(sp)
    8bb0:	d9001015 	stw	r4,64(sp)
    8bb4:	00800074 	movhi	r2,1
    8bb8:	10a31704 	addi	r2,r2,-29604
    8bbc:	d9000104 	addi	r4,sp,4
    8bc0:	d8c00815 	stw	r3,32(sp)
    8bc4:	d8800a15 	stw	r2,40(sp)
    8bc8:	dfc01415 	stw	ra,80(sp)
    8bcc:	df001315 	stw	fp,76(sp)
    8bd0:	ddc01215 	stw	r23,72(sp)
    8bd4:	dec00915 	stw	sp,36(sp)
    8bd8:	dec00b15 	stw	sp,44(sp)
    8bdc:	00108500 	call	10850 <_Unwind_SjLj_Register>
    8be0:	d8c01017 	ldw	r3,64(sp)
    8be4:	18800117 	ldw	r2,4(r3)
    8be8:	00c000b4 	movhi	r3,2
    8bec:	18fa8e04 	addi	r3,r3,-5576
    8bf0:	10bffd04 	addi	r2,r2,-12
    8bf4:	d8800e15 	stw	r2,56(sp)
    8bf8:	d8801017 	ldw	r2,64(sp)
    8bfc:	10c00015 	stw	r3,0(r2)
    8c00:	d8c00e17 	ldw	r3,56(sp)
    8c04:	008000b4 	movhi	r2,2
    8c08:	108ac004 	addi	r2,r2,11008
    8c0c:	1880091e 	bne	r3,r2,8c34 <_ZNSt8ios_base7failureD1Ev+0x9c>
    8c10:	d9001017 	ldw	r4,64(sp)
    8c14:	000eee40 	call	eee4 <_ZNSt9exceptionD2Ev>
    8c18:	d9000104 	addi	r4,sp,4
    8c1c:	00108600 	call	10860 <_Unwind_SjLj_Unregister>
    8c20:	dfc01417 	ldw	ra,80(sp)
    8c24:	df001317 	ldw	fp,76(sp)
    8c28:	ddc01217 	ldw	r23,72(sp)
    8c2c:	dec01504 	addi	sp,sp,84
    8c30:	f800283a 	ret
    8c34:	00800044 	movi	r2,1
    8c38:	d8800215 	stw	r2,8(sp)
    8c3c:	19000204 	addi	r4,r3,8
    8c40:	017fffc4 	movi	r5,-1
    8c44:	000daa80 	call	daa8 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
    8c48:	00bff116 	blt	zero,r2,8c10 <_ZNSt8ios_base7failureD1Ev+0x78>
    8c4c:	d9000e17 	ldw	r4,56(sp)
    8c50:	d80b883a 	mov	r5,sp
    8c54:	000a5380 	call	a538 <_ZNSs4_Rep10_M_destroyERKSaIcE>
    8c58:	003fed06 	br	8c10 <_ZNSt8ios_base7failureD1Ev+0x78>
    8c5c:	d8800417 	ldw	r2,16(sp)
    8c60:	d8c00317 	ldw	r3,12(sp)
    8c64:	d9001017 	ldw	r4,64(sp)
    8c68:	d8800f15 	stw	r2,60(sp)
    8c6c:	d8c01115 	stw	r3,68(sp)
    8c70:	000eee40 	call	eee4 <_ZNSt9exceptionD2Ev>
    8c74:	d8c00f17 	ldw	r3,60(sp)
    8c78:	00bfffc4 	movi	r2,-1
    8c7c:	18800326 	beq	r3,r2,8c8c <_ZNSt8ios_base7failureD1Ev+0xf4>
    8c80:	d9001117 	ldw	r4,68(sp)
    8c84:	d8800215 	stw	r2,8(sp)
    8c88:	0010b1c0 	call	10b1c <_Unwind_SjLj_Resume>
    8c8c:	d9001117 	ldw	r4,68(sp)
    8c90:	00bfffc4 	movi	r2,-1
    8c94:	d8800215 	stw	r2,8(sp)
    8c98:	000e3d80 	call	e3d8 <__cxa_call_unexpected>

00008c9c <_ZNSt8ios_base7failureC1ERKSs>:
    8c9c:	deffec04 	addi	sp,sp,-80
    8ca0:	00800074 	movhi	r2,1
    8ca4:	10b95604 	addi	r2,r2,-6824
    8ca8:	00c000b4 	movhi	r3,2
    8cac:	18f95504 	addi	r3,r3,-6828
    8cb0:	d8800615 	stw	r2,24(sp)
    8cb4:	d9000d15 	stw	r4,52(sp)
    8cb8:	00800074 	movhi	r2,1
    8cbc:	10a34b04 	addi	r2,r2,-29396
    8cc0:	d809883a 	mov	r4,sp
    8cc4:	d8c00715 	stw	r3,28(sp)
    8cc8:	d8800915 	stw	r2,36(sp)
    8ccc:	d9400e15 	stw	r5,56(sp)
    8cd0:	dfc01315 	stw	ra,76(sp)
    8cd4:	df001215 	stw	fp,72(sp)
    8cd8:	ddc01115 	stw	r23,68(sp)
    8cdc:	dec00815 	stw	sp,32(sp)
    8ce0:	dec00a15 	stw	sp,40(sp)
    8ce4:	00108500 	call	10850 <_Unwind_SjLj_Register>
    8ce8:	d8c00d17 	ldw	r3,52(sp)
    8cec:	008000b4 	movhi	r2,2
    8cf0:	10ba8e04 	addi	r2,r2,-5576
    8cf4:	d9400e17 	ldw	r5,56(sp)
    8cf8:	18800015 	stw	r2,0(r3)
    8cfc:	d8800d17 	ldw	r2,52(sp)
    8d00:	00c00044 	movi	r3,1
    8d04:	d8c00115 	stw	r3,4(sp)
    8d08:	11000104 	addi	r4,r2,4
    8d0c:	000b9900 	call	b990 <_ZNSsC1ERKSs>
    8d10:	d809883a 	mov	r4,sp
    8d14:	00108600 	call	10860 <_Unwind_SjLj_Unregister>
    8d18:	dfc01317 	ldw	ra,76(sp)
    8d1c:	df001217 	ldw	fp,72(sp)
    8d20:	ddc01117 	ldw	r23,68(sp)
    8d24:	dec01404 	addi	sp,sp,80
    8d28:	f800283a 	ret
    8d2c:	d8c00317 	ldw	r3,12(sp)
    8d30:	d8800217 	ldw	r2,8(sp)
    8d34:	d9000d17 	ldw	r4,52(sp)
    8d38:	d8c00f15 	stw	r3,60(sp)
    8d3c:	d8801015 	stw	r2,64(sp)
    8d40:	000eee40 	call	eee4 <_ZNSt9exceptionD2Ev>
    8d44:	d8c00f17 	ldw	r3,60(sp)
    8d48:	00bfffc4 	movi	r2,-1
    8d4c:	18800326 	beq	r3,r2,8d5c <_ZNSt8ios_base7failureC1ERKSs+0xc0>
    8d50:	d9001017 	ldw	r4,64(sp)
    8d54:	d8800115 	stw	r2,4(sp)
    8d58:	0010b1c0 	call	10b1c <_Unwind_SjLj_Resume>
    8d5c:	d9001017 	ldw	r4,64(sp)
    8d60:	00bfffc4 	movi	r2,-1
    8d64:	d8800115 	stw	r2,4(sp)
    8d68:	000e3d80 	call	e3d8 <__cxa_call_unexpected>

00008d6c <_ZNSt8ios_base7failureC2ERKSs>:
    8d6c:	deffec04 	addi	sp,sp,-80
    8d70:	00800074 	movhi	r2,1
    8d74:	10b95604 	addi	r2,r2,-6824
    8d78:	00c000b4 	movhi	r3,2
    8d7c:	18f95904 	addi	r3,r3,-6812
    8d80:	d8800615 	stw	r2,24(sp)
    8d84:	d9000d15 	stw	r4,52(sp)
    8d88:	00800074 	movhi	r2,1
    8d8c:	10a37f04 	addi	r2,r2,-29188
    8d90:	d809883a 	mov	r4,sp
    8d94:	d8c00715 	stw	r3,28(sp)
    8d98:	d8800915 	stw	r2,36(sp)
    8d9c:	d9400e15 	stw	r5,56(sp)
    8da0:	dfc01315 	stw	ra,76(sp)
    8da4:	df001215 	stw	fp,72(sp)
    8da8:	ddc01115 	stw	r23,68(sp)
    8dac:	dec00815 	stw	sp,32(sp)
    8db0:	dec00a15 	stw	sp,40(sp)
    8db4:	00108500 	call	10850 <_Unwind_SjLj_Register>
    8db8:	d8c00d17 	ldw	r3,52(sp)
    8dbc:	008000b4 	movhi	r2,2
    8dc0:	10ba8e04 	addi	r2,r2,-5576
    8dc4:	d9400e17 	ldw	r5,56(sp)
    8dc8:	18800015 	stw	r2,0(r3)
    8dcc:	d8800d17 	ldw	r2,52(sp)
    8dd0:	00c00044 	movi	r3,1
    8dd4:	d8c00115 	stw	r3,4(sp)
    8dd8:	11000104 	addi	r4,r2,4
    8ddc:	000b9900 	call	b990 <_ZNSsC1ERKSs>
    8de0:	d809883a 	mov	r4,sp
    8de4:	00108600 	call	10860 <_Unwind_SjLj_Unregister>
    8de8:	dfc01317 	ldw	ra,76(sp)
    8dec:	df001217 	ldw	fp,72(sp)
    8df0:	ddc01117 	ldw	r23,68(sp)
    8df4:	dec01404 	addi	sp,sp,80
    8df8:	f800283a 	ret
    8dfc:	d8c00317 	ldw	r3,12(sp)
    8e00:	d8800217 	ldw	r2,8(sp)
    8e04:	d9000d17 	ldw	r4,52(sp)
    8e08:	d8c00f15 	stw	r3,60(sp)
    8e0c:	d8801015 	stw	r2,64(sp)
    8e10:	000eee40 	call	eee4 <_ZNSt9exceptionD2Ev>
    8e14:	d8c00f17 	ldw	r3,60(sp)
    8e18:	00bfffc4 	movi	r2,-1
    8e1c:	18800326 	beq	r3,r2,8e2c <_ZNSt8ios_base7failureC2ERKSs+0xc0>
    8e20:	d9001017 	ldw	r4,64(sp)
    8e24:	d8800115 	stw	r2,4(sp)
    8e28:	0010b1c0 	call	10b1c <_Unwind_SjLj_Resume>
    8e2c:	d9001017 	ldw	r4,64(sp)
    8e30:	00bfffc4 	movi	r2,-1
    8e34:	d8800115 	stw	r2,4(sp)
    8e38:	000e3d80 	call	e3d8 <__cxa_call_unexpected>

00008e3c <_ZNSt8ios_base7failureD2Ev>:
    8e3c:	deffeb04 	addi	sp,sp,-84
    8e40:	00800074 	movhi	r2,1
    8e44:	10b95604 	addi	r2,r2,-6824
    8e48:	00c000b4 	movhi	r3,2
    8e4c:	18f95d04 	addi	r3,r3,-6796
    8e50:	d8800715 	stw	r2,28(sp)
    8e54:	d9001015 	stw	r4,64(sp)
    8e58:	00800074 	movhi	r2,1
    8e5c:	10a3c004 	addi	r2,r2,-28928
    8e60:	d9000104 	addi	r4,sp,4
    8e64:	d8c00815 	stw	r3,32(sp)
    8e68:	d8800a15 	stw	r2,40(sp)
    8e6c:	dfc01415 	stw	ra,80(sp)
    8e70:	df001315 	stw	fp,76(sp)
    8e74:	ddc01215 	stw	r23,72(sp)
    8e78:	dec00915 	stw	sp,36(sp)
    8e7c:	dec00b15 	stw	sp,44(sp)
    8e80:	00108500 	call	10850 <_Unwind_SjLj_Register>
    8e84:	d8c01017 	ldw	r3,64(sp)
    8e88:	18800117 	ldw	r2,4(r3)
    8e8c:	00c000b4 	movhi	r3,2
    8e90:	18fa8e04 	addi	r3,r3,-5576
    8e94:	10bffd04 	addi	r2,r2,-12
    8e98:	d8800e15 	stw	r2,56(sp)
    8e9c:	d8801017 	ldw	r2,64(sp)
    8ea0:	10c00015 	stw	r3,0(r2)
    8ea4:	d8c00e17 	ldw	r3,56(sp)
    8ea8:	008000b4 	movhi	r2,2
    8eac:	108ac004 	addi	r2,r2,11008
    8eb0:	1880091e 	bne	r3,r2,8ed8 <_ZNSt8ios_base7failureD2Ev+0x9c>
    8eb4:	d9001017 	ldw	r4,64(sp)
    8eb8:	000eee40 	call	eee4 <_ZNSt9exceptionD2Ev>
    8ebc:	d9000104 	addi	r4,sp,4
    8ec0:	00108600 	call	10860 <_Unwind_SjLj_Unregister>
    8ec4:	dfc01417 	ldw	ra,80(sp)
    8ec8:	df001317 	ldw	fp,76(sp)
    8ecc:	ddc01217 	ldw	r23,72(sp)
    8ed0:	dec01504 	addi	sp,sp,84
    8ed4:	f800283a 	ret
    8ed8:	00800044 	movi	r2,1
    8edc:	d8800215 	stw	r2,8(sp)
    8ee0:	19000204 	addi	r4,r3,8
    8ee4:	017fffc4 	movi	r5,-1
    8ee8:	000daa80 	call	daa8 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
    8eec:	00bff116 	blt	zero,r2,8eb4 <_ZNSt8ios_base7failureD2Ev+0x78>
    8ef0:	d9000e17 	ldw	r4,56(sp)
    8ef4:	d80b883a 	mov	r5,sp
    8ef8:	000a5380 	call	a538 <_ZNSs4_Rep10_M_destroyERKSaIcE>
    8efc:	003fed06 	br	8eb4 <_ZNSt8ios_base7failureD2Ev+0x78>
    8f00:	d8800417 	ldw	r2,16(sp)
    8f04:	d8c00317 	ldw	r3,12(sp)
    8f08:	d9001017 	ldw	r4,64(sp)
    8f0c:	d8800f15 	stw	r2,60(sp)
    8f10:	d8c01115 	stw	r3,68(sp)
    8f14:	000eee40 	call	eee4 <_ZNSt9exceptionD2Ev>
    8f18:	d8c00f17 	ldw	r3,60(sp)
    8f1c:	00bfffc4 	movi	r2,-1
    8f20:	18800326 	beq	r3,r2,8f30 <_ZNSt8ios_base7failureD2Ev+0xf4>
    8f24:	d9001117 	ldw	r4,68(sp)
    8f28:	d8800215 	stw	r2,8(sp)
    8f2c:	0010b1c0 	call	10b1c <_Unwind_SjLj_Resume>
    8f30:	d9001117 	ldw	r4,68(sp)
    8f34:	00bfffc4 	movi	r2,-1
    8f38:	d8800215 	stw	r2,8(sp)
    8f3c:	000e3d80 	call	e3d8 <__cxa_call_unexpected>

00008f40 <_ZNSt8ios_base7failureD0Ev>:
    8f40:	deffeb04 	addi	sp,sp,-84
    8f44:	00800074 	movhi	r2,1
    8f48:	10b95604 	addi	r2,r2,-6824
    8f4c:	00c000b4 	movhi	r3,2
    8f50:	18f96104 	addi	r3,r3,-6780
    8f54:	d8800715 	stw	r2,28(sp)
    8f58:	d9001015 	stw	r4,64(sp)
    8f5c:	00800074 	movhi	r2,1
    8f60:	10a40304 	addi	r2,r2,-28660
    8f64:	d9000104 	addi	r4,sp,4
    8f68:	d8c00815 	stw	r3,32(sp)
    8f6c:	d8800a15 	stw	r2,40(sp)
    8f70:	dfc01415 	stw	ra,80(sp)
    8f74:	df001315 	stw	fp,76(sp)
    8f78:	ddc01215 	stw	r23,72(sp)
    8f7c:	dec00915 	stw	sp,36(sp)
    8f80:	dec00b15 	stw	sp,44(sp)
    8f84:	00108500 	call	10850 <_Unwind_SjLj_Register>
    8f88:	d8c01017 	ldw	r3,64(sp)
    8f8c:	18800117 	ldw	r2,4(r3)
    8f90:	00c000b4 	movhi	r3,2
    8f94:	18fa8e04 	addi	r3,r3,-5576
    8f98:	10bffd04 	addi	r2,r2,-12
    8f9c:	d8800e15 	stw	r2,56(sp)
    8fa0:	d8801017 	ldw	r2,64(sp)
    8fa4:	10c00015 	stw	r3,0(r2)
    8fa8:	d8c00e17 	ldw	r3,56(sp)
    8fac:	008000b4 	movhi	r2,2
    8fb0:	108ac004 	addi	r2,r2,11008
    8fb4:	18800b1e 	bne	r3,r2,8fe4 <_ZNSt8ios_base7failureD0Ev+0xa4>
    8fb8:	d9001017 	ldw	r4,64(sp)
    8fbc:	000eee40 	call	eee4 <_ZNSt9exceptionD2Ev>
    8fc0:	d9001017 	ldw	r4,64(sp)
    8fc4:	000de400 	call	de40 <_ZdlPv>
    8fc8:	d9000104 	addi	r4,sp,4
    8fcc:	00108600 	call	10860 <_Unwind_SjLj_Unregister>
    8fd0:	dfc01417 	ldw	ra,80(sp)
    8fd4:	df001317 	ldw	fp,76(sp)
    8fd8:	ddc01217 	ldw	r23,72(sp)
    8fdc:	dec01504 	addi	sp,sp,84
    8fe0:	f800283a 	ret
    8fe4:	00800044 	movi	r2,1
    8fe8:	d8800215 	stw	r2,8(sp)
    8fec:	19000204 	addi	r4,r3,8
    8ff0:	017fffc4 	movi	r5,-1
    8ff4:	000daa80 	call	daa8 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
    8ff8:	00bfef16 	blt	zero,r2,8fb8 <_ZNSt8ios_base7failureD0Ev+0x78>
    8ffc:	d9000e17 	ldw	r4,56(sp)
    9000:	d80b883a 	mov	r5,sp
    9004:	000a5380 	call	a538 <_ZNSs4_Rep10_M_destroyERKSaIcE>
    9008:	003feb06 	br	8fb8 <_ZNSt8ios_base7failureD0Ev+0x78>
    900c:	d8800417 	ldw	r2,16(sp)
    9010:	d8c00317 	ldw	r3,12(sp)
    9014:	d9001017 	ldw	r4,64(sp)
    9018:	d8800f15 	stw	r2,60(sp)
    901c:	d8c01115 	stw	r3,68(sp)
    9020:	000eee40 	call	eee4 <_ZNSt9exceptionD2Ev>
    9024:	d8c00f17 	ldw	r3,60(sp)
    9028:	00bfffc4 	movi	r2,-1
    902c:	18800326 	beq	r3,r2,903c <_ZNSt8ios_base7failureD0Ev+0xfc>
    9030:	d9001117 	ldw	r4,68(sp)
    9034:	d8800215 	stw	r2,8(sp)
    9038:	0010b1c0 	call	10b1c <_Unwind_SjLj_Resume>
    903c:	d9001117 	ldw	r4,68(sp)
    9040:	00bfffc4 	movi	r2,-1
    9044:	d8800215 	stw	r2,8(sp)
    9048:	000e3d80 	call	e3d8 <__cxa_call_unexpected>

0000904c <_ZNKSt13runtime_error4whatEv>:
    904c:	20800117 	ldw	r2,4(r4)
    9050:	f800283a 	ret

00009054 <_ZNSt11logic_errorD1Ev>:
    9054:	deffeb04 	addi	sp,sp,-84
    9058:	00800074 	movhi	r2,1
    905c:	10b95604 	addi	r2,r2,-6824
    9060:	00c000b4 	movhi	r3,2
    9064:	18f96504 	addi	r3,r3,-6764
    9068:	d8800715 	stw	r2,28(sp)
    906c:	d9001015 	stw	r4,64(sp)
    9070:	00800074 	movhi	r2,1
    9074:	10a44604 	addi	r2,r2,-28392
    9078:	d9000104 	addi	r4,sp,4
    907c:	d8c00815 	stw	r3,32(sp)
    9080:	d8800a15 	stw	r2,40(sp)
    9084:	dfc01415 	stw	ra,80(sp)
    9088:	df001315 	stw	fp,76(sp)
    908c:	ddc01215 	stw	r23,72(sp)
    9090:	dec00915 	stw	sp,36(sp)
    9094:	dec00b15 	stw	sp,44(sp)
    9098:	00108500 	call	10850 <_Unwind_SjLj_Register>
    909c:	d8c01017 	ldw	r3,64(sp)
    90a0:	18800117 	ldw	r2,4(r3)
    90a4:	00c000b4 	movhi	r3,2
    90a8:	18faa104 	addi	r3,r3,-5500
    90ac:	10bffd04 	addi	r2,r2,-12
    90b0:	d8800e15 	stw	r2,56(sp)
    90b4:	d8801017 	ldw	r2,64(sp)
    90b8:	10c00015 	stw	r3,0(r2)
    90bc:	d8c00e17 	ldw	r3,56(sp)
    90c0:	008000b4 	movhi	r2,2
    90c4:	108ac004 	addi	r2,r2,11008
    90c8:	1880091e 	bne	r3,r2,90f0 <_ZNSt11logic_errorD1Ev+0x9c>
    90cc:	d9001017 	ldw	r4,64(sp)
    90d0:	000eee40 	call	eee4 <_ZNSt9exceptionD2Ev>
    90d4:	d9000104 	addi	r4,sp,4
    90d8:	00108600 	call	10860 <_Unwind_SjLj_Unregister>
    90dc:	dfc01417 	ldw	ra,80(sp)
    90e0:	df001317 	ldw	fp,76(sp)
    90e4:	ddc01217 	ldw	r23,72(sp)
    90e8:	dec01504 	addi	sp,sp,84
    90ec:	f800283a 	ret
    90f0:	00800044 	movi	r2,1
    90f4:	d8800215 	stw	r2,8(sp)
    90f8:	19000204 	addi	r4,r3,8
    90fc:	017fffc4 	movi	r5,-1
    9100:	000daa80 	call	daa8 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
    9104:	00bff116 	blt	zero,r2,90cc <_ZNSt11logic_errorD1Ev+0x78>
    9108:	d9000e17 	ldw	r4,56(sp)
    910c:	d80b883a 	mov	r5,sp
    9110:	000a5380 	call	a538 <_ZNSs4_Rep10_M_destroyERKSaIcE>
    9114:	003fed06 	br	90cc <_ZNSt11logic_errorD1Ev+0x78>
    9118:	d8800417 	ldw	r2,16(sp)
    911c:	d8c00317 	ldw	r3,12(sp)
    9120:	d9001017 	ldw	r4,64(sp)
    9124:	d8800f15 	stw	r2,60(sp)
    9128:	d8c01115 	stw	r3,68(sp)
    912c:	000eee40 	call	eee4 <_ZNSt9exceptionD2Ev>
    9130:	d8c00f17 	ldw	r3,60(sp)
    9134:	00bfffc4 	movi	r2,-1
    9138:	18800326 	beq	r3,r2,9148 <_ZNSt11logic_errorD1Ev+0xf4>
    913c:	d9001117 	ldw	r4,68(sp)
    9140:	d8800215 	stw	r2,8(sp)
    9144:	0010b1c0 	call	10b1c <_Unwind_SjLj_Resume>
    9148:	d9001117 	ldw	r4,68(sp)
    914c:	00bfffc4 	movi	r2,-1
    9150:	d8800215 	stw	r2,8(sp)
    9154:	000e3d80 	call	e3d8 <__cxa_call_unexpected>

00009158 <_ZNSt13runtime_errorC2ERKSs>:
    9158:	deffed04 	addi	sp,sp,-76
    915c:	00800074 	movhi	r2,1
    9160:	10b95604 	addi	r2,r2,-6824
    9164:	00c000b4 	movhi	r3,2
    9168:	18f96844 	addi	r3,r3,-6751
    916c:	d8800615 	stw	r2,24(sp)
    9170:	d9000d15 	stw	r4,52(sp)
    9174:	00800074 	movhi	r2,1
    9178:	10a47a04 	addi	r2,r2,-28184
    917c:	d809883a 	mov	r4,sp
    9180:	d8c00715 	stw	r3,28(sp)
    9184:	d8800915 	stw	r2,36(sp)
    9188:	d9400e15 	stw	r5,56(sp)
    918c:	dfc01215 	stw	ra,72(sp)
    9190:	df001115 	stw	fp,68(sp)
    9194:	ddc01015 	stw	r23,64(sp)
    9198:	dec00815 	stw	sp,32(sp)
    919c:	dec00a15 	stw	sp,40(sp)
    91a0:	00108500 	call	10850 <_Unwind_SjLj_Register>
    91a4:	d8c00d17 	ldw	r3,52(sp)
    91a8:	008000b4 	movhi	r2,2
    91ac:	10ba9c04 	addi	r2,r2,-5520
    91b0:	d9400e17 	ldw	r5,56(sp)
    91b4:	18800015 	stw	r2,0(r3)
    91b8:	d8800d17 	ldw	r2,52(sp)
    91bc:	00c00044 	movi	r3,1
    91c0:	d8c00115 	stw	r3,4(sp)
    91c4:	11000104 	addi	r4,r2,4
    91c8:	000b9900 	call	b990 <_ZNSsC1ERKSs>
    91cc:	d809883a 	mov	r4,sp
    91d0:	00108600 	call	10860 <_Unwind_SjLj_Unregister>
    91d4:	dfc01217 	ldw	ra,72(sp)
    91d8:	df001117 	ldw	fp,68(sp)
    91dc:	ddc01017 	ldw	r23,64(sp)
    91e0:	dec01304 	addi	sp,sp,76
    91e4:	f800283a 	ret
    91e8:	d8c00217 	ldw	r3,8(sp)
    91ec:	d9000d17 	ldw	r4,52(sp)
    91f0:	d8c00f15 	stw	r3,60(sp)
    91f4:	000eee40 	call	eee4 <_ZNSt9exceptionD2Ev>
    91f8:	d9000f17 	ldw	r4,60(sp)
    91fc:	00bfffc4 	movi	r2,-1
    9200:	d8800115 	stw	r2,4(sp)
    9204:	0010b1c0 	call	10b1c <_Unwind_SjLj_Resume>

00009208 <_ZNSt15underflow_errorC1ERKSs>:
    9208:	defffe04 	addi	sp,sp,-8
    920c:	dc000015 	stw	r16,0(sp)
    9210:	dfc00115 	stw	ra,4(sp)
    9214:	2021883a 	mov	r16,r4
    9218:	00091580 	call	9158 <_ZNSt13runtime_errorC2ERKSs>
    921c:	008000b4 	movhi	r2,2
    9220:	10ba3b04 	addi	r2,r2,-5908
    9224:	80800015 	stw	r2,0(r16)
    9228:	dfc00117 	ldw	ra,4(sp)
    922c:	dc000017 	ldw	r16,0(sp)
    9230:	dec00204 	addi	sp,sp,8
    9234:	f800283a 	ret

00009238 <_ZNSt15underflow_errorC2ERKSs>:
    9238:	defffe04 	addi	sp,sp,-8
    923c:	dc000015 	stw	r16,0(sp)
    9240:	dfc00115 	stw	ra,4(sp)
    9244:	2021883a 	mov	r16,r4
    9248:	00091580 	call	9158 <_ZNSt13runtime_errorC2ERKSs>
    924c:	008000b4 	movhi	r2,2
    9250:	10ba3b04 	addi	r2,r2,-5908
    9254:	80800015 	stw	r2,0(r16)
    9258:	dfc00117 	ldw	ra,4(sp)
    925c:	dc000017 	ldw	r16,0(sp)
    9260:	dec00204 	addi	sp,sp,8
    9264:	f800283a 	ret

00009268 <_ZNSt14overflow_errorC1ERKSs>:
    9268:	defffe04 	addi	sp,sp,-8
    926c:	dc000015 	stw	r16,0(sp)
    9270:	dfc00115 	stw	ra,4(sp)
    9274:	2021883a 	mov	r16,r4
    9278:	00091580 	call	9158 <_ZNSt13runtime_errorC2ERKSs>
    927c:	008000b4 	movhi	r2,2
    9280:	10ba4804 	addi	r2,r2,-5856
    9284:	80800015 	stw	r2,0(r16)
    9288:	dfc00117 	ldw	ra,4(sp)
    928c:	dc000017 	ldw	r16,0(sp)
    9290:	dec00204 	addi	sp,sp,8
    9294:	f800283a 	ret

00009298 <_ZNSt14overflow_errorC2ERKSs>:
    9298:	defffe04 	addi	sp,sp,-8
    929c:	dc000015 	stw	r16,0(sp)
    92a0:	dfc00115 	stw	ra,4(sp)
    92a4:	2021883a 	mov	r16,r4
    92a8:	00091580 	call	9158 <_ZNSt13runtime_errorC2ERKSs>
    92ac:	008000b4 	movhi	r2,2
    92b0:	10ba4804 	addi	r2,r2,-5856
    92b4:	80800015 	stw	r2,0(r16)
    92b8:	dfc00117 	ldw	ra,4(sp)
    92bc:	dc000017 	ldw	r16,0(sp)
    92c0:	dec00204 	addi	sp,sp,8
    92c4:	f800283a 	ret

000092c8 <_ZNSt11range_errorC1ERKSs>:
    92c8:	defffe04 	addi	sp,sp,-8
    92cc:	dc000015 	stw	r16,0(sp)
    92d0:	dfc00115 	stw	ra,4(sp)
    92d4:	2021883a 	mov	r16,r4
    92d8:	00091580 	call	9158 <_ZNSt13runtime_errorC2ERKSs>
    92dc:	008000b4 	movhi	r2,2
    92e0:	10ba5404 	addi	r2,r2,-5808
    92e4:	80800015 	stw	r2,0(r16)
    92e8:	dfc00117 	ldw	ra,4(sp)
    92ec:	dc000017 	ldw	r16,0(sp)
    92f0:	dec00204 	addi	sp,sp,8
    92f4:	f800283a 	ret

000092f8 <_ZNSt11range_errorC2ERKSs>:
    92f8:	defffe04 	addi	sp,sp,-8
    92fc:	dc000015 	stw	r16,0(sp)
    9300:	dfc00115 	stw	ra,4(sp)
    9304:	2021883a 	mov	r16,r4
    9308:	00091580 	call	9158 <_ZNSt13runtime_errorC2ERKSs>
    930c:	008000b4 	movhi	r2,2
    9310:	10ba5404 	addi	r2,r2,-5808
    9314:	80800015 	stw	r2,0(r16)
    9318:	dfc00117 	ldw	ra,4(sp)
    931c:	dc000017 	ldw	r16,0(sp)
    9320:	dec00204 	addi	sp,sp,8
    9324:	f800283a 	ret

00009328 <_ZNSt11logic_errorC1ERKSs>:
    9328:	deffed04 	addi	sp,sp,-76
    932c:	00800074 	movhi	r2,1
    9330:	10b95604 	addi	r2,r2,-6824
    9334:	00c000b4 	movhi	r3,2
    9338:	18f969c4 	addi	r3,r3,-6745
    933c:	d8800615 	stw	r2,24(sp)
    9340:	d9000d15 	stw	r4,52(sp)
    9344:	00800074 	movhi	r2,1
    9348:	10a4ee04 	addi	r2,r2,-27720
    934c:	d809883a 	mov	r4,sp
    9350:	d8c00715 	stw	r3,28(sp)
    9354:	d8800915 	stw	r2,36(sp)
    9358:	d9400e15 	stw	r5,56(sp)
    935c:	dfc01215 	stw	ra,72(sp)
    9360:	df001115 	stw	fp,68(sp)
    9364:	ddc01015 	stw	r23,64(sp)
    9368:	dec00815 	stw	sp,32(sp)
    936c:	dec00a15 	stw	sp,40(sp)
    9370:	00108500 	call	10850 <_Unwind_SjLj_Register>
    9374:	d8c00d17 	ldw	r3,52(sp)
    9378:	008000b4 	movhi	r2,2
    937c:	10baa104 	addi	r2,r2,-5500
    9380:	d9400e17 	ldw	r5,56(sp)
    9384:	18800015 	stw	r2,0(r3)
    9388:	d8800d17 	ldw	r2,52(sp)
    938c:	00c00044 	movi	r3,1
    9390:	d8c00115 	stw	r3,4(sp)
    9394:	11000104 	addi	r4,r2,4
    9398:	000b9900 	call	b990 <_ZNSsC1ERKSs>
    939c:	d809883a 	mov	r4,sp
    93a0:	00108600 	call	10860 <_Unwind_SjLj_Unregister>
    93a4:	dfc01217 	ldw	ra,72(sp)
    93a8:	df001117 	ldw	fp,68(sp)
    93ac:	ddc01017 	ldw	r23,64(sp)
    93b0:	dec01304 	addi	sp,sp,76
    93b4:	f800283a 	ret
    93b8:	d8c00217 	ldw	r3,8(sp)
    93bc:	d9000d17 	ldw	r4,52(sp)
    93c0:	d8c00f15 	stw	r3,60(sp)
    93c4:	000eee40 	call	eee4 <_ZNSt9exceptionD2Ev>
    93c8:	d9000f17 	ldw	r4,60(sp)
    93cc:	00bfffc4 	movi	r2,-1
    93d0:	d8800115 	stw	r2,4(sp)
    93d4:	0010b1c0 	call	10b1c <_Unwind_SjLj_Resume>

000093d8 <_ZNSt11logic_errorC2ERKSs>:
    93d8:	deffed04 	addi	sp,sp,-76
    93dc:	00800074 	movhi	r2,1
    93e0:	10b95604 	addi	r2,r2,-6824
    93e4:	00c000b4 	movhi	r3,2
    93e8:	18f96b44 	addi	r3,r3,-6739
    93ec:	d8800615 	stw	r2,24(sp)
    93f0:	d9000d15 	stw	r4,52(sp)
    93f4:	00800074 	movhi	r2,1
    93f8:	10a51a04 	addi	r2,r2,-27544
    93fc:	d809883a 	mov	r4,sp
    9400:	d8c00715 	stw	r3,28(sp)
    9404:	d8800915 	stw	r2,36(sp)
    9408:	d9400e15 	stw	r5,56(sp)
    940c:	dfc01215 	stw	ra,72(sp)
    9410:	df001115 	stw	fp,68(sp)
    9414:	ddc01015 	stw	r23,64(sp)
    9418:	dec00815 	stw	sp,32(sp)
    941c:	dec00a15 	stw	sp,40(sp)
    9420:	00108500 	call	10850 <_Unwind_SjLj_Register>
    9424:	d8c00d17 	ldw	r3,52(sp)
    9428:	008000b4 	movhi	r2,2
    942c:	10baa104 	addi	r2,r2,-5500
    9430:	d9400e17 	ldw	r5,56(sp)
    9434:	18800015 	stw	r2,0(r3)
    9438:	d8800d17 	ldw	r2,52(sp)
    943c:	00c00044 	movi	r3,1
    9440:	d8c00115 	stw	r3,4(sp)
    9444:	11000104 	addi	r4,r2,4
    9448:	000b9900 	call	b990 <_ZNSsC1ERKSs>
    944c:	d809883a 	mov	r4,sp
    9450:	00108600 	call	10860 <_Unwind_SjLj_Unregister>
    9454:	dfc01217 	ldw	ra,72(sp)
    9458:	df001117 	ldw	fp,68(sp)
    945c:	ddc01017 	ldw	r23,64(sp)
    9460:	dec01304 	addi	sp,sp,76
    9464:	f800283a 	ret
    9468:	d8c00217 	ldw	r3,8(sp)
    946c:	d9000d17 	ldw	r4,52(sp)
    9470:	d8c00f15 	stw	r3,60(sp)
    9474:	000eee40 	call	eee4 <_ZNSt9exceptionD2Ev>
    9478:	d9000f17 	ldw	r4,60(sp)
    947c:	00bfffc4 	movi	r2,-1
    9480:	d8800115 	stw	r2,4(sp)
    9484:	0010b1c0 	call	10b1c <_Unwind_SjLj_Resume>

00009488 <_ZNSt12out_of_rangeC1ERKSs>:
    9488:	defffe04 	addi	sp,sp,-8
    948c:	dc000015 	stw	r16,0(sp)
    9490:	dfc00115 	stw	ra,4(sp)
    9494:	2021883a 	mov	r16,r4
    9498:	00093d80 	call	93d8 <_ZNSt11logic_errorC2ERKSs>
    949c:	008000b4 	movhi	r2,2
    94a0:	10ba6104 	addi	r2,r2,-5756
    94a4:	80800015 	stw	r2,0(r16)
    94a8:	dfc00117 	ldw	ra,4(sp)
    94ac:	dc000017 	ldw	r16,0(sp)
    94b0:	dec00204 	addi	sp,sp,8
    94b4:	f800283a 	ret

000094b8 <_ZNSt12out_of_rangeC2ERKSs>:
    94b8:	defffe04 	addi	sp,sp,-8
    94bc:	dc000015 	stw	r16,0(sp)
    94c0:	dfc00115 	stw	ra,4(sp)
    94c4:	2021883a 	mov	r16,r4
    94c8:	00093d80 	call	93d8 <_ZNSt11logic_errorC2ERKSs>
    94cc:	008000b4 	movhi	r2,2
    94d0:	10ba6104 	addi	r2,r2,-5756
    94d4:	80800015 	stw	r2,0(r16)
    94d8:	dfc00117 	ldw	ra,4(sp)
    94dc:	dc000017 	ldw	r16,0(sp)
    94e0:	dec00204 	addi	sp,sp,8
    94e4:	f800283a 	ret

000094e8 <_ZNSt12length_errorC1ERKSs>:
    94e8:	defffe04 	addi	sp,sp,-8
    94ec:	dc000015 	stw	r16,0(sp)
    94f0:	dfc00115 	stw	ra,4(sp)
    94f4:	2021883a 	mov	r16,r4
    94f8:	00093d80 	call	93d8 <_ZNSt11logic_errorC2ERKSs>
    94fc:	008000b4 	movhi	r2,2
    9500:	10ba6e04 	addi	r2,r2,-5704
    9504:	80800015 	stw	r2,0(r16)
    9508:	dfc00117 	ldw	ra,4(sp)
    950c:	dc000017 	ldw	r16,0(sp)
    9510:	dec00204 	addi	sp,sp,8
    9514:	f800283a 	ret

00009518 <_ZNSt12length_errorC2ERKSs>:
    9518:	defffe04 	addi	sp,sp,-8
    951c:	dc000015 	stw	r16,0(sp)
    9520:	dfc00115 	stw	ra,4(sp)
    9524:	2021883a 	mov	r16,r4
    9528:	00093d80 	call	93d8 <_ZNSt11logic_errorC2ERKSs>
    952c:	008000b4 	movhi	r2,2
    9530:	10ba6e04 	addi	r2,r2,-5704
    9534:	80800015 	stw	r2,0(r16)
    9538:	dfc00117 	ldw	ra,4(sp)
    953c:	dc000017 	ldw	r16,0(sp)
    9540:	dec00204 	addi	sp,sp,8
    9544:	f800283a 	ret

00009548 <_ZNSt16invalid_argumentC1ERKSs>:
    9548:	defffe04 	addi	sp,sp,-8
    954c:	dc000015 	stw	r16,0(sp)
    9550:	dfc00115 	stw	ra,4(sp)
    9554:	2021883a 	mov	r16,r4
    9558:	00093d80 	call	93d8 <_ZNSt11logic_errorC2ERKSs>
    955c:	008000b4 	movhi	r2,2
    9560:	10ba7c04 	addi	r2,r2,-5648
    9564:	80800015 	stw	r2,0(r16)
    9568:	dfc00117 	ldw	ra,4(sp)
    956c:	dc000017 	ldw	r16,0(sp)
    9570:	dec00204 	addi	sp,sp,8
    9574:	f800283a 	ret

00009578 <_ZNSt16invalid_argumentC2ERKSs>:
    9578:	defffe04 	addi	sp,sp,-8
    957c:	dc000015 	stw	r16,0(sp)
    9580:	dfc00115 	stw	ra,4(sp)
    9584:	2021883a 	mov	r16,r4
    9588:	00093d80 	call	93d8 <_ZNSt11logic_errorC2ERKSs>
    958c:	008000b4 	movhi	r2,2
    9590:	10ba7c04 	addi	r2,r2,-5648
    9594:	80800015 	stw	r2,0(r16)
    9598:	dfc00117 	ldw	ra,4(sp)
    959c:	dc000017 	ldw	r16,0(sp)
    95a0:	dec00204 	addi	sp,sp,8
    95a4:	f800283a 	ret

000095a8 <_ZNSt12domain_errorC1ERKSs>:
    95a8:	defffe04 	addi	sp,sp,-8
    95ac:	dc000015 	stw	r16,0(sp)
    95b0:	dfc00115 	stw	ra,4(sp)
    95b4:	2021883a 	mov	r16,r4
    95b8:	00093d80 	call	93d8 <_ZNSt11logic_errorC2ERKSs>
    95bc:	008000b4 	movhi	r2,2
    95c0:	10ba8904 	addi	r2,r2,-5596
    95c4:	80800015 	stw	r2,0(r16)
    95c8:	dfc00117 	ldw	ra,4(sp)
    95cc:	dc000017 	ldw	r16,0(sp)
    95d0:	dec00204 	addi	sp,sp,8
    95d4:	f800283a 	ret

000095d8 <_ZNSt12domain_errorC2ERKSs>:
    95d8:	defffe04 	addi	sp,sp,-8
    95dc:	dc000015 	stw	r16,0(sp)
    95e0:	dfc00115 	stw	ra,4(sp)
    95e4:	2021883a 	mov	r16,r4
    95e8:	00093d80 	call	93d8 <_ZNSt11logic_errorC2ERKSs>
    95ec:	008000b4 	movhi	r2,2
    95f0:	10ba8904 	addi	r2,r2,-5596
    95f4:	80800015 	stw	r2,0(r16)
    95f8:	dfc00117 	ldw	ra,4(sp)
    95fc:	dc000017 	ldw	r16,0(sp)
    9600:	dec00204 	addi	sp,sp,8
    9604:	f800283a 	ret

00009608 <_ZNKSt11logic_error4whatEv>:
    9608:	20800117 	ldw	r2,4(r4)
    960c:	f800283a 	ret

00009610 <_ZNSt13runtime_errorC1ERKSs>:
    9610:	deffed04 	addi	sp,sp,-76
    9614:	00800074 	movhi	r2,1
    9618:	10b95604 	addi	r2,r2,-6824
    961c:	00c000b4 	movhi	r3,2
    9620:	18f96cc4 	addi	r3,r3,-6733
    9624:	d8800615 	stw	r2,24(sp)
    9628:	d9000d15 	stw	r4,52(sp)
    962c:	00800074 	movhi	r2,1
    9630:	10a5a804 	addi	r2,r2,-26976
    9634:	d809883a 	mov	r4,sp
    9638:	d8c00715 	stw	r3,28(sp)
    963c:	d8800915 	stw	r2,36(sp)
    9640:	d9400e15 	stw	r5,56(sp)
    9644:	dfc01215 	stw	ra,72(sp)
    9648:	df001115 	stw	fp,68(sp)
    964c:	ddc01015 	stw	r23,64(sp)
    9650:	dec00815 	stw	sp,32(sp)
    9654:	dec00a15 	stw	sp,40(sp)
    9658:	00108500 	call	10850 <_Unwind_SjLj_Register>
    965c:	d8c00d17 	ldw	r3,52(sp)
    9660:	008000b4 	movhi	r2,2
    9664:	10ba9c04 	addi	r2,r2,-5520
    9668:	d9400e17 	ldw	r5,56(sp)
    966c:	18800015 	stw	r2,0(r3)
    9670:	d8800d17 	ldw	r2,52(sp)
    9674:	00c00044 	movi	r3,1
    9678:	d8c00115 	stw	r3,4(sp)
    967c:	11000104 	addi	r4,r2,4
    9680:	000b9900 	call	b990 <_ZNSsC1ERKSs>
    9684:	d809883a 	mov	r4,sp
    9688:	00108600 	call	10860 <_Unwind_SjLj_Unregister>
    968c:	dfc01217 	ldw	ra,72(sp)
    9690:	df001117 	ldw	fp,68(sp)
    9694:	ddc01017 	ldw	r23,64(sp)
    9698:	dec01304 	addi	sp,sp,76
    969c:	f800283a 	ret
    96a0:	d8c00217 	ldw	r3,8(sp)
    96a4:	d9000d17 	ldw	r4,52(sp)
    96a8:	d8c00f15 	stw	r3,60(sp)
    96ac:	000eee40 	call	eee4 <_ZNSt9exceptionD2Ev>
    96b0:	d9000f17 	ldw	r4,60(sp)
    96b4:	00bfffc4 	movi	r2,-1
    96b8:	d8800115 	stw	r2,4(sp)
    96bc:	0010b1c0 	call	10b1c <_Unwind_SjLj_Resume>

000096c0 <_ZNSt13runtime_errorD1Ev>:
    96c0:	deffeb04 	addi	sp,sp,-84
    96c4:	00800074 	movhi	r2,1
    96c8:	10b95604 	addi	r2,r2,-6824
    96cc:	00c000b4 	movhi	r3,2
    96d0:	18f96f04 	addi	r3,r3,-6724
    96d4:	d8800715 	stw	r2,28(sp)
    96d8:	d9001015 	stw	r4,64(sp)
    96dc:	00800074 	movhi	r2,1
    96e0:	10a5e104 	addi	r2,r2,-26748
    96e4:	d9000104 	addi	r4,sp,4
    96e8:	d8c00815 	stw	r3,32(sp)
    96ec:	d8800a15 	stw	r2,40(sp)
    96f0:	dfc01415 	stw	ra,80(sp)
    96f4:	df001315 	stw	fp,76(sp)
    96f8:	ddc01215 	stw	r23,72(sp)
    96fc:	dec00915 	stw	sp,36(sp)
    9700:	dec00b15 	stw	sp,44(sp)
    9704:	00108500 	call	10850 <_Unwind_SjLj_Register>
    9708:	d8c01017 	ldw	r3,64(sp)
    970c:	18800117 	ldw	r2,4(r3)
    9710:	00c000b4 	movhi	r3,2
    9714:	18fa9c04 	addi	r3,r3,-5520
    9718:	10bffd04 	addi	r2,r2,-12
    971c:	d8800e15 	stw	r2,56(sp)
    9720:	d8801017 	ldw	r2,64(sp)
    9724:	10c00015 	stw	r3,0(r2)
    9728:	d8c00e17 	ldw	r3,56(sp)
    972c:	008000b4 	movhi	r2,2
    9730:	108ac004 	addi	r2,r2,11008
    9734:	1880091e 	bne	r3,r2,975c <_ZNSt13runtime_errorD1Ev+0x9c>
    9738:	d9001017 	ldw	r4,64(sp)
    973c:	000eee40 	call	eee4 <_ZNSt9exceptionD2Ev>
    9740:	d9000104 	addi	r4,sp,4
    9744:	00108600 	call	10860 <_Unwind_SjLj_Unregister>
    9748:	dfc01417 	ldw	ra,80(sp)
    974c:	df001317 	ldw	fp,76(sp)
    9750:	ddc01217 	ldw	r23,72(sp)
    9754:	dec01504 	addi	sp,sp,84
    9758:	f800283a 	ret
    975c:	00800044 	movi	r2,1
    9760:	d8800215 	stw	r2,8(sp)
    9764:	19000204 	addi	r4,r3,8
    9768:	017fffc4 	movi	r5,-1
    976c:	000daa80 	call	daa8 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
    9770:	00bff116 	blt	zero,r2,9738 <_ZNSt13runtime_errorD1Ev+0x78>
    9774:	d9000e17 	ldw	r4,56(sp)
    9778:	d80b883a 	mov	r5,sp
    977c:	000a5380 	call	a538 <_ZNSs4_Rep10_M_destroyERKSaIcE>
    9780:	003fed06 	br	9738 <_ZNSt13runtime_errorD1Ev+0x78>
    9784:	d8800417 	ldw	r2,16(sp)
    9788:	d8c00317 	ldw	r3,12(sp)
    978c:	d9001017 	ldw	r4,64(sp)
    9790:	d8800f15 	stw	r2,60(sp)
    9794:	d8c01115 	stw	r3,68(sp)
    9798:	000eee40 	call	eee4 <_ZNSt9exceptionD2Ev>
    979c:	d8c00f17 	ldw	r3,60(sp)
    97a0:	00bfffc4 	movi	r2,-1
    97a4:	18800326 	beq	r3,r2,97b4 <_ZNSt13runtime_errorD1Ev+0xf4>
    97a8:	d9001117 	ldw	r4,68(sp)
    97ac:	d8800215 	stw	r2,8(sp)
    97b0:	0010b1c0 	call	10b1c <_Unwind_SjLj_Resume>
    97b4:	d9001117 	ldw	r4,68(sp)
    97b8:	00bfffc4 	movi	r2,-1
    97bc:	d8800215 	stw	r2,8(sp)
    97c0:	000e3d80 	call	e3d8 <__cxa_call_unexpected>

000097c4 <_ZNSt13runtime_errorD2Ev>:
    97c4:	deffeb04 	addi	sp,sp,-84
    97c8:	00800074 	movhi	r2,1
    97cc:	10b95604 	addi	r2,r2,-6824
    97d0:	00c000b4 	movhi	r3,2
    97d4:	18f97304 	addi	r3,r3,-6708
    97d8:	d8800715 	stw	r2,28(sp)
    97dc:	d9001015 	stw	r4,64(sp)
    97e0:	00800074 	movhi	r2,1
    97e4:	10a62204 	addi	r2,r2,-26488
    97e8:	d9000104 	addi	r4,sp,4
    97ec:	d8c00815 	stw	r3,32(sp)
    97f0:	d8800a15 	stw	r2,40(sp)
    97f4:	dfc01415 	stw	ra,80(sp)
    97f8:	df001315 	stw	fp,76(sp)
    97fc:	ddc01215 	stw	r23,72(sp)
    9800:	dec00915 	stw	sp,36(sp)
    9804:	dec00b15 	stw	sp,44(sp)
    9808:	00108500 	call	10850 <_Unwind_SjLj_Register>
    980c:	d8c01017 	ldw	r3,64(sp)
    9810:	18800117 	ldw	r2,4(r3)
    9814:	00c000b4 	movhi	r3,2
    9818:	18fa9c04 	addi	r3,r3,-5520
    981c:	10bffd04 	addi	r2,r2,-12
    9820:	d8800e15 	stw	r2,56(sp)
    9824:	d8801017 	ldw	r2,64(sp)
    9828:	10c00015 	stw	r3,0(r2)
    982c:	d8c00e17 	ldw	r3,56(sp)
    9830:	008000b4 	movhi	r2,2
    9834:	108ac004 	addi	r2,r2,11008
    9838:	1880091e 	bne	r3,r2,9860 <_ZNSt13runtime_errorD2Ev+0x9c>
    983c:	d9001017 	ldw	r4,64(sp)
    9840:	000eee40 	call	eee4 <_ZNSt9exceptionD2Ev>
    9844:	d9000104 	addi	r4,sp,4
    9848:	00108600 	call	10860 <_Unwind_SjLj_Unregister>
    984c:	dfc01417 	ldw	ra,80(sp)
    9850:	df001317 	ldw	fp,76(sp)
    9854:	ddc01217 	ldw	r23,72(sp)
    9858:	dec01504 	addi	sp,sp,84
    985c:	f800283a 	ret
    9860:	00800044 	movi	r2,1
    9864:	d8800215 	stw	r2,8(sp)
    9868:	19000204 	addi	r4,r3,8
    986c:	017fffc4 	movi	r5,-1
    9870:	000daa80 	call	daa8 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
    9874:	00bff116 	blt	zero,r2,983c <_ZNSt13runtime_errorD2Ev+0x78>
    9878:	d9000e17 	ldw	r4,56(sp)
    987c:	d80b883a 	mov	r5,sp
    9880:	000a5380 	call	a538 <_ZNSs4_Rep10_M_destroyERKSaIcE>
    9884:	003fed06 	br	983c <_ZNSt13runtime_errorD2Ev+0x78>
    9888:	d8800417 	ldw	r2,16(sp)
    988c:	d8c00317 	ldw	r3,12(sp)
    9890:	d9001017 	ldw	r4,64(sp)
    9894:	d8800f15 	stw	r2,60(sp)
    9898:	d8c01115 	stw	r3,68(sp)
    989c:	000eee40 	call	eee4 <_ZNSt9exceptionD2Ev>
    98a0:	d8c00f17 	ldw	r3,60(sp)
    98a4:	00bfffc4 	movi	r2,-1
    98a8:	18800326 	beq	r3,r2,98b8 <_ZNSt13runtime_errorD2Ev+0xf4>
    98ac:	d9001117 	ldw	r4,68(sp)
    98b0:	d8800215 	stw	r2,8(sp)
    98b4:	0010b1c0 	call	10b1c <_Unwind_SjLj_Resume>
    98b8:	d9001117 	ldw	r4,68(sp)
    98bc:	00bfffc4 	movi	r2,-1
    98c0:	d8800215 	stw	r2,8(sp)
    98c4:	000e3d80 	call	e3d8 <__cxa_call_unexpected>

000098c8 <_ZNSt13runtime_errorD0Ev>:
    98c8:	deffeb04 	addi	sp,sp,-84
    98cc:	00800074 	movhi	r2,1
    98d0:	10b95604 	addi	r2,r2,-6824
    98d4:	00c000b4 	movhi	r3,2
    98d8:	18f97704 	addi	r3,r3,-6692
    98dc:	d8800715 	stw	r2,28(sp)
    98e0:	d9001015 	stw	r4,64(sp)
    98e4:	00800074 	movhi	r2,1
    98e8:	10a66504 	addi	r2,r2,-26220
    98ec:	d9000104 	addi	r4,sp,4
    98f0:	d8c00815 	stw	r3,32(sp)
    98f4:	d8800a15 	stw	r2,40(sp)
    98f8:	dfc01415 	stw	ra,80(sp)
    98fc:	df001315 	stw	fp,76(sp)
    9900:	ddc01215 	stw	r23,72(sp)
    9904:	dec00915 	stw	sp,36(sp)
    9908:	dec00b15 	stw	sp,44(sp)
    990c:	00108500 	call	10850 <_Unwind_SjLj_Register>
    9910:	d8c01017 	ldw	r3,64(sp)
    9914:	18800117 	ldw	r2,4(r3)
    9918:	00c000b4 	movhi	r3,2
    991c:	18fa9c04 	addi	r3,r3,-5520
    9920:	10bffd04 	addi	r2,r2,-12
    9924:	d8800e15 	stw	r2,56(sp)
    9928:	d8801017 	ldw	r2,64(sp)
    992c:	10c00015 	stw	r3,0(r2)
    9930:	d8c00e17 	ldw	r3,56(sp)
    9934:	008000b4 	movhi	r2,2
    9938:	108ac004 	addi	r2,r2,11008
    993c:	18800b1e 	bne	r3,r2,996c <_ZNSt13runtime_errorD0Ev+0xa4>
    9940:	d9001017 	ldw	r4,64(sp)
    9944:	000eee40 	call	eee4 <_ZNSt9exceptionD2Ev>
    9948:	d9001017 	ldw	r4,64(sp)
    994c:	000de400 	call	de40 <_ZdlPv>
    9950:	d9000104 	addi	r4,sp,4
    9954:	00108600 	call	10860 <_Unwind_SjLj_Unregister>
    9958:	dfc01417 	ldw	ra,80(sp)
    995c:	df001317 	ldw	fp,76(sp)
    9960:	ddc01217 	ldw	r23,72(sp)
    9964:	dec01504 	addi	sp,sp,84
    9968:	f800283a 	ret
    996c:	00800044 	movi	r2,1
    9970:	d8800215 	stw	r2,8(sp)
    9974:	19000204 	addi	r4,r3,8
    9978:	017fffc4 	movi	r5,-1
    997c:	000daa80 	call	daa8 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
    9980:	00bfef16 	blt	zero,r2,9940 <_ZNSt13runtime_errorD0Ev+0x78>
    9984:	d9000e17 	ldw	r4,56(sp)
    9988:	d80b883a 	mov	r5,sp
    998c:	000a5380 	call	a538 <_ZNSs4_Rep10_M_destroyERKSaIcE>
    9990:	003feb06 	br	9940 <_ZNSt13runtime_errorD0Ev+0x78>
    9994:	d8800417 	ldw	r2,16(sp)
    9998:	d8c00317 	ldw	r3,12(sp)
    999c:	d9001017 	ldw	r4,64(sp)
    99a0:	d8800f15 	stw	r2,60(sp)
    99a4:	d8c01115 	stw	r3,68(sp)
    99a8:	000eee40 	call	eee4 <_ZNSt9exceptionD2Ev>
    99ac:	d8c00f17 	ldw	r3,60(sp)
    99b0:	00bfffc4 	movi	r2,-1
    99b4:	18800326 	beq	r3,r2,99c4 <_ZNSt13runtime_errorD0Ev+0xfc>
    99b8:	d9001117 	ldw	r4,68(sp)
    99bc:	d8800215 	stw	r2,8(sp)
    99c0:	0010b1c0 	call	10b1c <_Unwind_SjLj_Resume>
    99c4:	d9001117 	ldw	r4,68(sp)
    99c8:	00bfffc4 	movi	r2,-1
    99cc:	d8800215 	stw	r2,8(sp)
    99d0:	000e3d80 	call	e3d8 <__cxa_call_unexpected>

000099d4 <_ZNSt11logic_errorD2Ev>:
    99d4:	deffeb04 	addi	sp,sp,-84
    99d8:	00800074 	movhi	r2,1
    99dc:	10b95604 	addi	r2,r2,-6824
    99e0:	00c000b4 	movhi	r3,2
    99e4:	18f97b04 	addi	r3,r3,-6676
    99e8:	d8800715 	stw	r2,28(sp)
    99ec:	d9001015 	stw	r4,64(sp)
    99f0:	00800074 	movhi	r2,1
    99f4:	10a6a604 	addi	r2,r2,-25960
    99f8:	d9000104 	addi	r4,sp,4
    99fc:	d8c00815 	stw	r3,32(sp)
    9a00:	d8800a15 	stw	r2,40(sp)
    9a04:	dfc01415 	stw	ra,80(sp)
    9a08:	df001315 	stw	fp,76(sp)
    9a0c:	ddc01215 	stw	r23,72(sp)
    9a10:	dec00915 	stw	sp,36(sp)
    9a14:	dec00b15 	stw	sp,44(sp)
    9a18:	00108500 	call	10850 <_Unwind_SjLj_Register>
    9a1c:	d8c01017 	ldw	r3,64(sp)
    9a20:	18800117 	ldw	r2,4(r3)
    9a24:	00c000b4 	movhi	r3,2
    9a28:	18faa104 	addi	r3,r3,-5500
    9a2c:	10bffd04 	addi	r2,r2,-12
    9a30:	d8800e15 	stw	r2,56(sp)
    9a34:	d8801017 	ldw	r2,64(sp)
    9a38:	10c00015 	stw	r3,0(r2)
    9a3c:	d8c00e17 	ldw	r3,56(sp)
    9a40:	008000b4 	movhi	r2,2
    9a44:	108ac004 	addi	r2,r2,11008
    9a48:	1880091e 	bne	r3,r2,9a70 <_ZNSt11logic_errorD2Ev+0x9c>
    9a4c:	d9001017 	ldw	r4,64(sp)
    9a50:	000eee40 	call	eee4 <_ZNSt9exceptionD2Ev>
    9a54:	d9000104 	addi	r4,sp,4
    9a58:	00108600 	call	10860 <_Unwind_SjLj_Unregister>
    9a5c:	dfc01417 	ldw	ra,80(sp)
    9a60:	df001317 	ldw	fp,76(sp)
    9a64:	ddc01217 	ldw	r23,72(sp)
    9a68:	dec01504 	addi	sp,sp,84
    9a6c:	f800283a 	ret
    9a70:	00800044 	movi	r2,1
    9a74:	d8800215 	stw	r2,8(sp)
    9a78:	19000204 	addi	r4,r3,8
    9a7c:	017fffc4 	movi	r5,-1
    9a80:	000daa80 	call	daa8 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
    9a84:	00bff116 	blt	zero,r2,9a4c <_ZNSt11logic_errorD2Ev+0x78>
    9a88:	d9000e17 	ldw	r4,56(sp)
    9a8c:	d80b883a 	mov	r5,sp
    9a90:	000a5380 	call	a538 <_ZNSs4_Rep10_M_destroyERKSaIcE>
    9a94:	003fed06 	br	9a4c <_ZNSt11logic_errorD2Ev+0x78>
    9a98:	d8800417 	ldw	r2,16(sp)
    9a9c:	d8c00317 	ldw	r3,12(sp)
    9aa0:	d9001017 	ldw	r4,64(sp)
    9aa4:	d8800f15 	stw	r2,60(sp)
    9aa8:	d8c01115 	stw	r3,68(sp)
    9aac:	000eee40 	call	eee4 <_ZNSt9exceptionD2Ev>
    9ab0:	d8c00f17 	ldw	r3,60(sp)
    9ab4:	00bfffc4 	movi	r2,-1
    9ab8:	18800326 	beq	r3,r2,9ac8 <_ZNSt11logic_errorD2Ev+0xf4>
    9abc:	d9001117 	ldw	r4,68(sp)
    9ac0:	d8800215 	stw	r2,8(sp)
    9ac4:	0010b1c0 	call	10b1c <_Unwind_SjLj_Resume>
    9ac8:	d9001117 	ldw	r4,68(sp)
    9acc:	00bfffc4 	movi	r2,-1
    9ad0:	d8800215 	stw	r2,8(sp)
    9ad4:	000e3d80 	call	e3d8 <__cxa_call_unexpected>

00009ad8 <_ZNSt11logic_errorD0Ev>:
    9ad8:	deffeb04 	addi	sp,sp,-84
    9adc:	00800074 	movhi	r2,1
    9ae0:	10b95604 	addi	r2,r2,-6824
    9ae4:	00c000b4 	movhi	r3,2
    9ae8:	18f97f04 	addi	r3,r3,-6660
    9aec:	d8800715 	stw	r2,28(sp)
    9af0:	d9001015 	stw	r4,64(sp)
    9af4:	00800074 	movhi	r2,1
    9af8:	10a6e904 	addi	r2,r2,-25692
    9afc:	d9000104 	addi	r4,sp,4
    9b00:	d8c00815 	stw	r3,32(sp)
    9b04:	d8800a15 	stw	r2,40(sp)
    9b08:	dfc01415 	stw	ra,80(sp)
    9b0c:	df001315 	stw	fp,76(sp)
    9b10:	ddc01215 	stw	r23,72(sp)
    9b14:	dec00915 	stw	sp,36(sp)
    9b18:	dec00b15 	stw	sp,44(sp)
    9b1c:	00108500 	call	10850 <_Unwind_SjLj_Register>
    9b20:	d8c01017 	ldw	r3,64(sp)
    9b24:	18800117 	ldw	r2,4(r3)
    9b28:	00c000b4 	movhi	r3,2
    9b2c:	18faa104 	addi	r3,r3,-5500
    9b30:	10bffd04 	addi	r2,r2,-12
    9b34:	d8800e15 	stw	r2,56(sp)
    9b38:	d8801017 	ldw	r2,64(sp)
    9b3c:	10c00015 	stw	r3,0(r2)
    9b40:	d8c00e17 	ldw	r3,56(sp)
    9b44:	008000b4 	movhi	r2,2
    9b48:	108ac004 	addi	r2,r2,11008
    9b4c:	18800b1e 	bne	r3,r2,9b7c <_ZNSt11logic_errorD0Ev+0xa4>
    9b50:	d9001017 	ldw	r4,64(sp)
    9b54:	000eee40 	call	eee4 <_ZNSt9exceptionD2Ev>
    9b58:	d9001017 	ldw	r4,64(sp)
    9b5c:	000de400 	call	de40 <_ZdlPv>
    9b60:	d9000104 	addi	r4,sp,4
    9b64:	00108600 	call	10860 <_Unwind_SjLj_Unregister>
    9b68:	dfc01417 	ldw	ra,80(sp)
    9b6c:	df001317 	ldw	fp,76(sp)
    9b70:	ddc01217 	ldw	r23,72(sp)
    9b74:	dec01504 	addi	sp,sp,84
    9b78:	f800283a 	ret
    9b7c:	00800044 	movi	r2,1
    9b80:	d8800215 	stw	r2,8(sp)
    9b84:	19000204 	addi	r4,r3,8
    9b88:	017fffc4 	movi	r5,-1
    9b8c:	000daa80 	call	daa8 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
    9b90:	00bfef16 	blt	zero,r2,9b50 <_ZNSt11logic_errorD0Ev+0x78>
    9b94:	d9000e17 	ldw	r4,56(sp)
    9b98:	d80b883a 	mov	r5,sp
    9b9c:	000a5380 	call	a538 <_ZNSs4_Rep10_M_destroyERKSaIcE>
    9ba0:	003feb06 	br	9b50 <_ZNSt11logic_errorD0Ev+0x78>
    9ba4:	d8800417 	ldw	r2,16(sp)
    9ba8:	d8c00317 	ldw	r3,12(sp)
    9bac:	d9001017 	ldw	r4,64(sp)
    9bb0:	d8800f15 	stw	r2,60(sp)
    9bb4:	d8c01115 	stw	r3,68(sp)
    9bb8:	000eee40 	call	eee4 <_ZNSt9exceptionD2Ev>
    9bbc:	d8c00f17 	ldw	r3,60(sp)
    9bc0:	00bfffc4 	movi	r2,-1
    9bc4:	18800326 	beq	r3,r2,9bd4 <_ZNSt11logic_errorD0Ev+0xfc>
    9bc8:	d9001117 	ldw	r4,68(sp)
    9bcc:	d8800215 	stw	r2,8(sp)
    9bd0:	0010b1c0 	call	10b1c <_Unwind_SjLj_Resume>
    9bd4:	d9001117 	ldw	r4,68(sp)
    9bd8:	00bfffc4 	movi	r2,-1
    9bdc:	d8800215 	stw	r2,8(sp)
    9be0:	000e3d80 	call	e3d8 <__cxa_call_unexpected>

00009be4 <_ZNSt11char_traitsIcE2eqERKcS2_>:
    9be4:	20c00007 	ldb	r3,0(r4)
    9be8:	28800007 	ldb	r2,0(r5)
    9bec:	1885003a 	cmpeq	r2,r3,r2
    9bf0:	f800283a 	ret

00009bf4 <_ZNKSs7_M_dataEv>:
    9bf4:	20800017 	ldw	r2,0(r4)
    9bf8:	f800283a 	ret

00009bfc <_ZNSs7_M_dataEPc>:
    9bfc:	2805883a 	mov	r2,r5
    9c00:	21400015 	stw	r5,0(r4)
    9c04:	f800283a 	ret

00009c08 <_ZNKSs6_M_repEv>:
    9c08:	20800017 	ldw	r2,0(r4)
    9c0c:	10bffd04 	addi	r2,r2,-12
    9c10:	f800283a 	ret

00009c14 <_ZNKSs9_M_ibeginEv>:
    9c14:	20800017 	ldw	r2,0(r4)
    9c18:	f800283a 	ret

00009c1c <_ZNKSs7_M_iendEv>:
    9c1c:	20c00017 	ldw	r3,0(r4)
    9c20:	18bffd17 	ldw	r2,-12(r3)
    9c24:	1885883a 	add	r2,r3,r2
    9c28:	f800283a 	ret

00009c2c <_ZNKSs8_M_limitEmm>:
    9c2c:	20c00017 	ldw	r3,0(r4)
    9c30:	18bffd17 	ldw	r2,-12(r3)
    9c34:	1145c83a 	sub	r2,r2,r5
    9c38:	3080012e 	bgeu	r6,r2,9c40 <_ZNKSs8_M_limitEmm+0x14>
    9c3c:	3005883a 	mov	r2,r6
    9c40:	f800283a 	ret

00009c44 <_ZNKSs11_M_disjunctEPKc>:
    9c44:	21000017 	ldw	r4,0(r4)
    9c48:	00800044 	movi	r2,1
    9c4c:	29000336 	bltu	r5,r4,9c5c <_ZNKSs11_M_disjunctEPKc+0x18>
    9c50:	20bffd17 	ldw	r2,-12(r4)
    9c54:	2085883a 	add	r2,r4,r2
    9c58:	1145803a 	cmpltu	r2,r2,r5
    9c5c:	f800283a 	ret

00009c60 <_ZNSs12_S_empty_repEv>:
    9c60:	008000b4 	movhi	r2,2
    9c64:	108ac004 	addi	r2,r2,11008
    9c68:	f800283a 	ret

00009c6c <_ZNSsC1Ev>:
    9c6c:	008000b4 	movhi	r2,2
    9c70:	108ac304 	addi	r2,r2,11020
    9c74:	20800015 	stw	r2,0(r4)
    9c78:	f800283a 	ret

00009c7c <_ZNKSs5beginEv>:
    9c7c:	20800017 	ldw	r2,0(r4)
    9c80:	f800283a 	ret

00009c84 <_ZNKSs3endEv>:
    9c84:	20c00017 	ldw	r3,0(r4)
    9c88:	18bffd17 	ldw	r2,-12(r3)
    9c8c:	1885883a 	add	r2,r3,r2
    9c90:	f800283a 	ret

00009c94 <_ZNKSs4sizeEv>:
    9c94:	20c00017 	ldw	r3,0(r4)
    9c98:	18bffd17 	ldw	r2,-12(r3)
    9c9c:	f800283a 	ret

00009ca0 <_ZNKSs8max_sizeEv>:
    9ca0:	00900034 	movhi	r2,16384
    9ca4:	10bfff04 	addi	r2,r2,-4
    9ca8:	f800283a 	ret

00009cac <_ZNKSs8capacityEv>:
    9cac:	20c00017 	ldw	r3,0(r4)
    9cb0:	18bffe17 	ldw	r2,-8(r3)
    9cb4:	f800283a 	ret

00009cb8 <_ZNKSs4dataEv>:
    9cb8:	20800017 	ldw	r2,0(r4)
    9cbc:	f800283a 	ret

00009cc0 <_ZNKSs13get_allocatorEv>:
    9cc0:	2005883a 	mov	r2,r4
    9cc4:	f800283a 	ret

00009cc8 <_ZNSs12_Alloc_hiderC1EPcRKSaIcE>:
    9cc8:	21400015 	stw	r5,0(r4)
    9ccc:	f800283a 	ret

00009cd0 <_ZNSs4_Rep12_S_empty_repEv>:
    9cd0:	008000b4 	movhi	r2,2
    9cd4:	108ac004 	addi	r2,r2,11008
    9cd8:	f800283a 	ret

00009cdc <_ZNKSs4_Rep12_M_is_leakedEv>:
    9cdc:	20800217 	ldw	r2,8(r4)
    9ce0:	1004d7fa 	srli	r2,r2,31
    9ce4:	f800283a 	ret

00009ce8 <_ZNKSs4_Rep12_M_is_sharedEv>:
    9ce8:	20800217 	ldw	r2,8(r4)
    9cec:	0084803a 	cmplt	r2,zero,r2
    9cf0:	f800283a 	ret

00009cf4 <_ZNSs4_Rep13_M_set_leakedEv>:
    9cf4:	00bfffc4 	movi	r2,-1
    9cf8:	20800215 	stw	r2,8(r4)
    9cfc:	f800283a 	ret

00009d00 <_ZNSs4_Rep15_M_set_sharableEv>:
    9d00:	20000215 	stw	zero,8(r4)
    9d04:	f800283a 	ret

00009d08 <_ZNSs4_Rep26_M_set_length_and_sharableEm>:
    9d08:	2145883a 	add	r2,r4,r5
    9d0c:	20000215 	stw	zero,8(r4)
    9d10:	21400015 	stw	r5,0(r4)
    9d14:	10000305 	stb	zero,12(r2)
    9d18:	f800283a 	ret

00009d1c <_ZNSs4_Rep10_M_refdataEv>:
    9d1c:	20800304 	addi	r2,r4,12
    9d20:	f800283a 	ret

00009d24 <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_>:
    9d24:	defff504 	addi	sp,sp,-44
    9d28:	dd400615 	stw	r21,24(sp)
    9d2c:	dd000515 	stw	r20,20(sp)
    9d30:	dcc00415 	stw	r19,16(sp)
    9d34:	dc800315 	stw	r18,12(sp)
    9d38:	dc400215 	stw	r17,8(sp)
    9d3c:	dfc00a15 	stw	ra,40(sp)
    9d40:	df000915 	stw	fp,36(sp)
    9d44:	ddc00815 	stw	r23,32(sp)
    9d48:	dd800715 	stw	r22,28(sp)
    9d4c:	dc000115 	stw	r16,4(sp)
    9d50:	2025883a 	mov	r18,r4
    9d54:	2823883a 	mov	r17,r5
    9d58:	3027883a 	mov	r19,r6
    9d5c:	382b883a 	mov	r21,r7
    9d60:	dd000b17 	ldw	r20,44(sp)
    9d64:	21400d26 	beq	r4,r5,9d9c <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_+0x78>
    9d68:	31c00c26 	beq	r6,r7,9d9c <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_+0x78>
    9d6c:	30800044 	addi	r2,r6,1
    9d70:	d8800015 	stw	r2,0(sp)
    9d74:	38803226 	beq	r7,r2,9e40 <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_+0x11c>
    9d78:	9021883a 	mov	r16,r18
    9d7c:	8009883a 	mov	r4,r16
    9d80:	980b883a 	mov	r5,r19
    9d84:	a03ee83a 	callr	r20
    9d88:	10803fcc 	andi	r2,r2,255
    9d8c:	1000101e 	bne	r2,zero,9dd0 <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_+0xac>
    9d90:	84000044 	addi	r16,r16,1
    9d94:	847ff91e 	bne	r16,r17,9d7c <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_+0x58>
    9d98:	8825883a 	mov	r18,r17
    9d9c:	9005883a 	mov	r2,r18
    9da0:	dfc00a17 	ldw	ra,40(sp)
    9da4:	df000917 	ldw	fp,36(sp)
    9da8:	ddc00817 	ldw	r23,32(sp)
    9dac:	dd800717 	ldw	r22,28(sp)
    9db0:	dd400617 	ldw	r21,24(sp)
    9db4:	dd000517 	ldw	r20,20(sp)
    9db8:	dcc00417 	ldw	r19,16(sp)
    9dbc:	dc800317 	ldw	r18,12(sp)
    9dc0:	dc400217 	ldw	r17,8(sp)
    9dc4:	dc000117 	ldw	r16,4(sp)
    9dc8:	dec00b04 	addi	sp,sp,44
    9dcc:	f800283a 	ret
    9dd0:	8c3ff126 	beq	r17,r16,9d98 <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_+0x74>
    9dd4:	8825883a 	mov	r18,r17
    9dd8:	00000206 	br	9de4 <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_+0xc0>
    9ddc:	84000044 	addi	r16,r16,1
    9de0:	84bfed26 	beq	r16,r18,9d98 <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_+0x74>
    9de4:	8009883a 	mov	r4,r16
    9de8:	980b883a 	mov	r5,r19
    9dec:	a03ee83a 	callr	r20
    9df0:	10803fcc 	andi	r2,r2,255
    9df4:	103ff926 	beq	r2,zero,9ddc <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_+0xb8>
    9df8:	87000044 	addi	fp,r16,1
    9dfc:	8f001a26 	beq	r17,fp,9e68 <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_+0x144>
    9e00:	dd800017 	ldw	r22,0(sp)
    9e04:	e02f883a 	mov	r23,fp
    9e08:	b809883a 	mov	r4,r23
    9e0c:	b00b883a 	mov	r5,r22
    9e10:	a03ee83a 	callr	r20
    9e14:	8c07c83a 	sub	r3,r17,r16
    9e18:	10803fcc 	andi	r2,r2,255
    9e1c:	98c7883a 	add	r3,r19,r3
    9e20:	b5800044 	addi	r22,r22,1
    9e24:	bdc00044 	addi	r23,r23,1
    9e28:	e025883a 	mov	r18,fp
    9e2c:	103fd226 	beq	r2,zero,9d78 <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_+0x54>
    9e30:	ad800b26 	beq	r21,r22,9e60 <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_+0x13c>
    9e34:	b0fff41e 	bne	r22,r3,9e08 <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_+0xe4>
    9e38:	b825883a 	mov	r18,r23
    9e3c:	003fd706 	br	9d9c <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_+0x78>
    9e40:	2021883a 	mov	r16,r4
    9e44:	8009883a 	mov	r4,r16
    9e48:	980b883a 	mov	r5,r19
    9e4c:	a03ee83a 	callr	r20
    9e50:	10803fcc 	andi	r2,r2,255
    9e54:	1000021e 	bne	r2,zero,9e60 <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_+0x13c>
    9e58:	84000044 	addi	r16,r16,1
    9e5c:	8c3ff91e 	bne	r17,r16,9e44 <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_+0x120>
    9e60:	8025883a 	mov	r18,r16
    9e64:	003fcd06 	br	9d9c <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_+0x78>
    9e68:	e025883a 	mov	r18,fp
    9e6c:	003fcb06 	br	9d9c <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_+0x78>

00009e70 <_ZN9__gnu_cxxeqIPcSsEEbRKNS_17__normal_iteratorIT_T0_EES7_>:
    9e70:	20c00017 	ldw	r3,0(r4)
    9e74:	28800017 	ldw	r2,0(r5)
    9e78:	1885003a 	cmpeq	r2,r3,r2
    9e7c:	f800283a 	ret

00009e80 <_ZNSs12_Alloc_hiderC2EPcRKSaIcE>:
    9e80:	21400015 	stw	r5,0(r4)
    9e84:	f800283a 	ret

00009e88 <_ZNSs4_Rep10_M_refcopyEv>:
    9e88:	deffee04 	addi	sp,sp,-72
    9e8c:	00800074 	movhi	r2,1
    9e90:	10b95604 	addi	r2,r2,-6824
    9e94:	00c000b4 	movhi	r3,2
    9e98:	18f98304 	addi	r3,r3,-6644
    9e9c:	d8800615 	stw	r2,24(sp)
    9ea0:	d9000d15 	stw	r4,52(sp)
    9ea4:	00800074 	movhi	r2,1
    9ea8:	10a7c804 	addi	r2,r2,-24800
    9eac:	d809883a 	mov	r4,sp
    9eb0:	d8c00715 	stw	r3,28(sp)
    9eb4:	d8800915 	stw	r2,36(sp)
    9eb8:	dfc01115 	stw	ra,68(sp)
    9ebc:	df001015 	stw	fp,64(sp)
    9ec0:	ddc00f15 	stw	r23,60(sp)
    9ec4:	dec00815 	stw	sp,32(sp)
    9ec8:	dec00a15 	stw	sp,40(sp)
    9ecc:	00108500 	call	10850 <_Unwind_SjLj_Register>
    9ed0:	d8c00d17 	ldw	r3,52(sp)
    9ed4:	008000b4 	movhi	r2,2
    9ed8:	108ac004 	addi	r2,r2,11008
    9edc:	18800b1e 	bne	r3,r2,9f0c <_ZNSs4_Rep10_M_refcopyEv+0x84>
    9ee0:	d8800d17 	ldw	r2,52(sp)
    9ee4:	d809883a 	mov	r4,sp
    9ee8:	10800304 	addi	r2,r2,12
    9eec:	d8800e15 	stw	r2,56(sp)
    9ef0:	00108600 	call	10860 <_Unwind_SjLj_Unregister>
    9ef4:	d8800e17 	ldw	r2,56(sp)
    9ef8:	dfc01117 	ldw	ra,68(sp)
    9efc:	df001017 	ldw	fp,64(sp)
    9f00:	ddc00f17 	ldw	r23,60(sp)
    9f04:	dec01204 	addi	sp,sp,72
    9f08:	f800283a 	ret
    9f0c:	01400044 	movi	r5,1
    9f10:	d9400115 	stw	r5,4(sp)
    9f14:	19000204 	addi	r4,r3,8
    9f18:	000dabc0 	call	dabc <_ZN9__gnu_cxx12__atomic_addEPVii>
    9f1c:	003ff006 	br	9ee0 <_ZNSs4_Rep10_M_refcopyEv+0x58>
    9f20:	d8800317 	ldw	r2,12(sp)
    9f24:	00ffffc4 	movi	r3,-1
    9f28:	d9000217 	ldw	r4,8(sp)
    9f2c:	10c00226 	beq	r2,r3,9f38 <_ZNSs4_Rep10_M_refcopyEv+0xb0>
    9f30:	d8c00115 	stw	r3,4(sp)
    9f34:	0010b1c0 	call	10b1c <_Unwind_SjLj_Resume>
    9f38:	00bfffc4 	movi	r2,-1
    9f3c:	d8800115 	stw	r2,4(sp)
    9f40:	000e3d80 	call	e3d8 <__cxa_call_unexpected>

00009f44 <_ZNKSs15_M_check_lengthEmmPKc>:
    9f44:	20800017 	ldw	r2,0(r4)
    9f48:	deffff04 	addi	sp,sp,-4
    9f4c:	dfc00015 	stw	ra,0(sp)
    9f50:	10fffd17 	ldw	r3,-12(r2)
    9f54:	00900034 	movhi	r2,16384
    9f58:	10bfff04 	addi	r2,r2,-4
    9f5c:	1947c83a 	sub	r3,r3,r5
    9f60:	10c5c83a 	sub	r2,r2,r3
    9f64:	11800336 	bltu	r2,r6,9f74 <_ZNKSs15_M_check_lengthEmmPKc+0x30>
    9f68:	dfc00017 	ldw	ra,0(sp)
    9f6c:	dec00104 	addi	sp,sp,4
    9f70:	f800283a 	ret
    9f74:	3809883a 	mov	r4,r7
    9f78:	00088240 	call	8824 <_ZSt20__throw_length_errorPKc>

00009f7c <_ZNKSs8_M_checkEmPKc>:
    9f7c:	20c00017 	ldw	r3,0(r4)
    9f80:	deffff04 	addi	sp,sp,-4
    9f84:	dfc00015 	stw	ra,0(sp)
    9f88:	18bffd17 	ldw	r2,-12(r3)
    9f8c:	11400436 	bltu	r2,r5,9fa0 <_ZNKSs8_M_checkEmPKc+0x24>
    9f90:	2805883a 	mov	r2,r5
    9f94:	dfc00017 	ldw	ra,0(sp)
    9f98:	dec00104 	addi	sp,sp,4
    9f9c:	f800283a 	ret
    9fa0:	3009883a 	mov	r4,r6
    9fa4:	00086940 	call	8694 <_ZSt20__throw_out_of_rangePKc>

00009fa8 <_ZNSs9_M_assignEPcmc>:
    9fa8:	3011883a 	mov	r8,r6
    9fac:	2807883a 	mov	r3,r5
    9fb0:	280d883a 	mov	r6,r5
    9fb4:	41403fcc 	andi	r5,r8,255
    9fb8:	2940201c 	xori	r5,r5,128
    9fbc:	01c00044 	movi	r7,1
    9fc0:	297fe004 	addi	r5,r5,-128
    9fc4:	19c00126 	beq	r3,r7,9fcc <_ZNSs9_M_assignEPcmc+0x24>
    9fc8:	0013ba41 	jmpi	13ba4 <memset>
    9fcc:	22000005 	stb	r8,0(r4)
    9fd0:	f800283a 	ret

00009fd4 <_ZNSs7_M_moveEPcPKcm>:
    9fd4:	00800044 	movi	r2,1
    9fd8:	30800126 	beq	r6,r2,9fe0 <_ZNSs7_M_moveEPcPKcm+0xc>
    9fdc:	0013ac41 	jmpi	13ac4 <memmove>
    9fe0:	28800003 	ldbu	r2,0(r5)
    9fe4:	20800005 	stb	r2,0(r4)
    9fe8:	f800283a 	ret

00009fec <_ZNSs7_M_copyEPcPKcm>:
    9fec:	00800044 	movi	r2,1
    9ff0:	30800126 	beq	r6,r2,9ff8 <_ZNSs7_M_copyEPcPKcm+0xc>
    9ff4:	0013a241 	jmpi	13a24 <memcpy>
    9ff8:	28800003 	ldbu	r2,0(r5)
    9ffc:	20800005 	stb	r2,0(r4)
    a000:	f800283a 	ret

0000a004 <_ZNKSs5c_strEv>:
    a004:	20800017 	ldw	r2,0(r4)
    a008:	f800283a 	ret

0000a00c <_ZNKSsixEm>:
    a00c:	20800017 	ldw	r2,0(r4)
    a010:	2885883a 	add	r2,r5,r2
    a014:	f800283a 	ret

0000a018 <_ZNKSs17find_first_not_ofEPKcmm>:
    a018:	20c00017 	ldw	r3,0(r4)
    a01c:	defffb04 	addi	sp,sp,-20
    a020:	dcc00315 	stw	r19,12(sp)
    a024:	18bffd17 	ldw	r2,-12(r3)
    a028:	dc800215 	stw	r18,8(sp)
    a02c:	dc400115 	stw	r17,4(sp)
    a030:	dc000015 	stw	r16,0(sp)
    a034:	dfc00415 	stw	ra,16(sp)
    a038:	2027883a 	mov	r19,r4
    a03c:	3021883a 	mov	r16,r6
    a040:	2825883a 	mov	r18,r5
    a044:	3823883a 	mov	r17,r7
    a048:	30800536 	bltu	r6,r2,a060 <_ZNKSs17find_first_not_ofEPKcmm+0x48>
    a04c:	00001206 	br	a098 <_ZNKSs17find_first_not_ofEPKcmm+0x80>
    a050:	98c00017 	ldw	r3,0(r19)
    a054:	84000044 	addi	r16,r16,1
    a058:	18bffd17 	ldw	r2,-12(r3)
    a05c:	80800e2e 	bgeu	r16,r2,a098 <_ZNKSs17find_first_not_ofEPKcmm+0x80>
    a060:	1c05883a 	add	r2,r3,r16
    a064:	11400007 	ldb	r5,0(r2)
    a068:	9009883a 	mov	r4,r18
    a06c:	880d883a 	mov	r6,r17
    a070:	00138cc0 	call	138cc <memchr>
    a074:	103ff61e 	bne	r2,zero,a050 <_ZNKSs17find_first_not_ofEPKcmm+0x38>
    a078:	8005883a 	mov	r2,r16
    a07c:	dfc00417 	ldw	ra,16(sp)
    a080:	dcc00317 	ldw	r19,12(sp)
    a084:	dc800217 	ldw	r18,8(sp)
    a088:	dc400117 	ldw	r17,4(sp)
    a08c:	dc000017 	ldw	r16,0(sp)
    a090:	dec00504 	addi	sp,sp,20
    a094:	f800283a 	ret
    a098:	043fffc4 	movi	r16,-1
    a09c:	8005883a 	mov	r2,r16
    a0a0:	dfc00417 	ldw	ra,16(sp)
    a0a4:	dcc00317 	ldw	r19,12(sp)
    a0a8:	dc800217 	ldw	r18,8(sp)
    a0ac:	dc400117 	ldw	r17,4(sp)
    a0b0:	dc000017 	ldw	r16,0(sp)
    a0b4:	dec00504 	addi	sp,sp,20
    a0b8:	f800283a 	ret

0000a0bc <_ZNKSs4findEPKcmm>:
    a0bc:	defffb04 	addi	sp,sp,-20
    a0c0:	dc000115 	stw	r16,4(sp)
    a0c4:	24000017 	ldw	r16,0(r4)
    a0c8:	31c7883a 	add	r3,r6,r7
    a0cc:	dc800315 	stw	r18,12(sp)
    a0d0:	823ffd17 	ldw	r8,-12(r16)
    a0d4:	8189883a 	add	r4,r16,r6
    a0d8:	280d883a 	mov	r6,r5
    a0dc:	8225883a 	add	r18,r16,r8
    a0e0:	dc400215 	stw	r17,8(sp)
    a0e4:	dfc00415 	stw	ra,16(sp)
    a0e8:	3823883a 	mov	r17,r7
    a0ec:	900b883a 	mov	r5,r18
    a0f0:	398f883a 	add	r7,r7,r6
    a0f4:	40c0082e 	bgeu	r8,r3,a118 <_ZNKSs4findEPKcmm+0x5c>
    a0f8:	00ffffc4 	movi	r3,-1
    a0fc:	1805883a 	mov	r2,r3
    a100:	dfc00417 	ldw	ra,16(sp)
    a104:	dc800317 	ldw	r18,12(sp)
    a108:	dc400217 	ldw	r17,8(sp)
    a10c:	dc000117 	ldw	r16,4(sp)
    a110:	dec00504 	addi	sp,sp,20
    a114:	f800283a 	ret
    a118:	00800074 	movhi	r2,1
    a11c:	10a6f904 	addi	r2,r2,-25628
    a120:	d8800015 	stw	r2,0(sp)
    a124:	0009d240 	call	9d24 <_ZSt6searchIPKcS1_PFbRS0_S2_EET_S5_S5_T0_S6_T1_>
    a128:	1407c83a 	sub	r3,r2,r16
    a12c:	90bff31e 	bne	r18,r2,a0fc <_ZNKSs4findEPKcmm+0x40>
    a130:	883ff11e 	bne	r17,zero,a0f8 <_ZNKSs4findEPKcmm+0x3c>
    a134:	1805883a 	mov	r2,r3
    a138:	dfc00417 	ldw	ra,16(sp)
    a13c:	dc800317 	ldw	r18,12(sp)
    a140:	dc400217 	ldw	r17,8(sp)
    a144:	dc000117 	ldw	r16,4(sp)
    a148:	dec00504 	addi	sp,sp,20
    a14c:	f800283a 	ret

0000a150 <_ZNKSs2atEm>:
    a150:	21000017 	ldw	r4,0(r4)
    a154:	deffff04 	addi	sp,sp,-4
    a158:	dfc00015 	stw	ra,0(sp)
    a15c:	20bffd17 	ldw	r2,-12(r4)
    a160:	2880042e 	bgeu	r5,r2,a174 <_ZNKSs2atEm+0x24>
    a164:	2145883a 	add	r2,r4,r5
    a168:	dfc00017 	ldw	ra,0(sp)
    a16c:	dec00104 	addi	sp,sp,4
    a170:	f800283a 	ret
    a174:	010000b4 	movhi	r4,2
    a178:	213ab304 	addi	r4,r4,-5428
    a17c:	00086940 	call	8694 <_ZSt20__throw_out_of_rangePKc>

0000a180 <_ZNKSs5emptyEv>:
    a180:	20c00017 	ldw	r3,0(r4)
    a184:	18bffd17 	ldw	r2,-12(r3)
    a188:	1005003a 	cmpeq	r2,r2,zero
    a18c:	f800283a 	ret

0000a190 <_ZNKSs6lengthEv>:
    a190:	20c00017 	ldw	r3,0(r4)
    a194:	18bffd17 	ldw	r2,-12(r3)
    a198:	f800283a 	ret

0000a19c <_ZNKSs4findERKSsm>:
    a19c:	29400017 	ldw	r5,0(r5)
    a1a0:	29fffd17 	ldw	r7,-12(r5)
    a1a4:	000a0bc1 	jmpi	a0bc <_ZNKSs4findEPKcmm>

0000a1a8 <_ZNKSs17find_first_not_ofERKSsm>:
    a1a8:	29400017 	ldw	r5,0(r5)
    a1ac:	29fffd17 	ldw	r7,-12(r5)
    a1b0:	000a0181 	jmpi	a018 <_ZNKSs17find_first_not_ofEPKcmm>

0000a1b4 <_ZNKSs5rfindEPKcmm>:
    a1b4:	defff804 	addi	sp,sp,-32
    a1b8:	dc800415 	stw	r18,16(sp)
    a1bc:	24800017 	ldw	r18,0(r4)
    a1c0:	dcc00515 	stw	r19,20(sp)
    a1c4:	dc400315 	stw	r17,12(sp)
    a1c8:	90bffd17 	ldw	r2,-12(r18)
    a1cc:	dfc00715 	stw	ra,28(sp)
    a1d0:	dd000615 	stw	r20,24(sp)
    a1d4:	dc000215 	stw	r16,8(sp)
    a1d8:	3823883a 	mov	r17,r7
    a1dc:	2827883a 	mov	r19,r5
    a1e0:	d9800115 	stw	r6,4(sp)
    a1e4:	11c01136 	bltu	r2,r7,a22c <_ZNKSs5rfindEPKcmm+0x78>
    a1e8:	11c5c83a 	sub	r2,r2,r7
    a1ec:	d8800015 	stw	r2,0(sp)
    a1f0:	3080182e 	bgeu	r6,r2,a254 <_ZNKSs5rfindEPKcmm+0xa0>
    a1f4:	d8800104 	addi	r2,sp,4
    a1f8:	10800017 	ldw	r2,0(r2)
    a1fc:	053fffc4 	movi	r20,-1
    a200:	d8800115 	stw	r2,4(sp)
    a204:	00000106 	br	a20c <_ZNKSs5rfindEPKcmm+0x58>
    a208:	d8c00115 	stw	r3,4(sp)
    a20c:	dc000117 	ldw	r16,4(sp)
    a210:	980b883a 	mov	r5,r19
    a214:	880d883a 	mov	r6,r17
    a218:	9409883a 	add	r4,r18,r16
    a21c:	00139b00 	call	139b0 <memcmp>
    a220:	80ffffc4 	addi	r3,r16,-1
    a224:	10000226 	beq	r2,zero,a230 <_ZNKSs5rfindEPKcmm+0x7c>
    a228:	1d3ff71e 	bne	r3,r20,a208 <_ZNKSs5rfindEPKcmm+0x54>
    a22c:	043fffc4 	movi	r16,-1
    a230:	8005883a 	mov	r2,r16
    a234:	dfc00717 	ldw	ra,28(sp)
    a238:	dd000617 	ldw	r20,24(sp)
    a23c:	dcc00517 	ldw	r19,20(sp)
    a240:	dc800417 	ldw	r18,16(sp)
    a244:	dc400317 	ldw	r17,12(sp)
    a248:	dc000217 	ldw	r16,8(sp)
    a24c:	dec00804 	addi	sp,sp,32
    a250:	f800283a 	ret
    a254:	d805883a 	mov	r2,sp
    a258:	003fe706 	br	a1f8 <_ZNKSs5rfindEPKcmm+0x44>

0000a25c <_ZNKSs5rfindEPKcm>:
    a25c:	defffc04 	addi	sp,sp,-16
    a260:	dd400215 	stw	r21,8(sp)
    a264:	dcc00115 	stw	r19,4(sp)
    a268:	dc400015 	stw	r17,0(sp)
    a26c:	2027883a 	mov	r19,r4
    a270:	dfc00315 	stw	ra,12(sp)
    a274:	2809883a 	mov	r4,r5
    a278:	2823883a 	mov	r17,r5
    a27c:	302b883a 	mov	r21,r6
    a280:	0014cac0 	call	14cac <strlen>
    a284:	880b883a 	mov	r5,r17
    a288:	9809883a 	mov	r4,r19
    a28c:	a80d883a 	mov	r6,r21
    a290:	100f883a 	mov	r7,r2
    a294:	dfc00317 	ldw	ra,12(sp)
    a298:	dd400217 	ldw	r21,8(sp)
    a29c:	dcc00117 	ldw	r19,4(sp)
    a2a0:	dc400017 	ldw	r17,0(sp)
    a2a4:	dec00404 	addi	sp,sp,16
    a2a8:	000a1b41 	jmpi	a1b4 <_ZNKSs5rfindEPKcmm>

0000a2ac <_ZNKSs5rfindERKSsm>:
    a2ac:	29400017 	ldw	r5,0(r5)
    a2b0:	29fffd17 	ldw	r7,-12(r5)
    a2b4:	000a1b41 	jmpi	a1b4 <_ZNKSs5rfindEPKcmm>

0000a2b8 <_ZNSsC2Ev>:
    a2b8:	008000b4 	movhi	r2,2
    a2bc:	108ac304 	addi	r2,r2,11020
    a2c0:	20800015 	stw	r2,0(r4)
    a2c4:	f800283a 	ret

0000a2c8 <_ZN9__gnu_cxxeqIPKcSsEEbRKNS_17__normal_iteratorIT_T0_EES8_>:
    a2c8:	20c00017 	ldw	r3,0(r4)
    a2cc:	28800017 	ldw	r2,0(r5)
    a2d0:	1885003a 	cmpeq	r2,r3,r2
    a2d4:	f800283a 	ret

0000a2d8 <_ZNKSs5rfindEcm>:
    a2d8:	21000017 	ldw	r4,0(r4)
    a2dc:	3007883a 	mov	r3,r6
    a2e0:	20bffd17 	ldw	r2,-12(r4)
    a2e4:	10001226 	beq	r2,zero,a330 <_ZNKSs5rfindEcm+0x58>
    a2e8:	11bfffc4 	addi	r6,r2,-1
    a2ec:	19800e36 	bltu	r3,r6,a328 <_ZNKSs5rfindEcm+0x50>
    a2f0:	29403fcc 	andi	r5,r5,255
    a2f4:	2940201c 	xori	r5,r5,128
    a2f8:	2189883a 	add	r4,r4,r6
    a2fc:	297fe004 	addi	r5,r5,-128
    a300:	0007883a 	mov	r3,zero
    a304:	32000044 	addi	r8,r6,1
    a308:	30cfc83a 	sub	r7,r6,r3
    a30c:	40c00826 	beq	r8,r3,a330 <_ZNKSs5rfindEcm+0x58>
    a310:	20800007 	ldb	r2,0(r4)
    a314:	18c00044 	addi	r3,r3,1
    a318:	213fffc4 	addi	r4,r4,-1
    a31c:	117ffa1e 	bne	r2,r5,a308 <_ZNKSs5rfindEcm+0x30>
    a320:	3805883a 	mov	r2,r7
    a324:	f800283a 	ret
    a328:	180d883a 	mov	r6,r3
    a32c:	003ff006 	br	a2f0 <_ZNKSs5rfindEcm+0x18>
    a330:	01ffffc4 	movi	r7,-1
    a334:	3805883a 	mov	r2,r7
    a338:	f800283a 	ret

0000a33c <_ZNKSs12find_last_ofEcm>:
    a33c:	29403fcc 	andi	r5,r5,255
    a340:	2940201c 	xori	r5,r5,128
    a344:	297fe004 	addi	r5,r5,-128
    a348:	000a2d81 	jmpi	a2d8 <_ZNKSs5rfindEcm>

0000a34c <_ZNKSs16find_last_not_ofEcm>:
    a34c:	21000017 	ldw	r4,0(r4)
    a350:	20bffd17 	ldw	r2,-12(r4)
    a354:	10001026 	beq	r2,zero,a398 <_ZNKSs16find_last_not_ofEcm+0x4c>
    a358:	10ffffc4 	addi	r3,r2,-1
    a35c:	30c00c36 	bltu	r6,r3,a390 <_ZNKSs16find_last_not_ofEcm+0x44>
    a360:	29403fcc 	andi	r5,r5,255
    a364:	2940201c 	xori	r5,r5,128
    a368:	20c9883a 	add	r4,r4,r3
    a36c:	297fe004 	addi	r5,r5,-128
    a370:	01bfffc4 	movi	r6,-1
    a374:	20800007 	ldb	r2,0(r4)
    a378:	213fffc4 	addi	r4,r4,-1
    a37c:	1140021e 	bne	r2,r5,a388 <_ZNKSs16find_last_not_ofEcm+0x3c>
    a380:	18ffffc4 	addi	r3,r3,-1
    a384:	19bffb1e 	bne	r3,r6,a374 <_ZNKSs16find_last_not_ofEcm+0x28>
    a388:	1805883a 	mov	r2,r3
    a38c:	f800283a 	ret
    a390:	3007883a 	mov	r3,r6
    a394:	003ff206 	br	a360 <_ZNKSs16find_last_not_ofEcm+0x14>
    a398:	00ffffc4 	movi	r3,-1
    a39c:	1805883a 	mov	r2,r3
    a3a0:	f800283a 	ret

0000a3a4 <_ZNKSs17find_first_not_ofEcm>:
    a3a4:	21000017 	ldw	r4,0(r4)
    a3a8:	3007883a 	mov	r3,r6
    a3ac:	21bffd17 	ldw	r6,-12(r4)
    a3b0:	19800f2e 	bgeu	r3,r6,a3f0 <_ZNKSs17find_first_not_ofEcm+0x4c>
    a3b4:	20c9883a 	add	r4,r4,r3
    a3b8:	29403fcc 	andi	r5,r5,255
    a3bc:	20800007 	ldb	r2,0(r4)
    a3c0:	2940201c 	xori	r5,r5,128
    a3c4:	297fe004 	addi	r5,r5,-128
    a3c8:	28800a1e 	bne	r5,r2,a3f4 <_ZNKSs17find_first_not_ofEcm+0x50>
    a3cc:	30cfc83a 	sub	r7,r6,r3
    a3d0:	180d883a 	mov	r6,r3
    a3d4:	00000306 	br	a3e4 <_ZNKSs17find_first_not_ofEcm+0x40>
    a3d8:	20800047 	ldb	r2,1(r4)
    a3dc:	21000044 	addi	r4,r4,1
    a3e0:	1140061e 	bne	r2,r5,a3fc <_ZNKSs17find_first_not_ofEcm+0x58>
    a3e4:	31800044 	addi	r6,r6,1
    a3e8:	19c5883a 	add	r2,r3,r7
    a3ec:	11bffa1e 	bne	r2,r6,a3d8 <_ZNKSs17find_first_not_ofEcm+0x34>
    a3f0:	00ffffc4 	movi	r3,-1
    a3f4:	1805883a 	mov	r2,r3
    a3f8:	f800283a 	ret
    a3fc:	3007883a 	mov	r3,r6
    a400:	1805883a 	mov	r2,r3
    a404:	f800283a 	ret

0000a408 <_ZNSs4_Rep9_S_createEmmRKSaIcE>:
    a408:	deffed04 	addi	sp,sp,-76
    a40c:	00800074 	movhi	r2,1
    a410:	10b95604 	addi	r2,r2,-6824
    a414:	00c000b4 	movhi	r3,2
    a418:	18f98644 	addi	r3,r3,-6631
    a41c:	d8800615 	stw	r2,24(sp)
    a420:	d9000e15 	stw	r4,56(sp)
    a424:	00800074 	movhi	r2,1
    a428:	10a94a04 	addi	r2,r2,-23256
    a42c:	d809883a 	mov	r4,sp
    a430:	d8c00715 	stw	r3,28(sp)
    a434:	d8800915 	stw	r2,36(sp)
    a438:	dfc01215 	stw	ra,72(sp)
    a43c:	df001115 	stw	fp,68(sp)
    a440:	ddc01015 	stw	r23,64(sp)
    a444:	dec00815 	stw	sp,32(sp)
    a448:	dec00a15 	stw	sp,40(sp)
    a44c:	d9400f15 	stw	r5,60(sp)
    a450:	00108500 	call	10850 <_Unwind_SjLj_Register>
    a454:	d8c00e17 	ldw	r3,56(sp)
    a458:	00900034 	movhi	r2,16384
    a45c:	10bfff04 	addi	r2,r2,-4
    a460:	10c02c36 	bltu	r2,r3,a514 <_ZNSs4_Rep9_S_createEmmRKSaIcE+0x10c>
    a464:	d9800f17 	ldw	r6,60(sp)
    a468:	d9c00e17 	ldw	r7,56(sp)
    a46c:	31c0032e 	bgeu	r6,r7,a47c <_ZNSs4_Rep9_S_createEmmRKSaIcE+0x74>
    a470:	3189883a 	add	r4,r6,r6
    a474:	3900012e 	bgeu	r7,r4,a47c <_ZNSs4_Rep9_S_createEmmRKSaIcE+0x74>
    a478:	d9000e15 	stw	r4,56(sp)
    a47c:	d8800e17 	ldw	r2,56(sp)
    a480:	01400344 	movi	r5,13
    a484:	00c40004 	movi	r3,4096
    a488:	1149883a 	add	r4,r2,r5
    a48c:	20800404 	addi	r2,r4,16
    a490:	18800f36 	bltu	r3,r2,a4d0 <_ZNSs4_Rep9_S_createEmmRKSaIcE+0xc8>
    a494:	00800044 	movi	r2,1
    a498:	d8800115 	stw	r2,4(sp)
    a49c:	000ed700 	call	ed70 <_Znwm>
    a4a0:	d8c00e17 	ldw	r3,56(sp)
    a4a4:	10000215 	stw	zero,8(r2)
    a4a8:	d809883a 	mov	r4,sp
    a4ac:	10c00115 	stw	r3,4(r2)
    a4b0:	d8800d15 	stw	r2,52(sp)
    a4b4:	00108600 	call	10860 <_Unwind_SjLj_Unregister>
    a4b8:	d8800d17 	ldw	r2,52(sp)
    a4bc:	dfc01217 	ldw	ra,72(sp)
    a4c0:	df001117 	ldw	fp,68(sp)
    a4c4:	ddc01017 	ldw	r23,64(sp)
    a4c8:	dec01304 	addi	sp,sp,76
    a4cc:	f800283a 	ret
    a4d0:	d9800f17 	ldw	r6,60(sp)
    a4d4:	d9c00e17 	ldw	r7,56(sp)
    a4d8:	31ffee2e 	bgeu	r6,r7,a494 <_ZNSs4_Rep9_S_createEmmRKSaIcE+0x8c>
    a4dc:	1083ffcc 	andi	r2,r2,4095
    a4e0:	1885c83a 	sub	r2,r3,r2
    a4e4:	388f883a 	add	r7,r7,r2
    a4e8:	01100034 	movhi	r4,16384
    a4ec:	213fff04 	addi	r4,r4,-4
    a4f0:	d9c00e15 	stw	r7,56(sp)
    a4f4:	21c00336 	bltu	r4,r7,a504 <_ZNSs4_Rep9_S_createEmmRKSaIcE+0xfc>
    a4f8:	d8800e17 	ldw	r2,56(sp)
    a4fc:	1149883a 	add	r4,r2,r5
    a500:	003fe406 	br	a494 <_ZNSs4_Rep9_S_createEmmRKSaIcE+0x8c>
    a504:	d9000e15 	stw	r4,56(sp)
    a508:	d8800e17 	ldw	r2,56(sp)
    a50c:	1149883a 	add	r4,r2,r5
    a510:	003fe006 	br	a494 <_ZNSs4_Rep9_S_createEmmRKSaIcE+0x8c>
    a514:	00bfffc4 	movi	r2,-1
    a518:	010000b4 	movhi	r4,2
    a51c:	213ab804 	addi	r4,r4,-5408
    a520:	d8800115 	stw	r2,4(sp)
    a524:	00088240 	call	8824 <_ZSt20__throw_length_errorPKc>
    a528:	d9000217 	ldw	r4,8(sp)
    a52c:	00bfffc4 	movi	r2,-1
    a530:	d8800115 	stw	r2,4(sp)
    a534:	0010b1c0 	call	10b1c <_Unwind_SjLj_Resume>

0000a538 <_ZNSs4_Rep10_M_destroyERKSaIcE>:
    a538:	000de401 	jmpi	de40 <_ZdlPv>

0000a53c <_ZNSs4_Rep10_M_disposeERKSaIcE>:
    a53c:	defffd04 	addi	sp,sp,-12
    a540:	dc000015 	stw	r16,0(sp)
    a544:	008000b4 	movhi	r2,2
    a548:	108ac004 	addi	r2,r2,11008
    a54c:	2021883a 	mov	r16,r4
    a550:	dc400115 	stw	r17,4(sp)
    a554:	dfc00215 	stw	ra,8(sp)
    a558:	2823883a 	mov	r17,r5
    a55c:	21000204 	addi	r4,r4,8
    a560:	017fffc4 	movi	r5,-1
    a564:	8080051e 	bne	r16,r2,a57c <_ZNSs4_Rep10_M_disposeERKSaIcE+0x40>
    a568:	dfc00217 	ldw	ra,8(sp)
    a56c:	dc400117 	ldw	r17,4(sp)
    a570:	dc000017 	ldw	r16,0(sp)
    a574:	dec00304 	addi	sp,sp,12
    a578:	f800283a 	ret
    a57c:	000daa80 	call	daa8 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
    a580:	8009883a 	mov	r4,r16
    a584:	880b883a 	mov	r5,r17
    a588:	00bff716 	blt	zero,r2,a568 <_ZNSs4_Rep10_M_disposeERKSaIcE+0x2c>
    a58c:	dfc00217 	ldw	ra,8(sp)
    a590:	dc400117 	ldw	r17,4(sp)
    a594:	dc000017 	ldw	r16,0(sp)
    a598:	dec00304 	addi	sp,sp,12
    a59c:	000a5381 	jmpi	a538 <_ZNSs4_Rep10_M_destroyERKSaIcE>

0000a5a0 <_ZNKSs12find_last_ofEPKcmm>:
    a5a0:	20800017 	ldw	r2,0(r4)
    a5a4:	defffb04 	addi	sp,sp,-20
    a5a8:	dcc00315 	stw	r19,12(sp)
    a5ac:	10fffd17 	ldw	r3,-12(r2)
    a5b0:	dc800215 	stw	r18,8(sp)
    a5b4:	dc400115 	stw	r17,4(sp)
    a5b8:	dfc00415 	stw	ra,16(sp)
    a5bc:	dc000015 	stw	r16,0(sp)
    a5c0:	2027883a 	mov	r19,r4
    a5c4:	2825883a 	mov	r18,r5
    a5c8:	3823883a 	mov	r17,r7
    a5cc:	18002426 	beq	r3,zero,a660 <_ZNKSs12find_last_ofEPKcmm+0xc0>
    a5d0:	38002326 	beq	r7,zero,a660 <_ZNKSs12find_last_ofEPKcmm+0xc0>
    a5d4:	1c3fffc4 	addi	r16,r3,-1
    a5d8:	3400102e 	bgeu	r6,r16,a61c <_ZNKSs12find_last_ofEPKcmm+0x7c>
    a5dc:	3021883a 	mov	r16,r6
    a5e0:	1405883a 	add	r2,r2,r16
    a5e4:	11400007 	ldb	r5,0(r2)
    a5e8:	9009883a 	mov	r4,r18
    a5ec:	880d883a 	mov	r6,r17
    a5f0:	00138cc0 	call	138cc <memchr>
    a5f4:	10000f26 	beq	r2,zero,a634 <_ZNKSs12find_last_ofEPKcmm+0x94>
    a5f8:	8005883a 	mov	r2,r16
    a5fc:	dfc00417 	ldw	ra,16(sp)
    a600:	dcc00317 	ldw	r19,12(sp)
    a604:	dc800217 	ldw	r18,8(sp)
    a608:	dc400117 	ldw	r17,4(sp)
    a60c:	dc000017 	ldw	r16,0(sp)
    a610:	dec00504 	addi	sp,sp,20
    a614:	f800283a 	ret
    a618:	98800017 	ldw	r2,0(r19)
    a61c:	1405883a 	add	r2,r2,r16
    a620:	11400007 	ldb	r5,0(r2)
    a624:	9009883a 	mov	r4,r18
    a628:	880d883a 	mov	r6,r17
    a62c:	00138cc0 	call	138cc <memchr>
    a630:	103ff11e 	bne	r2,zero,a5f8 <_ZNKSs12find_last_ofEPKcmm+0x58>
    a634:	843fffc4 	addi	r16,r16,-1
    a638:	00bfffc4 	movi	r2,-1
    a63c:	80bff61e 	bne	r16,r2,a618 <_ZNKSs12find_last_ofEPKcmm+0x78>
    a640:	8005883a 	mov	r2,r16
    a644:	dfc00417 	ldw	ra,16(sp)
    a648:	dcc00317 	ldw	r19,12(sp)
    a64c:	dc800217 	ldw	r18,8(sp)
    a650:	dc400117 	ldw	r17,4(sp)
    a654:	dc000017 	ldw	r16,0(sp)
    a658:	dec00504 	addi	sp,sp,20
    a65c:	f800283a 	ret
    a660:	043fffc4 	movi	r16,-1
    a664:	8005883a 	mov	r2,r16
    a668:	dfc00417 	ldw	ra,16(sp)
    a66c:	dcc00317 	ldw	r19,12(sp)
    a670:	dc800217 	ldw	r18,8(sp)
    a674:	dc400117 	ldw	r17,4(sp)
    a678:	dc000017 	ldw	r16,0(sp)
    a67c:	dec00504 	addi	sp,sp,20
    a680:	f800283a 	ret

0000a684 <_ZNKSs12find_last_ofERKSsm>:
    a684:	29400017 	ldw	r5,0(r5)
    a688:	29fffd17 	ldw	r7,-12(r5)
    a68c:	000a5a01 	jmpi	a5a0 <_ZNKSs12find_last_ofEPKcmm>

0000a690 <_ZNKSs13find_first_ofEPKcmm>:
    a690:	defffb04 	addi	sp,sp,-20
    a694:	dcc00315 	stw	r19,12(sp)
    a698:	dc800215 	stw	r18,8(sp)
    a69c:	dc400115 	stw	r17,4(sp)
    a6a0:	dc000015 	stw	r16,0(sp)
    a6a4:	dfc00415 	stw	ra,16(sp)
    a6a8:	3823883a 	mov	r17,r7
    a6ac:	2027883a 	mov	r19,r4
    a6b0:	2825883a 	mov	r18,r5
    a6b4:	3021883a 	mov	r16,r6
    a6b8:	3800091e 	bne	r7,zero,a6e0 <_ZNKSs13find_first_ofEPKcmm+0x50>
    a6bc:	043fffc4 	movi	r16,-1
    a6c0:	8005883a 	mov	r2,r16
    a6c4:	dfc00417 	ldw	ra,16(sp)
    a6c8:	dcc00317 	ldw	r19,12(sp)
    a6cc:	dc800217 	ldw	r18,8(sp)
    a6d0:	dc400117 	ldw	r17,4(sp)
    a6d4:	dc000017 	ldw	r16,0(sp)
    a6d8:	dec00504 	addi	sp,sp,20
    a6dc:	f800283a 	ret
    a6e0:	20c00017 	ldw	r3,0(r4)
    a6e4:	18bffd17 	ldw	r2,-12(r3)
    a6e8:	30bff42e 	bgeu	r6,r2,a6bc <_ZNKSs13find_first_ofEPKcmm+0x2c>
    a6ec:	80c5883a 	add	r2,r16,r3
    a6f0:	11400007 	ldb	r5,0(r2)
    a6f4:	9009883a 	mov	r4,r18
    a6f8:	880d883a 	mov	r6,r17
    a6fc:	00138cc0 	call	138cc <memchr>
    a700:	103fef1e 	bne	r2,zero,a6c0 <_ZNKSs13find_first_ofEPKcmm+0x30>
    a704:	98c00017 	ldw	r3,0(r19)
    a708:	84000044 	addi	r16,r16,1
    a70c:	18bffd17 	ldw	r2,-12(r3)
    a710:	80bff636 	bltu	r16,r2,a6ec <_ZNKSs13find_first_ofEPKcmm+0x5c>
    a714:	003fe906 	br	a6bc <_ZNKSs13find_first_ofEPKcmm+0x2c>

0000a718 <_ZNKSs13find_first_ofERKSsm>:
    a718:	29400017 	ldw	r5,0(r5)
    a71c:	29fffd17 	ldw	r7,-12(r5)
    a720:	000a6901 	jmpi	a690 <_ZNKSs13find_first_ofEPKcmm>

0000a724 <_ZNKSs4findEcm>:
    a724:	defffe04 	addi	sp,sp,-8
    a728:	dc000015 	stw	r16,0(sp)
    a72c:	24000017 	ldw	r16,0(r4)
    a730:	29403fcc 	andi	r5,r5,255
    a734:	3007883a 	mov	r3,r6
    a738:	81fffd17 	ldw	r7,-12(r16)
    a73c:	2940201c 	xori	r5,r5,128
    a740:	8189883a 	add	r4,r16,r6
    a744:	dfc00115 	stw	ra,4(sp)
    a748:	297fe004 	addi	r5,r5,-128
    a74c:	398dc83a 	sub	r6,r7,r6
    a750:	19c0082e 	bgeu	r3,r7,a774 <_ZNKSs4findEcm+0x50>
    a754:	00138cc0 	call	138cc <memchr>
    a758:	1407c83a 	sub	r3,r2,r16
    a75c:	10000526 	beq	r2,zero,a774 <_ZNKSs4findEcm+0x50>
    a760:	1805883a 	mov	r2,r3
    a764:	dfc00117 	ldw	ra,4(sp)
    a768:	dc000017 	ldw	r16,0(sp)
    a76c:	dec00204 	addi	sp,sp,8
    a770:	f800283a 	ret
    a774:	00ffffc4 	movi	r3,-1
    a778:	1805883a 	mov	r2,r3
    a77c:	dfc00117 	ldw	ra,4(sp)
    a780:	dc000017 	ldw	r16,0(sp)
    a784:	dec00204 	addi	sp,sp,8
    a788:	f800283a 	ret

0000a78c <_ZNKSs13find_first_ofEcm>:
    a78c:	29403fcc 	andi	r5,r5,255
    a790:	2940201c 	xori	r5,r5,128
    a794:	297fe004 	addi	r5,r5,-128
    a798:	000a7241 	jmpi	a724 <_ZNKSs4findEcm>

0000a79c <_ZNKSs16find_last_not_ofEPKcmm>:
    a79c:	20800017 	ldw	r2,0(r4)
    a7a0:	defffb04 	addi	sp,sp,-20
    a7a4:	dcc00315 	stw	r19,12(sp)
    a7a8:	10fffd17 	ldw	r3,-12(r2)
    a7ac:	dc800215 	stw	r18,8(sp)
    a7b0:	dc400115 	stw	r17,4(sp)
    a7b4:	dfc00415 	stw	ra,16(sp)
    a7b8:	dc000015 	stw	r16,0(sp)
    a7bc:	2027883a 	mov	r19,r4
    a7c0:	2825883a 	mov	r18,r5
    a7c4:	3823883a 	mov	r17,r7
    a7c8:	18002326 	beq	r3,zero,a858 <_ZNKSs16find_last_not_ofEPKcmm+0xbc>
    a7cc:	1c3fffc4 	addi	r16,r3,-1
    a7d0:	3400102e 	bgeu	r6,r16,a814 <_ZNKSs16find_last_not_ofEPKcmm+0x78>
    a7d4:	3021883a 	mov	r16,r6
    a7d8:	1405883a 	add	r2,r2,r16
    a7dc:	11400007 	ldb	r5,0(r2)
    a7e0:	9009883a 	mov	r4,r18
    a7e4:	880d883a 	mov	r6,r17
    a7e8:	00138cc0 	call	138cc <memchr>
    a7ec:	10000f1e 	bne	r2,zero,a82c <_ZNKSs16find_last_not_ofEPKcmm+0x90>
    a7f0:	8005883a 	mov	r2,r16
    a7f4:	dfc00417 	ldw	ra,16(sp)
    a7f8:	dcc00317 	ldw	r19,12(sp)
    a7fc:	dc800217 	ldw	r18,8(sp)
    a800:	dc400117 	ldw	r17,4(sp)
    a804:	dc000017 	ldw	r16,0(sp)
    a808:	dec00504 	addi	sp,sp,20
    a80c:	f800283a 	ret
    a810:	98800017 	ldw	r2,0(r19)
    a814:	1405883a 	add	r2,r2,r16
    a818:	11400007 	ldb	r5,0(r2)
    a81c:	9009883a 	mov	r4,r18
    a820:	880d883a 	mov	r6,r17
    a824:	00138cc0 	call	138cc <memchr>
    a828:	103ff126 	beq	r2,zero,a7f0 <_ZNKSs16find_last_not_ofEPKcmm+0x54>
    a82c:	843fffc4 	addi	r16,r16,-1
    a830:	00bfffc4 	movi	r2,-1
    a834:	80bff61e 	bne	r16,r2,a810 <_ZNKSs16find_last_not_ofEPKcmm+0x74>
    a838:	8005883a 	mov	r2,r16
    a83c:	dfc00417 	ldw	ra,16(sp)
    a840:	dcc00317 	ldw	r19,12(sp)
    a844:	dc800217 	ldw	r18,8(sp)
    a848:	dc400117 	ldw	r17,4(sp)
    a84c:	dc000017 	ldw	r16,0(sp)
    a850:	dec00504 	addi	sp,sp,20
    a854:	f800283a 	ret
    a858:	043fffc4 	movi	r16,-1
    a85c:	8005883a 	mov	r2,r16
    a860:	dfc00417 	ldw	ra,16(sp)
    a864:	dcc00317 	ldw	r19,12(sp)
    a868:	dc800217 	ldw	r18,8(sp)
    a86c:	dc400117 	ldw	r17,4(sp)
    a870:	dc000017 	ldw	r16,0(sp)
    a874:	dec00504 	addi	sp,sp,20
    a878:	f800283a 	ret

0000a87c <_ZNKSs16find_last_not_ofERKSsm>:
    a87c:	29400017 	ldw	r5,0(r5)
    a880:	29fffd17 	ldw	r7,-12(r5)
    a884:	000a79c1 	jmpi	a79c <_ZNKSs16find_last_not_ofEPKcmm>

0000a888 <_ZNKSs7compareERKSs>:
    a888:	20800017 	ldw	r2,0(r4)
    a88c:	28c00017 	ldw	r3,0(r5)
    a890:	defffb04 	addi	sp,sp,-20
    a894:	dc400315 	stw	r17,12(sp)
    a898:	dc000215 	stw	r16,8(sp)
    a89c:	147ffd17 	ldw	r17,-12(r2)
    a8a0:	1c3ffd17 	ldw	r16,-12(r3)
    a8a4:	dfc00415 	stw	ra,16(sp)
    a8a8:	d80d883a 	mov	r6,sp
    a8ac:	dc400015 	stw	r17,0(sp)
    a8b0:	dc000115 	stw	r16,4(sp)
    a8b4:	8440012e 	bgeu	r16,r17,a8bc <_ZNKSs7compareERKSs+0x34>
    a8b8:	d9800104 	addi	r6,sp,4
    a8bc:	21000017 	ldw	r4,0(r4)
    a8c0:	29400017 	ldw	r5,0(r5)
    a8c4:	31800017 	ldw	r6,0(r6)
    a8c8:	00139b00 	call	139b0 <memcmp>
    a8cc:	1000011e 	bne	r2,zero,a8d4 <_ZNKSs7compareERKSs+0x4c>
    a8d0:	8c05c83a 	sub	r2,r17,r16
    a8d4:	dfc00417 	ldw	ra,16(sp)
    a8d8:	dc400317 	ldw	r17,12(sp)
    a8dc:	dc000217 	ldw	r16,8(sp)
    a8e0:	dec00504 	addi	sp,sp,20
    a8e4:	f800283a 	ret

0000a8e8 <_ZNKSs4findEPKcm>:
    a8e8:	defffc04 	addi	sp,sp,-16
    a8ec:	dd400215 	stw	r21,8(sp)
    a8f0:	dcc00115 	stw	r19,4(sp)
    a8f4:	dc400015 	stw	r17,0(sp)
    a8f8:	2027883a 	mov	r19,r4
    a8fc:	dfc00315 	stw	ra,12(sp)
    a900:	2809883a 	mov	r4,r5
    a904:	2823883a 	mov	r17,r5
    a908:	302b883a 	mov	r21,r6
    a90c:	0014cac0 	call	14cac <strlen>
    a910:	880b883a 	mov	r5,r17
    a914:	9809883a 	mov	r4,r19
    a918:	a80d883a 	mov	r6,r21
    a91c:	100f883a 	mov	r7,r2
    a920:	dfc00317 	ldw	ra,12(sp)
    a924:	dd400217 	ldw	r21,8(sp)
    a928:	dcc00117 	ldw	r19,4(sp)
    a92c:	dc400017 	ldw	r17,0(sp)
    a930:	dec00404 	addi	sp,sp,16
    a934:	000a0bc1 	jmpi	a0bc <_ZNKSs4findEPKcmm>

0000a938 <_ZNKSs7compareEPKc>:
    a938:	20800017 	ldw	r2,0(r4)
    a93c:	defff904 	addi	sp,sp,-28
    a940:	dc400315 	stw	r17,12(sp)
    a944:	147ffd17 	ldw	r17,-12(r2)
    a948:	dcc00515 	stw	r19,20(sp)
    a94c:	dc800415 	stw	r18,16(sp)
    a950:	dc000215 	stw	r16,8(sp)
    a954:	dfc00615 	stw	ra,24(sp)
    a958:	2025883a 	mov	r18,r4
    a95c:	dc400015 	stw	r17,0(sp)
    a960:	2809883a 	mov	r4,r5
    a964:	2827883a 	mov	r19,r5
    a968:	0014cac0 	call	14cac <strlen>
    a96c:	1021883a 	mov	r16,r2
    a970:	d80d883a 	mov	r6,sp
    a974:	d8800115 	stw	r2,4(sp)
    a978:	1440012e 	bgeu	r2,r17,a980 <_ZNKSs7compareEPKc+0x48>
    a97c:	d9800104 	addi	r6,sp,4
    a980:	91000017 	ldw	r4,0(r18)
    a984:	31800017 	ldw	r6,0(r6)
    a988:	980b883a 	mov	r5,r19
    a98c:	00139b00 	call	139b0 <memcmp>
    a990:	1000011e 	bne	r2,zero,a998 <_ZNKSs7compareEPKc+0x60>
    a994:	8c05c83a 	sub	r2,r17,r16
    a998:	dfc00617 	ldw	ra,24(sp)
    a99c:	dcc00517 	ldw	r19,20(sp)
    a9a0:	dc800417 	ldw	r18,16(sp)
    a9a4:	dc400317 	ldw	r17,12(sp)
    a9a8:	dc000217 	ldw	r16,8(sp)
    a9ac:	dec00704 	addi	sp,sp,28
    a9b0:	f800283a 	ret

0000a9b4 <_ZNKSs16find_last_not_ofEPKcm>:
    a9b4:	defffc04 	addi	sp,sp,-16
    a9b8:	dd400215 	stw	r21,8(sp)
    a9bc:	dcc00115 	stw	r19,4(sp)
    a9c0:	dc400015 	stw	r17,0(sp)
    a9c4:	2027883a 	mov	r19,r4
    a9c8:	dfc00315 	stw	ra,12(sp)
    a9cc:	2809883a 	mov	r4,r5
    a9d0:	2823883a 	mov	r17,r5
    a9d4:	302b883a 	mov	r21,r6
    a9d8:	0014cac0 	call	14cac <strlen>
    a9dc:	880b883a 	mov	r5,r17
    a9e0:	9809883a 	mov	r4,r19
    a9e4:	a80d883a 	mov	r6,r21
    a9e8:	100f883a 	mov	r7,r2
    a9ec:	dfc00317 	ldw	ra,12(sp)
    a9f0:	dd400217 	ldw	r21,8(sp)
    a9f4:	dcc00117 	ldw	r19,4(sp)
    a9f8:	dc400017 	ldw	r17,0(sp)
    a9fc:	dec00404 	addi	sp,sp,16
    aa00:	000a79c1 	jmpi	a79c <_ZNKSs16find_last_not_ofEPKcmm>

0000aa04 <_ZNKSs17find_first_not_ofEPKcm>:
    aa04:	defffc04 	addi	sp,sp,-16
    aa08:	dd400215 	stw	r21,8(sp)
    aa0c:	dcc00115 	stw	r19,4(sp)
    aa10:	dc400015 	stw	r17,0(sp)
    aa14:	2027883a 	mov	r19,r4
    aa18:	dfc00315 	stw	ra,12(sp)
    aa1c:	2809883a 	mov	r4,r5
    aa20:	2823883a 	mov	r17,r5
    aa24:	302b883a 	mov	r21,r6
    aa28:	0014cac0 	call	14cac <strlen>
    aa2c:	880b883a 	mov	r5,r17
    aa30:	9809883a 	mov	r4,r19
    aa34:	a80d883a 	mov	r6,r21
    aa38:	100f883a 	mov	r7,r2
    aa3c:	dfc00317 	ldw	ra,12(sp)
    aa40:	dd400217 	ldw	r21,8(sp)
    aa44:	dcc00117 	ldw	r19,4(sp)
    aa48:	dc400017 	ldw	r17,0(sp)
    aa4c:	dec00404 	addi	sp,sp,16
    aa50:	000a0181 	jmpi	a018 <_ZNKSs17find_first_not_ofEPKcmm>

0000aa54 <_ZNKSs12find_last_ofEPKcm>:
    aa54:	defffc04 	addi	sp,sp,-16
    aa58:	dd400215 	stw	r21,8(sp)
    aa5c:	dcc00115 	stw	r19,4(sp)
    aa60:	dc400015 	stw	r17,0(sp)
    aa64:	2027883a 	mov	r19,r4
    aa68:	dfc00315 	stw	ra,12(sp)
    aa6c:	2809883a 	mov	r4,r5
    aa70:	2823883a 	mov	r17,r5
    aa74:	302b883a 	mov	r21,r6
    aa78:	0014cac0 	call	14cac <strlen>
    aa7c:	880b883a 	mov	r5,r17
    aa80:	9809883a 	mov	r4,r19
    aa84:	a80d883a 	mov	r6,r21
    aa88:	100f883a 	mov	r7,r2
    aa8c:	dfc00317 	ldw	ra,12(sp)
    aa90:	dd400217 	ldw	r21,8(sp)
    aa94:	dcc00117 	ldw	r19,4(sp)
    aa98:	dc400017 	ldw	r17,0(sp)
    aa9c:	dec00404 	addi	sp,sp,16
    aaa0:	000a5a01 	jmpi	a5a0 <_ZNKSs12find_last_ofEPKcmm>

0000aaa4 <_ZNKSs13find_first_ofEPKcm>:
    aaa4:	defffc04 	addi	sp,sp,-16
    aaa8:	dd400215 	stw	r21,8(sp)
    aaac:	dcc00115 	stw	r19,4(sp)
    aab0:	dc400015 	stw	r17,0(sp)
    aab4:	2027883a 	mov	r19,r4
    aab8:	dfc00315 	stw	ra,12(sp)
    aabc:	2809883a 	mov	r4,r5
    aac0:	2823883a 	mov	r17,r5
    aac4:	302b883a 	mov	r21,r6
    aac8:	0014cac0 	call	14cac <strlen>
    aacc:	880b883a 	mov	r5,r17
    aad0:	9809883a 	mov	r4,r19
    aad4:	a80d883a 	mov	r6,r21
    aad8:	100f883a 	mov	r7,r2
    aadc:	dfc00317 	ldw	ra,12(sp)
    aae0:	dd400217 	ldw	r21,8(sp)
    aae4:	dcc00117 	ldw	r19,4(sp)
    aae8:	dc400017 	ldw	r17,0(sp)
    aaec:	dec00404 	addi	sp,sp,16
    aaf0:	000a6901 	jmpi	a690 <_ZNKSs13find_first_ofEPKcmm>

0000aaf4 <_ZNKSs4rendEv>:
    aaf4:	28c00017 	ldw	r3,0(r5)
    aaf8:	2005883a 	mov	r2,r4
    aafc:	20c00015 	stw	r3,0(r4)
    ab00:	f800283a 	ret

0000ab04 <_ZNKSs6rbeginEv>:
    ab04:	28c00017 	ldw	r3,0(r5)
    ab08:	2005883a 	mov	r2,r4
    ab0c:	197ffd17 	ldw	r5,-12(r3)
    ab10:	1947883a 	add	r3,r3,r5
    ab14:	20c00015 	stw	r3,0(r4)
    ab18:	f800283a 	ret

0000ab1c <_ZNSs12_S_constructEmcRKSaIcE>:
    ab1c:	defffb04 	addi	sp,sp,-20
    ab20:	dcc00315 	stw	r19,12(sp)
    ab24:	dc400115 	stw	r17,4(sp)
    ab28:	dc000015 	stw	r16,0(sp)
    ab2c:	2823883a 	mov	r17,r5
    ab30:	dfc00415 	stw	ra,16(sp)
    ab34:	dc800215 	stw	r18,8(sp)
    ab38:	2021883a 	mov	r16,r4
    ab3c:	04c000b4 	movhi	r19,2
    ab40:	9ccac304 	addi	r19,r19,11020
    ab44:	000b883a 	mov	r5,zero
    ab48:	2000081e 	bne	r4,zero,ab6c <_ZNSs12_S_constructEmcRKSaIcE+0x50>
    ab4c:	9805883a 	mov	r2,r19
    ab50:	dfc00417 	ldw	ra,16(sp)
    ab54:	dcc00317 	ldw	r19,12(sp)
    ab58:	dc800217 	ldw	r18,8(sp)
    ab5c:	dc400117 	ldw	r17,4(sp)
    ab60:	dc000017 	ldw	r16,0(sp)
    ab64:	dec00504 	addi	sp,sp,20
    ab68:	f800283a 	ret
    ab6c:	000a4080 	call	a408 <_ZNSs4_Rep9_S_createEmmRKSaIcE>
    ab70:	88c03fcc 	andi	r3,r17,255
    ab74:	18c0201c 	xori	r3,r3,128
    ab78:	18ffe004 	addi	r3,r3,-128
    ab7c:	19403fcc 	andi	r5,r3,255
    ab80:	14c00304 	addi	r19,r2,12
    ab84:	1025883a 	mov	r18,r2
    ab88:	2940201c 	xori	r5,r5,128
    ab8c:	00800044 	movi	r2,1
    ab90:	800d883a 	mov	r6,r16
    ab94:	9809883a 	mov	r4,r19
    ab98:	297fe004 	addi	r5,r5,-128
    ab9c:	80800d26 	beq	r16,r2,abd4 <_ZNSs12_S_constructEmcRKSaIcE+0xb8>
    aba0:	0013ba40 	call	13ba4 <memset>
    aba4:	84c5883a 	add	r2,r16,r19
    aba8:	94000015 	stw	r16,0(r18)
    abac:	90000215 	stw	zero,8(r18)
    abb0:	10000005 	stb	zero,0(r2)
    abb4:	9805883a 	mov	r2,r19
    abb8:	dfc00417 	ldw	ra,16(sp)
    abbc:	dcc00317 	ldw	r19,12(sp)
    abc0:	dc800217 	ldw	r18,8(sp)
    abc4:	dc400117 	ldw	r17,4(sp)
    abc8:	dc000017 	ldw	r16,0(sp)
    abcc:	dec00504 	addi	sp,sp,20
    abd0:	f800283a 	ret
    abd4:	98c00005 	stb	r3,0(r19)
    abd8:	003ff206 	br	aba4 <_ZNSs12_S_constructEmcRKSaIcE+0x88>

0000abdc <_ZNSsC1EmcRKSaIcE>:
    abdc:	defffe04 	addi	sp,sp,-8
    abe0:	dc400015 	stw	r17,0(sp)
    abe4:	2023883a 	mov	r17,r4
    abe8:	2809883a 	mov	r4,r5
    abec:	31403fcc 	andi	r5,r6,255
    abf0:	2940201c 	xori	r5,r5,128
    abf4:	297fe004 	addi	r5,r5,-128
    abf8:	380d883a 	mov	r6,r7
    abfc:	dfc00115 	stw	ra,4(sp)
    ac00:	000ab1c0 	call	ab1c <_ZNSs12_S_constructEmcRKSaIcE>
    ac04:	88800015 	stw	r2,0(r17)
    ac08:	dfc00117 	ldw	ra,4(sp)
    ac0c:	dc400017 	ldw	r17,0(sp)
    ac10:	dec00204 	addi	sp,sp,8
    ac14:	f800283a 	ret

0000ac18 <_ZNSsC2EmcRKSaIcE>:
    ac18:	defffe04 	addi	sp,sp,-8
    ac1c:	dc400015 	stw	r17,0(sp)
    ac20:	2023883a 	mov	r17,r4
    ac24:	2809883a 	mov	r4,r5
    ac28:	31403fcc 	andi	r5,r6,255
    ac2c:	2940201c 	xori	r5,r5,128
    ac30:	297fe004 	addi	r5,r5,-128
    ac34:	380d883a 	mov	r6,r7
    ac38:	dfc00115 	stw	ra,4(sp)
    ac3c:	000ab1c0 	call	ab1c <_ZNSs12_S_constructEmcRKSaIcE>
    ac40:	88800015 	stw	r2,0(r17)
    ac44:	dfc00117 	ldw	ra,4(sp)
    ac48:	dc400017 	ldw	r17,0(sp)
    ac4c:	dec00204 	addi	sp,sp,8
    ac50:	f800283a 	ret

0000ac54 <_ZNSsC1ERKSaIcE>:
    ac54:	defffe04 	addi	sp,sp,-8
    ac58:	dc400015 	stw	r17,0(sp)
    ac5c:	280d883a 	mov	r6,r5
    ac60:	2023883a 	mov	r17,r4
    ac64:	000b883a 	mov	r5,zero
    ac68:	0009883a 	mov	r4,zero
    ac6c:	dfc00115 	stw	ra,4(sp)
    ac70:	000ab1c0 	call	ab1c <_ZNSs12_S_constructEmcRKSaIcE>
    ac74:	88800015 	stw	r2,0(r17)
    ac78:	dfc00117 	ldw	ra,4(sp)
    ac7c:	dc400017 	ldw	r17,0(sp)
    ac80:	dec00204 	addi	sp,sp,8
    ac84:	f800283a 	ret

0000ac88 <_ZNSsC2ERKSaIcE>:
    ac88:	defffe04 	addi	sp,sp,-8
    ac8c:	dc400015 	stw	r17,0(sp)
    ac90:	280d883a 	mov	r6,r5
    ac94:	2023883a 	mov	r17,r4
    ac98:	000b883a 	mov	r5,zero
    ac9c:	0009883a 	mov	r4,zero
    aca0:	dfc00115 	stw	ra,4(sp)
    aca4:	000ab1c0 	call	ab1c <_ZNSs12_S_constructEmcRKSaIcE>
    aca8:	88800015 	stw	r2,0(r17)
    acac:	dfc00117 	ldw	ra,4(sp)
    acb0:	dc400017 	ldw	r17,0(sp)
    acb4:	dec00204 	addi	sp,sp,8
    acb8:	f800283a 	ret

0000acbc <_ZNKSs7compareEmmPKcm>:
    acbc:	21000017 	ldw	r4,0(r4)
    acc0:	defffc04 	addi	sp,sp,-16
    acc4:	d9800015 	stw	r6,0(sp)
    acc8:	20bffd17 	ldw	r2,-12(r4)
    accc:	dfc00315 	stw	ra,12(sp)
    acd0:	dc400215 	stw	r17,8(sp)
    acd4:	dc000115 	stw	r16,4(sp)
    acd8:	11401936 	bltu	r2,r5,ad40 <_ZNKSs7compareEmmPKcm+0x84>
    acdc:	dc000017 	ldw	r16,0(sp)
    ace0:	1145c83a 	sub	r2,r2,r5
    ace4:	14001136 	bltu	r2,r16,ad2c <_ZNKSs7compareEmmPKcm+0x70>
    ace8:	dc400417 	ldw	r17,16(sp)
    acec:	dc000015 	stw	r16,0(sp)
    acf0:	8c000c36 	bltu	r17,r16,ad24 <_ZNKSs7compareEmmPKcm+0x68>
    acf4:	d80d883a 	mov	r6,sp
    acf8:	31800017 	ldw	r6,0(r6)
    acfc:	2149883a 	add	r4,r4,r5
    ad00:	380b883a 	mov	r5,r7
    ad04:	00139b00 	call	139b0 <memcmp>
    ad08:	1000011e 	bne	r2,zero,ad10 <_ZNKSs7compareEmmPKcm+0x54>
    ad0c:	8445c83a 	sub	r2,r16,r17
    ad10:	dfc00317 	ldw	ra,12(sp)
    ad14:	dc400217 	ldw	r17,8(sp)
    ad18:	dc000117 	ldw	r16,4(sp)
    ad1c:	dec00404 	addi	sp,sp,16
    ad20:	f800283a 	ret
    ad24:	d9800404 	addi	r6,sp,16
    ad28:	003ff306 	br	acf8 <_ZNKSs7compareEmmPKcm+0x3c>
    ad2c:	dc400417 	ldw	r17,16(sp)
    ad30:	1021883a 	mov	r16,r2
    ad34:	dc000015 	stw	r16,0(sp)
    ad38:	8c3ffa36 	bltu	r17,r16,ad24 <_ZNKSs7compareEmmPKcm+0x68>
    ad3c:	003fed06 	br	acf4 <_ZNKSs7compareEmmPKcm+0x38>
    ad40:	010000b4 	movhi	r4,2
    ad44:	213abe04 	addi	r4,r4,-5384
    ad48:	00086940 	call	8694 <_ZSt20__throw_out_of_rangePKc>

0000ad4c <_ZNKSs7compareEmmPKc>:
    ad4c:	defff804 	addi	sp,sp,-32
    ad50:	dd000615 	stw	r20,24(sp)
    ad54:	25000017 	ldw	r20,0(r4)
    ad58:	d9800115 	stw	r6,4(sp)
    ad5c:	dcc00515 	stw	r19,20(sp)
    ad60:	a0bffd17 	ldw	r2,-12(r20)
    ad64:	dc800415 	stw	r18,16(sp)
    ad68:	dfc00715 	stw	ra,28(sp)
    ad6c:	dc400315 	stw	r17,12(sp)
    ad70:	dc000215 	stw	r16,8(sp)
    ad74:	2825883a 	mov	r18,r5
    ad78:	3827883a 	mov	r19,r7
    ad7c:	11402236 	bltu	r2,r5,ae08 <_ZNKSs7compareEmmPKc+0xbc>
    ad80:	1145c83a 	sub	r2,r2,r5
    ad84:	3023883a 	mov	r17,r6
    ad88:	11801736 	bltu	r2,r6,ade8 <_ZNKSs7compareEmmPKc+0x9c>
    ad8c:	dc400115 	stw	r17,4(sp)
    ad90:	9809883a 	mov	r4,r19
    ad94:	0014cac0 	call	14cac <strlen>
    ad98:	1021883a 	mov	r16,r2
    ad9c:	d8800015 	stw	r2,0(sp)
    ada0:	14400f36 	bltu	r2,r17,ade0 <_ZNKSs7compareEmmPKc+0x94>
    ada4:	d9800104 	addi	r6,sp,4
    ada8:	31800017 	ldw	r6,0(r6)
    adac:	a489883a 	add	r4,r20,r18
    adb0:	980b883a 	mov	r5,r19
    adb4:	00139b00 	call	139b0 <memcmp>
    adb8:	1000011e 	bne	r2,zero,adc0 <_ZNKSs7compareEmmPKc+0x74>
    adbc:	8c05c83a 	sub	r2,r17,r16
    adc0:	dfc00717 	ldw	ra,28(sp)
    adc4:	dd000617 	ldw	r20,24(sp)
    adc8:	dcc00517 	ldw	r19,20(sp)
    adcc:	dc800417 	ldw	r18,16(sp)
    add0:	dc400317 	ldw	r17,12(sp)
    add4:	dc000217 	ldw	r16,8(sp)
    add8:	dec00804 	addi	sp,sp,32
    addc:	f800283a 	ret
    ade0:	d80d883a 	mov	r6,sp
    ade4:	003ff006 	br	ada8 <_ZNKSs7compareEmmPKc+0x5c>
    ade8:	1023883a 	mov	r17,r2
    adec:	dc400115 	stw	r17,4(sp)
    adf0:	9809883a 	mov	r4,r19
    adf4:	0014cac0 	call	14cac <strlen>
    adf8:	1021883a 	mov	r16,r2
    adfc:	d8800015 	stw	r2,0(sp)
    ae00:	147ff736 	bltu	r2,r17,ade0 <_ZNKSs7compareEmmPKc+0x94>
    ae04:	003fe706 	br	ada4 <_ZNKSs7compareEmmPKc+0x58>
    ae08:	010000b4 	movhi	r4,2
    ae0c:	213abe04 	addi	r4,r4,-5384
    ae10:	00086940 	call	8694 <_ZSt20__throw_out_of_rangePKc>

0000ae14 <_ZNKSs7compareEmmRKSsmm>:
    ae14:	21000017 	ldw	r4,0(r4)
    ae18:	defffc04 	addi	sp,sp,-16
    ae1c:	d9800015 	stw	r6,0(sp)
    ae20:	20bffd17 	ldw	r2,-12(r4)
    ae24:	dfc00315 	stw	ra,12(sp)
    ae28:	dc400215 	stw	r17,8(sp)
    ae2c:	dc000115 	stw	r16,4(sp)
    ae30:	da000417 	ldw	r8,16(sp)
    ae34:	11402436 	bltu	r2,r5,aec8 <_ZNKSs7compareEmmRKSsmm+0xb4>
    ae38:	39c00017 	ldw	r7,0(r7)
    ae3c:	38fffd17 	ldw	r3,-12(r7)
    ae40:	1a002136 	bltu	r3,r8,aec8 <_ZNKSs7compareEmmRKSsmm+0xb4>
    ae44:	dc400017 	ldw	r17,0(sp)
    ae48:	1145c83a 	sub	r2,r2,r5
    ae4c:	14401836 	bltu	r2,r17,aeb0 <_ZNKSs7compareEmmRKSsmm+0x9c>
    ae50:	dc000517 	ldw	r16,20(sp)
    ae54:	1a05c83a 	sub	r2,r3,r8
    ae58:	dc400015 	stw	r17,0(sp)
    ae5c:	14001036 	bltu	r2,r16,aea0 <_ZNKSs7compareEmmRKSsmm+0x8c>
    ae60:	dc000515 	stw	r16,20(sp)
    ae64:	84400c36 	bltu	r16,r17,ae98 <_ZNKSs7compareEmmRKSsmm+0x84>
    ae68:	d80d883a 	mov	r6,sp
    ae6c:	31800017 	ldw	r6,0(r6)
    ae70:	2149883a 	add	r4,r4,r5
    ae74:	3a0b883a 	add	r5,r7,r8
    ae78:	00139b00 	call	139b0 <memcmp>
    ae7c:	1000011e 	bne	r2,zero,ae84 <_ZNKSs7compareEmmRKSsmm+0x70>
    ae80:	8c05c83a 	sub	r2,r17,r16
    ae84:	dfc00317 	ldw	ra,12(sp)
    ae88:	dc400217 	ldw	r17,8(sp)
    ae8c:	dc000117 	ldw	r16,4(sp)
    ae90:	dec00404 	addi	sp,sp,16
    ae94:	f800283a 	ret
    ae98:	d9800504 	addi	r6,sp,20
    ae9c:	003ff306 	br	ae6c <_ZNKSs7compareEmmRKSsmm+0x58>
    aea0:	1021883a 	mov	r16,r2
    aea4:	dc000515 	stw	r16,20(sp)
    aea8:	847ffb36 	bltu	r16,r17,ae98 <_ZNKSs7compareEmmRKSsmm+0x84>
    aeac:	003fee06 	br	ae68 <_ZNKSs7compareEmmRKSsmm+0x54>
    aeb0:	dc000517 	ldw	r16,20(sp)
    aeb4:	1023883a 	mov	r17,r2
    aeb8:	1a05c83a 	sub	r2,r3,r8
    aebc:	dc400015 	stw	r17,0(sp)
    aec0:	143fe72e 	bgeu	r2,r16,ae60 <_ZNKSs7compareEmmRKSsmm+0x4c>
    aec4:	003ff606 	br	aea0 <_ZNKSs7compareEmmRKSsmm+0x8c>
    aec8:	010000b4 	movhi	r4,2
    aecc:	213abe04 	addi	r4,r4,-5384
    aed0:	00086940 	call	8694 <_ZSt20__throw_out_of_rangePKc>

0000aed4 <_ZNKSs7compareEmmRKSs>:
    aed4:	21000017 	ldw	r4,0(r4)
    aed8:	defffb04 	addi	sp,sp,-20
    aedc:	d9800115 	stw	r6,4(sp)
    aee0:	20bffd17 	ldw	r2,-12(r4)
    aee4:	dfc00415 	stw	ra,16(sp)
    aee8:	dc400315 	stw	r17,12(sp)
    aeec:	dc000215 	stw	r16,8(sp)
    aef0:	11401d36 	bltu	r2,r5,af68 <_ZNKSs7compareEmmRKSs+0x94>
    aef4:	1145c83a 	sub	r2,r2,r5
    aef8:	3021883a 	mov	r16,r6
    aefc:	11801336 	bltu	r2,r6,af4c <_ZNKSs7compareEmmRKSs+0x78>
    af00:	38800017 	ldw	r2,0(r7)
    af04:	dc000115 	stw	r16,4(sp)
    af08:	147ffd17 	ldw	r17,-12(r2)
    af0c:	dc400015 	stw	r17,0(sp)
    af10:	8c000c36 	bltu	r17,r16,af44 <_ZNKSs7compareEmmRKSs+0x70>
    af14:	d9800104 	addi	r6,sp,4
    af18:	31800017 	ldw	r6,0(r6)
    af1c:	2149883a 	add	r4,r4,r5
    af20:	100b883a 	mov	r5,r2
    af24:	00139b00 	call	139b0 <memcmp>
    af28:	1000011e 	bne	r2,zero,af30 <_ZNKSs7compareEmmRKSs+0x5c>
    af2c:	8445c83a 	sub	r2,r16,r17
    af30:	dfc00417 	ldw	ra,16(sp)
    af34:	dc400317 	ldw	r17,12(sp)
    af38:	dc000217 	ldw	r16,8(sp)
    af3c:	dec00504 	addi	sp,sp,20
    af40:	f800283a 	ret
    af44:	d80d883a 	mov	r6,sp
    af48:	003ff306 	br	af18 <_ZNKSs7compareEmmRKSs+0x44>
    af4c:	1021883a 	mov	r16,r2
    af50:	38800017 	ldw	r2,0(r7)
    af54:	dc000115 	stw	r16,4(sp)
    af58:	147ffd17 	ldw	r17,-12(r2)
    af5c:	dc400015 	stw	r17,0(sp)
    af60:	8c3ff836 	bltu	r17,r16,af44 <_ZNKSs7compareEmmRKSs+0x70>
    af64:	003feb06 	br	af14 <_ZNKSs7compareEmmRKSs+0x40>
    af68:	010000b4 	movhi	r4,2
    af6c:	213abe04 	addi	r4,r4,-5384
    af70:	00086940 	call	8694 <_ZSt20__throw_out_of_rangePKc>

0000af74 <_ZNSs4_Rep8_M_cloneERKSaIcEm>:
    af74:	defffc04 	addi	sp,sp,-16
    af78:	dc000015 	stw	r16,0(sp)
    af7c:	2021883a 	mov	r16,r4
    af80:	21000017 	ldw	r4,0(r4)
    af84:	2807883a 	mov	r3,r5
    af88:	81400117 	ldw	r5,4(r16)
    af8c:	3109883a 	add	r4,r6,r4
    af90:	180d883a 	mov	r6,r3
    af94:	dc800215 	stw	r18,8(sp)
    af98:	dc400115 	stw	r17,4(sp)
    af9c:	dfc00315 	stw	ra,12(sp)
    afa0:	000a4080 	call	a408 <_ZNSs4_Rep9_S_createEmmRKSaIcE>
    afa4:	80c00017 	ldw	r3,0(r16)
    afa8:	1023883a 	mov	r17,r2
    afac:	14800304 	addi	r18,r2,12
    afb0:	18000826 	beq	r3,zero,afd4 <_ZNSs4_Rep8_M_cloneERKSaIcEm+0x60>
    afb4:	14800304 	addi	r18,r2,12
    afb8:	00800044 	movi	r2,1
    afbc:	180d883a 	mov	r6,r3
    afc0:	9009883a 	mov	r4,r18
    afc4:	81400304 	addi	r5,r16,12
    afc8:	18800d26 	beq	r3,r2,b000 <_ZNSs4_Rep8_M_cloneERKSaIcEm+0x8c>
    afcc:	0013a240 	call	13a24 <memcpy>
    afd0:	80c00017 	ldw	r3,0(r16)
    afd4:	88c00015 	stw	r3,0(r17)
    afd8:	88000215 	stw	zero,8(r17)
    afdc:	1c87883a 	add	r3,r3,r18
    afe0:	9005883a 	mov	r2,r18
    afe4:	18000005 	stb	zero,0(r3)
    afe8:	dfc00317 	ldw	ra,12(sp)
    afec:	dc800217 	ldw	r18,8(sp)
    aff0:	dc400117 	ldw	r17,4(sp)
    aff4:	dc000017 	ldw	r16,0(sp)
    aff8:	dec00404 	addi	sp,sp,16
    affc:	f800283a 	ret
    b000:	80800303 	ldbu	r2,12(r16)
    b004:	88800305 	stb	r2,12(r17)
    b008:	80c00017 	ldw	r3,0(r16)
    b00c:	003ff106 	br	afd4 <_ZNSs4_Rep8_M_cloneERKSaIcEm+0x60>

0000b010 <_ZNSs4_Rep7_M_grabERKSaIcES2_>:
    b010:	deffed04 	addi	sp,sp,-76
    b014:	00800074 	movhi	r2,1
    b018:	10b95604 	addi	r2,r2,-6824
    b01c:	00c000b4 	movhi	r3,2
    b020:	18f98804 	addi	r3,r3,-6624
    b024:	d8800615 	stw	r2,24(sp)
    b028:	d9000e15 	stw	r4,56(sp)
    b02c:	00800074 	movhi	r2,1
    b030:	10ac3c04 	addi	r2,r2,-20240
    b034:	d809883a 	mov	r4,sp
    b038:	d8c00715 	stw	r3,28(sp)
    b03c:	d8800915 	stw	r2,36(sp)
    b040:	dfc01215 	stw	ra,72(sp)
    b044:	df001115 	stw	fp,68(sp)
    b048:	ddc01015 	stw	r23,64(sp)
    b04c:	dec00815 	stw	sp,32(sp)
    b050:	dec00a15 	stw	sp,40(sp)
    b054:	d9400f15 	stw	r5,60(sp)
    b058:	00108500 	call	10850 <_Unwind_SjLj_Register>
    b05c:	d8c00e17 	ldw	r3,56(sp)
    b060:	18800217 	ldw	r2,8(r3)
    b064:	10000e16 	blt	r2,zero,b0a0 <_ZNSs4_Rep7_M_grabERKSaIcES2_+0x90>
    b068:	008000b4 	movhi	r2,2
    b06c:	108ac004 	addi	r2,r2,11008
    b070:	18801a1e 	bne	r3,r2,b0dc <_ZNSs4_Rep7_M_grabERKSaIcES2_+0xcc>
    b074:	d8800e17 	ldw	r2,56(sp)
    b078:	d809883a 	mov	r4,sp
    b07c:	10800304 	addi	r2,r2,12
    b080:	d8800d15 	stw	r2,52(sp)
    b084:	00108600 	call	10860 <_Unwind_SjLj_Unregister>
    b088:	d8800d17 	ldw	r2,52(sp)
    b08c:	dfc01217 	ldw	ra,72(sp)
    b090:	df001117 	ldw	fp,68(sp)
    b094:	ddc01017 	ldw	r23,64(sp)
    b098:	dec01304 	addi	sp,sp,76
    b09c:	f800283a 	ret
    b0a0:	d9000e17 	ldw	r4,56(sp)
    b0a4:	d9400f17 	ldw	r5,60(sp)
    b0a8:	000d883a 	mov	r6,zero
    b0ac:	00bfffc4 	movi	r2,-1
    b0b0:	d8800115 	stw	r2,4(sp)
    b0b4:	000af740 	call	af74 <_ZNSs4_Rep8_M_cloneERKSaIcEm>
    b0b8:	d809883a 	mov	r4,sp
    b0bc:	d8800d15 	stw	r2,52(sp)
    b0c0:	00108600 	call	10860 <_Unwind_SjLj_Unregister>
    b0c4:	d8800d17 	ldw	r2,52(sp)
    b0c8:	dfc01217 	ldw	ra,72(sp)
    b0cc:	df001117 	ldw	fp,68(sp)
    b0d0:	ddc01017 	ldw	r23,64(sp)
    b0d4:	dec01304 	addi	sp,sp,76
    b0d8:	f800283a 	ret
    b0dc:	01400044 	movi	r5,1
    b0e0:	d9400115 	stw	r5,4(sp)
    b0e4:	19000204 	addi	r4,r3,8
    b0e8:	000dabc0 	call	dabc <_ZN9__gnu_cxx12__atomic_addEPVii>
    b0ec:	003fe106 	br	b074 <_ZNSs4_Rep7_M_grabERKSaIcES2_+0x64>
    b0f0:	d8800317 	ldw	r2,12(sp)
    b0f4:	00ffffc4 	movi	r3,-1
    b0f8:	d9000217 	ldw	r4,8(sp)
    b0fc:	10c00226 	beq	r2,r3,b108 <_ZNSs4_Rep7_M_grabERKSaIcES2_+0xf8>
    b100:	d8c00115 	stw	r3,4(sp)
    b104:	0010b1c0 	call	10b1c <_Unwind_SjLj_Resume>
    b108:	00bfffc4 	movi	r2,-1
    b10c:	d8800115 	stw	r2,4(sp)
    b110:	000e3d80 	call	e3d8 <__cxa_call_unexpected>

0000b114 <_ZNKSs4copyEPcmm>:
    b114:	21000017 	ldw	r4,0(r4)
    b118:	defffe04 	addi	sp,sp,-8
    b11c:	dfc00115 	stw	ra,4(sp)
    b120:	20fffd17 	ldw	r3,-12(r4)
    b124:	dc000015 	stw	r16,0(sp)
    b128:	2811883a 	mov	r8,r5
    b12c:	19c01836 	bltu	r3,r7,b190 <_ZNKSs4copyEPcmm+0x7c>
    b130:	19c5c83a 	sub	r2,r3,r7
    b134:	3021883a 	mov	r16,r6
    b138:	11800c36 	bltu	r2,r6,b16c <_ZNKSs4copyEPcmm+0x58>
    b13c:	80000626 	beq	r16,zero,b158 <_ZNKSs4copyEPcmm+0x44>
    b140:	00800044 	movi	r2,1
    b144:	21cb883a 	add	r5,r4,r7
    b148:	80800a26 	beq	r16,r2,b174 <_ZNKSs4copyEPcmm+0x60>
    b14c:	4009883a 	mov	r4,r8
    b150:	800d883a 	mov	r6,r16
    b154:	0013a240 	call	13a24 <memcpy>
    b158:	8005883a 	mov	r2,r16
    b15c:	dfc00117 	ldw	ra,4(sp)
    b160:	dc000017 	ldw	r16,0(sp)
    b164:	dec00204 	addi	sp,sp,8
    b168:	f800283a 	ret
    b16c:	1021883a 	mov	r16,r2
    b170:	003ff206 	br	b13c <_ZNKSs4copyEPcmm+0x28>
    b174:	28800003 	ldbu	r2,0(r5)
    b178:	40800005 	stb	r2,0(r8)
    b17c:	8005883a 	mov	r2,r16
    b180:	dfc00117 	ldw	ra,4(sp)
    b184:	dc000017 	ldw	r16,0(sp)
    b188:	dec00204 	addi	sp,sp,8
    b18c:	f800283a 	ret
    b190:	010000b4 	movhi	r4,2
    b194:	213ac404 	addi	r4,r4,-5360
    b198:	00086940 	call	8694 <_ZSt20__throw_out_of_rangePKc>

0000b19c <_ZNSs13_S_copy_charsEPcPKcS1_>:
    b19c:	3147c83a 	sub	r3,r6,r5
    b1a0:	00800044 	movi	r2,1
    b1a4:	180d883a 	mov	r6,r3
    b1a8:	18800126 	beq	r3,r2,b1b0 <_ZNSs13_S_copy_charsEPcPKcS1_+0x14>
    b1ac:	0013a241 	jmpi	13a24 <memcpy>
    b1b0:	28800003 	ldbu	r2,0(r5)
    b1b4:	20800005 	stb	r2,0(r4)
    b1b8:	f800283a 	ret

0000b1bc <_ZNSs13_S_copy_charsEPcS_S_>:
    b1bc:	3147c83a 	sub	r3,r6,r5
    b1c0:	00800044 	movi	r2,1
    b1c4:	180d883a 	mov	r6,r3
    b1c8:	18800126 	beq	r3,r2,b1d0 <_ZNSs13_S_copy_charsEPcS_S_+0x14>
    b1cc:	0013a241 	jmpi	13a24 <memcpy>
    b1d0:	28800003 	ldbu	r2,0(r5)
    b1d4:	20800005 	stb	r2,0(r4)
    b1d8:	f800283a 	ret

0000b1dc <_ZNSs12_S_constructIPcEES0_T_S1_RKSaIcESt20forward_iterator_tag>:
    b1dc:	defffb04 	addi	sp,sp,-20
    b1e0:	dc000015 	stw	r16,0(sp)
    b1e4:	dfc00415 	stw	ra,16(sp)
    b1e8:	dcc00315 	stw	r19,12(sp)
    b1ec:	dc800215 	stw	r18,8(sp)
    b1f0:	dc400115 	stw	r17,4(sp)
    b1f4:	2021883a 	mov	r16,r4
    b1f8:	21401c26 	beq	r4,r5,b26c <_ZNSs12_S_constructIPcEES0_T_S1_RKSaIcESt20forward_iterator_tag+0x90>
    b1fc:	20002526 	beq	r4,zero,b294 <_ZNSs12_S_constructIPcEES0_T_S1_RKSaIcESt20forward_iterator_tag+0xb8>
    b200:	2c25c83a 	sub	r18,r5,r16
    b204:	9009883a 	mov	r4,r18
    b208:	000b883a 	mov	r5,zero
    b20c:	000a4080 	call	a408 <_ZNSs4_Rep9_S_createEmmRKSaIcE>
    b210:	1023883a 	mov	r17,r2
    b214:	14c00304 	addi	r19,r2,12
    b218:	00800044 	movi	r2,1
    b21c:	90801026 	beq	r18,r2,b260 <_ZNSs12_S_constructIPcEES0_T_S1_RKSaIcESt20forward_iterator_tag+0x84>
    b220:	800b883a 	mov	r5,r16
    b224:	9809883a 	mov	r4,r19
    b228:	900d883a 	mov	r6,r18
    b22c:	0013a240 	call	13a24 <memcpy>
    b230:	9c85883a 	add	r2,r19,r18
    b234:	8c800015 	stw	r18,0(r17)
    b238:	88000215 	stw	zero,8(r17)
    b23c:	10000005 	stb	zero,0(r2)
    b240:	9805883a 	mov	r2,r19
    b244:	dfc00417 	ldw	ra,16(sp)
    b248:	dcc00317 	ldw	r19,12(sp)
    b24c:	dc800217 	ldw	r18,8(sp)
    b250:	dc400117 	ldw	r17,4(sp)
    b254:	dc000017 	ldw	r16,0(sp)
    b258:	dec00504 	addi	sp,sp,20
    b25c:	f800283a 	ret
    b260:	80800003 	ldbu	r2,0(r16)
    b264:	88800305 	stb	r2,12(r17)
    b268:	003ff106 	br	b230 <_ZNSs12_S_constructIPcEES0_T_S1_RKSaIcESt20forward_iterator_tag+0x54>
    b26c:	04c000b4 	movhi	r19,2
    b270:	9ccac304 	addi	r19,r19,11020
    b274:	9805883a 	mov	r2,r19
    b278:	dfc00417 	ldw	ra,16(sp)
    b27c:	dcc00317 	ldw	r19,12(sp)
    b280:	dc800217 	ldw	r18,8(sp)
    b284:	dc400117 	ldw	r17,4(sp)
    b288:	dc000017 	ldw	r16,0(sp)
    b28c:	dec00504 	addi	sp,sp,20
    b290:	f800283a 	ret
    b294:	010000b4 	movhi	r4,2
    b298:	213ac904 	addi	r4,r4,-5340
    b29c:	0007ba40 	call	7ba4 <_ZSt19__throw_logic_errorPKc>

0000b2a0 <_ZNSsC2IPcEET_S1_RKSaIcE>:
    b2a0:	defffe04 	addi	sp,sp,-8
    b2a4:	dc400015 	stw	r17,0(sp)
    b2a8:	2023883a 	mov	r17,r4
    b2ac:	2809883a 	mov	r4,r5
    b2b0:	300b883a 	mov	r5,r6
    b2b4:	380d883a 	mov	r6,r7
    b2b8:	dfc00115 	stw	ra,4(sp)
    b2bc:	000b1dc0 	call	b1dc <_ZNSs12_S_constructIPcEES0_T_S1_RKSaIcESt20forward_iterator_tag>
    b2c0:	88800015 	stw	r2,0(r17)
    b2c4:	dfc00117 	ldw	ra,4(sp)
    b2c8:	dc400017 	ldw	r17,0(sp)
    b2cc:	dec00204 	addi	sp,sp,8
    b2d0:	f800283a 	ret

0000b2d4 <_ZNSsC1ERKSsmmRKSaIcE>:
    b2d4:	29400017 	ldw	r5,0(r5)
    b2d8:	defffe04 	addi	sp,sp,-8
    b2dc:	dc000015 	stw	r16,0(sp)
    b2e0:	28bffd17 	ldw	r2,-12(r5)
    b2e4:	dfc00115 	stw	ra,4(sp)
    b2e8:	2021883a 	mov	r16,r4
    b2ec:	11800e36 	bltu	r2,r6,b328 <_ZNSsC1ERKSsmmRKSaIcE+0x54>
    b2f0:	1185c83a 	sub	r2,r2,r6
    b2f4:	2989883a 	add	r4,r5,r6
    b2f8:	11c00936 	bltu	r2,r7,b320 <_ZNSsC1ERKSsmmRKSaIcE+0x4c>
    b2fc:	29cb883a 	add	r5,r5,r7
    b300:	314b883a 	add	r5,r6,r5
    b304:	d9800217 	ldw	r6,8(sp)
    b308:	000b1dc0 	call	b1dc <_ZNSs12_S_constructIPcEES0_T_S1_RKSaIcESt20forward_iterator_tag>
    b30c:	80800015 	stw	r2,0(r16)
    b310:	dfc00117 	ldw	ra,4(sp)
    b314:	dc000017 	ldw	r16,0(sp)
    b318:	dec00204 	addi	sp,sp,8
    b31c:	f800283a 	ret
    b320:	100f883a 	mov	r7,r2
    b324:	003ff506 	br	b2fc <_ZNSsC1ERKSsmmRKSaIcE+0x28>
    b328:	010000b4 	movhi	r4,2
    b32c:	213ad404 	addi	r4,r4,-5296
    b330:	00086940 	call	8694 <_ZSt20__throw_out_of_rangePKc>

0000b334 <_ZNSsC2ERKSsmmRKSaIcE>:
    b334:	29400017 	ldw	r5,0(r5)
    b338:	defffe04 	addi	sp,sp,-8
    b33c:	dc000015 	stw	r16,0(sp)
    b340:	28bffd17 	ldw	r2,-12(r5)
    b344:	dfc00115 	stw	ra,4(sp)
    b348:	2021883a 	mov	r16,r4
    b34c:	11800e36 	bltu	r2,r6,b388 <_ZNSsC2ERKSsmmRKSaIcE+0x54>
    b350:	1185c83a 	sub	r2,r2,r6
    b354:	2989883a 	add	r4,r5,r6
    b358:	11c00936 	bltu	r2,r7,b380 <_ZNSsC2ERKSsmmRKSaIcE+0x4c>
    b35c:	29cb883a 	add	r5,r5,r7
    b360:	314b883a 	add	r5,r6,r5
    b364:	d9800217 	ldw	r6,8(sp)
    b368:	000b1dc0 	call	b1dc <_ZNSs12_S_constructIPcEES0_T_S1_RKSaIcESt20forward_iterator_tag>
    b36c:	80800015 	stw	r2,0(r16)
    b370:	dfc00117 	ldw	ra,4(sp)
    b374:	dc000017 	ldw	r16,0(sp)
    b378:	dec00204 	addi	sp,sp,8
    b37c:	f800283a 	ret
    b380:	100f883a 	mov	r7,r2
    b384:	003ff506 	br	b35c <_ZNSsC2ERKSsmmRKSaIcE+0x28>
    b388:	010000b4 	movhi	r4,2
    b38c:	213ad404 	addi	r4,r4,-5296
    b390:	00086940 	call	8694 <_ZSt20__throw_out_of_rangePKc>

0000b394 <_ZNSsC1ERKSsmm>:
    b394:	deffea04 	addi	sp,sp,-88
    b398:	00800074 	movhi	r2,1
    b39c:	10b95604 	addi	r2,r2,-6824
    b3a0:	00c000b4 	movhi	r3,2
    b3a4:	18f98b44 	addi	r3,r3,-6611
    b3a8:	d8800715 	stw	r2,28(sp)
    b3ac:	d9000f15 	stw	r4,60(sp)
    b3b0:	00800074 	movhi	r2,1
    b3b4:	10ad1c04 	addi	r2,r2,-19344
    b3b8:	d9000104 	addi	r4,sp,4
    b3bc:	d8c00815 	stw	r3,32(sp)
    b3c0:	d8800a15 	stw	r2,40(sp)
    b3c4:	d9401015 	stw	r5,64(sp)
    b3c8:	dfc01515 	stw	ra,84(sp)
    b3cc:	df001415 	stw	fp,80(sp)
    b3d0:	ddc01315 	stw	r23,76(sp)
    b3d4:	dec00915 	stw	sp,36(sp)
    b3d8:	dec00b15 	stw	sp,44(sp)
    b3dc:	d9801115 	stw	r6,68(sp)
    b3e0:	d9c01215 	stw	r7,72(sp)
    b3e4:	00108500 	call	10850 <_Unwind_SjLj_Register>
    b3e8:	d8801017 	ldw	r2,64(sp)
    b3ec:	d8c01117 	ldw	r3,68(sp)
    b3f0:	11400017 	ldw	r5,0(r2)
    b3f4:	28bffd17 	ldw	r2,-12(r5)
    b3f8:	10c01836 	bltu	r2,r3,b45c <_ZNSsC1ERKSsmm+0xc8>
    b3fc:	d8c01117 	ldw	r3,68(sp)
    b400:	d9c01217 	ldw	r7,72(sp)
    b404:	10c5c83a 	sub	r2,r2,r3
    b408:	28c9883a 	add	r4,r5,r3
    b40c:	11c01136 	bltu	r2,r7,b454 <_ZNSsC1ERKSsmm+0xc0>
    b410:	00800044 	movi	r2,1
    b414:	d8800215 	stw	r2,8(sp)
    b418:	d8801117 	ldw	r2,68(sp)
    b41c:	29cb883a 	add	r5,r5,r7
    b420:	d80d883a 	mov	r6,sp
    b424:	114b883a 	add	r5,r2,r5
    b428:	d9c00e03 	ldbu	r7,56(sp)
    b42c:	000b1dc0 	call	b1dc <_ZNSs12_S_constructIPcEES0_T_S1_RKSaIcESt20forward_iterator_tag>
    b430:	d8c00f17 	ldw	r3,60(sp)
    b434:	d9000104 	addi	r4,sp,4
    b438:	18800015 	stw	r2,0(r3)
    b43c:	00108600 	call	10860 <_Unwind_SjLj_Unregister>
    b440:	dfc01517 	ldw	ra,84(sp)
    b444:	df001417 	ldw	fp,80(sp)
    b448:	ddc01317 	ldw	r23,76(sp)
    b44c:	dec01604 	addi	sp,sp,88
    b450:	f800283a 	ret
    b454:	100f883a 	mov	r7,r2
    b458:	003fed06 	br	b410 <_ZNSsC1ERKSsmm+0x7c>
    b45c:	00bfffc4 	movi	r2,-1
    b460:	010000b4 	movhi	r4,2
    b464:	213ad404 	addi	r4,r4,-5296
    b468:	d8800215 	stw	r2,8(sp)
    b46c:	00086940 	call	8694 <_ZSt20__throw_out_of_rangePKc>
    b470:	d9000317 	ldw	r4,12(sp)
    b474:	00bfffc4 	movi	r2,-1
    b478:	d8800215 	stw	r2,8(sp)
    b47c:	0010b1c0 	call	10b1c <_Unwind_SjLj_Resume>

0000b480 <_ZNKSs6substrEmm>:
    b480:	28c00017 	ldw	r3,0(r5)
    b484:	defffe04 	addi	sp,sp,-8
    b488:	dc000015 	stw	r16,0(sp)
    b48c:	18bffd17 	ldw	r2,-12(r3)
    b490:	dfc00115 	stw	ra,4(sp)
    b494:	2021883a 	mov	r16,r4
    b498:	11800636 	bltu	r2,r6,b4b4 <_ZNKSs6substrEmm+0x34>
    b49c:	000b3940 	call	b394 <_ZNSsC1ERKSsmm>
    b4a0:	8005883a 	mov	r2,r16
    b4a4:	dfc00117 	ldw	ra,4(sp)
    b4a8:	dc000017 	ldw	r16,0(sp)
    b4ac:	dec00204 	addi	sp,sp,8
    b4b0:	f800283a 	ret
    b4b4:	010000b4 	movhi	r4,2
    b4b8:	213adb04 	addi	r4,r4,-5268
    b4bc:	00086940 	call	8694 <_ZSt20__throw_out_of_rangePKc>

0000b4c0 <_ZNSsC2ERKSsmm>:
    b4c0:	deffea04 	addi	sp,sp,-88
    b4c4:	00800074 	movhi	r2,1
    b4c8:	10b95604 	addi	r2,r2,-6824
    b4cc:	00c000b4 	movhi	r3,2
    b4d0:	18f98cc4 	addi	r3,r3,-6605
    b4d4:	d8800715 	stw	r2,28(sp)
    b4d8:	d9000f15 	stw	r4,60(sp)
    b4dc:	00800074 	movhi	r2,1
    b4e0:	10ad6704 	addi	r2,r2,-19044
    b4e4:	d9000104 	addi	r4,sp,4
    b4e8:	d8c00815 	stw	r3,32(sp)
    b4ec:	d8800a15 	stw	r2,40(sp)
    b4f0:	d9401015 	stw	r5,64(sp)
    b4f4:	dfc01515 	stw	ra,84(sp)
    b4f8:	df001415 	stw	fp,80(sp)
    b4fc:	ddc01315 	stw	r23,76(sp)
    b500:	dec00915 	stw	sp,36(sp)
    b504:	dec00b15 	stw	sp,44(sp)
    b508:	d9801115 	stw	r6,68(sp)
    b50c:	d9c01215 	stw	r7,72(sp)
    b510:	00108500 	call	10850 <_Unwind_SjLj_Register>
    b514:	d8801017 	ldw	r2,64(sp)
    b518:	d8c01117 	ldw	r3,68(sp)
    b51c:	11400017 	ldw	r5,0(r2)
    b520:	28bffd17 	ldw	r2,-12(r5)
    b524:	10c01836 	bltu	r2,r3,b588 <_ZNSsC2ERKSsmm+0xc8>
    b528:	d8c01117 	ldw	r3,68(sp)
    b52c:	d9c01217 	ldw	r7,72(sp)
    b530:	10c5c83a 	sub	r2,r2,r3
    b534:	28c9883a 	add	r4,r5,r3
    b538:	11c01136 	bltu	r2,r7,b580 <_ZNSsC2ERKSsmm+0xc0>
    b53c:	00800044 	movi	r2,1
    b540:	d8800215 	stw	r2,8(sp)
    b544:	d8801117 	ldw	r2,68(sp)
    b548:	29cb883a 	add	r5,r5,r7
    b54c:	d80d883a 	mov	r6,sp
    b550:	114b883a 	add	r5,r2,r5
    b554:	d9c00e03 	ldbu	r7,56(sp)
    b558:	000b1dc0 	call	b1dc <_ZNSs12_S_constructIPcEES0_T_S1_RKSaIcESt20forward_iterator_tag>
    b55c:	d8c00f17 	ldw	r3,60(sp)
    b560:	d9000104 	addi	r4,sp,4
    b564:	18800015 	stw	r2,0(r3)
    b568:	00108600 	call	10860 <_Unwind_SjLj_Unregister>
    b56c:	dfc01517 	ldw	ra,84(sp)
    b570:	df001417 	ldw	fp,80(sp)
    b574:	ddc01317 	ldw	r23,76(sp)
    b578:	dec01604 	addi	sp,sp,88
    b57c:	f800283a 	ret
    b580:	100f883a 	mov	r7,r2
    b584:	003fed06 	br	b53c <_ZNSsC2ERKSsmm+0x7c>
    b588:	00bfffc4 	movi	r2,-1
    b58c:	010000b4 	movhi	r4,2
    b590:	213ad404 	addi	r4,r4,-5296
    b594:	d8800215 	stw	r2,8(sp)
    b598:	00086940 	call	8694 <_ZSt20__throw_out_of_rangePKc>
    b59c:	d9000317 	ldw	r4,12(sp)
    b5a0:	00bfffc4 	movi	r2,-1
    b5a4:	d8800215 	stw	r2,8(sp)
    b5a8:	0010b1c0 	call	10b1c <_Unwind_SjLj_Resume>

0000b5ac <_ZNSsC1IPcEET_S1_RKSaIcE>:
    b5ac:	defffe04 	addi	sp,sp,-8
    b5b0:	dc400015 	stw	r17,0(sp)
    b5b4:	2023883a 	mov	r17,r4
    b5b8:	2809883a 	mov	r4,r5
    b5bc:	300b883a 	mov	r5,r6
    b5c0:	380d883a 	mov	r6,r7
    b5c4:	dfc00115 	stw	ra,4(sp)
    b5c8:	000b1dc0 	call	b1dc <_ZNSs12_S_constructIPcEES0_T_S1_RKSaIcESt20forward_iterator_tag>
    b5cc:	88800015 	stw	r2,0(r17)
    b5d0:	dfc00117 	ldw	ra,4(sp)
    b5d4:	dc400017 	ldw	r17,0(sp)
    b5d8:	dec00204 	addi	sp,sp,8
    b5dc:	f800283a 	ret

0000b5e0 <_ZNSs13_S_copy_charsEPcN9__gnu_cxx17__normal_iteratorIS_SsEES2_>:
    b5e0:	3147c83a 	sub	r3,r6,r5
    b5e4:	00800044 	movi	r2,1
    b5e8:	180d883a 	mov	r6,r3
    b5ec:	18800126 	beq	r3,r2,b5f4 <_ZNSs13_S_copy_charsEPcN9__gnu_cxx17__normal_iteratorIS_SsEES2_+0x14>
    b5f0:	0013a241 	jmpi	13a24 <memcpy>
    b5f4:	28800003 	ldbu	r2,0(r5)
    b5f8:	20800005 	stb	r2,0(r4)
    b5fc:	f800283a 	ret

0000b600 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag>:
    b600:	defffb04 	addi	sp,sp,-20
    b604:	dc000015 	stw	r16,0(sp)
    b608:	dfc00415 	stw	ra,16(sp)
    b60c:	dcc00315 	stw	r19,12(sp)
    b610:	dc800215 	stw	r18,8(sp)
    b614:	dc400115 	stw	r17,4(sp)
    b618:	2021883a 	mov	r16,r4
    b61c:	21401c26 	beq	r4,r5,b690 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag+0x90>
    b620:	20002526 	beq	r4,zero,b6b8 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag+0xb8>
    b624:	2c25c83a 	sub	r18,r5,r16
    b628:	9009883a 	mov	r4,r18
    b62c:	000b883a 	mov	r5,zero
    b630:	000a4080 	call	a408 <_ZNSs4_Rep9_S_createEmmRKSaIcE>
    b634:	1023883a 	mov	r17,r2
    b638:	14c00304 	addi	r19,r2,12
    b63c:	00800044 	movi	r2,1
    b640:	90801026 	beq	r18,r2,b684 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag+0x84>
    b644:	800b883a 	mov	r5,r16
    b648:	9809883a 	mov	r4,r19
    b64c:	900d883a 	mov	r6,r18
    b650:	0013a240 	call	13a24 <memcpy>
    b654:	9c85883a 	add	r2,r19,r18
    b658:	8c800015 	stw	r18,0(r17)
    b65c:	88000215 	stw	zero,8(r17)
    b660:	10000005 	stb	zero,0(r2)
    b664:	9805883a 	mov	r2,r19
    b668:	dfc00417 	ldw	ra,16(sp)
    b66c:	dcc00317 	ldw	r19,12(sp)
    b670:	dc800217 	ldw	r18,8(sp)
    b674:	dc400117 	ldw	r17,4(sp)
    b678:	dc000017 	ldw	r16,0(sp)
    b67c:	dec00504 	addi	sp,sp,20
    b680:	f800283a 	ret
    b684:	80800003 	ldbu	r2,0(r16)
    b688:	88800305 	stb	r2,12(r17)
    b68c:	003ff106 	br	b654 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag+0x54>
    b690:	04c000b4 	movhi	r19,2
    b694:	9ccac304 	addi	r19,r19,11020
    b698:	9805883a 	mov	r2,r19
    b69c:	dfc00417 	ldw	ra,16(sp)
    b6a0:	dcc00317 	ldw	r19,12(sp)
    b6a4:	dc800217 	ldw	r18,8(sp)
    b6a8:	dc400117 	ldw	r17,4(sp)
    b6ac:	dc000017 	ldw	r16,0(sp)
    b6b0:	dec00504 	addi	sp,sp,20
    b6b4:	f800283a 	ret
    b6b8:	010000b4 	movhi	r4,2
    b6bc:	213ac904 	addi	r4,r4,-5340
    b6c0:	0007ba40 	call	7ba4 <_ZSt19__throw_logic_errorPKc>

0000b6c4 <_ZNSsC2IPKcEET_S2_RKSaIcE>:
    b6c4:	defffe04 	addi	sp,sp,-8
    b6c8:	dc400015 	stw	r17,0(sp)
    b6cc:	2023883a 	mov	r17,r4
    b6d0:	2809883a 	mov	r4,r5
    b6d4:	300b883a 	mov	r5,r6
    b6d8:	380d883a 	mov	r6,r7
    b6dc:	dfc00115 	stw	ra,4(sp)
    b6e0:	000b6000 	call	b600 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag>
    b6e4:	88800015 	stw	r2,0(r17)
    b6e8:	dfc00117 	ldw	ra,4(sp)
    b6ec:	dc400017 	ldw	r17,0(sp)
    b6f0:	dec00204 	addi	sp,sp,8
    b6f4:	f800283a 	ret

0000b6f8 <_ZNSsC1EPKcmRKSaIcE>:
    b6f8:	defffe04 	addi	sp,sp,-8
    b6fc:	dc400015 	stw	r17,0(sp)
    b700:	2023883a 	mov	r17,r4
    b704:	2809883a 	mov	r4,r5
    b708:	314b883a 	add	r5,r6,r5
    b70c:	380d883a 	mov	r6,r7
    b710:	dfc00115 	stw	ra,4(sp)
    b714:	000b6000 	call	b600 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag>
    b718:	88800015 	stw	r2,0(r17)
    b71c:	dfc00117 	ldw	ra,4(sp)
    b720:	dc400017 	ldw	r17,0(sp)
    b724:	dec00204 	addi	sp,sp,8
    b728:	f800283a 	ret

0000b72c <_ZNSsC2EPKcmRKSaIcE>:
    b72c:	defffe04 	addi	sp,sp,-8
    b730:	dc400015 	stw	r17,0(sp)
    b734:	2023883a 	mov	r17,r4
    b738:	2809883a 	mov	r4,r5
    b73c:	314b883a 	add	r5,r6,r5
    b740:	380d883a 	mov	r6,r7
    b744:	dfc00115 	stw	ra,4(sp)
    b748:	000b6000 	call	b600 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag>
    b74c:	88800015 	stw	r2,0(r17)
    b750:	dfc00117 	ldw	ra,4(sp)
    b754:	dc400017 	ldw	r17,0(sp)
    b758:	dec00204 	addi	sp,sp,8
    b75c:	f800283a 	ret

0000b760 <_ZNSsC1IPKcEET_S2_RKSaIcE>:
    b760:	defffe04 	addi	sp,sp,-8
    b764:	dc400015 	stw	r17,0(sp)
    b768:	2023883a 	mov	r17,r4
    b76c:	2809883a 	mov	r4,r5
    b770:	300b883a 	mov	r5,r6
    b774:	380d883a 	mov	r6,r7
    b778:	dfc00115 	stw	ra,4(sp)
    b77c:	000b6000 	call	b600 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag>
    b780:	88800015 	stw	r2,0(r17)
    b784:	dfc00117 	ldw	ra,4(sp)
    b788:	dc400017 	ldw	r17,0(sp)
    b78c:	dec00204 	addi	sp,sp,8
    b790:	f800283a 	ret

0000b794 <_ZNSsC1EPKcRKSaIcE>:
    b794:	defffc04 	addi	sp,sp,-16
    b798:	dc400215 	stw	r17,8(sp)
    b79c:	dc000115 	stw	r16,4(sp)
    b7a0:	2023883a 	mov	r17,r4
    b7a4:	dfc00315 	stw	ra,12(sp)
    b7a8:	00bfffc4 	movi	r2,-1
    b7ac:	2809883a 	mov	r4,r5
    b7b0:	3021883a 	mov	r16,r6
    b7b4:	28000426 	beq	r5,zero,b7c8 <_ZNSsC1EPKcRKSaIcE+0x34>
    b7b8:	d9400015 	stw	r5,0(sp)
    b7bc:	0014cac0 	call	14cac <strlen>
    b7c0:	d9400017 	ldw	r5,0(sp)
    b7c4:	2885883a 	add	r2,r5,r2
    b7c8:	2809883a 	mov	r4,r5
    b7cc:	800d883a 	mov	r6,r16
    b7d0:	100b883a 	mov	r5,r2
    b7d4:	800f883a 	mov	r7,r16
    b7d8:	000b6000 	call	b600 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag>
    b7dc:	88800015 	stw	r2,0(r17)
    b7e0:	dfc00317 	ldw	ra,12(sp)
    b7e4:	dc400217 	ldw	r17,8(sp)
    b7e8:	dc000117 	ldw	r16,4(sp)
    b7ec:	dec00404 	addi	sp,sp,16
    b7f0:	f800283a 	ret

0000b7f4 <_ZNSsC2EPKcRKSaIcE>:
    b7f4:	defffc04 	addi	sp,sp,-16
    b7f8:	dc400215 	stw	r17,8(sp)
    b7fc:	dc000115 	stw	r16,4(sp)
    b800:	2023883a 	mov	r17,r4
    b804:	dfc00315 	stw	ra,12(sp)
    b808:	00bfffc4 	movi	r2,-1
    b80c:	2809883a 	mov	r4,r5
    b810:	3021883a 	mov	r16,r6
    b814:	28000426 	beq	r5,zero,b828 <_ZNSsC2EPKcRKSaIcE+0x34>
    b818:	d9400015 	stw	r5,0(sp)
    b81c:	0014cac0 	call	14cac <strlen>
    b820:	d9400017 	ldw	r5,0(sp)
    b824:	2885883a 	add	r2,r5,r2
    b828:	2809883a 	mov	r4,r5
    b82c:	800d883a 	mov	r6,r16
    b830:	100b883a 	mov	r5,r2
    b834:	800f883a 	mov	r7,r16
    b838:	000b6000 	call	b600 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag>
    b83c:	88800015 	stw	r2,0(r17)
    b840:	dfc00317 	ldw	ra,12(sp)
    b844:	dc400217 	ldw	r17,8(sp)
    b848:	dc000117 	ldw	r16,4(sp)
    b84c:	dec00404 	addi	sp,sp,16
    b850:	f800283a 	ret

0000b854 <_ZNSs13_S_copy_charsEPcN9__gnu_cxx17__normal_iteratorIPKcSsEES4_>:
    b854:	3147c83a 	sub	r3,r6,r5
    b858:	00800044 	movi	r2,1
    b85c:	180d883a 	mov	r6,r3
    b860:	18800126 	beq	r3,r2,b868 <_ZNSs13_S_copy_charsEPcN9__gnu_cxx17__normal_iteratorIPKcSsEES4_+0x14>
    b864:	0013a241 	jmpi	13a24 <memcpy>
    b868:	28800003 	ldbu	r2,0(r5)
    b86c:	20800005 	stb	r2,0(r4)
    b870:	f800283a 	ret

0000b874 <_ZNSs12_S_constructIN9__gnu_cxx17__normal_iteratorIPcSsEEEES2_T_S4_RKSaIcESt20forward_iterator_tag>:
    b874:	defffb04 	addi	sp,sp,-20
    b878:	dc000015 	stw	r16,0(sp)
    b87c:	dfc00415 	stw	ra,16(sp)
    b880:	dcc00315 	stw	r19,12(sp)
    b884:	dc800215 	stw	r18,8(sp)
    b888:	dc400115 	stw	r17,4(sp)
    b88c:	2021883a 	mov	r16,r4
    b890:	29000a1e 	bne	r5,r4,b8bc <_ZNSs12_S_constructIN9__gnu_cxx17__normal_iteratorIPcSsEEEES2_T_S4_RKSaIcESt20forward_iterator_tag+0x48>
    b894:	04c000b4 	movhi	r19,2
    b898:	9ccac304 	addi	r19,r19,11020
    b89c:	9805883a 	mov	r2,r19
    b8a0:	dfc00417 	ldw	ra,16(sp)
    b8a4:	dcc00317 	ldw	r19,12(sp)
    b8a8:	dc800217 	ldw	r18,8(sp)
    b8ac:	dc400117 	ldw	r17,4(sp)
    b8b0:	dc000017 	ldw	r16,0(sp)
    b8b4:	dec00504 	addi	sp,sp,20
    b8b8:	f800283a 	ret
    b8bc:	2923c83a 	sub	r17,r5,r4
    b8c0:	8809883a 	mov	r4,r17
    b8c4:	000b883a 	mov	r5,zero
    b8c8:	000a4080 	call	a408 <_ZNSs4_Rep9_S_createEmmRKSaIcE>
    b8cc:	1025883a 	mov	r18,r2
    b8d0:	14c00304 	addi	r19,r2,12
    b8d4:	00800044 	movi	r2,1
    b8d8:	88801026 	beq	r17,r2,b91c <_ZNSs12_S_constructIN9__gnu_cxx17__normal_iteratorIPcSsEEEES2_T_S4_RKSaIcESt20forward_iterator_tag+0xa8>
    b8dc:	800b883a 	mov	r5,r16
    b8e0:	9809883a 	mov	r4,r19
    b8e4:	880d883a 	mov	r6,r17
    b8e8:	0013a240 	call	13a24 <memcpy>
    b8ec:	9c45883a 	add	r2,r19,r17
    b8f0:	94400015 	stw	r17,0(r18)
    b8f4:	90000215 	stw	zero,8(r18)
    b8f8:	10000005 	stb	zero,0(r2)
    b8fc:	9805883a 	mov	r2,r19
    b900:	dfc00417 	ldw	ra,16(sp)
    b904:	dcc00317 	ldw	r19,12(sp)
    b908:	dc800217 	ldw	r18,8(sp)
    b90c:	dc400117 	ldw	r17,4(sp)
    b910:	dc000017 	ldw	r16,0(sp)
    b914:	dec00504 	addi	sp,sp,20
    b918:	f800283a 	ret
    b91c:	80800003 	ldbu	r2,0(r16)
    b920:	98800005 	stb	r2,0(r19)
    b924:	003ff106 	br	b8ec <_ZNSs12_S_constructIN9__gnu_cxx17__normal_iteratorIPcSsEEEES2_T_S4_RKSaIcESt20forward_iterator_tag+0x78>

0000b928 <_ZNSsC2IN9__gnu_cxx17__normal_iteratorIPcSsEEEET_S4_RKSaIcE>:
    b928:	defffe04 	addi	sp,sp,-8
    b92c:	dc400015 	stw	r17,0(sp)
    b930:	2023883a 	mov	r17,r4
    b934:	2809883a 	mov	r4,r5
    b938:	300b883a 	mov	r5,r6
    b93c:	380d883a 	mov	r6,r7
    b940:	dfc00115 	stw	ra,4(sp)
    b944:	000b8740 	call	b874 <_ZNSs12_S_constructIN9__gnu_cxx17__normal_iteratorIPcSsEEEES2_T_S4_RKSaIcESt20forward_iterator_tag>
    b948:	88800015 	stw	r2,0(r17)
    b94c:	dfc00117 	ldw	ra,4(sp)
    b950:	dc400017 	ldw	r17,0(sp)
    b954:	dec00204 	addi	sp,sp,8
    b958:	f800283a 	ret

0000b95c <_ZNSsC1IN9__gnu_cxx17__normal_iteratorIPcSsEEEET_S4_RKSaIcE>:
    b95c:	defffe04 	addi	sp,sp,-8
    b960:	dc400015 	stw	r17,0(sp)
    b964:	2023883a 	mov	r17,r4
    b968:	2809883a 	mov	r4,r5
    b96c:	300b883a 	mov	r5,r6
    b970:	380d883a 	mov	r6,r7
    b974:	dfc00115 	stw	ra,4(sp)
    b978:	000b8740 	call	b874 <_ZNSs12_S_constructIN9__gnu_cxx17__normal_iteratorIPcSsEEEES2_T_S4_RKSaIcESt20forward_iterator_tag>
    b97c:	88800015 	stw	r2,0(r17)
    b980:	dfc00117 	ldw	ra,4(sp)
    b984:	dc400017 	ldw	r17,0(sp)
    b988:	dec00204 	addi	sp,sp,8
    b98c:	f800283a 	ret

0000b990 <_ZNSsC1ERKSs>:
    b990:	deffec04 	addi	sp,sp,-80
    b994:	00800074 	movhi	r2,1
    b998:	10b95604 	addi	r2,r2,-6824
    b99c:	d8800715 	stw	r2,28(sp)
    b9a0:	00c000b4 	movhi	r3,2
    b9a4:	18f98f04 	addi	r3,r3,-6596
    b9a8:	00800074 	movhi	r2,1
    b9ac:	10ae9504 	addi	r2,r2,-17836
    b9b0:	d9000e15 	stw	r4,56(sp)
    b9b4:	d9000104 	addi	r4,sp,4
    b9b8:	d8800a15 	stw	r2,40(sp)
    b9bc:	dfc01315 	stw	ra,76(sp)
    b9c0:	df001215 	stw	fp,72(sp)
    b9c4:	ddc01115 	stw	r23,68(sp)
    b9c8:	d8c00815 	stw	r3,32(sp)
    b9cc:	d9400f15 	stw	r5,60(sp)
    b9d0:	dec00915 	stw	sp,36(sp)
    b9d4:	dec00b15 	stw	sp,44(sp)
    b9d8:	00108500 	call	10850 <_Unwind_SjLj_Register>
    b9dc:	d8800f17 	ldw	r2,60(sp)
    b9e0:	10800017 	ldw	r2,0(r2)
    b9e4:	113ffd04 	addi	r4,r2,-12
    b9e8:	d8801015 	stw	r2,64(sp)
    b9ec:	20800217 	ldw	r2,8(r4)
    b9f0:	10000d16 	blt	r2,zero,ba28 <_ZNSsC1ERKSs+0x98>
    b9f4:	008000b4 	movhi	r2,2
    b9f8:	108ac004 	addi	r2,r2,11008
    b9fc:	2080101e 	bne	r4,r2,ba40 <_ZNSsC1ERKSs+0xb0>
    ba00:	d8801017 	ldw	r2,64(sp)
    ba04:	d8c00e17 	ldw	r3,56(sp)
    ba08:	d9000104 	addi	r4,sp,4
    ba0c:	18800015 	stw	r2,0(r3)
    ba10:	00108600 	call	10860 <_Unwind_SjLj_Unregister>
    ba14:	dfc01317 	ldw	ra,76(sp)
    ba18:	df001217 	ldw	fp,72(sp)
    ba1c:	ddc01117 	ldw	r23,68(sp)
    ba20:	dec01404 	addi	sp,sp,80
    ba24:	f800283a 	ret
    ba28:	00800084 	movi	r2,2
    ba2c:	d8800215 	stw	r2,8(sp)
    ba30:	d80b883a 	mov	r5,sp
    ba34:	000d883a 	mov	r6,zero
    ba38:	000af740 	call	af74 <_ZNSs4_Rep8_M_cloneERKSaIcEm>
    ba3c:	003ff106 	br	ba04 <_ZNSsC1ERKSs+0x74>
    ba40:	01400044 	movi	r5,1
    ba44:	d9400215 	stw	r5,8(sp)
    ba48:	21000204 	addi	r4,r4,8
    ba4c:	000dabc0 	call	dabc <_ZN9__gnu_cxx12__atomic_addEPVii>
    ba50:	003feb06 	br	ba00 <_ZNSsC1ERKSs+0x70>
    ba54:	d8c00217 	ldw	r3,8(sp)
    ba58:	00800044 	movi	r2,1
    ba5c:	d9000317 	ldw	r4,12(sp)
    ba60:	d9400417 	ldw	r5,16(sp)
    ba64:	18800426 	beq	r3,r2,ba78 <_ZNSsC1ERKSs+0xe8>
    ba68:	00bfffc4 	movi	r2,-1
    ba6c:	28800426 	beq	r5,r2,ba80 <_ZNSsC1ERKSs+0xf0>
    ba70:	d8800215 	stw	r2,8(sp)
    ba74:	0010b1c0 	call	10b1c <_Unwind_SjLj_Resume>
    ba78:	00bfffc4 	movi	r2,-1
    ba7c:	003ffc06 	br	ba70 <_ZNSsC1ERKSs+0xe0>
    ba80:	00bfffc4 	movi	r2,-1
    ba84:	d8800215 	stw	r2,8(sp)
    ba88:	000e3d80 	call	e3d8 <__cxa_call_unexpected>

0000ba8c <_ZNSsC2ERKSs>:
    ba8c:	deffec04 	addi	sp,sp,-80
    ba90:	00800074 	movhi	r2,1
    ba94:	10b95604 	addi	r2,r2,-6824
    ba98:	d8800715 	stw	r2,28(sp)
    ba9c:	00c000b4 	movhi	r3,2
    baa0:	18f99304 	addi	r3,r3,-6580
    baa4:	00800074 	movhi	r2,1
    baa8:	10aed404 	addi	r2,r2,-17584
    baac:	d9000e15 	stw	r4,56(sp)
    bab0:	d9000104 	addi	r4,sp,4
    bab4:	d8800a15 	stw	r2,40(sp)
    bab8:	dfc01315 	stw	ra,76(sp)
    babc:	df001215 	stw	fp,72(sp)
    bac0:	ddc01115 	stw	r23,68(sp)
    bac4:	d8c00815 	stw	r3,32(sp)
    bac8:	d9400f15 	stw	r5,60(sp)
    bacc:	dec00915 	stw	sp,36(sp)
    bad0:	dec00b15 	stw	sp,44(sp)
    bad4:	00108500 	call	10850 <_Unwind_SjLj_Register>
    bad8:	d8800f17 	ldw	r2,60(sp)
    badc:	10800017 	ldw	r2,0(r2)
    bae0:	113ffd04 	addi	r4,r2,-12
    bae4:	d8801015 	stw	r2,64(sp)
    bae8:	20800217 	ldw	r2,8(r4)
    baec:	10000d16 	blt	r2,zero,bb24 <_ZNSsC2ERKSs+0x98>
    baf0:	008000b4 	movhi	r2,2
    baf4:	108ac004 	addi	r2,r2,11008
    baf8:	2080101e 	bne	r4,r2,bb3c <_ZNSsC2ERKSs+0xb0>
    bafc:	d8801017 	ldw	r2,64(sp)
    bb00:	d8c00e17 	ldw	r3,56(sp)
    bb04:	d9000104 	addi	r4,sp,4
    bb08:	18800015 	stw	r2,0(r3)
    bb0c:	00108600 	call	10860 <_Unwind_SjLj_Unregister>
    bb10:	dfc01317 	ldw	ra,76(sp)
    bb14:	df001217 	ldw	fp,72(sp)
    bb18:	ddc01117 	ldw	r23,68(sp)
    bb1c:	dec01404 	addi	sp,sp,80
    bb20:	f800283a 	ret
    bb24:	00800084 	movi	r2,2
    bb28:	d8800215 	stw	r2,8(sp)
    bb2c:	d80b883a 	mov	r5,sp
    bb30:	000d883a 	mov	r6,zero
    bb34:	000af740 	call	af74 <_ZNSs4_Rep8_M_cloneERKSaIcEm>
    bb38:	003ff106 	br	bb00 <_ZNSsC2ERKSs+0x74>
    bb3c:	01400044 	movi	r5,1
    bb40:	d9400215 	stw	r5,8(sp)
    bb44:	21000204 	addi	r4,r4,8
    bb48:	000dabc0 	call	dabc <_ZN9__gnu_cxx12__atomic_addEPVii>
    bb4c:	003feb06 	br	bafc <_ZNSsC2ERKSs+0x70>
    bb50:	d8c00217 	ldw	r3,8(sp)
    bb54:	00800044 	movi	r2,1
    bb58:	d9000317 	ldw	r4,12(sp)
    bb5c:	d9400417 	ldw	r5,16(sp)
    bb60:	18800426 	beq	r3,r2,bb74 <_ZNSsC2ERKSs+0xe8>
    bb64:	00bfffc4 	movi	r2,-1
    bb68:	28800426 	beq	r5,r2,bb7c <_ZNSsC2ERKSs+0xf0>
    bb6c:	d8800215 	stw	r2,8(sp)
    bb70:	0010b1c0 	call	10b1c <_Unwind_SjLj_Resume>
    bb74:	00bfffc4 	movi	r2,-1
    bb78:	003ffc06 	br	bb6c <_ZNSsC2ERKSs+0xe0>
    bb7c:	00bfffc4 	movi	r2,-1
    bb80:	d8800215 	stw	r2,8(sp)
    bb84:	000e3d80 	call	e3d8 <__cxa_call_unexpected>

0000bb88 <_ZNSs6assignERKSs>:
    bb88:	deffea04 	addi	sp,sp,-88
    bb8c:	00800074 	movhi	r2,1
    bb90:	10b95604 	addi	r2,r2,-6824
    bb94:	00c000b4 	movhi	r3,2
    bb98:	18f99704 	addi	r3,r3,-6564
    bb9c:	d8800715 	stw	r2,28(sp)
    bba0:	d9001015 	stw	r4,64(sp)
    bba4:	00800074 	movhi	r2,1
    bba8:	10af2f04 	addi	r2,r2,-17220
    bbac:	d9000104 	addi	r4,sp,4
    bbb0:	d8c00815 	stw	r3,32(sp)
    bbb4:	d8800a15 	stw	r2,40(sp)
    bbb8:	d9401115 	stw	r5,68(sp)
    bbbc:	dfc01515 	stw	ra,84(sp)
    bbc0:	df001415 	stw	fp,80(sp)
    bbc4:	ddc01315 	stw	r23,76(sp)
    bbc8:	dec00915 	stw	sp,36(sp)
    bbcc:	dec00b15 	stw	sp,44(sp)
    bbd0:	00108500 	call	10850 <_Unwind_SjLj_Register>
    bbd4:	d8801117 	ldw	r2,68(sp)
    bbd8:	d8c01017 	ldw	r3,64(sp)
    bbdc:	10800017 	ldw	r2,0(r2)
    bbe0:	d8801215 	stw	r2,72(sp)
    bbe4:	d9401217 	ldw	r5,72(sp)
    bbe8:	18800017 	ldw	r2,0(r3)
    bbec:	00fffd04 	movi	r3,-12
    bbf0:	28c9883a 	add	r4,r5,r3
    bbf4:	10c5883a 	add	r2,r2,r3
    bbf8:	11001126 	beq	r2,r4,bc40 <_ZNSs6assignERKSs+0xb8>
    bbfc:	20800217 	ldw	r2,8(r4)
    bc00:	10001716 	blt	r2,zero,bc60 <_ZNSs6assignERKSs+0xd8>
    bc04:	008000b4 	movhi	r2,2
    bc08:	108ac004 	addi	r2,r2,11008
    bc0c:	2080261e 	bne	r4,r2,bca8 <_ZNSs6assignERKSs+0x120>
    bc10:	d8c01217 	ldw	r3,72(sp)
    bc14:	d8c00f15 	stw	r3,60(sp)
    bc18:	d9401017 	ldw	r5,64(sp)
    bc1c:	00c000b4 	movhi	r3,2
    bc20:	18cac004 	addi	r3,r3,11008
    bc24:	28800017 	ldw	r2,0(r5)
    bc28:	10bffd04 	addi	r2,r2,-12
    bc2c:	d8800e15 	stw	r2,56(sp)
    bc30:	10c0121e 	bne	r2,r3,bc7c <_ZNSs6assignERKSs+0xf4>
    bc34:	d8c00f17 	ldw	r3,60(sp)
    bc38:	d8801017 	ldw	r2,64(sp)
    bc3c:	10c00015 	stw	r3,0(r2)
    bc40:	d9000104 	addi	r4,sp,4
    bc44:	00108600 	call	10860 <_Unwind_SjLj_Unregister>
    bc48:	d8801017 	ldw	r2,64(sp)
    bc4c:	dfc01517 	ldw	ra,84(sp)
    bc50:	df001417 	ldw	fp,80(sp)
    bc54:	ddc01317 	ldw	r23,76(sp)
    bc58:	dec01604 	addi	sp,sp,88
    bc5c:	f800283a 	ret
    bc60:	00800084 	movi	r2,2
    bc64:	d8800215 	stw	r2,8(sp)
    bc68:	d80b883a 	mov	r5,sp
    bc6c:	000d883a 	mov	r6,zero
    bc70:	000af740 	call	af74 <_ZNSs4_Rep8_M_cloneERKSaIcEm>
    bc74:	d8800f15 	stw	r2,60(sp)
    bc78:	003fe706 	br	bc18 <_ZNSs6assignERKSs+0x90>
    bc7c:	d9400e17 	ldw	r5,56(sp)
    bc80:	008000c4 	movi	r2,3
    bc84:	d8800215 	stw	r2,8(sp)
    bc88:	29000204 	addi	r4,r5,8
    bc8c:	017fffc4 	movi	r5,-1
    bc90:	000daa80 	call	daa8 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
    bc94:	00bfe716 	blt	zero,r2,bc34 <_ZNSs6assignERKSs+0xac>
    bc98:	d9000e17 	ldw	r4,56(sp)
    bc9c:	d80b883a 	mov	r5,sp
    bca0:	000a5380 	call	a538 <_ZNSs4_Rep10_M_destroyERKSaIcE>
    bca4:	003fe306 	br	bc34 <_ZNSs6assignERKSs+0xac>
    bca8:	01400044 	movi	r5,1
    bcac:	d9400215 	stw	r5,8(sp)
    bcb0:	21000204 	addi	r4,r4,8
    bcb4:	000dabc0 	call	dabc <_ZN9__gnu_cxx12__atomic_addEPVii>
    bcb8:	003fd506 	br	bc10 <_ZNSs6assignERKSs+0x88>
    bcbc:	d8c00217 	ldw	r3,8(sp)
    bcc0:	00800044 	movi	r2,1
    bcc4:	d9000317 	ldw	r4,12(sp)
    bcc8:	d9400417 	ldw	r5,16(sp)
    bccc:	18800626 	beq	r3,r2,bce8 <_ZNSs6assignERKSs+0x160>
    bcd0:	00800084 	movi	r2,2
    bcd4:	18800426 	beq	r3,r2,bce8 <_ZNSs6assignERKSs+0x160>
    bcd8:	00bfffc4 	movi	r2,-1
    bcdc:	28800426 	beq	r5,r2,bcf0 <_ZNSs6assignERKSs+0x168>
    bce0:	d8800215 	stw	r2,8(sp)
    bce4:	0010b1c0 	call	10b1c <_Unwind_SjLj_Resume>
    bce8:	00bfffc4 	movi	r2,-1
    bcec:	003ffc06 	br	bce0 <_ZNSs6assignERKSs+0x158>
    bcf0:	00bfffc4 	movi	r2,-1
    bcf4:	d8800215 	stw	r2,8(sp)
    bcf8:	000e3d80 	call	e3d8 <__cxa_call_unexpected>

0000bcfc <_ZNSsaSERKSs>:
    bcfc:	000bb881 	jmpi	bb88 <_ZNSs6assignERKSs>

0000bd00 <_ZNSs7reserveEm>:
    bd00:	deffeb04 	addi	sp,sp,-84
    bd04:	00800074 	movhi	r2,1
    bd08:	10b95604 	addi	r2,r2,-6824
    bd0c:	00c000b4 	movhi	r3,2
    bd10:	18f99b44 	addi	r3,r3,-6547
    bd14:	d8800715 	stw	r2,28(sp)
    bd18:	d9001015 	stw	r4,64(sp)
    bd1c:	00800074 	movhi	r2,1
    bd20:	10af8604 	addi	r2,r2,-16872
    bd24:	d9000104 	addi	r4,sp,4
    bd28:	d8c00815 	stw	r3,32(sp)
    bd2c:	d8800a15 	stw	r2,40(sp)
    bd30:	dfc01415 	stw	ra,80(sp)
    bd34:	df001315 	stw	fp,76(sp)
    bd38:	ddc01215 	stw	r23,72(sp)
    bd3c:	dec00915 	stw	sp,36(sp)
    bd40:	dec00b15 	stw	sp,44(sp)
    bd44:	d9401115 	stw	r5,68(sp)
    bd48:	00108500 	call	10850 <_Unwind_SjLj_Register>
    bd4c:	d8801017 	ldw	r2,64(sp)
    bd50:	10c00017 	ldw	r3,0(r2)
    bd54:	193ffd04 	addi	r4,r3,-12
    bd58:	20800117 	ldw	r2,4(r4)
    bd5c:	d8c01117 	ldw	r3,68(sp)
    bd60:	10c01c26 	beq	r2,r3,bdd4 <_ZNSs7reserveEm+0xd4>
    bd64:	20c00017 	ldw	r3,0(r4)
    bd68:	d9401117 	ldw	r5,68(sp)
    bd6c:	28c01736 	bltu	r5,r3,bdcc <_ZNSs7reserveEm+0xcc>
    bd70:	00800044 	movi	r2,1
    bd74:	28cdc83a 	sub	r6,r5,r3
    bd78:	d8800215 	stw	r2,8(sp)
    bd7c:	d80b883a 	mov	r5,sp
    bd80:	000af740 	call	af74 <_ZNSs4_Rep8_M_cloneERKSaIcEm>
    bd84:	d8c01017 	ldw	r3,64(sp)
    bd88:	d8800f15 	stw	r2,60(sp)
    bd8c:	18800017 	ldw	r2,0(r3)
    bd90:	00c000b4 	movhi	r3,2
    bd94:	18cac004 	addi	r3,r3,11008
    bd98:	10bffd04 	addi	r2,r2,-12
    bd9c:	d8800e15 	stw	r2,56(sp)
    bda0:	10c0151e 	bne	r2,r3,bdf8 <_ZNSs7reserveEm+0xf8>
    bda4:	d8c00f17 	ldw	r3,60(sp)
    bda8:	d8801017 	ldw	r2,64(sp)
    bdac:	d9000104 	addi	r4,sp,4
    bdb0:	10c00015 	stw	r3,0(r2)
    bdb4:	00108600 	call	10860 <_Unwind_SjLj_Unregister>
    bdb8:	dfc01417 	ldw	ra,80(sp)
    bdbc:	df001317 	ldw	fp,76(sp)
    bdc0:	ddc01217 	ldw	r23,72(sp)
    bdc4:	dec01504 	addi	sp,sp,84
    bdc8:	f800283a 	ret
    bdcc:	180b883a 	mov	r5,r3
    bdd0:	003fe706 	br	bd70 <_ZNSs7reserveEm+0x70>
    bdd4:	20800217 	ldw	r2,8(r4)
    bdd8:	00bfe216 	blt	zero,r2,bd64 <_ZNSs7reserveEm+0x64>
    bddc:	d9000104 	addi	r4,sp,4
    bde0:	00108600 	call	10860 <_Unwind_SjLj_Unregister>
    bde4:	dfc01417 	ldw	ra,80(sp)
    bde8:	df001317 	ldw	fp,76(sp)
    bdec:	ddc01217 	ldw	r23,72(sp)
    bdf0:	dec01504 	addi	sp,sp,84
    bdf4:	f800283a 	ret
    bdf8:	11000204 	addi	r4,r2,8
    bdfc:	017fffc4 	movi	r5,-1
    be00:	000daa80 	call	daa8 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
    be04:	00bfe716 	blt	zero,r2,bda4 <_ZNSs7reserveEm+0xa4>
    be08:	d9000e17 	ldw	r4,56(sp)
    be0c:	d80b883a 	mov	r5,sp
    be10:	000a5380 	call	a538 <_ZNSs4_Rep10_M_destroyERKSaIcE>
    be14:	003fe306 	br	bda4 <_ZNSs7reserveEm+0xa4>
    be18:	d9000317 	ldw	r4,12(sp)
    be1c:	00bfffc4 	movi	r2,-1
    be20:	d8800215 	stw	r2,8(sp)
    be24:	0010b1c0 	call	10b1c <_Unwind_SjLj_Resume>

0000be28 <_ZNSs9push_backEc>:
    be28:	21800017 	ldw	r6,0(r4)
    be2c:	defffc04 	addi	sp,sp,-16
    be30:	dc000015 	stw	r16,0(sp)
    be34:	30bffd17 	ldw	r2,-12(r6)
    be38:	31fffd04 	addi	r7,r6,-12
    be3c:	38c00117 	ldw	r3,4(r7)
    be40:	14000044 	addi	r16,r2,1
    be44:	dc800215 	stw	r18,8(sp)
    be48:	dc400115 	stw	r17,4(sp)
    be4c:	2825883a 	mov	r18,r5
    be50:	dfc00315 	stw	ra,12(sp)
    be54:	2023883a 	mov	r17,r4
    be58:	800b883a 	mov	r5,r16
    be5c:	1c001136 	bltu	r3,r16,bea4 <_ZNSs9push_backEc+0x7c>
    be60:	38800217 	ldw	r2,8(r7)
    be64:	00800f16 	blt	zero,r2,bea4 <_ZNSs9push_backEc+0x7c>
    be68:	30bffd17 	ldw	r2,-12(r6)
    be6c:	3085883a 	add	r2,r6,r2
    be70:	14800005 	stb	r18,0(r2)
    be74:	88c00017 	ldw	r3,0(r17)
    be78:	18bffd04 	addi	r2,r3,-12
    be7c:	1c3ffd15 	stw	r16,-12(r3)
    be80:	1409883a 	add	r4,r2,r16
    be84:	10000215 	stw	zero,8(r2)
    be88:	20000305 	stb	zero,12(r4)
    be8c:	dfc00317 	ldw	ra,12(sp)
    be90:	dc800217 	ldw	r18,8(sp)
    be94:	dc400117 	ldw	r17,4(sp)
    be98:	dc000017 	ldw	r16,0(sp)
    be9c:	dec00404 	addi	sp,sp,16
    bea0:	f800283a 	ret
    bea4:	000bd000 	call	bd00 <_ZNSs7reserveEm>
    bea8:	89800017 	ldw	r6,0(r17)
    beac:	003fee06 	br	be68 <_ZNSs9push_backEc+0x40>

0000beb0 <_ZNSs6appendEmc>:
    beb0:	defffb04 	addi	sp,sp,-20
    beb4:	dcc00315 	stw	r19,12(sp)
    beb8:	dc800215 	stw	r18,8(sp)
    bebc:	dc000015 	stw	r16,0(sp)
    bec0:	dfc00415 	stw	ra,16(sp)
    bec4:	dc400115 	stw	r17,4(sp)
    bec8:	2821883a 	mov	r16,r5
    becc:	3027883a 	mov	r19,r6
    bed0:	2025883a 	mov	r18,r4
    bed4:	28001d26 	beq	r5,zero,bf4c <_ZNSs6appendEmc+0x9c>
    bed8:	20c00017 	ldw	r3,0(r4)
    bedc:	00900034 	movhi	r2,16384
    bee0:	10bfff04 	addi	r2,r2,-4
    bee4:	197ffd17 	ldw	r5,-12(r3)
    bee8:	19bffd04 	addi	r6,r3,-12
    beec:	1145c83a 	sub	r2,r2,r5
    bef0:	14002436 	bltu	r2,r16,bf84 <_ZNSs6appendEmc+0xd4>
    bef4:	30800117 	ldw	r2,4(r6)
    bef8:	8163883a 	add	r17,r16,r5
    befc:	14400236 	bltu	r2,r17,bf08 <_ZNSs6appendEmc+0x58>
    bf00:	30800217 	ldw	r2,8(r6)
    bf04:	0080030e 	bge	zero,r2,bf14 <_ZNSs6appendEmc+0x64>
    bf08:	880b883a 	mov	r5,r17
    bf0c:	000bd000 	call	bd00 <_ZNSs7reserveEm>
    bf10:	90c00017 	ldw	r3,0(r18)
    bf14:	18bffd17 	ldw	r2,-12(r3)
    bf18:	99803fcc 	andi	r6,r19,255
    bf1c:	3180201c 	xori	r6,r6,128
    bf20:	1889883a 	add	r4,r3,r2
    bf24:	00800044 	movi	r2,1
    bf28:	31bfe004 	addi	r6,r6,-128
    bf2c:	80800f1e 	bne	r16,r2,bf6c <_ZNSs6appendEmc+0xbc>
    bf30:	21800005 	stb	r6,0(r4)
    bf34:	90800017 	ldw	r2,0(r18)
    bf38:	10fffd04 	addi	r3,r2,-12
    bf3c:	147ffd15 	stw	r17,-12(r2)
    bf40:	1c49883a 	add	r4,r3,r17
    bf44:	18000215 	stw	zero,8(r3)
    bf48:	20000305 	stb	zero,12(r4)
    bf4c:	9005883a 	mov	r2,r18
    bf50:	dfc00417 	ldw	ra,16(sp)
    bf54:	dcc00317 	ldw	r19,12(sp)
    bf58:	dc800217 	ldw	r18,8(sp)
    bf5c:	dc400117 	ldw	r17,4(sp)
    bf60:	dc000017 	ldw	r16,0(sp)
    bf64:	dec00504 	addi	sp,sp,20
    bf68:	f800283a 	ret
    bf6c:	31403fcc 	andi	r5,r6,255
    bf70:	2940201c 	xori	r5,r5,128
    bf74:	297fe004 	addi	r5,r5,-128
    bf78:	800d883a 	mov	r6,r16
    bf7c:	0013ba40 	call	13ba4 <memset>
    bf80:	003fec06 	br	bf34 <_ZNSs6appendEmc+0x84>
    bf84:	010000b4 	movhi	r4,2
    bf88:	213ae104 	addi	r4,r4,-5244
    bf8c:	00088240 	call	8824 <_ZSt20__throw_length_errorPKc>

0000bf90 <_ZNSs6appendEPKcm>:
    bf90:	defffa04 	addi	sp,sp,-24
    bf94:	dd000415 	stw	r20,16(sp)
    bf98:	dcc00315 	stw	r19,12(sp)
    bf9c:	dc400115 	stw	r17,4(sp)
    bfa0:	dfc00515 	stw	ra,20(sp)
    bfa4:	dc800215 	stw	r18,8(sp)
    bfa8:	dc000015 	stw	r16,0(sp)
    bfac:	3023883a 	mov	r17,r6
    bfb0:	2829883a 	mov	r20,r5
    bfb4:	2027883a 	mov	r19,r4
    bfb8:	30001c26 	beq	r6,zero,c02c <_ZNSs6appendEPKcm+0x9c>
    bfbc:	24000017 	ldw	r16,0(r4)
    bfc0:	00900034 	movhi	r2,16384
    bfc4:	10bfff04 	addi	r2,r2,-4
    bfc8:	80fffd17 	ldw	r3,-12(r16)
    bfcc:	817ffd04 	addi	r5,r16,-12
    bfd0:	10c5c83a 	sub	r2,r2,r3
    bfd4:	11802e36 	bltu	r2,r6,c090 <_ZNSs6appendEPKcm+0x100>
    bfd8:	28800117 	ldw	r2,4(r5)
    bfdc:	30e5883a 	add	r18,r6,r3
    bfe0:	14801b2e 	bgeu	r2,r18,c050 <_ZNSs6appendEPKcm+0xc0>
    bfe4:	a4000236 	bltu	r20,r16,bff0 <_ZNSs6appendEPKcm+0x60>
    bfe8:	80c5883a 	add	r2,r16,r3
    bfec:	1500222e 	bgeu	r2,r20,c078 <_ZNSs6appendEPKcm+0xe8>
    bff0:	900b883a 	mov	r5,r18
    bff4:	000bd000 	call	bd00 <_ZNSs7reserveEm>
    bff8:	9c000017 	ldw	r16,0(r19)
    bffc:	80bffd17 	ldw	r2,-12(r16)
    c000:	00c00044 	movi	r3,1
    c004:	8089883a 	add	r4,r16,r2
    c008:	88c0171e 	bne	r17,r3,c068 <_ZNSs6appendEPKcm+0xd8>
    c00c:	a0800003 	ldbu	r2,0(r20)
    c010:	20800005 	stb	r2,0(r4)
    c014:	98800017 	ldw	r2,0(r19)
    c018:	10fffd04 	addi	r3,r2,-12
    c01c:	14bffd15 	stw	r18,-12(r2)
    c020:	1c89883a 	add	r4,r3,r18
    c024:	18000215 	stw	zero,8(r3)
    c028:	20000305 	stb	zero,12(r4)
    c02c:	9805883a 	mov	r2,r19
    c030:	dfc00517 	ldw	ra,20(sp)
    c034:	dd000417 	ldw	r20,16(sp)
    c038:	dcc00317 	ldw	r19,12(sp)
    c03c:	dc800217 	ldw	r18,8(sp)
    c040:	dc400117 	ldw	r17,4(sp)
    c044:	dc000017 	ldw	r16,0(sp)
    c048:	dec00604 	addi	sp,sp,24
    c04c:	f800283a 	ret
    c050:	28800217 	ldw	r2,8(r5)
    c054:	00bfe316 	blt	zero,r2,bfe4 <_ZNSs6appendEPKcm+0x54>
    c058:	80bffd17 	ldw	r2,-12(r16)
    c05c:	00c00044 	movi	r3,1
    c060:	8089883a 	add	r4,r16,r2
    c064:	88ffe926 	beq	r17,r3,c00c <_ZNSs6appendEPKcm+0x7c>
    c068:	a00b883a 	mov	r5,r20
    c06c:	880d883a 	mov	r6,r17
    c070:	0013a240 	call	13a24 <memcpy>
    c074:	003fe706 	br	c014 <_ZNSs6appendEPKcm+0x84>
    c078:	900b883a 	mov	r5,r18
    c07c:	000bd000 	call	bd00 <_ZNSs7reserveEm>
    c080:	a405c83a 	sub	r2,r20,r16
    c084:	9c000017 	ldw	r16,0(r19)
    c088:	1429883a 	add	r20,r2,r16
    c08c:	003fdb06 	br	bffc <_ZNSs6appendEPKcm+0x6c>
    c090:	010000b4 	movhi	r4,2
    c094:	213ae104 	addi	r4,r4,-5244
    c098:	00088240 	call	8824 <_ZSt20__throw_length_errorPKc>

0000c09c <_ZNSs6appendEPKc>:
    c09c:	defffd04 	addi	sp,sp,-12
    c0a0:	dcc00115 	stw	r19,4(sp)
    c0a4:	dc400015 	stw	r17,0(sp)
    c0a8:	dfc00215 	stw	ra,8(sp)
    c0ac:	2023883a 	mov	r17,r4
    c0b0:	2809883a 	mov	r4,r5
    c0b4:	2827883a 	mov	r19,r5
    c0b8:	0014cac0 	call	14cac <strlen>
    c0bc:	980b883a 	mov	r5,r19
    c0c0:	8809883a 	mov	r4,r17
    c0c4:	100d883a 	mov	r6,r2
    c0c8:	dfc00217 	ldw	ra,8(sp)
    c0cc:	dcc00117 	ldw	r19,4(sp)
    c0d0:	dc400017 	ldw	r17,0(sp)
    c0d4:	dec00304 	addi	sp,sp,12
    c0d8:	000bf901 	jmpi	bf90 <_ZNSs6appendEPKcm>

0000c0dc <_ZNSspLEPKc>:
    c0dc:	defffd04 	addi	sp,sp,-12
    c0e0:	dcc00115 	stw	r19,4(sp)
    c0e4:	dc400015 	stw	r17,0(sp)
    c0e8:	dfc00215 	stw	ra,8(sp)
    c0ec:	2023883a 	mov	r17,r4
    c0f0:	2809883a 	mov	r4,r5
    c0f4:	2827883a 	mov	r19,r5
    c0f8:	0014cac0 	call	14cac <strlen>
    c0fc:	980b883a 	mov	r5,r19
    c100:	8809883a 	mov	r4,r17
    c104:	100d883a 	mov	r6,r2
    c108:	dfc00217 	ldw	ra,8(sp)
    c10c:	dcc00117 	ldw	r19,4(sp)
    c110:	dc400017 	ldw	r17,0(sp)
    c114:	dec00304 	addi	sp,sp,12
    c118:	000bf901 	jmpi	bf90 <_ZNSs6appendEPKcm>

0000c11c <_ZNSs6appendERKSsmm>:
    c11c:	defffa04 	addi	sp,sp,-24
    c120:	dcc00415 	stw	r19,16(sp)
    c124:	2827883a 	mov	r19,r5
    c128:	29400017 	ldw	r5,0(r5)
    c12c:	dc800315 	stw	r18,12(sp)
    c130:	dc000115 	stw	r16,4(sp)
    c134:	28bffd17 	ldw	r2,-12(r5)
    c138:	dfc00515 	stw	ra,20(sp)
    c13c:	dc400215 	stw	r17,8(sp)
    c140:	3021883a 	mov	r16,r6
    c144:	2025883a 	mov	r18,r4
    c148:	11802b36 	bltu	r2,r6,c1f8 <_ZNSs6appendERKSsmm+0xdc>
    c14c:	118dc83a 	sub	r6,r2,r6
    c150:	31c02436 	bltu	r6,r7,c1e4 <_ZNSs6appendERKSsmm+0xc8>
    c154:	38001b26 	beq	r7,zero,c1c4 <_ZNSs6appendERKSsmm+0xa8>
    c158:	91800017 	ldw	r6,0(r18)
    c15c:	323ffd04 	addi	r8,r6,-12
    c160:	30bffd17 	ldw	r2,-12(r6)
    c164:	40c00117 	ldw	r3,4(r8)
    c168:	38a3883a 	add	r17,r7,r2
    c16c:	1c400236 	bltu	r3,r17,c178 <_ZNSs6appendERKSsmm+0x5c>
    c170:	40800217 	ldw	r2,8(r8)
    c174:	0080060e 	bge	zero,r2,c190 <_ZNSs6appendERKSsmm+0x74>
    c178:	880b883a 	mov	r5,r17
    c17c:	d9c00015 	stw	r7,0(sp)
    c180:	000bd000 	call	bd00 <_ZNSs7reserveEm>
    c184:	99400017 	ldw	r5,0(r19)
    c188:	91800017 	ldw	r6,0(r18)
    c18c:	d9c00017 	ldw	r7,0(sp)
    c190:	30fffd17 	ldw	r3,-12(r6)
    c194:	00800044 	movi	r2,1
    c198:	814b883a 	add	r5,r16,r5
    c19c:	30c9883a 	add	r4,r6,r3
    c1a0:	3880121e 	bne	r7,r2,c1ec <_ZNSs6appendERKSsmm+0xd0>
    c1a4:	28800003 	ldbu	r2,0(r5)
    c1a8:	20800005 	stb	r2,0(r4)
    c1ac:	90800017 	ldw	r2,0(r18)
    c1b0:	10fffd04 	addi	r3,r2,-12
    c1b4:	147ffd15 	stw	r17,-12(r2)
    c1b8:	1c49883a 	add	r4,r3,r17
    c1bc:	18000215 	stw	zero,8(r3)
    c1c0:	20000305 	stb	zero,12(r4)
    c1c4:	9005883a 	mov	r2,r18
    c1c8:	dfc00517 	ldw	ra,20(sp)
    c1cc:	dcc00417 	ldw	r19,16(sp)
    c1d0:	dc800317 	ldw	r18,12(sp)
    c1d4:	dc400217 	ldw	r17,8(sp)
    c1d8:	dc000117 	ldw	r16,4(sp)
    c1dc:	dec00604 	addi	sp,sp,24
    c1e0:	f800283a 	ret
    c1e4:	300f883a 	mov	r7,r6
    c1e8:	003fda06 	br	c154 <_ZNSs6appendERKSsmm+0x38>
    c1ec:	380d883a 	mov	r6,r7
    c1f0:	0013a240 	call	13a24 <memcpy>
    c1f4:	003fed06 	br	c1ac <_ZNSs6appendERKSsmm+0x90>
    c1f8:	010000b4 	movhi	r4,2
    c1fc:	213ae104 	addi	r4,r4,-5244
    c200:	00086940 	call	8694 <_ZSt20__throw_out_of_rangePKc>

0000c204 <_ZNSs6appendERKSs>:
    c204:	2a000017 	ldw	r8,0(r5)
    c208:	defffb04 	addi	sp,sp,-20
    c20c:	dc000015 	stw	r16,0(sp)
    c210:	443ffd17 	ldw	r16,-12(r8)
    c214:	dcc00315 	stw	r19,12(sp)
    c218:	dc800215 	stw	r18,8(sp)
    c21c:	dfc00415 	stw	ra,16(sp)
    c220:	dc400115 	stw	r17,4(sp)
    c224:	2827883a 	mov	r19,r5
    c228:	2025883a 	mov	r18,r4
    c22c:	80001a26 	beq	r16,zero,c298 <_ZNSs6appendERKSs+0x94>
    c230:	21c00017 	ldw	r7,0(r4)
    c234:	39bffd04 	addi	r6,r7,-12
    c238:	38bffd17 	ldw	r2,-12(r7)
    c23c:	30c00117 	ldw	r3,4(r6)
    c240:	80a3883a 	add	r17,r16,r2
    c244:	880b883a 	mov	r5,r17
    c248:	1c400236 	bltu	r3,r17,c254 <_ZNSs6appendERKSs+0x50>
    c24c:	30800217 	ldw	r2,8(r6)
    c250:	0080030e 	bge	zero,r2,c260 <_ZNSs6appendERKSs+0x5c>
    c254:	000bd000 	call	bd00 <_ZNSs7reserveEm>
    c258:	9a000017 	ldw	r8,0(r19)
    c25c:	91c00017 	ldw	r7,0(r18)
    c260:	38fffd17 	ldw	r3,-12(r7)
    c264:	00800044 	movi	r2,1
    c268:	400b883a 	mov	r5,r8
    c26c:	800d883a 	mov	r6,r16
    c270:	38c9883a 	add	r4,r7,r3
    c274:	8080101e 	bne	r16,r2,c2b8 <_ZNSs6appendERKSs+0xb4>
    c278:	40800003 	ldbu	r2,0(r8)
    c27c:	20800005 	stb	r2,0(r4)
    c280:	90800017 	ldw	r2,0(r18)
    c284:	10fffd04 	addi	r3,r2,-12
    c288:	147ffd15 	stw	r17,-12(r2)
    c28c:	1c49883a 	add	r4,r3,r17
    c290:	18000215 	stw	zero,8(r3)
    c294:	20000305 	stb	zero,12(r4)
    c298:	9005883a 	mov	r2,r18
    c29c:	dfc00417 	ldw	ra,16(sp)
    c2a0:	dcc00317 	ldw	r19,12(sp)
    c2a4:	dc800217 	ldw	r18,8(sp)
    c2a8:	dc400117 	ldw	r17,4(sp)
    c2ac:	dc000017 	ldw	r16,0(sp)
    c2b0:	dec00504 	addi	sp,sp,20
    c2b4:	f800283a 	ret
    c2b8:	0013a240 	call	13a24 <memcpy>
    c2bc:	003ff006 	br	c280 <_ZNSs6appendERKSs+0x7c>

0000c2c0 <_ZNSspLERKSs>:
    c2c0:	000c2041 	jmpi	c204 <_ZNSs6appendERKSs>

0000c2c4 <_ZNSspLEc>:
    c2c4:	21800017 	ldw	r6,0(r4)
    c2c8:	defffc04 	addi	sp,sp,-16
    c2cc:	dc000015 	stw	r16,0(sp)
    c2d0:	30bffd17 	ldw	r2,-12(r6)
    c2d4:	31fffd04 	addi	r7,r6,-12
    c2d8:	38c00117 	ldw	r3,4(r7)
    c2dc:	14000044 	addi	r16,r2,1
    c2e0:	dc800215 	stw	r18,8(sp)
    c2e4:	dc400115 	stw	r17,4(sp)
    c2e8:	2825883a 	mov	r18,r5
    c2ec:	dfc00315 	stw	ra,12(sp)
    c2f0:	2023883a 	mov	r17,r4
    c2f4:	800b883a 	mov	r5,r16
    c2f8:	1c001236 	bltu	r3,r16,c344 <_ZNSspLEc+0x80>
    c2fc:	38800217 	ldw	r2,8(r7)
    c300:	00801016 	blt	zero,r2,c344 <_ZNSspLEc+0x80>
    c304:	30fffd17 	ldw	r3,-12(r6)
    c308:	8805883a 	mov	r2,r17
    c30c:	30c7883a 	add	r3,r6,r3
    c310:	1c800005 	stb	r18,0(r3)
    c314:	89000017 	ldw	r4,0(r17)
    c318:	20fffd04 	addi	r3,r4,-12
    c31c:	243ffd15 	stw	r16,-12(r4)
    c320:	1c0b883a 	add	r5,r3,r16
    c324:	18000215 	stw	zero,8(r3)
    c328:	28000305 	stb	zero,12(r5)
    c32c:	dfc00317 	ldw	ra,12(sp)
    c330:	dc800217 	ldw	r18,8(sp)
    c334:	dc400117 	ldw	r17,4(sp)
    c338:	dc000017 	ldw	r16,0(sp)
    c33c:	dec00404 	addi	sp,sp,16
    c340:	f800283a 	ret
    c344:	000bd000 	call	bd00 <_ZNSs7reserveEm>
    c348:	89800017 	ldw	r6,0(r17)
    c34c:	003fed06 	br	c304 <_ZNSspLEc+0x40>

0000c350 <_ZNSsD1Ev>:
    c350:	deffed04 	addi	sp,sp,-76
    c354:	00800074 	movhi	r2,1
    c358:	10b95604 	addi	r2,r2,-6824
    c35c:	00c000b4 	movhi	r3,2
    c360:	18f99cc4 	addi	r3,r3,-6541
    c364:	d8800715 	stw	r2,28(sp)
    c368:	d9000f15 	stw	r4,60(sp)
    c36c:	00800074 	movhi	r2,1
    c370:	10b0ff04 	addi	r2,r2,-15364
    c374:	d9000104 	addi	r4,sp,4
    c378:	d8c00815 	stw	r3,32(sp)
    c37c:	d8800a15 	stw	r2,40(sp)
    c380:	dfc01215 	stw	ra,72(sp)
    c384:	df001115 	stw	fp,68(sp)
    c388:	ddc01015 	stw	r23,64(sp)
    c38c:	dec00915 	stw	sp,36(sp)
    c390:	dec00b15 	stw	sp,44(sp)
    c394:	00108500 	call	10850 <_Unwind_SjLj_Register>
    c398:	d8c00f17 	ldw	r3,60(sp)
    c39c:	18800017 	ldw	r2,0(r3)
    c3a0:	00c000b4 	movhi	r3,2
    c3a4:	18cac004 	addi	r3,r3,11008
    c3a8:	10bffd04 	addi	r2,r2,-12
    c3ac:	d8800e15 	stw	r2,56(sp)
    c3b0:	10c0071e 	bne	r2,r3,c3d0 <_ZNSsD1Ev+0x80>
    c3b4:	d9000104 	addi	r4,sp,4
    c3b8:	00108600 	call	10860 <_Unwind_SjLj_Unregister>
    c3bc:	dfc01217 	ldw	ra,72(sp)
    c3c0:	df001117 	ldw	fp,68(sp)
    c3c4:	ddc01017 	ldw	r23,64(sp)
    c3c8:	dec01304 	addi	sp,sp,76
    c3cc:	f800283a 	ret
    c3d0:	00800044 	movi	r2,1
    c3d4:	d8800215 	stw	r2,8(sp)
    c3d8:	d8800e17 	ldw	r2,56(sp)
    c3dc:	017fffc4 	movi	r5,-1
    c3e0:	11000204 	addi	r4,r2,8
    c3e4:	000daa80 	call	daa8 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
    c3e8:	00bff216 	blt	zero,r2,c3b4 <_ZNSsD1Ev+0x64>
    c3ec:	d9000e17 	ldw	r4,56(sp)
    c3f0:	d80b883a 	mov	r5,sp
    c3f4:	000a5380 	call	a538 <_ZNSs4_Rep10_M_destroyERKSaIcE>
    c3f8:	003fee06 	br	c3b4 <_ZNSsD1Ev+0x64>
    c3fc:	d9000317 	ldw	r4,12(sp)
    c400:	00bfffc4 	movi	r2,-1
    c404:	d8800215 	stw	r2,8(sp)
    c408:	0010b1c0 	call	10b1c <_Unwind_SjLj_Resume>

0000c40c <_ZNSsD2Ev>:
    c40c:	deffed04 	addi	sp,sp,-76
    c410:	00800074 	movhi	r2,1
    c414:	10b95604 	addi	r2,r2,-6824
    c418:	00c000b4 	movhi	r3,2
    c41c:	18f99e44 	addi	r3,r3,-6535
    c420:	d8800715 	stw	r2,28(sp)
    c424:	d9000f15 	stw	r4,60(sp)
    c428:	00800074 	movhi	r2,1
    c42c:	10b12e04 	addi	r2,r2,-15176
    c430:	d9000104 	addi	r4,sp,4
    c434:	d8c00815 	stw	r3,32(sp)
    c438:	d8800a15 	stw	r2,40(sp)
    c43c:	dfc01215 	stw	ra,72(sp)
    c440:	df001115 	stw	fp,68(sp)
    c444:	ddc01015 	stw	r23,64(sp)
    c448:	dec00915 	stw	sp,36(sp)
    c44c:	dec00b15 	stw	sp,44(sp)
    c450:	00108500 	call	10850 <_Unwind_SjLj_Register>
    c454:	d8c00f17 	ldw	r3,60(sp)
    c458:	18800017 	ldw	r2,0(r3)
    c45c:	00c000b4 	movhi	r3,2
    c460:	18cac004 	addi	r3,r3,11008
    c464:	10bffd04 	addi	r2,r2,-12
    c468:	d8800e15 	stw	r2,56(sp)
    c46c:	10c0071e 	bne	r2,r3,c48c <_ZNSsD2Ev+0x80>
    c470:	d9000104 	addi	r4,sp,4
    c474:	00108600 	call	10860 <_Unwind_SjLj_Unregister>
    c478:	dfc01217 	ldw	ra,72(sp)
    c47c:	df001117 	ldw	fp,68(sp)
    c480:	ddc01017 	ldw	r23,64(sp)
    c484:	dec01304 	addi	sp,sp,76
    c488:	f800283a 	ret
    c48c:	00800044 	movi	r2,1
    c490:	d8800215 	stw	r2,8(sp)
    c494:	d8800e17 	ldw	r2,56(sp)
    c498:	017fffc4 	movi	r5,-1
    c49c:	11000204 	addi	r4,r2,8
    c4a0:	000daa80 	call	daa8 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
    c4a4:	00bff216 	blt	zero,r2,c470 <_ZNSsD2Ev+0x64>
    c4a8:	d9000e17 	ldw	r4,56(sp)
    c4ac:	d80b883a 	mov	r5,sp
    c4b0:	000a5380 	call	a538 <_ZNSs4_Rep10_M_destroyERKSaIcE>
    c4b4:	003fee06 	br	c470 <_ZNSsD2Ev+0x64>
    c4b8:	d9000317 	ldw	r4,12(sp)
    c4bc:	00bfffc4 	movi	r2,-1
    c4c0:	d8800215 	stw	r2,8(sp)
    c4c4:	0010b1c0 	call	10b1c <_Unwind_SjLj_Resume>

0000c4c8 <_ZNSs9_M_mutateEmmm>:
    c4c8:	deffe704 	addi	sp,sp,-100
    c4cc:	00800074 	movhi	r2,1
    c4d0:	10b95604 	addi	r2,r2,-6824
    c4d4:	00c000b4 	movhi	r3,2
    c4d8:	18f99fc4 	addi	r3,r3,-6529
    c4dc:	d8800715 	stw	r2,28(sp)
    c4e0:	d9001215 	stw	r4,72(sp)
    c4e4:	00800074 	movhi	r2,1
    c4e8:	10b1bc04 	addi	r2,r2,-14608
    c4ec:	d9000104 	addi	r4,sp,4
    c4f0:	d8c00815 	stw	r3,32(sp)
    c4f4:	d8800a15 	stw	r2,40(sp)
    c4f8:	d9801415 	stw	r6,80(sp)
    c4fc:	d9401315 	stw	r5,76(sp)
    c500:	d9c01515 	stw	r7,84(sp)
    c504:	dfc01815 	stw	ra,96(sp)
    c508:	df001715 	stw	fp,92(sp)
    c50c:	ddc01615 	stw	r23,88(sp)
    c510:	dec00915 	stw	sp,36(sp)
    c514:	dec00b15 	stw	sp,44(sp)
    c518:	00108500 	call	10850 <_Unwind_SjLj_Register>
    c51c:	d8801217 	ldw	r2,72(sp)
    c520:	d9c01517 	ldw	r7,84(sp)
    c524:	11800017 	ldw	r6,0(r2)
    c528:	313ffd04 	addi	r4,r6,-12
    c52c:	20800017 	ldw	r2,0(r4)
    c530:	21400117 	ldw	r5,4(r4)
    c534:	11c7883a 	add	r3,r2,r7
    c538:	d9c01317 	ldw	r7,76(sp)
    c53c:	11c5c83a 	sub	r2,r2,r7
    c540:	d9c01417 	ldw	r7,80(sp)
    c544:	19c7c83a 	sub	r3,r3,r7
    c548:	11c5c83a 	sub	r2,r2,r7
    c54c:	d8c01115 	stw	r3,68(sp)
    c550:	d8801015 	stw	r2,64(sp)
    c554:	28c00236 	bltu	r5,r3,c560 <_ZNSs9_M_mutateEmmm+0x98>
    c558:	20800217 	ldw	r2,8(r4)
    c55c:	0080240e 	bge	zero,r2,c5f0 <_ZNSs9_M_mutateEmmm+0x128>
    c560:	00800044 	movi	r2,1
    c564:	d8800215 	stw	r2,8(sp)
    c568:	d9001117 	ldw	r4,68(sp)
    c56c:	d80d883a 	mov	r6,sp
    c570:	000a4080 	call	a408 <_ZNSs4_Rep9_S_createEmmRKSaIcE>
    c574:	d8c01317 	ldw	r3,76(sp)
    c578:	d8800f15 	stw	r2,60(sp)
    c57c:	18003c1e 	bne	r3,zero,c670 <_ZNSs9_M_mutateEmmm+0x1a8>
    c580:	d8c01017 	ldw	r3,64(sp)
    c584:	1800291e 	bne	r3,zero,c62c <_ZNSs9_M_mutateEmmm+0x164>
    c588:	d8c01217 	ldw	r3,72(sp)
    c58c:	18800017 	ldw	r2,0(r3)
    c590:	00c000b4 	movhi	r3,2
    c594:	18cac004 	addi	r3,r3,11008
    c598:	10bffd04 	addi	r2,r2,-12
    c59c:	d8800e15 	stw	r2,56(sp)
    c5a0:	10c0481e 	bne	r2,r3,c6c4 <_ZNSs9_M_mutateEmmm+0x1fc>
    c5a4:	d9c00f17 	ldw	r7,60(sp)
    c5a8:	d8c01217 	ldw	r3,72(sp)
    c5ac:	38800304 	addi	r2,r7,12
    c5b0:	18800015 	stw	r2,0(r3)
    c5b4:	d9401217 	ldw	r5,72(sp)
    c5b8:	d9c01117 	ldw	r7,68(sp)
    c5bc:	d9000104 	addi	r4,sp,4
    c5c0:	28800017 	ldw	r2,0(r5)
    c5c4:	10bffd04 	addi	r2,r2,-12
    c5c8:	11c7883a 	add	r3,r2,r7
    c5cc:	10000215 	stw	zero,8(r2)
    c5d0:	11c00015 	stw	r7,0(r2)
    c5d4:	18000305 	stb	zero,12(r3)
    c5d8:	00108600 	call	10860 <_Unwind_SjLj_Unregister>
    c5dc:	dfc01817 	ldw	ra,96(sp)
    c5e0:	df001717 	ldw	fp,92(sp)
    c5e4:	ddc01617 	ldw	r23,88(sp)
    c5e8:	dec01904 	addi	sp,sp,100
    c5ec:	f800283a 	ret
    c5f0:	d9001017 	ldw	r4,64(sp)
    c5f4:	203fef26 	beq	r4,zero,c5b4 <_ZNSs9_M_mutateEmmm+0xec>
    c5f8:	d9001517 	ldw	r4,84(sp)
    c5fc:	d9401417 	ldw	r5,80(sp)
    c600:	217fec26 	beq	r4,r5,c5b4 <_ZNSs9_M_mutateEmmm+0xec>
    c604:	d9c01317 	ldw	r7,76(sp)
    c608:	00800044 	movi	r2,1
    c60c:	31c7883a 	add	r3,r6,r7
    c610:	194b883a 	add	r5,r3,r5
    c614:	1909883a 	add	r4,r3,r4
    c618:	d8c01017 	ldw	r3,64(sp)
    c61c:	1880261e 	bne	r3,r2,c6b8 <_ZNSs9_M_mutateEmmm+0x1f0>
    c620:	28800003 	ldbu	r2,0(r5)
    c624:	20800005 	stb	r2,0(r4)
    c628:	003fe206 	br	c5b4 <_ZNSs9_M_mutateEmmm+0xec>
    c62c:	d9001217 	ldw	r4,72(sp)
    c630:	d9400f17 	ldw	r5,60(sp)
    c634:	d9c01317 	ldw	r7,76(sp)
    c638:	20800017 	ldw	r2,0(r4)
    c63c:	28c00304 	addi	r3,r5,12
    c640:	19c7883a 	add	r3,r3,r7
    c644:	3885883a 	add	r2,r7,r2
    c648:	d9401517 	ldw	r5,84(sp)
    c64c:	d9c01417 	ldw	r7,80(sp)
    c650:	1949883a 	add	r4,r3,r5
    c654:	11cb883a 	add	r5,r2,r7
    c658:	d8801017 	ldw	r2,64(sp)
    c65c:	00c00044 	movi	r3,1
    c660:	10c00d26 	beq	r2,r3,c698 <_ZNSs9_M_mutateEmmm+0x1d0>
    c664:	d9801017 	ldw	r6,64(sp)
    c668:	0013a240 	call	13a24 <memcpy>
    c66c:	003fc606 	br	c588 <_ZNSs9_M_mutateEmmm+0xc0>
    c670:	d9c01217 	ldw	r7,72(sp)
    c674:	11000304 	addi	r4,r2,12
    c678:	00800044 	movi	r2,1
    c67c:	39400017 	ldw	r5,0(r7)
    c680:	18800826 	beq	r3,r2,c6a4 <_ZNSs9_M_mutateEmmm+0x1dc>
    c684:	d9801317 	ldw	r6,76(sp)
    c688:	0013a240 	call	13a24 <memcpy>
    c68c:	d8c01017 	ldw	r3,64(sp)
    c690:	183fbd26 	beq	r3,zero,c588 <_ZNSs9_M_mutateEmmm+0xc0>
    c694:	003fe506 	br	c62c <_ZNSs9_M_mutateEmmm+0x164>
    c698:	28800003 	ldbu	r2,0(r5)
    c69c:	20800005 	stb	r2,0(r4)
    c6a0:	003fb906 	br	c588 <_ZNSs9_M_mutateEmmm+0xc0>
    c6a4:	28800003 	ldbu	r2,0(r5)
    c6a8:	20800005 	stb	r2,0(r4)
    c6ac:	d8c01017 	ldw	r3,64(sp)
    c6b0:	183fb526 	beq	r3,zero,c588 <_ZNSs9_M_mutateEmmm+0xc0>
    c6b4:	003fdd06 	br	c62c <_ZNSs9_M_mutateEmmm+0x164>
    c6b8:	d9801017 	ldw	r6,64(sp)
    c6bc:	0013ac40 	call	13ac4 <memmove>
    c6c0:	003fbc06 	br	c5b4 <_ZNSs9_M_mutateEmmm+0xec>
    c6c4:	d9400e17 	ldw	r5,56(sp)
    c6c8:	00800044 	movi	r2,1
    c6cc:	d8800215 	stw	r2,8(sp)
    c6d0:	29000204 	addi	r4,r5,8
    c6d4:	017fffc4 	movi	r5,-1
    c6d8:	000daa80 	call	daa8 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
    c6dc:	00bfb116 	blt	zero,r2,c5a4 <_ZNSs9_M_mutateEmmm+0xdc>
    c6e0:	d9000e17 	ldw	r4,56(sp)
    c6e4:	d80b883a 	mov	r5,sp
    c6e8:	000a5380 	call	a538 <_ZNSs4_Rep10_M_destroyERKSaIcE>
    c6ec:	003fad06 	br	c5a4 <_ZNSs9_M_mutateEmmm+0xdc>
    c6f0:	d9000317 	ldw	r4,12(sp)
    c6f4:	00bfffc4 	movi	r2,-1
    c6f8:	d8800215 	stw	r2,8(sp)
    c6fc:	0010b1c0 	call	10b1c <_Unwind_SjLj_Resume>

0000c700 <_ZNSs15_M_replace_safeEmmPKcm>:
    c700:	defffb04 	addi	sp,sp,-20
    c704:	dc000015 	stw	r16,0(sp)
    c708:	dc000517 	ldw	r16,20(sp)
    c70c:	dcc00315 	stw	r19,12(sp)
    c710:	3827883a 	mov	r19,r7
    c714:	800f883a 	mov	r7,r16
    c718:	dc800215 	stw	r18,8(sp)
    c71c:	dc400115 	stw	r17,4(sp)
    c720:	dfc00415 	stw	ra,16(sp)
    c724:	2025883a 	mov	r18,r4
    c728:	2823883a 	mov	r17,r5
    c72c:	000c4c80 	call	c4c8 <_ZNSs9_M_mutateEmmm>
    c730:	80000826 	beq	r16,zero,c754 <_ZNSs15_M_replace_safeEmmPKcm+0x54>
    c734:	90800017 	ldw	r2,0(r18)
    c738:	980b883a 	mov	r5,r19
    c73c:	800d883a 	mov	r6,r16
    c740:	8887883a 	add	r3,r17,r2
    c744:	00800044 	movi	r2,1
    c748:	1809883a 	mov	r4,r3
    c74c:	80800926 	beq	r16,r2,c774 <_ZNSs15_M_replace_safeEmmPKcm+0x74>
    c750:	0013a240 	call	13a24 <memcpy>
    c754:	9005883a 	mov	r2,r18
    c758:	dfc00417 	ldw	ra,16(sp)
    c75c:	dcc00317 	ldw	r19,12(sp)
    c760:	dc800217 	ldw	r18,8(sp)
    c764:	dc400117 	ldw	r17,4(sp)
    c768:	dc000017 	ldw	r16,0(sp)
    c76c:	dec00504 	addi	sp,sp,20
    c770:	f800283a 	ret
    c774:	98800003 	ldbu	r2,0(r19)
    c778:	18800005 	stb	r2,0(r3)
    c77c:	9005883a 	mov	r2,r18
    c780:	dfc00417 	ldw	ra,16(sp)
    c784:	dcc00317 	ldw	r19,12(sp)
    c788:	dc800217 	ldw	r18,8(sp)
    c78c:	dc400117 	ldw	r17,4(sp)
    c790:	dc000017 	ldw	r16,0(sp)
    c794:	dec00504 	addi	sp,sp,20
    c798:	f800283a 	ret

0000c79c <_ZNSs6assignEPKcm>:
    c79c:	defffc04 	addi	sp,sp,-16
    c7a0:	00900034 	movhi	r2,16384
    c7a4:	10bfff04 	addi	r2,r2,-4
    c7a8:	dc400215 	stw	r17,8(sp)
    c7ac:	dc000115 	stw	r16,4(sp)
    c7b0:	dfc00315 	stw	ra,12(sp)
    c7b4:	3023883a 	mov	r17,r6
    c7b8:	2021883a 	mov	r16,r4
    c7bc:	280f883a 	mov	r7,r5
    c7c0:	11803136 	bltu	r2,r6,c888 <_ZNSs6assignEPKcm+0xec>
    c7c4:	21000017 	ldw	r4,0(r4)
    c7c8:	29000c2e 	bgeu	r5,r4,c7fc <_ZNSs6assignEPKcm+0x60>
    c7cc:	21bffd17 	ldw	r6,-12(r4)
    c7d0:	000b883a 	mov	r5,zero
    c7d4:	8009883a 	mov	r4,r16
    c7d8:	dc400015 	stw	r17,0(sp)
    c7dc:	000c7000 	call	c700 <_ZNSs15_M_replace_safeEmmPKcm>
    c7e0:	1021883a 	mov	r16,r2
    c7e4:	8005883a 	mov	r2,r16
    c7e8:	dfc00317 	ldw	ra,12(sp)
    c7ec:	dc400217 	ldw	r17,8(sp)
    c7f0:	dc000117 	ldw	r16,4(sp)
    c7f4:	dec00404 	addi	sp,sp,16
    c7f8:	f800283a 	ret
    c7fc:	20bffd17 	ldw	r2,-12(r4)
    c800:	20fffd04 	addi	r3,r4,-12
    c804:	2085883a 	add	r2,r4,r2
    c808:	117ff036 	bltu	r2,r5,c7cc <_ZNSs6assignEPKcm+0x30>
    c80c:	18800217 	ldw	r2,8(r3)
    c810:	00bfee16 	blt	zero,r2,c7cc <_ZNSs6assignEPKcm+0x30>
    c814:	2905c83a 	sub	r2,r5,r4
    c818:	11800f36 	bltu	r2,r6,c858 <_ZNSs6assignEPKcm+0xbc>
    c81c:	00800044 	movi	r2,1
    c820:	88801526 	beq	r17,r2,c878 <_ZNSs6assignEPKcm+0xdc>
    c824:	0013a240 	call	13a24 <memcpy>
    c828:	81000017 	ldw	r4,0(r16)
    c82c:	20bffd04 	addi	r2,r4,-12
    c830:	1447883a 	add	r3,r2,r17
    c834:	10000215 	stw	zero,8(r2)
    c838:	247ffd15 	stw	r17,-12(r4)
    c83c:	8005883a 	mov	r2,r16
    c840:	18000305 	stb	zero,12(r3)
    c844:	dfc00317 	ldw	ra,12(sp)
    c848:	dc400217 	ldw	r17,8(sp)
    c84c:	dc000117 	ldw	r16,4(sp)
    c850:	dec00404 	addi	sp,sp,16
    c854:	f800283a 	ret
    c858:	103ff426 	beq	r2,zero,c82c <_ZNSs6assignEPKcm+0x90>
    c85c:	00800044 	movi	r2,1
    c860:	88800526 	beq	r17,r2,c878 <_ZNSs6assignEPKcm+0xdc>
    c864:	380b883a 	mov	r5,r7
    c868:	880d883a 	mov	r6,r17
    c86c:	0013ac40 	call	13ac4 <memmove>
    c870:	81000017 	ldw	r4,0(r16)
    c874:	003fed06 	br	c82c <_ZNSs6assignEPKcm+0x90>
    c878:	38800003 	ldbu	r2,0(r7)
    c87c:	20800005 	stb	r2,0(r4)
    c880:	81000017 	ldw	r4,0(r16)
    c884:	003fe906 	br	c82c <_ZNSs6assignEPKcm+0x90>
    c888:	010000b4 	movhi	r4,2
    c88c:	213ae704 	addi	r4,r4,-5220
    c890:	00088240 	call	8824 <_ZSt20__throw_length_errorPKc>

0000c894 <_ZNSs6assignEPKc>:
    c894:	defffd04 	addi	sp,sp,-12
    c898:	dcc00115 	stw	r19,4(sp)
    c89c:	dc400015 	stw	r17,0(sp)
    c8a0:	dfc00215 	stw	ra,8(sp)
    c8a4:	2023883a 	mov	r17,r4
    c8a8:	2809883a 	mov	r4,r5
    c8ac:	2827883a 	mov	r19,r5
    c8b0:	0014cac0 	call	14cac <strlen>
    c8b4:	980b883a 	mov	r5,r19
    c8b8:	8809883a 	mov	r4,r17
    c8bc:	100d883a 	mov	r6,r2
    c8c0:	dfc00217 	ldw	ra,8(sp)
    c8c4:	dcc00117 	ldw	r19,4(sp)
    c8c8:	dc400017 	ldw	r17,0(sp)
    c8cc:	dec00304 	addi	sp,sp,12
    c8d0:	000c79c1 	jmpi	c79c <_ZNSs6assignEPKcm>

0000c8d4 <_ZNSs6assignERKSsmm>:
    c8d4:	29400017 	ldw	r5,0(r5)
    c8d8:	deffff04 	addi	sp,sp,-4
    c8dc:	dfc00015 	stw	ra,0(sp)
    c8e0:	28bffd17 	ldw	r2,-12(r5)
    c8e4:	11800c36 	bltu	r2,r6,c918 <_ZNSs6assignERKSsmm+0x44>
    c8e8:	1185c83a 	sub	r2,r2,r6
    c8ec:	298b883a 	add	r5,r5,r6
    c8f0:	11c00436 	bltu	r2,r7,c904 <_ZNSs6assignERKSsmm+0x30>
    c8f4:	380d883a 	mov	r6,r7
    c8f8:	dfc00017 	ldw	ra,0(sp)
    c8fc:	dec00104 	addi	sp,sp,4
    c900:	000c79c1 	jmpi	c79c <_ZNSs6assignEPKcm>
    c904:	100f883a 	mov	r7,r2
    c908:	380d883a 	mov	r6,r7
    c90c:	dfc00017 	ldw	ra,0(sp)
    c910:	dec00104 	addi	sp,sp,4
    c914:	000c79c1 	jmpi	c79c <_ZNSs6assignEPKcm>
    c918:	010000b4 	movhi	r4,2
    c91c:	213ae704 	addi	r4,r4,-5220
    c920:	00086940 	call	8694 <_ZSt20__throw_out_of_rangePKc>

0000c924 <_ZNSsaSEPKc>:
    c924:	defffd04 	addi	sp,sp,-12
    c928:	dcc00115 	stw	r19,4(sp)
    c92c:	dc400015 	stw	r17,0(sp)
    c930:	dfc00215 	stw	ra,8(sp)
    c934:	2023883a 	mov	r17,r4
    c938:	2809883a 	mov	r4,r5
    c93c:	2827883a 	mov	r19,r5
    c940:	0014cac0 	call	14cac <strlen>
    c944:	980b883a 	mov	r5,r19
    c948:	8809883a 	mov	r4,r17
    c94c:	100d883a 	mov	r6,r2
    c950:	dfc00217 	ldw	ra,8(sp)
    c954:	dcc00117 	ldw	r19,4(sp)
    c958:	dc400017 	ldw	r17,0(sp)
    c95c:	dec00304 	addi	sp,sp,12
    c960:	000c79c1 	jmpi	c79c <_ZNSs6assignEPKcm>

0000c964 <_ZNSs14_M_replace_auxEmmmc>:
    c964:	20800017 	ldw	r2,0(r4)
    c968:	defffb04 	addi	sp,sp,-20
    c96c:	dcc00315 	stw	r19,12(sp)
    c970:	10fffd17 	ldw	r3,-12(r2)
    c974:	00900034 	movhi	r2,16384
    c978:	10bfff04 	addi	r2,r2,-4
    c97c:	dc800215 	stw	r18,8(sp)
    c980:	1987c83a 	sub	r3,r3,r6
    c984:	10c5c83a 	sub	r2,r2,r3
    c988:	dc400115 	stw	r17,4(sp)
    c98c:	dc000015 	stw	r16,0(sp)
    c990:	dfc00415 	stw	ra,16(sp)
    c994:	2023883a 	mov	r17,r4
    c998:	3821883a 	mov	r16,r7
    c99c:	2827883a 	mov	r19,r5
    c9a0:	dc800503 	ldbu	r18,20(sp)
    c9a4:	11c01f36 	bltu	r2,r7,ca24 <_ZNSs14_M_replace_auxEmmmc+0xc0>
    c9a8:	000c4c80 	call	c4c8 <_ZNSs9_M_mutateEmmm>
    c9ac:	80000c26 	beq	r16,zero,c9e0 <_ZNSs14_M_replace_auxEmmmc+0x7c>
    c9b0:	88800017 	ldw	r2,0(r17)
    c9b4:	90c03fcc 	andi	r3,r18,255
    c9b8:	18c0201c 	xori	r3,r3,128
    c9bc:	9889883a 	add	r4,r19,r2
    c9c0:	00800044 	movi	r2,1
    c9c4:	18ffe004 	addi	r3,r3,-128
    c9c8:	80800d26 	beq	r16,r2,ca00 <_ZNSs14_M_replace_auxEmmmc+0x9c>
    c9cc:	19403fcc 	andi	r5,r3,255
    c9d0:	2940201c 	xori	r5,r5,128
    c9d4:	297fe004 	addi	r5,r5,-128
    c9d8:	800d883a 	mov	r6,r16
    c9dc:	0013ba40 	call	13ba4 <memset>
    c9e0:	8805883a 	mov	r2,r17
    c9e4:	dfc00417 	ldw	ra,16(sp)
    c9e8:	dcc00317 	ldw	r19,12(sp)
    c9ec:	dc800217 	ldw	r18,8(sp)
    c9f0:	dc400117 	ldw	r17,4(sp)
    c9f4:	dc000017 	ldw	r16,0(sp)
    c9f8:	dec00504 	addi	sp,sp,20
    c9fc:	f800283a 	ret
    ca00:	8805883a 	mov	r2,r17
    ca04:	20c00005 	stb	r3,0(r4)
    ca08:	dfc00417 	ldw	ra,16(sp)
    ca0c:	dcc00317 	ldw	r19,12(sp)
    ca10:	dc800217 	ldw	r18,8(sp)
    ca14:	dc400117 	ldw	r17,4(sp)
    ca18:	dc000017 	ldw	r16,0(sp)
    ca1c:	dec00504 	addi	sp,sp,20
    ca20:	f800283a 	ret
    ca24:	010000b4 	movhi	r4,2
    ca28:	213aed04 	addi	r4,r4,-5196
    ca2c:	00088240 	call	8824 <_ZSt20__throw_length_errorPKc>

0000ca30 <_ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_mc>:
    ca30:	20800017 	ldw	r2,0(r4)
    ca34:	d8c00007 	ldb	r3,0(sp)
    ca38:	314dc83a 	sub	r6,r6,r5
    ca3c:	288bc83a 	sub	r5,r5,r2
    ca40:	d8c00015 	stw	r3,0(sp)
    ca44:	000c9641 	jmpi	c964 <_ZNSs14_M_replace_auxEmmmc>

0000ca48 <_ZNSs7replaceEmmmc>:
    ca48:	20800017 	ldw	r2,0(r4)
    ca4c:	deffff04 	addi	sp,sp,-4
    ca50:	dfc00015 	stw	ra,0(sp)
    ca54:	10fffd17 	ldw	r3,-12(r2)
    ca58:	d8800103 	ldbu	r2,4(sp)
    ca5c:	19401136 	bltu	r3,r5,caa4 <_ZNSs7replaceEmmmc+0x5c>
    ca60:	1947c83a 	sub	r3,r3,r5
    ca64:	19800736 	bltu	r3,r6,ca84 <_ZNSs7replaceEmmmc+0x3c>
    ca68:	10803fcc 	andi	r2,r2,255
    ca6c:	1080201c 	xori	r2,r2,128
    ca70:	10bfe004 	addi	r2,r2,-128
    ca74:	d8800115 	stw	r2,4(sp)
    ca78:	dfc00017 	ldw	ra,0(sp)
    ca7c:	dec00104 	addi	sp,sp,4
    ca80:	000c9641 	jmpi	c964 <_ZNSs14_M_replace_auxEmmmc>
    ca84:	10803fcc 	andi	r2,r2,255
    ca88:	1080201c 	xori	r2,r2,128
    ca8c:	10bfe004 	addi	r2,r2,-128
    ca90:	180d883a 	mov	r6,r3
    ca94:	d8800115 	stw	r2,4(sp)
    ca98:	dfc00017 	ldw	ra,0(sp)
    ca9c:	dec00104 	addi	sp,sp,4
    caa0:	000c9641 	jmpi	c964 <_ZNSs14_M_replace_auxEmmmc>
    caa4:	010000b4 	movhi	r4,2
    caa8:	213af504 	addi	r4,r4,-5164
    caac:	00086940 	call	8694 <_ZSt20__throw_out_of_rangePKc>

0000cab0 <_ZNSs6insertEN9__gnu_cxx17__normal_iteratorIPcSsEEc>:
    cab0:	20800017 	ldw	r2,0(r4)
    cab4:	defffc04 	addi	sp,sp,-16
    cab8:	30c03fcc 	andi	r3,r6,255
    cabc:	dc000115 	stw	r16,4(sp)
    cac0:	18c0201c 	xori	r3,r3,128
    cac4:	28a1c83a 	sub	r16,r5,r2
    cac8:	dc400215 	stw	r17,8(sp)
    cacc:	18ffe004 	addi	r3,r3,-128
    cad0:	2023883a 	mov	r17,r4
    cad4:	01c00044 	movi	r7,1
    cad8:	800b883a 	mov	r5,r16
    cadc:	000d883a 	mov	r6,zero
    cae0:	d8c00015 	stw	r3,0(sp)
    cae4:	dfc00315 	stw	ra,12(sp)
    cae8:	000c9640 	call	c964 <_ZNSs14_M_replace_auxEmmmc>
    caec:	88800017 	ldw	r2,0(r17)
    caf0:	00ffffc4 	movi	r3,-1
    caf4:	10ffff15 	stw	r3,-4(r2)
    caf8:	1405883a 	add	r2,r2,r16
    cafc:	dfc00317 	ldw	ra,12(sp)
    cb00:	dc400217 	ldw	r17,8(sp)
    cb04:	dc000117 	ldw	r16,4(sp)
    cb08:	dec00404 	addi	sp,sp,16
    cb0c:	f800283a 	ret

0000cb10 <_ZNSs6insertEmmc>:
    cb10:	20c00017 	ldw	r3,0(r4)
    cb14:	defffe04 	addi	sp,sp,-8
    cb18:	dfc00115 	stw	ra,4(sp)
    cb1c:	18bffd17 	ldw	r2,-12(r3)
    cb20:	11400a36 	bltu	r2,r5,cb4c <_ZNSs6insertEmmc+0x3c>
    cb24:	38803fcc 	andi	r2,r7,255
    cb28:	1080201c 	xori	r2,r2,128
    cb2c:	300f883a 	mov	r7,r6
    cb30:	10bfe004 	addi	r2,r2,-128
    cb34:	000d883a 	mov	r6,zero
    cb38:	d8800015 	stw	r2,0(sp)
    cb3c:	000c9640 	call	c964 <_ZNSs14_M_replace_auxEmmmc>
    cb40:	dfc00117 	ldw	ra,4(sp)
    cb44:	dec00204 	addi	sp,sp,8
    cb48:	f800283a 	ret
    cb4c:	010000b4 	movhi	r4,2
    cb50:	213afb04 	addi	r4,r4,-5140
    cb54:	00086940 	call	8694 <_ZSt20__throw_out_of_rangePKc>

0000cb58 <_ZNSs6assignEmc>:
    cb58:	20800017 	ldw	r2,0(r4)
    cb5c:	30c03fcc 	andi	r3,r6,255
    cb60:	18c0201c 	xori	r3,r3,128
    cb64:	11bffd17 	ldw	r6,-12(r2)
    cb68:	defffe04 	addi	sp,sp,-8
    cb6c:	280f883a 	mov	r7,r5
    cb70:	18ffe004 	addi	r3,r3,-128
    cb74:	000b883a 	mov	r5,zero
    cb78:	dfc00115 	stw	ra,4(sp)
    cb7c:	d8c00015 	stw	r3,0(sp)
    cb80:	000c9640 	call	c964 <_ZNSs14_M_replace_auxEmmmc>
    cb84:	dfc00117 	ldw	ra,4(sp)
    cb88:	dec00204 	addi	sp,sp,8
    cb8c:	f800283a 	ret

0000cb90 <_ZNSsaSEc>:
    cb90:	20800017 	ldw	r2,0(r4)
    cb94:	28c03fcc 	andi	r3,r5,255
    cb98:	18c0201c 	xori	r3,r3,128
    cb9c:	11bffd17 	ldw	r6,-12(r2)
    cba0:	defffd04 	addi	sp,sp,-12
    cba4:	18ffe004 	addi	r3,r3,-128
    cba8:	01c00044 	movi	r7,1
    cbac:	000b883a 	mov	r5,zero
    cbb0:	dc400115 	stw	r17,4(sp)
    cbb4:	dfc00215 	stw	ra,8(sp)
    cbb8:	2023883a 	mov	r17,r4
    cbbc:	d8c00015 	stw	r3,0(sp)
    cbc0:	000c9640 	call	c964 <_ZNSs14_M_replace_auxEmmmc>
    cbc4:	8805883a 	mov	r2,r17
    cbc8:	dfc00217 	ldw	ra,8(sp)
    cbcc:	dc400117 	ldw	r17,4(sp)
    cbd0:	dec00304 	addi	sp,sp,12
    cbd4:	f800283a 	ret

0000cbd8 <_ZNSs6insertEN9__gnu_cxx17__normal_iteratorIPcSsEEmc>:
    cbd8:	20800017 	ldw	r2,0(r4)
    cbdc:	3a003fcc 	andi	r8,r7,255
    cbe0:	4200201c 	xori	r8,r8,128
    cbe4:	defffe04 	addi	sp,sp,-8
    cbe8:	423fe004 	addi	r8,r8,-128
    cbec:	300f883a 	mov	r7,r6
    cbf0:	288bc83a 	sub	r5,r5,r2
    cbf4:	000d883a 	mov	r6,zero
    cbf8:	dfc00115 	stw	ra,4(sp)
    cbfc:	da000015 	stw	r8,0(sp)
    cc00:	000c9640 	call	c964 <_ZNSs14_M_replace_auxEmmmc>
    cc04:	dfc00117 	ldw	ra,4(sp)
    cc08:	dec00204 	addi	sp,sp,8
    cc0c:	f800283a 	ret

0000cc10 <_ZNSs5eraseEN9__gnu_cxx17__normal_iteratorIPcSsEES2_>:
    cc10:	20800017 	ldw	r2,0(r4)
    cc14:	defffd04 	addi	sp,sp,-12
    cc18:	dc400015 	stw	r17,0(sp)
    cc1c:	28a3c83a 	sub	r17,r5,r2
    cc20:	dc800115 	stw	r18,4(sp)
    cc24:	314dc83a 	sub	r6,r6,r5
    cc28:	2025883a 	mov	r18,r4
    cc2c:	880b883a 	mov	r5,r17
    cc30:	000f883a 	mov	r7,zero
    cc34:	dfc00215 	stw	ra,8(sp)
    cc38:	000c4c80 	call	c4c8 <_ZNSs9_M_mutateEmmm>
    cc3c:	90800017 	ldw	r2,0(r18)
    cc40:	00ffffc4 	movi	r3,-1
    cc44:	10ffff15 	stw	r3,-4(r2)
    cc48:	1445883a 	add	r2,r2,r17
    cc4c:	dfc00217 	ldw	ra,8(sp)
    cc50:	dc800117 	ldw	r18,4(sp)
    cc54:	dc400017 	ldw	r17,0(sp)
    cc58:	dec00304 	addi	sp,sp,12
    cc5c:	f800283a 	ret

0000cc60 <_ZNSs5eraseEN9__gnu_cxx17__normal_iteratorIPcSsEE>:
    cc60:	20800017 	ldw	r2,0(r4)
    cc64:	defffd04 	addi	sp,sp,-12
    cc68:	dc000015 	stw	r16,0(sp)
    cc6c:	28a1c83a 	sub	r16,r5,r2
    cc70:	dc400115 	stw	r17,4(sp)
    cc74:	01800044 	movi	r6,1
    cc78:	2023883a 	mov	r17,r4
    cc7c:	000f883a 	mov	r7,zero
    cc80:	800b883a 	mov	r5,r16
    cc84:	dfc00215 	stw	ra,8(sp)
    cc88:	000c4c80 	call	c4c8 <_ZNSs9_M_mutateEmmm>
    cc8c:	88800017 	ldw	r2,0(r17)
    cc90:	00ffffc4 	movi	r3,-1
    cc94:	10ffff15 	stw	r3,-4(r2)
    cc98:	1405883a 	add	r2,r2,r16
    cc9c:	dfc00217 	ldw	ra,8(sp)
    cca0:	dc400117 	ldw	r17,4(sp)
    cca4:	dc000017 	ldw	r16,0(sp)
    cca8:	dec00304 	addi	sp,sp,12
    ccac:	f800283a 	ret

0000ccb0 <_ZNSs5eraseEmm>:
    ccb0:	20800017 	ldw	r2,0(r4)
    ccb4:	defffe04 	addi	sp,sp,-8
    ccb8:	dc000015 	stw	r16,0(sp)
    ccbc:	10bffd17 	ldw	r2,-12(r2)
    ccc0:	dfc00115 	stw	ra,4(sp)
    ccc4:	2021883a 	mov	r16,r4
    ccc8:	11401136 	bltu	r2,r5,cd10 <_ZNSs5eraseEmm+0x60>
    cccc:	1145c83a 	sub	r2,r2,r5
    ccd0:	11800736 	bltu	r2,r6,ccf0 <_ZNSs5eraseEmm+0x40>
    ccd4:	000f883a 	mov	r7,zero
    ccd8:	000c4c80 	call	c4c8 <_ZNSs9_M_mutateEmmm>
    ccdc:	8005883a 	mov	r2,r16
    cce0:	dfc00117 	ldw	ra,4(sp)
    cce4:	dc000017 	ldw	r16,0(sp)
    cce8:	dec00204 	addi	sp,sp,8
    ccec:	f800283a 	ret
    ccf0:	100d883a 	mov	r6,r2
    ccf4:	000f883a 	mov	r7,zero
    ccf8:	000c4c80 	call	c4c8 <_ZNSs9_M_mutateEmmm>
    ccfc:	8005883a 	mov	r2,r16
    cd00:	dfc00117 	ldw	ra,4(sp)
    cd04:	dc000017 	ldw	r16,0(sp)
    cd08:	dec00204 	addi	sp,sp,8
    cd0c:	f800283a 	ret
    cd10:	010000b4 	movhi	r4,2
    cd14:	213b0104 	addi	r4,r4,-5116
    cd18:	00086940 	call	8694 <_ZSt20__throw_out_of_rangePKc>

0000cd1c <_ZNSs6insertEmPKcm>:
    cd1c:	defff904 	addi	sp,sp,-28
    cd20:	dc000115 	stw	r16,4(sp)
    cd24:	24000017 	ldw	r16,0(r4)
    cd28:	dd000515 	stw	r20,20(sp)
    cd2c:	dcc00415 	stw	r19,16(sp)
    cd30:	80fffd17 	ldw	r3,-12(r16)
    cd34:	dc800315 	stw	r18,12(sp)
    cd38:	dc400215 	stw	r17,8(sp)
    cd3c:	dfc00615 	stw	ra,24(sp)
    cd40:	3023883a 	mov	r17,r6
    cd44:	2029883a 	mov	r20,r4
    cd48:	2825883a 	mov	r18,r5
    cd4c:	3827883a 	mov	r19,r7
    cd50:	81bffd04 	addi	r6,r16,-12
    cd54:	19403d36 	bltu	r3,r5,ce4c <_ZNSs6insertEmPKcm+0x130>
    cd58:	00900034 	movhi	r2,16384
    cd5c:	10bfff04 	addi	r2,r2,-4
    cd60:	10c5c83a 	sub	r2,r2,r3
    cd64:	11c03c36 	bltu	r2,r7,ce58 <_ZNSs6insertEmPKcm+0x13c>
    cd68:	8c00102e 	bgeu	r17,r16,cdac <_ZNSs6insertEmPKcm+0x90>
    cd6c:	a009883a 	mov	r4,r20
    cd70:	900b883a 	mov	r5,r18
    cd74:	880f883a 	mov	r7,r17
    cd78:	000d883a 	mov	r6,zero
    cd7c:	dcc00015 	stw	r19,0(sp)
    cd80:	000c7000 	call	c700 <_ZNSs15_M_replace_safeEmmPKcm>
    cd84:	1029883a 	mov	r20,r2
    cd88:	a005883a 	mov	r2,r20
    cd8c:	dfc00617 	ldw	ra,24(sp)
    cd90:	dd000517 	ldw	r20,20(sp)
    cd94:	dcc00417 	ldw	r19,16(sp)
    cd98:	dc800317 	ldw	r18,12(sp)
    cd9c:	dc400217 	ldw	r17,8(sp)
    cda0:	dc000117 	ldw	r16,4(sp)
    cda4:	dec00704 	addi	sp,sp,28
    cda8:	f800283a 	ret
    cdac:	80c5883a 	add	r2,r16,r3
    cdb0:	147fee36 	bltu	r2,r17,cd6c <_ZNSs6insertEmPKcm+0x50>
    cdb4:	30800217 	ldw	r2,8(r6)
    cdb8:	00bfec16 	blt	zero,r2,cd6c <_ZNSs6insertEmPKcm+0x50>
    cdbc:	000d883a 	mov	r6,zero
    cdc0:	000c4c80 	call	c4c8 <_ZNSs9_M_mutateEmmm>
    cdc4:	a0c00017 	ldw	r3,0(r20)
    cdc8:	8c05c83a 	sub	r2,r17,r16
    cdcc:	188b883a 	add	r5,r3,r2
    cdd0:	1ca1883a 	add	r16,r3,r18
    cdd4:	2cc7883a 	add	r3,r5,r19
    cdd8:	80c0062e 	bgeu	r16,r3,cdf4 <_ZNSs6insertEmPKcm+0xd8>
    cddc:	2c000e36 	bltu	r5,r16,ce18 <_ZNSs6insertEmPKcm+0xfc>
    cde0:	00800044 	movi	r2,1
    cde4:	98801f1e 	bne	r19,r2,ce64 <_ZNSs6insertEmPKcm+0x148>
    cde8:	18800003 	ldbu	r2,0(r3)
    cdec:	80800005 	stb	r2,0(r16)
    cdf0:	003fe506 	br	cd88 <_ZNSs6insertEmPKcm+0x6c>
    cdf4:	00800044 	movi	r2,1
    cdf8:	9880031e 	bne	r19,r2,ce08 <_ZNSs6insertEmPKcm+0xec>
    cdfc:	28800003 	ldbu	r2,0(r5)
    ce00:	80800005 	stb	r2,0(r16)
    ce04:	003fe006 	br	cd88 <_ZNSs6insertEmPKcm+0x6c>
    ce08:	8009883a 	mov	r4,r16
    ce0c:	980d883a 	mov	r6,r19
    ce10:	0013a240 	call	13a24 <memcpy>
    ce14:	003fdc06 	br	cd88 <_ZNSs6insertEmPKcm+0x6c>
    ce18:	8163c83a 	sub	r17,r16,r5
    ce1c:	00800044 	movi	r2,1
    ce20:	8880171e 	bne	r17,r2,ce80 <_ZNSs6insertEmPKcm+0x164>
    ce24:	28800003 	ldbu	r2,0(r5)
    ce28:	80800005 	stb	r2,0(r16)
    ce2c:	9c4dc83a 	sub	r6,r19,r17
    ce30:	00800044 	movi	r2,1
    ce34:	84cb883a 	add	r5,r16,r19
    ce38:	8449883a 	add	r4,r16,r17
    ce3c:	30800e1e 	bne	r6,r2,ce78 <_ZNSs6insertEmPKcm+0x15c>
    ce40:	28800003 	ldbu	r2,0(r5)
    ce44:	20800005 	stb	r2,0(r4)
    ce48:	003fcf06 	br	cd88 <_ZNSs6insertEmPKcm+0x6c>
    ce4c:	010000b4 	movhi	r4,2
    ce50:	213afb04 	addi	r4,r4,-5140
    ce54:	00086940 	call	8694 <_ZSt20__throw_out_of_rangePKc>
    ce58:	010000b4 	movhi	r4,2
    ce5c:	213afb04 	addi	r4,r4,-5140
    ce60:	00088240 	call	8824 <_ZSt20__throw_length_errorPKc>
    ce64:	8009883a 	mov	r4,r16
    ce68:	180b883a 	mov	r5,r3
    ce6c:	980d883a 	mov	r6,r19
    ce70:	0013a240 	call	13a24 <memcpy>
    ce74:	003fc406 	br	cd88 <_ZNSs6insertEmPKcm+0x6c>
    ce78:	0013a240 	call	13a24 <memcpy>
    ce7c:	003fc206 	br	cd88 <_ZNSs6insertEmPKcm+0x6c>
    ce80:	8009883a 	mov	r4,r16
    ce84:	880d883a 	mov	r6,r17
    ce88:	0013a240 	call	13a24 <memcpy>
    ce8c:	003fe706 	br	ce2c <_ZNSs6insertEmPKcm+0x110>

0000ce90 <_ZNSs6insertEmPKc>:
    ce90:	defffc04 	addi	sp,sp,-16
    ce94:	dd400215 	stw	r21,8(sp)
    ce98:	dcc00115 	stw	r19,4(sp)
    ce9c:	dc400015 	stw	r17,0(sp)
    cea0:	2027883a 	mov	r19,r4
    cea4:	dfc00315 	stw	ra,12(sp)
    cea8:	3009883a 	mov	r4,r6
    ceac:	3023883a 	mov	r17,r6
    ceb0:	282b883a 	mov	r21,r5
    ceb4:	0014cac0 	call	14cac <strlen>
    ceb8:	a80b883a 	mov	r5,r21
    cebc:	9809883a 	mov	r4,r19
    cec0:	880d883a 	mov	r6,r17
    cec4:	100f883a 	mov	r7,r2
    cec8:	dfc00317 	ldw	ra,12(sp)
    cecc:	dd400217 	ldw	r21,8(sp)
    ced0:	dcc00117 	ldw	r19,4(sp)
    ced4:	dc400017 	ldw	r17,0(sp)
    ced8:	dec00404 	addi	sp,sp,16
    cedc:	000cd1c1 	jmpi	cd1c <_ZNSs6insertEmPKcm>

0000cee0 <_ZNSs6insertEmRKSsmm>:
    cee0:	31800017 	ldw	r6,0(r6)
    cee4:	deffff04 	addi	sp,sp,-4
    cee8:	3805883a 	mov	r2,r7
    ceec:	30fffd17 	ldw	r3,-12(r6)
    cef0:	dfc00015 	stw	ra,0(sp)
    cef4:	d9c00117 	ldw	r7,4(sp)
    cef8:	18800a36 	bltu	r3,r2,cf24 <_ZNSs6insertEmRKSsmm+0x44>
    cefc:	1887c83a 	sub	r3,r3,r2
    cf00:	308d883a 	add	r6,r6,r2
    cf04:	19c00336 	bltu	r3,r7,cf14 <_ZNSs6insertEmRKSsmm+0x34>
    cf08:	dfc00017 	ldw	ra,0(sp)
    cf0c:	dec00104 	addi	sp,sp,4
    cf10:	000cd1c1 	jmpi	cd1c <_ZNSs6insertEmPKcm>
    cf14:	180f883a 	mov	r7,r3
    cf18:	dfc00017 	ldw	ra,0(sp)
    cf1c:	dec00104 	addi	sp,sp,4
    cf20:	000cd1c1 	jmpi	cd1c <_ZNSs6insertEmPKcm>
    cf24:	010000b4 	movhi	r4,2
    cf28:	213afb04 	addi	r4,r4,-5140
    cf2c:	00086940 	call	8694 <_ZSt20__throw_out_of_rangePKc>

0000cf30 <_ZNSs6insertEmRKSs>:
    cf30:	31800017 	ldw	r6,0(r6)
    cf34:	31fffd17 	ldw	r7,-12(r6)
    cf38:	000cd1c1 	jmpi	cd1c <_ZNSs6insertEmPKcm>

0000cf3c <_ZNSs5clearEv>:
    cf3c:	20800017 	ldw	r2,0(r4)
    cf40:	000b883a 	mov	r5,zero
    cf44:	000f883a 	mov	r7,zero
    cf48:	11bffd17 	ldw	r6,-12(r2)
    cf4c:	000c4c81 	jmpi	c4c8 <_ZNSs9_M_mutateEmmm>

0000cf50 <_ZNSs12_M_leak_hardEv>:
    cf50:	22000017 	ldw	r8,0(r4)
    cf54:	defffe04 	addi	sp,sp,-8
    cf58:	008000b4 	movhi	r2,2
    cf5c:	108ac004 	addi	r2,r2,11008
    cf60:	40fffd04 	addi	r3,r8,-12
    cf64:	dc000015 	stw	r16,0(sp)
    cf68:	dfc00115 	stw	ra,4(sp)
    cf6c:	2021883a 	mov	r16,r4
    cf70:	18800726 	beq	r3,r2,cf90 <_ZNSs12_M_leak_hardEv+0x40>
    cf74:	18800217 	ldw	r2,8(r3)
    cf78:	000b883a 	mov	r5,zero
    cf7c:	000d883a 	mov	r6,zero
    cf80:	000f883a 	mov	r7,zero
    cf84:	00800616 	blt	zero,r2,cfa0 <_ZNSs12_M_leak_hardEv+0x50>
    cf88:	00bfffc4 	movi	r2,-1
    cf8c:	40bfff15 	stw	r2,-4(r8)
    cf90:	dfc00117 	ldw	ra,4(sp)
    cf94:	dc000017 	ldw	r16,0(sp)
    cf98:	dec00204 	addi	sp,sp,8
    cf9c:	f800283a 	ret
    cfa0:	000c4c80 	call	c4c8 <_ZNSs9_M_mutateEmmm>
    cfa4:	82000017 	ldw	r8,0(r16)
    cfa8:	003ff706 	br	cf88 <_ZNSs12_M_leak_hardEv+0x38>

0000cfac <_ZNSs7_M_leakEv>:
    cfac:	20800017 	ldw	r2,0(r4)
    cfb0:	10ffff17 	ldw	r3,-4(r2)
    cfb4:	1800010e 	bge	r3,zero,cfbc <_ZNSs7_M_leakEv+0x10>
    cfb8:	f800283a 	ret
    cfbc:	000cf501 	jmpi	cf50 <_ZNSs12_M_leak_hardEv>

0000cfc0 <_ZNSs2atEm>:
    cfc0:	20c00017 	ldw	r3,0(r4)
    cfc4:	defffd04 	addi	sp,sp,-12
    cfc8:	dc000015 	stw	r16,0(sp)
    cfcc:	18bffd17 	ldw	r2,-12(r3)
    cfd0:	2821883a 	mov	r16,r5
    cfd4:	dc400115 	stw	r17,4(sp)
    cfd8:	dfc00215 	stw	ra,8(sp)
    cfdc:	2023883a 	mov	r17,r4
    cfe0:	197ffd04 	addi	r5,r3,-12
    cfe4:	80800a2e 	bgeu	r16,r2,d010 <_ZNSs2atEm+0x50>
    cfe8:	28800217 	ldw	r2,8(r5)
    cfec:	10000216 	blt	r2,zero,cff8 <_ZNSs2atEm+0x38>
    cff0:	000cf500 	call	cf50 <_ZNSs12_M_leak_hardEv>
    cff4:	88c00017 	ldw	r3,0(r17)
    cff8:	80c5883a 	add	r2,r16,r3
    cffc:	dfc00217 	ldw	ra,8(sp)
    d000:	dc400117 	ldw	r17,4(sp)
    d004:	dc000017 	ldw	r16,0(sp)
    d008:	dec00304 	addi	sp,sp,12
    d00c:	f800283a 	ret
    d010:	010000b4 	movhi	r4,2
    d014:	213ab304 	addi	r4,r4,-5428
    d018:	00086940 	call	8694 <_ZSt20__throw_out_of_rangePKc>

0000d01c <_ZNSsixEm>:
    d01c:	20c00017 	ldw	r3,0(r4)
    d020:	defffd04 	addi	sp,sp,-12
    d024:	dc400115 	stw	r17,4(sp)
    d028:	18bfff17 	ldw	r2,-4(r3)
    d02c:	dc000015 	stw	r16,0(sp)
    d030:	dfc00215 	stw	ra,8(sp)
    d034:	2021883a 	mov	r16,r4
    d038:	2823883a 	mov	r17,r5
    d03c:	10000216 	blt	r2,zero,d048 <_ZNSsixEm+0x2c>
    d040:	000cf500 	call	cf50 <_ZNSs12_M_leak_hardEv>
    d044:	80c00017 	ldw	r3,0(r16)
    d048:	88c5883a 	add	r2,r17,r3
    d04c:	dfc00217 	ldw	ra,8(sp)
    d050:	dc400117 	ldw	r17,4(sp)
    d054:	dc000017 	ldw	r16,0(sp)
    d058:	dec00304 	addi	sp,sp,12
    d05c:	f800283a 	ret

0000d060 <_ZNSs3endEv>:
    d060:	20c00017 	ldw	r3,0(r4)
    d064:	defffe04 	addi	sp,sp,-8
    d068:	dc000015 	stw	r16,0(sp)
    d06c:	18bfff17 	ldw	r2,-4(r3)
    d070:	dfc00115 	stw	ra,4(sp)
    d074:	2021883a 	mov	r16,r4
    d078:	10000216 	blt	r2,zero,d084 <_ZNSs3endEv+0x24>
    d07c:	000cf500 	call	cf50 <_ZNSs12_M_leak_hardEv>
    d080:	80c00017 	ldw	r3,0(r16)
    d084:	18bffd17 	ldw	r2,-12(r3)
    d088:	1885883a 	add	r2,r3,r2
    d08c:	dfc00117 	ldw	ra,4(sp)
    d090:	dc000017 	ldw	r16,0(sp)
    d094:	dec00204 	addi	sp,sp,8
    d098:	f800283a 	ret

0000d09c <_ZNSs5beginEv>:
    d09c:	20c00017 	ldw	r3,0(r4)
    d0a0:	defffe04 	addi	sp,sp,-8
    d0a4:	dc000015 	stw	r16,0(sp)
    d0a8:	18bfff17 	ldw	r2,-4(r3)
    d0ac:	dfc00115 	stw	ra,4(sp)
    d0b0:	2021883a 	mov	r16,r4
    d0b4:	10000216 	blt	r2,zero,d0c0 <_ZNSs5beginEv+0x24>
    d0b8:	000cf500 	call	cf50 <_ZNSs12_M_leak_hardEv>
    d0bc:	80c00017 	ldw	r3,0(r16)
    d0c0:	1805883a 	mov	r2,r3
    d0c4:	dfc00117 	ldw	ra,4(sp)
    d0c8:	dc000017 	ldw	r16,0(sp)
    d0cc:	dec00204 	addi	sp,sp,8
    d0d0:	f800283a 	ret

0000d0d4 <_ZNSs4rendEv>:
    d0d4:	28c00017 	ldw	r3,0(r5)
    d0d8:	defffd04 	addi	sp,sp,-12
    d0dc:	dc400115 	stw	r17,4(sp)
    d0e0:	18bfff17 	ldw	r2,-4(r3)
    d0e4:	dc000015 	stw	r16,0(sp)
    d0e8:	2023883a 	mov	r17,r4
    d0ec:	dfc00215 	stw	ra,8(sp)
    d0f0:	2821883a 	mov	r16,r5
    d0f4:	2809883a 	mov	r4,r5
    d0f8:	10000216 	blt	r2,zero,d104 <_ZNSs4rendEv+0x30>
    d0fc:	000cf500 	call	cf50 <_ZNSs12_M_leak_hardEv>
    d100:	80c00017 	ldw	r3,0(r16)
    d104:	8805883a 	mov	r2,r17
    d108:	88c00015 	stw	r3,0(r17)
    d10c:	dfc00217 	ldw	ra,8(sp)
    d110:	dc400117 	ldw	r17,4(sp)
    d114:	dc000017 	ldw	r16,0(sp)
    d118:	dec00304 	addi	sp,sp,12
    d11c:	f800283a 	ret

0000d120 <_ZNSs6rbeginEv>:
    d120:	defffd04 	addi	sp,sp,-12
    d124:	dc000015 	stw	r16,0(sp)
    d128:	2821883a 	mov	r16,r5
    d12c:	29400017 	ldw	r5,0(r5)
    d130:	dc400115 	stw	r17,4(sp)
    d134:	dfc00215 	stw	ra,8(sp)
    d138:	28bfff17 	ldw	r2,-4(r5)
    d13c:	2023883a 	mov	r17,r4
    d140:	8009883a 	mov	r4,r16
    d144:	10000216 	blt	r2,zero,d150 <_ZNSs6rbeginEv+0x30>
    d148:	000cf500 	call	cf50 <_ZNSs12_M_leak_hardEv>
    d14c:	81400017 	ldw	r5,0(r16)
    d150:	28fffd17 	ldw	r3,-12(r5)
    d154:	8805883a 	mov	r2,r17
    d158:	28c7883a 	add	r3,r5,r3
    d15c:	88c00015 	stw	r3,0(r17)
    d160:	dfc00217 	ldw	ra,8(sp)
    d164:	dc400117 	ldw	r17,4(sp)
    d168:	dc000017 	ldw	r16,0(sp)
    d16c:	dec00304 	addi	sp,sp,12
    d170:	f800283a 	ret

0000d174 <_ZNSs6resizeEmc>:
    d174:	20c00017 	ldw	r3,0(r4)
    d178:	deffff04 	addi	sp,sp,-4
    d17c:	00900034 	movhi	r2,16384
    d180:	10bfff04 	addi	r2,r2,-4
    d184:	3011883a 	mov	r8,r6
    d188:	dfc00015 	stw	ra,0(sp)
    d18c:	19bffd17 	ldw	r6,-12(r3)
    d190:	11401136 	bltu	r2,r5,d1d8 <_ZNSs6resizeEmc+0x64>
    d194:	31400936 	bltu	r6,r5,d1bc <_ZNSs6resizeEmc+0x48>
    d198:	29800336 	bltu	r5,r6,d1a8 <_ZNSs6resizeEmc+0x34>
    d19c:	dfc00017 	ldw	ra,0(sp)
    d1a0:	dec00104 	addi	sp,sp,4
    d1a4:	f800283a 	ret
    d1a8:	314dc83a 	sub	r6,r6,r5
    d1ac:	000f883a 	mov	r7,zero
    d1b0:	dfc00017 	ldw	ra,0(sp)
    d1b4:	dec00104 	addi	sp,sp,4
    d1b8:	000c4c81 	jmpi	c4c8 <_ZNSs9_M_mutateEmmm>
    d1bc:	298bc83a 	sub	r5,r5,r6
    d1c0:	41803fcc 	andi	r6,r8,255
    d1c4:	3180201c 	xori	r6,r6,128
    d1c8:	31bfe004 	addi	r6,r6,-128
    d1cc:	dfc00017 	ldw	ra,0(sp)
    d1d0:	dec00104 	addi	sp,sp,4
    d1d4:	000beb01 	jmpi	beb0 <_ZNSs6appendEmc>
    d1d8:	010000b4 	movhi	r4,2
    d1dc:	213b0604 	addi	r4,r4,-5096
    d1e0:	00088240 	call	8824 <_ZSt20__throw_length_errorPKc>

0000d1e4 <_ZNSs6resizeEm>:
    d1e4:	000d883a 	mov	r6,zero
    d1e8:	000d1741 	jmpi	d174 <_ZNSs6resizeEmc>

0000d1ec <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_EPKS3_RKS6_>:
    d1ec:	deffe804 	addi	sp,sp,-96
    d1f0:	00800074 	movhi	r2,1
    d1f4:	10b95604 	addi	r2,r2,-6824
    d1f8:	00c000b4 	movhi	r3,2
    d1fc:	18f9a144 	addi	r3,r3,-6523
    d200:	d8800715 	stw	r2,28(sp)
    d204:	d9001115 	stw	r4,68(sp)
    d208:	00800074 	movhi	r2,1
    d20c:	10b4b104 	addi	r2,r2,-11580
    d210:	d9000104 	addi	r4,sp,4
    d214:	d8c00815 	stw	r3,32(sp)
    d218:	d9401215 	stw	r5,72(sp)
    d21c:	dfc01715 	stw	ra,92(sp)
    d220:	d8800a15 	stw	r2,40(sp)
    d224:	d9801315 	stw	r6,76(sp)
    d228:	df001615 	stw	fp,88(sp)
    d22c:	ddc01515 	stw	r23,84(sp)
    d230:	dec00915 	stw	sp,36(sp)
    d234:	dec00b15 	stw	sp,44(sp)
    d238:	00108500 	call	10850 <_Unwind_SjLj_Register>
    d23c:	d9001217 	ldw	r4,72(sp)
    d240:	0014cac0 	call	14cac <strlen>
    d244:	00c000b4 	movhi	r3,2
    d248:	18cac004 	addi	r3,r3,11008
    d24c:	d8801415 	stw	r2,80(sp)
    d250:	18800304 	addi	r2,r3,12
    d254:	d8c01117 	ldw	r3,68(sp)
    d258:	d9001117 	ldw	r4,68(sp)
    d25c:	18800015 	stw	r2,0(r3)
    d260:	d8801317 	ldw	r2,76(sp)
    d264:	10c00017 	ldw	r3,0(r2)
    d268:	d8801117 	ldw	r2,68(sp)
    d26c:	197ffd17 	ldw	r5,-12(r3)
    d270:	d8c01417 	ldw	r3,80(sp)
    d274:	d8800f15 	stw	r2,60(sp)
    d278:	00800084 	movi	r2,2
    d27c:	d8800215 	stw	r2,8(sp)
    d280:	194b883a 	add	r5,r3,r5
    d284:	000bd000 	call	bd00 <_ZNSs7reserveEm>
    d288:	d9001117 	ldw	r4,68(sp)
    d28c:	d9401217 	ldw	r5,72(sp)
    d290:	d9801417 	ldw	r6,80(sp)
    d294:	000bf900 	call	bf90 <_ZNSs6appendEPKcm>
    d298:	d9001117 	ldw	r4,68(sp)
    d29c:	d9401317 	ldw	r5,76(sp)
    d2a0:	000c2040 	call	c204 <_ZNSs6appendERKSs>
    d2a4:	d9000104 	addi	r4,sp,4
    d2a8:	00108600 	call	10860 <_Unwind_SjLj_Unregister>
    d2ac:	d8801117 	ldw	r2,68(sp)
    d2b0:	dfc01717 	ldw	ra,92(sp)
    d2b4:	df001617 	ldw	fp,88(sp)
    d2b8:	ddc01517 	ldw	r23,84(sp)
    d2bc:	dec01804 	addi	sp,sp,96
    d2c0:	f800283a 	ret
    d2c4:	d8c00217 	ldw	r3,8(sp)
    d2c8:	00800044 	movi	r2,1
    d2cc:	d9000317 	ldw	r4,12(sp)
    d2d0:	18800326 	beq	r3,r2,d2e0 <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_EPKS3_RKS6_+0xf4>
    d2d4:	00bfffc4 	movi	r2,-1
    d2d8:	d8800215 	stw	r2,8(sp)
    d2dc:	0010b1c0 	call	10b1c <_Unwind_SjLj_Resume>
    d2e0:	d8c00f17 	ldw	r3,60(sp)
    d2e4:	d9001015 	stw	r4,64(sp)
    d2e8:	18800017 	ldw	r2,0(r3)
    d2ec:	00c000b4 	movhi	r3,2
    d2f0:	18cac004 	addi	r3,r3,11008
    d2f4:	10bffd04 	addi	r2,r2,-12
    d2f8:	d8800e15 	stw	r2,56(sp)
    d2fc:	1880041e 	bne	r3,r2,d310 <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_EPKS3_RKS6_+0x124>
    d300:	d9001017 	ldw	r4,64(sp)
    d304:	00bfffc4 	movi	r2,-1
    d308:	d8800215 	stw	r2,8(sp)
    d30c:	0010b1c0 	call	10b1c <_Unwind_SjLj_Resume>
    d310:	00800044 	movi	r2,1
    d314:	d8800215 	stw	r2,8(sp)
    d318:	d8800e17 	ldw	r2,56(sp)
    d31c:	017fffc4 	movi	r5,-1
    d320:	11000204 	addi	r4,r2,8
    d324:	000daa80 	call	daa8 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
    d328:	00bff516 	blt	zero,r2,d300 <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_EPKS3_RKS6_+0x114>
    d32c:	d9000e17 	ldw	r4,56(sp)
    d330:	d80b883a 	mov	r5,sp
    d334:	000a5380 	call	a538 <_ZNSs4_Rep10_M_destroyERKSaIcE>
    d338:	003ff106 	br	d300 <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_EPKS3_RKS6_+0x114>

0000d33c <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_ERKS6_S8_>:
    d33c:	deffe904 	addi	sp,sp,-92
    d340:	00800074 	movhi	r2,1
    d344:	10b95604 	addi	r2,r2,-6824
    d348:	00c000b4 	movhi	r3,2
    d34c:	18f9a344 	addi	r3,r3,-6515
    d350:	d8800715 	stw	r2,28(sp)
    d354:	d9001115 	stw	r4,68(sp)
    d358:	00800074 	movhi	r2,1
    d35c:	10b4f704 	addi	r2,r2,-11300
    d360:	d9000104 	addi	r4,sp,4
    d364:	dfc01615 	stw	ra,88(sp)
    d368:	d8c00815 	stw	r3,32(sp)
    d36c:	d8800a15 	stw	r2,40(sp)
    d370:	d9801315 	stw	r6,76(sp)
    d374:	d9401215 	stw	r5,72(sp)
    d378:	df001515 	stw	fp,84(sp)
    d37c:	ddc01415 	stw	r23,80(sp)
    d380:	dec00915 	stw	sp,36(sp)
    d384:	dec00b15 	stw	sp,44(sp)
    d388:	00108500 	call	10850 <_Unwind_SjLj_Register>
    d38c:	d9401217 	ldw	r5,72(sp)
    d390:	d9001117 	ldw	r4,68(sp)
    d394:	00bfffc4 	movi	r2,-1
    d398:	d8800215 	stw	r2,8(sp)
    d39c:	000b9900 	call	b990 <_ZNSsC1ERKSs>
    d3a0:	00800084 	movi	r2,2
    d3a4:	d8800215 	stw	r2,8(sp)
    d3a8:	d8801117 	ldw	r2,68(sp)
    d3ac:	d9401317 	ldw	r5,76(sp)
    d3b0:	d8801015 	stw	r2,64(sp)
    d3b4:	1009883a 	mov	r4,r2
    d3b8:	000c2040 	call	c204 <_ZNSs6appendERKSs>
    d3bc:	d9000104 	addi	r4,sp,4
    d3c0:	00108600 	call	10860 <_Unwind_SjLj_Unregister>
    d3c4:	d8801117 	ldw	r2,68(sp)
    d3c8:	dfc01617 	ldw	ra,88(sp)
    d3cc:	df001517 	ldw	fp,84(sp)
    d3d0:	ddc01417 	ldw	r23,80(sp)
    d3d4:	dec01704 	addi	sp,sp,92
    d3d8:	f800283a 	ret
    d3dc:	d8c00217 	ldw	r3,8(sp)
    d3e0:	00800044 	movi	r2,1
    d3e4:	d9000317 	ldw	r4,12(sp)
    d3e8:	18800326 	beq	r3,r2,d3f8 <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_ERKS6_S8_+0xbc>
    d3ec:	00bfffc4 	movi	r2,-1
    d3f0:	d8800215 	stw	r2,8(sp)
    d3f4:	0010b1c0 	call	10b1c <_Unwind_SjLj_Resume>
    d3f8:	d8801017 	ldw	r2,64(sp)
    d3fc:	d9000f15 	stw	r4,60(sp)
    d400:	10c00017 	ldw	r3,0(r2)
    d404:	008000b4 	movhi	r2,2
    d408:	108ac004 	addi	r2,r2,11008
    d40c:	18fffd04 	addi	r3,r3,-12
    d410:	d8c00e15 	stw	r3,56(sp)
    d414:	1880041e 	bne	r3,r2,d428 <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_ERKS6_S8_+0xec>
    d418:	d9000f17 	ldw	r4,60(sp)
    d41c:	00bfffc4 	movi	r2,-1
    d420:	d8800215 	stw	r2,8(sp)
    d424:	0010b1c0 	call	10b1c <_Unwind_SjLj_Resume>
    d428:	00800044 	movi	r2,1
    d42c:	d8800215 	stw	r2,8(sp)
    d430:	19000204 	addi	r4,r3,8
    d434:	017fffc4 	movi	r5,-1
    d438:	000daa80 	call	daa8 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
    d43c:	00bff616 	blt	zero,r2,d418 <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_ERKS6_S8_+0xdc>
    d440:	d9000e17 	ldw	r4,56(sp)
    d444:	d80b883a 	mov	r5,sp
    d448:	000a5380 	call	a538 <_ZNSs4_Rep10_M_destroyERKSaIcE>
    d44c:	003ff206 	br	d418 <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_ERKS6_S8_+0xdc>

0000d450 <_ZNSs4swapERSs>:
    d450:	21c00017 	ldw	r7,0(r4)
    d454:	38fffd04 	addi	r3,r7,-12
    d458:	18800217 	ldw	r2,8(r3)
    d45c:	1000010e 	bge	r2,zero,d464 <_ZNSs4swapERSs+0x14>
    d460:	18000215 	stw	zero,8(r3)
    d464:	29800017 	ldw	r6,0(r5)
    d468:	30fffd04 	addi	r3,r6,-12
    d46c:	18800217 	ldw	r2,8(r3)
    d470:	1000010e 	bge	r2,zero,d478 <_ZNSs4swapERSs+0x28>
    d474:	18000215 	stw	zero,8(r3)
    d478:	21800015 	stw	r6,0(r4)
    d47c:	29c00015 	stw	r7,0(r5)
    d480:	f800283a 	ret

0000d484 <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_ES3_RKS6_>:
    d484:	deffe904 	addi	sp,sp,-92
    d488:	00800074 	movhi	r2,1
    d48c:	10b95604 	addi	r2,r2,-6824
    d490:	00c000b4 	movhi	r3,2
    d494:	18f9a544 	addi	r3,r3,-6507
    d498:	d8800715 	stw	r2,28(sp)
    d49c:	d9001115 	stw	r4,68(sp)
    d4a0:	00800074 	movhi	r2,1
    d4a4:	10b55604 	addi	r2,r2,-10920
    d4a8:	d9000104 	addi	r4,sp,4
    d4ac:	d8c00815 	stw	r3,32(sp)
    d4b0:	d8800a15 	stw	r2,40(sp)
    d4b4:	d9401205 	stb	r5,72(sp)
    d4b8:	dfc01615 	stw	ra,88(sp)
    d4bc:	df001515 	stw	fp,84(sp)
    d4c0:	ddc01415 	stw	r23,80(sp)
    d4c4:	dec00915 	stw	sp,36(sp)
    d4c8:	dec00b15 	stw	sp,44(sp)
    d4cc:	d9801315 	stw	r6,76(sp)
    d4d0:	00108500 	call	10850 <_Unwind_SjLj_Register>
    d4d4:	00c000b4 	movhi	r3,2
    d4d8:	18cac004 	addi	r3,r3,11008
    d4dc:	18800304 	addi	r2,r3,12
    d4e0:	d8c01117 	ldw	r3,68(sp)
    d4e4:	18800015 	stw	r2,0(r3)
    d4e8:	d8801317 	ldw	r2,76(sp)
    d4ec:	10c00017 	ldw	r3,0(r2)
    d4f0:	00800084 	movi	r2,2
    d4f4:	197ffd17 	ldw	r5,-12(r3)
    d4f8:	d8c01117 	ldw	r3,68(sp)
    d4fc:	d8800215 	stw	r2,8(sp)
    d500:	29400044 	addi	r5,r5,1
    d504:	d8c00f15 	stw	r3,60(sp)
    d508:	1809883a 	mov	r4,r3
    d50c:	000bd000 	call	bd00 <_ZNSs7reserveEm>
    d510:	d8801203 	ldbu	r2,72(sp)
    d514:	d9001117 	ldw	r4,68(sp)
    d518:	01400044 	movi	r5,1
    d51c:	11803fcc 	andi	r6,r2,255
    d520:	3180201c 	xori	r6,r6,128
    d524:	31bfe004 	addi	r6,r6,-128
    d528:	000beb00 	call	beb0 <_ZNSs6appendEmc>
    d52c:	d9001117 	ldw	r4,68(sp)
    d530:	d9401317 	ldw	r5,76(sp)
    d534:	000c2040 	call	c204 <_ZNSs6appendERKSs>
    d538:	d9000104 	addi	r4,sp,4
    d53c:	00108600 	call	10860 <_Unwind_SjLj_Unregister>
    d540:	d8801117 	ldw	r2,68(sp)
    d544:	dfc01617 	ldw	ra,88(sp)
    d548:	df001517 	ldw	fp,84(sp)
    d54c:	ddc01417 	ldw	r23,80(sp)
    d550:	dec01704 	addi	sp,sp,92
    d554:	f800283a 	ret
    d558:	d8c00217 	ldw	r3,8(sp)
    d55c:	00800044 	movi	r2,1
    d560:	d9000317 	ldw	r4,12(sp)
    d564:	18800326 	beq	r3,r2,d574 <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_ES3_RKS6_+0xf0>
    d568:	00bfffc4 	movi	r2,-1
    d56c:	d8800215 	stw	r2,8(sp)
    d570:	0010b1c0 	call	10b1c <_Unwind_SjLj_Resume>
    d574:	d8c00f17 	ldw	r3,60(sp)
    d578:	d9001015 	stw	r4,64(sp)
    d57c:	18800017 	ldw	r2,0(r3)
    d580:	00c000b4 	movhi	r3,2
    d584:	18cac004 	addi	r3,r3,11008
    d588:	10bffd04 	addi	r2,r2,-12
    d58c:	d8800e15 	stw	r2,56(sp)
    d590:	1880041e 	bne	r3,r2,d5a4 <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_ES3_RKS6_+0x120>
    d594:	d9001017 	ldw	r4,64(sp)
    d598:	00bfffc4 	movi	r2,-1
    d59c:	d8800215 	stw	r2,8(sp)
    d5a0:	0010b1c0 	call	10b1c <_Unwind_SjLj_Resume>
    d5a4:	00800044 	movi	r2,1
    d5a8:	d8800215 	stw	r2,8(sp)
    d5ac:	d8800e17 	ldw	r2,56(sp)
    d5b0:	017fffc4 	movi	r5,-1
    d5b4:	11000204 	addi	r4,r2,8
    d5b8:	000daa80 	call	daa8 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
    d5bc:	00bff516 	blt	zero,r2,d594 <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_ES3_RKS6_+0x110>
    d5c0:	d9000e17 	ldw	r4,56(sp)
    d5c4:	d80b883a 	mov	r5,sp
    d5c8:	000a5380 	call	a538 <_ZNSs4_Rep10_M_destroyERKSaIcE>
    d5cc:	003ff106 	br	d594 <_ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_ES3_RKS6_+0x110>

0000d5d0 <_ZNSs7replaceEmmPKcm>:
    d5d0:	deffe304 	addi	sp,sp,-116
    d5d4:	00800074 	movhi	r2,1
    d5d8:	10b60d04 	addi	r2,r2,-10188
    d5dc:	d8800c15 	stw	r2,48(sp)
    d5e0:	d8800104 	addi	r2,sp,4
    d5e4:	00c000b4 	movhi	r3,2
    d5e8:	18f9a744 	addi	r3,r3,-6499
    d5ec:	d9001615 	stw	r4,88(sp)
    d5f0:	d8800b15 	stw	r2,44(sp)
    d5f4:	d9000304 	addi	r4,sp,12
    d5f8:	00800074 	movhi	r2,1
    d5fc:	10b95604 	addi	r2,r2,-6824
    d600:	d8c00a15 	stw	r3,40(sp)
    d604:	d9401715 	stw	r5,92(sp)
    d608:	d9801815 	stw	r6,96(sp)
    d60c:	d9c01915 	stw	r7,100(sp)
    d610:	dfc01c15 	stw	ra,112(sp)
    d614:	df001b15 	stw	fp,108(sp)
    d618:	ddc01a15 	stw	r23,104(sp)
    d61c:	dec00d15 	stw	sp,52(sp)
    d620:	d8800915 	stw	r2,36(sp)
    d624:	00108500 	call	10850 <_Unwind_SjLj_Register>
    d628:	d8c01617 	ldw	r3,88(sp)
    d62c:	d9801717 	ldw	r6,92(sp)
    d630:	19400017 	ldw	r5,0(r3)
    d634:	29fffd04 	addi	r7,r5,-12
    d638:	39000017 	ldw	r4,0(r7)
    d63c:	21807336 	bltu	r4,r6,d80c <_ZNSs7replaceEmmPKcm+0x23c>
    d640:	d8c01717 	ldw	r3,92(sp)
    d644:	d8801817 	ldw	r2,96(sp)
    d648:	20cdc83a 	sub	r6,r4,r3
    d64c:	d8801015 	stw	r2,64(sp)
    d650:	30801b36 	bltu	r6,r2,d6c0 <_ZNSs7replaceEmmPKcm+0xf0>
    d654:	d9801017 	ldw	r6,64(sp)
    d658:	00900034 	movhi	r2,16384
    d65c:	10bfff04 	addi	r2,r2,-4
    d660:	2187c83a 	sub	r3,r4,r6
    d664:	10c5c83a 	sub	r2,r2,r3
    d668:	d8c01d17 	ldw	r3,116(sp)
    d66c:	10c06c36 	bltu	r2,r3,d820 <_ZNSs7replaceEmmPKcm+0x250>
    d670:	d9801917 	ldw	r6,100(sp)
    d674:	3140142e 	bgeu	r6,r5,d6c8 <_ZNSs7replaceEmmPKcm+0xf8>
    d678:	d8801d17 	ldw	r2,116(sp)
    d67c:	d9001617 	ldw	r4,88(sp)
    d680:	d9401717 	ldw	r5,92(sp)
    d684:	d9801017 	ldw	r6,64(sp)
    d688:	d9c01917 	ldw	r7,100(sp)
    d68c:	d8800015 	stw	r2,0(sp)
    d690:	00bfffc4 	movi	r2,-1
    d694:	d8800415 	stw	r2,16(sp)
    d698:	000c7000 	call	c700 <_ZNSs15_M_replace_safeEmmPKcm>
    d69c:	d8801615 	stw	r2,88(sp)
    d6a0:	d9000304 	addi	r4,sp,12
    d6a4:	00108600 	call	10860 <_Unwind_SjLj_Unregister>
    d6a8:	d8801617 	ldw	r2,88(sp)
    d6ac:	dfc01c17 	ldw	ra,112(sp)
    d6b0:	df001b17 	ldw	fp,108(sp)
    d6b4:	ddc01a17 	ldw	r23,104(sp)
    d6b8:	dec01d04 	addi	sp,sp,116
    d6bc:	f800283a 	ret
    d6c0:	d9801015 	stw	r6,64(sp)
    d6c4:	003fe306 	br	d654 <_ZNSs7replaceEmmPKcm+0x84>
    d6c8:	2905883a 	add	r2,r5,r4
    d6cc:	11bfea36 	bltu	r2,r6,d678 <_ZNSs7replaceEmmPKcm+0xa8>
    d6d0:	38800217 	ldw	r2,8(r7)
    d6d4:	00bfe816 	blt	zero,r2,d678 <_ZNSs7replaceEmmPKcm+0xa8>
    d6d8:	d8801717 	ldw	r2,92(sp)
    d6dc:	d9001917 	ldw	r4,100(sp)
    d6e0:	d9801d17 	ldw	r6,116(sp)
    d6e4:	d8801515 	stw	r2,84(sp)
    d6e8:	2887883a 	add	r3,r5,r2
    d6ec:	2185883a 	add	r2,r4,r6
    d6f0:	18801636 	bltu	r3,r2,d74c <_ZNSs7replaceEmmPKcm+0x17c>
    d6f4:	d8c01917 	ldw	r3,100(sp)
    d6f8:	194bc83a 	sub	r5,r3,r5
    d6fc:	d9401415 	stw	r5,80(sp)
    d700:	d9401717 	ldw	r5,92(sp)
    d704:	d9801017 	ldw	r6,64(sp)
    d708:	d9001617 	ldw	r4,88(sp)
    d70c:	d9c01d17 	ldw	r7,116(sp)
    d710:	00bfffc4 	movi	r2,-1
    d714:	d8800415 	stw	r2,16(sp)
    d718:	000c4c80 	call	c4c8 <_ZNSs9_M_mutateEmmm>
    d71c:	d9801617 	ldw	r6,88(sp)
    d720:	d8801417 	ldw	r2,80(sp)
    d724:	30c00017 	ldw	r3,0(r6)
    d728:	d9801517 	ldw	r6,84(sp)
    d72c:	188b883a 	add	r5,r3,r2
    d730:	30c9883a 	add	r4,r6,r3
    d734:	d8c01d17 	ldw	r3,116(sp)
    d738:	00800044 	movi	r2,1
    d73c:	18800d1e 	bne	r3,r2,d774 <_ZNSs7replaceEmmPKcm+0x1a4>
    d740:	28800003 	ldbu	r2,0(r5)
    d744:	20800005 	stb	r2,0(r4)
    d748:	003fd506 	br	d6a0 <_ZNSs7replaceEmmPKcm+0xd0>
    d74c:	d9001017 	ldw	r4,64(sp)
    d750:	d9801917 	ldw	r6,100(sp)
    d754:	1905883a 	add	r2,r3,r4
    d758:	30800936 	bltu	r6,r2,d780 <_ZNSs7replaceEmmPKcm+0x1b0>
    d75c:	3147c83a 	sub	r3,r6,r5
    d760:	d9401d17 	ldw	r5,116(sp)
    d764:	2905c83a 	sub	r2,r5,r4
    d768:	1887883a 	add	r3,r3,r2
    d76c:	d8c01415 	stw	r3,80(sp)
    d770:	003fe306 	br	d700 <_ZNSs7replaceEmmPKcm+0x130>
    d774:	d9801d17 	ldw	r6,116(sp)
    d778:	0013a240 	call	13a24 <memcpy>
    d77c:	003fc806 	br	d6a0 <_ZNSs7replaceEmmPKcm+0xd0>
    d780:	01000104 	movi	r4,4
    d784:	d905883a 	add	r2,sp,r4
    d788:	d9000415 	stw	r4,16(sp)
    d78c:	d9401917 	ldw	r5,100(sp)
    d790:	1109883a 	add	r4,r2,r4
    d794:	d9801d17 	ldw	r6,116(sp)
    d798:	d9c00184 	addi	r7,sp,6
    d79c:	000b6f80 	call	b6f8 <_ZNSsC1EPKcmRKSaIcE>
    d7a0:	d9001d17 	ldw	r4,116(sp)
    d7a4:	008000c4 	movi	r2,3
    d7a8:	d9c00217 	ldw	r7,8(sp)
    d7ac:	d9000015 	stw	r4,0(sp)
    d7b0:	d8800415 	stw	r2,16(sp)
    d7b4:	d9001617 	ldw	r4,88(sp)
    d7b8:	d9401717 	ldw	r5,92(sp)
    d7bc:	d9801017 	ldw	r6,64(sp)
    d7c0:	000c7000 	call	c700 <_ZNSs15_M_replace_safeEmmPKcm>
    d7c4:	d8801615 	stw	r2,88(sp)
    d7c8:	d8800217 	ldw	r2,8(sp)
    d7cc:	00c000b4 	movhi	r3,2
    d7d0:	18cac004 	addi	r3,r3,11008
    d7d4:	10bffd04 	addi	r2,r2,-12
    d7d8:	d8801215 	stw	r2,72(sp)
    d7dc:	10ffb026 	beq	r2,r3,d6a0 <_ZNSs7replaceEmmPKcm+0xd0>
    d7e0:	d9401217 	ldw	r5,72(sp)
    d7e4:	00800084 	movi	r2,2
    d7e8:	d8800415 	stw	r2,16(sp)
    d7ec:	29000204 	addi	r4,r5,8
    d7f0:	017fffc4 	movi	r5,-1
    d7f4:	000daa80 	call	daa8 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
    d7f8:	00bfa916 	blt	zero,r2,d6a0 <_ZNSs7replaceEmmPKcm+0xd0>
    d7fc:	d9001217 	ldw	r4,72(sp)
    d800:	d9400144 	addi	r5,sp,5
    d804:	000a5380 	call	a538 <_ZNSs4_Rep10_M_destroyERKSaIcE>
    d808:	003fa506 	br	d6a0 <_ZNSs7replaceEmmPKcm+0xd0>
    d80c:	00bfffc4 	movi	r2,-1
    d810:	010000b4 	movhi	r4,2
    d814:	213af504 	addi	r4,r4,-5164
    d818:	d8800415 	stw	r2,16(sp)
    d81c:	00086940 	call	8694 <_ZSt20__throw_out_of_rangePKc>
    d820:	00bfffc4 	movi	r2,-1
    d824:	010000b4 	movhi	r4,2
    d828:	213af504 	addi	r4,r4,-5164
    d82c:	d8800415 	stw	r2,16(sp)
    d830:	00088240 	call	8824 <_ZSt20__throw_length_errorPKc>
    d834:	d8c00417 	ldw	r3,16(sp)
    d838:	00800044 	movi	r2,1
    d83c:	d9000517 	ldw	r4,20(sp)
    d840:	18800226 	beq	r3,r2,d84c <_ZNSs7replaceEmmPKcm+0x27c>
    d844:	00800084 	movi	r2,2
    d848:	18800326 	beq	r3,r2,d858 <_ZNSs7replaceEmmPKcm+0x288>
    d84c:	00bfffc4 	movi	r2,-1
    d850:	d8800415 	stw	r2,16(sp)
    d854:	0010b1c0 	call	10b1c <_Unwind_SjLj_Resume>
    d858:	d8800217 	ldw	r2,8(sp)
    d85c:	00c000b4 	movhi	r3,2
    d860:	18cac004 	addi	r3,r3,11008
    d864:	d9001315 	stw	r4,76(sp)
    d868:	10bffd04 	addi	r2,r2,-12
    d86c:	d8801115 	stw	r2,68(sp)
    d870:	10c0041e 	bne	r2,r3,d884 <_ZNSs7replaceEmmPKcm+0x2b4>
    d874:	d9001317 	ldw	r4,76(sp)
    d878:	00bfffc4 	movi	r2,-1
    d87c:	d8800415 	stw	r2,16(sp)
    d880:	0010b1c0 	call	10b1c <_Unwind_SjLj_Resume>
    d884:	d9801117 	ldw	r6,68(sp)
    d888:	00800044 	movi	r2,1
    d88c:	d8800415 	stw	r2,16(sp)
    d890:	31000204 	addi	r4,r6,8
    d894:	017fffc4 	movi	r5,-1
    d898:	000daa80 	call	daa8 <_ZN9__gnu_cxx18__exchange_and_addEPVii>
    d89c:	00bff516 	blt	zero,r2,d874 <_ZNSs7replaceEmmPKcm+0x2a4>
    d8a0:	d9001117 	ldw	r4,68(sp)
    d8a4:	d9400104 	addi	r5,sp,4
    d8a8:	000a5380 	call	a538 <_ZNSs4_Rep10_M_destroyERKSaIcE>
    d8ac:	003ff106 	br	d874 <_ZNSs7replaceEmmPKcm+0x2a4>

0000d8b0 <_ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_NS0_IPKcSsEES5_>:
    d8b0:	d8800017 	ldw	r2,0(sp)
    d8b4:	20c00017 	ldw	r3,0(r4)
    d8b8:	314dc83a 	sub	r6,r6,r5
    d8bc:	11c5c83a 	sub	r2,r2,r7
    d8c0:	28cbc83a 	sub	r5,r5,r3
    d8c4:	d8800015 	stw	r2,0(sp)
    d8c8:	000d5d01 	jmpi	d5d0 <_ZNSs7replaceEmmPKcm>

0000d8cc <_ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_S2_S2_>:
    d8cc:	d8800017 	ldw	r2,0(sp)
    d8d0:	20c00017 	ldw	r3,0(r4)
    d8d4:	314dc83a 	sub	r6,r6,r5
    d8d8:	11c5c83a 	sub	r2,r2,r7
    d8dc:	28cbc83a 	sub	r5,r5,r3
    d8e0:	d8800015 	stw	r2,0(sp)
    d8e4:	000d5d01 	jmpi	d5d0 <_ZNSs7replaceEmmPKcm>

0000d8e8 <_ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_PKcS4_>:
    d8e8:	d8800017 	ldw	r2,0(sp)
    d8ec:	20c00017 	ldw	r3,0(r4)
    d8f0:	314dc83a 	sub	r6,r6,r5
    d8f4:	11c5c83a 	sub	r2,r2,r7
    d8f8:	28cbc83a 	sub	r5,r5,r3
    d8fc:	d8800015 	stw	r2,0(sp)
    d900:	000d5d01 	jmpi	d5d0 <_ZNSs7replaceEmmPKcm>

0000d904 <_ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_S1_S1_>:
    d904:	d8800017 	ldw	r2,0(sp)
    d908:	20c00017 	ldw	r3,0(r4)
    d90c:	314dc83a 	sub	r6,r6,r5
    d910:	11c5c83a 	sub	r2,r2,r7
    d914:	28cbc83a 	sub	r5,r5,r3
    d918:	d8800015 	stw	r2,0(sp)
    d91c:	000d5d01 	jmpi	d5d0 <_ZNSs7replaceEmmPKcm>

0000d920 <_ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_PKcm>:
    d920:	20800017 	ldw	r2,0(r4)
    d924:	314dc83a 	sub	r6,r6,r5
    d928:	288bc83a 	sub	r5,r5,r2
    d92c:	000d5d01 	jmpi	d5d0 <_ZNSs7replaceEmmPKcm>

0000d930 <_ZNSs7replaceEmmPKc>:
    d930:	defffa04 	addi	sp,sp,-24
    d934:	dfc00515 	stw	ra,20(sp)
    d938:	ddc00415 	stw	r23,16(sp)
    d93c:	dd400315 	stw	r21,12(sp)
    d940:	dcc00215 	stw	r19,8(sp)
    d944:	dc400115 	stw	r17,4(sp)
    d948:	202f883a 	mov	r23,r4
    d94c:	3809883a 	mov	r4,r7
    d950:	382b883a 	mov	r21,r7
    d954:	2823883a 	mov	r17,r5
    d958:	3027883a 	mov	r19,r6
    d95c:	0014cac0 	call	14cac <strlen>
    d960:	880b883a 	mov	r5,r17
    d964:	b809883a 	mov	r4,r23
    d968:	980d883a 	mov	r6,r19
    d96c:	a80f883a 	mov	r7,r21
    d970:	d8800015 	stw	r2,0(sp)
    d974:	000d5d00 	call	d5d0 <_ZNSs7replaceEmmPKcm>
    d978:	dfc00517 	ldw	ra,20(sp)
    d97c:	ddc00417 	ldw	r23,16(sp)
    d980:	dd400317 	ldw	r21,12(sp)
    d984:	dcc00217 	ldw	r19,8(sp)
    d988:	dc400117 	ldw	r17,4(sp)
    d98c:	dec00604 	addi	sp,sp,24
    d990:	f800283a 	ret

0000d994 <_ZNSs7replaceEmmRKSsmm>:
    d994:	3a400017 	ldw	r9,0(r7)
    d998:	deffff04 	addi	sp,sp,-4
    d99c:	d9c00117 	ldw	r7,4(sp)
    d9a0:	48bffd17 	ldw	r2,-12(r9)
    d9a4:	dfc00015 	stw	ra,0(sp)
    d9a8:	da000217 	ldw	r8,8(sp)
    d9ac:	11c00d36 	bltu	r2,r7,d9e4 <_ZNSs7replaceEmmRKSsmm+0x50>
    d9b0:	11c7c83a 	sub	r3,r2,r7
    d9b4:	4005883a 	mov	r2,r8
    d9b8:	49cf883a 	add	r7,r9,r7
    d9bc:	1a000436 	bltu	r3,r8,d9d0 <_ZNSs7replaceEmmRKSsmm+0x3c>
    d9c0:	d8800115 	stw	r2,4(sp)
    d9c4:	dfc00017 	ldw	ra,0(sp)
    d9c8:	dec00104 	addi	sp,sp,4
    d9cc:	000d5d01 	jmpi	d5d0 <_ZNSs7replaceEmmPKcm>
    d9d0:	1805883a 	mov	r2,r3
    d9d4:	d8800115 	stw	r2,4(sp)
    d9d8:	dfc00017 	ldw	ra,0(sp)
    d9dc:	dec00104 	addi	sp,sp,4
    d9e0:	000d5d01 	jmpi	d5d0 <_ZNSs7replaceEmmPKcm>
    d9e4:	010000b4 	movhi	r4,2
    d9e8:	213af504 	addi	r4,r4,-5164
    d9ec:	00086940 	call	8694 <_ZSt20__throw_out_of_rangePKc>

0000d9f0 <_ZNSs7replaceEmmRKSs>:
    d9f0:	39c00017 	ldw	r7,0(r7)
    d9f4:	defffe04 	addi	sp,sp,-8
    d9f8:	dfc00115 	stw	ra,4(sp)
    d9fc:	38bffd17 	ldw	r2,-12(r7)
    da00:	d8800015 	stw	r2,0(sp)
    da04:	000d5d00 	call	d5d0 <_ZNSs7replaceEmmPKcm>
    da08:	dfc00117 	ldw	ra,4(sp)
    da0c:	dec00204 	addi	sp,sp,8
    da10:	f800283a 	ret

0000da14 <_ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_RKSs>:
    da14:	39c00017 	ldw	r7,0(r7)
    da18:	20800017 	ldw	r2,0(r4)
    da1c:	defffe04 	addi	sp,sp,-8
    da20:	38fffd17 	ldw	r3,-12(r7)
    da24:	314dc83a 	sub	r6,r6,r5
    da28:	288bc83a 	sub	r5,r5,r2
    da2c:	dfc00115 	stw	ra,4(sp)
    da30:	d8c00015 	stw	r3,0(sp)
    da34:	000d5d00 	call	d5d0 <_ZNSs7replaceEmmPKcm>
    da38:	dfc00117 	ldw	ra,4(sp)
    da3c:	dec00204 	addi	sp,sp,8
    da40:	f800283a 	ret

0000da44 <_ZNSs7replaceEN9__gnu_cxx17__normal_iteratorIPcSsEES2_PKc>:
    da44:	20800017 	ldw	r2,0(r4)
    da48:	defffa04 	addi	sp,sp,-24
    da4c:	dc400215 	stw	r17,8(sp)
    da50:	3163c83a 	sub	r17,r6,r5
    da54:	288bc83a 	sub	r5,r5,r2
    da58:	dfc00515 	stw	ra,20(sp)
    da5c:	dd400415 	stw	r21,16(sp)
    da60:	dcc00315 	stw	r19,12(sp)
    da64:	d9400115 	stw	r5,4(sp)
    da68:	2027883a 	mov	r19,r4
    da6c:	3809883a 	mov	r4,r7
    da70:	382b883a 	mov	r21,r7
    da74:	0014cac0 	call	14cac <strlen>
    da78:	d9400117 	ldw	r5,4(sp)
    da7c:	9809883a 	mov	r4,r19
    da80:	880d883a 	mov	r6,r17
    da84:	a80f883a 	mov	r7,r21
    da88:	d8800015 	stw	r2,0(sp)
    da8c:	000d5d00 	call	d5d0 <_ZNSs7replaceEmmPKcm>
    da90:	dfc00517 	ldw	ra,20(sp)
    da94:	dd400417 	ldw	r21,16(sp)
    da98:	dcc00317 	ldw	r19,12(sp)
    da9c:	dc400217 	ldw	r17,8(sp)
    daa0:	dec00604 	addi	sp,sp,24
    daa4:	f800283a 	ret

0000daa8 <_ZN9__gnu_cxx18__exchange_and_addEPVii>:
    daa8:	20800017 	ldw	r2,0(r4)
    daac:	20c00017 	ldw	r3,0(r4)
    dab0:	1947883a 	add	r3,r3,r5
    dab4:	20c00015 	stw	r3,0(r4)
    dab8:	f800283a 	ret

0000dabc <_ZN9__gnu_cxx12__atomic_addEPVii>:
    dabc:	000daa81 	jmpi	daa8 <_ZN9__gnu_cxx18__exchange_and_addEPVii>

0000dac0 <_ZNSt10bad_typeidD0Ev>:
    dac0:	defffe04 	addi	sp,sp,-8
    dac4:	008000b4 	movhi	r2,2
    dac8:	10bb0e04 	addi	r2,r2,-5064
    dacc:	dc400015 	stw	r17,0(sp)
    dad0:	20800015 	stw	r2,0(r4)
    dad4:	2023883a 	mov	r17,r4
    dad8:	dfc00115 	stw	ra,4(sp)
    dadc:	000eee40 	call	eee4 <_ZNSt9exceptionD2Ev>
    dae0:	8809883a 	mov	r4,r17
    dae4:	dfc00117 	ldw	ra,4(sp)
    dae8:	dc400017 	ldw	r17,0(sp)
    daec:	dec00204 	addi	sp,sp,8
    daf0:	000de401 	jmpi	de40 <_ZdlPv>

0000daf4 <_ZNSt10bad_typeidD1Ev>:
    daf4:	008000b4 	movhi	r2,2
    daf8:	10bb0e04 	addi	r2,r2,-5064
    dafc:	20800015 	stw	r2,0(r4)
    db00:	000eee41 	jmpi	eee4 <_ZNSt9exceptionD2Ev>

0000db04 <_ZNSt10bad_typeidD2Ev>:
    db04:	008000b4 	movhi	r2,2
    db08:	10bb0e04 	addi	r2,r2,-5064
    db0c:	20800015 	stw	r2,0(r4)
    db10:	000eee41 	jmpi	eee4 <_ZNSt9exceptionD2Ev>

0000db14 <__cxa_rethrow>:
    db14:	defffe04 	addi	sp,sp,-8
    db18:	dc400015 	stw	r17,0(sp)
    db1c:	dfc00115 	stw	ra,4(sp)
    db20:	000ec5c0 	call	ec5c <__cxa_get_globals>
    db24:	100b883a 	mov	r5,r2
    db28:	10800117 	ldw	r2,4(r2)
    db2c:	2c400017 	ldw	r17,0(r5)
    db30:	10800044 	addi	r2,r2,1
    db34:	28800115 	stw	r2,4(r5)
    db38:	88000b26 	beq	r17,zero,db68 <__cxa_rethrow+0x54>
    db3c:	88c00b17 	ldw	r3,44(r17)
    db40:	0090caf4 	movhi	r2,17195
    db44:	108ac004 	addi	r2,r2,11008
    db48:	89000c17 	ldw	r4,48(r17)
    db4c:	18800726 	beq	r3,r2,db6c <__cxa_rethrow+0x58>
    db50:	28000015 	stw	zero,0(r5)
    db54:	8c400b04 	addi	r17,r17,44
    db58:	8809883a 	mov	r4,r17
    db5c:	0010d400 	call	10d40 <_Unwind_SjLj_Resume_or_Rethrow>
    db60:	8809883a 	mov	r4,r17
    db64:	000dd280 	call	dd28 <__cxa_begin_catch>
    db68:	000ed300 	call	ed30 <_ZSt9terminatev>
    db6c:	0091d3b4 	movhi	r2,18254
    db70:	109550c4 	addi	r2,r2,21827
    db74:	20bff61e 	bne	r4,r2,db50 <__cxa_rethrow+0x3c>
    db78:	88800517 	ldw	r2,20(r17)
    db7c:	0085c83a 	sub	r2,zero,r2
    db80:	88800515 	stw	r2,20(r17)
    db84:	003ff306 	br	db54 <__cxa_rethrow+0x40>

0000db88 <__cxa_throw>:
    db88:	008000b4 	movhi	r2,2
    db8c:	1083a604 	addi	r2,r2,3736
    db90:	00c000b4 	movhi	r3,2
    db94:	18c3a504 	addi	r3,r3,3732
    db98:	12000017 	ldw	r8,0(r2)
    db9c:	19c00017 	ldw	r7,0(r3)
    dba0:	defffe04 	addi	sp,sp,-8
    dba4:	213ff004 	addi	r4,r4,-64
    dba8:	dfc00115 	stw	ra,4(sp)
    dbac:	dc400015 	stw	r17,0(sp)
    dbb0:	0090caf4 	movhi	r2,17195
    dbb4:	108ac004 	addi	r2,r2,11008
    dbb8:	20800b15 	stw	r2,44(r4)
    dbbc:	00d1d3b4 	movhi	r3,18254
    dbc0:	18d550c4 	addi	r3,r3,21827
    dbc4:	24400b04 	addi	r17,r4,44
    dbc8:	00800074 	movhi	r2,1
    dbcc:	10b6ff04 	addi	r2,r2,-9220
    dbd0:	21400015 	stw	r5,0(r4)
    dbd4:	21800115 	stw	r6,4(r4)
    dbd8:	22000215 	stw	r8,8(r4)
    dbdc:	21c00315 	stw	r7,12(r4)
    dbe0:	20c00c15 	stw	r3,48(r4)
    dbe4:	20800d15 	stw	r2,52(r4)
    dbe8:	8809883a 	mov	r4,r17
    dbec:	0010b780 	call	10b78 <_Unwind_SjLj_RaiseException>
    dbf0:	8809883a 	mov	r4,r17
    dbf4:	000dd280 	call	dd28 <__cxa_begin_catch>
    dbf8:	000ed300 	call	ed30 <_ZSt9terminatev>

0000dbfc <_Z23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception>:
    dbfc:	defffe04 	addi	sp,sp,-8
    dc00:	00800044 	movi	r2,1
    dc04:	dfc00115 	stw	ra,4(sp)
    dc08:	dc000015 	stw	r16,0(sp)
    dc0c:	28fff504 	addi	r3,r5,-44
    dc10:	11001036 	bltu	r2,r4,dc54 <_Z23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x58>
    dc14:	18800117 	ldw	r2,4(r3)
    dc18:	10000826 	beq	r2,zero,dc3c <_Z23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x40>
    dc1c:	2c000504 	addi	r16,r5,20
    dc20:	8009883a 	mov	r4,r16
    dc24:	103ee83a 	callr	r2
    dc28:	8009883a 	mov	r4,r16
    dc2c:	dfc00117 	ldw	ra,4(sp)
    dc30:	dc000017 	ldw	r16,0(sp)
    dc34:	dec00204 	addi	sp,sp,8
    dc38:	000efa81 	jmpi	efa8 <__cxa_free_exception>
    dc3c:	2c000504 	addi	r16,r5,20
    dc40:	8009883a 	mov	r4,r16
    dc44:	dfc00117 	ldw	ra,4(sp)
    dc48:	dc000017 	ldw	r16,0(sp)
    dc4c:	dec00204 	addi	sp,sp,8
    dc50:	000efa81 	jmpi	efa8 <__cxa_free_exception>
    dc54:	19000317 	ldw	r4,12(r3)
    dc58:	000ec8c0 	call	ec8c <_ZN10__cxxabiv111__terminateEPFvvE>

0000dc5c <__cxa_get_exception_ptr>:
    dc5c:	20bfff17 	ldw	r2,-4(r4)
    dc60:	f800283a 	ret

0000dc64 <_ZSt18uncaught_exceptionv>:
    dc64:	deffff04 	addi	sp,sp,-4
    dc68:	dfc00015 	stw	ra,0(sp)
    dc6c:	000ec5c0 	call	ec5c <__cxa_get_globals>
    dc70:	10800117 	ldw	r2,4(r2)
    dc74:	1004c03a 	cmpne	r2,r2,zero
    dc78:	dfc00017 	ldw	ra,0(sp)
    dc7c:	dec00104 	addi	sp,sp,4
    dc80:	f800283a 	ret

0000dc84 <__cxa_end_catch>:
    dc84:	deffff04 	addi	sp,sp,-4
    dc88:	dfc00015 	stw	ra,0(sp)
    dc8c:	000ec540 	call	ec54 <__cxa_get_globals_fast>
    dc90:	11000017 	ldw	r4,0(r2)
    dc94:	1007883a 	mov	r3,r2
    dc98:	20001326 	beq	r4,zero,dce8 <__cxa_end_catch+0x64>
    dc9c:	21400b17 	ldw	r5,44(r4)
    dca0:	0090caf4 	movhi	r2,17195
    dca4:	108ac004 	addi	r2,r2,11008
    dca8:	21800c17 	ldw	r6,48(r4)
    dcac:	28800526 	beq	r5,r2,dcc4 <__cxa_end_catch+0x40>
    dcb0:	21000b04 	addi	r4,r4,44
    dcb4:	18000015 	stw	zero,0(r3)
    dcb8:	dfc00017 	ldw	ra,0(sp)
    dcbc:	dec00104 	addi	sp,sp,4
    dcc0:	0010a101 	jmpi	10a10 <_Unwind_DeleteException>
    dcc4:	0091d3b4 	movhi	r2,18254
    dcc8:	109550c4 	addi	r2,r2,21827
    dccc:	30bff81e 	bne	r6,r2,dcb0 <__cxa_end_catch+0x2c>
    dcd0:	20800517 	ldw	r2,20(r4)
    dcd4:	10000e16 	blt	r2,zero,dd10 <__cxa_end_catch+0x8c>
    dcd8:	117fffc4 	addi	r5,r2,-1
    dcdc:	28000526 	beq	r5,zero,dcf4 <__cxa_end_catch+0x70>
    dce0:	28000a16 	blt	r5,zero,dd0c <__cxa_end_catch+0x88>
    dce4:	21400515 	stw	r5,20(r4)
    dce8:	dfc00017 	ldw	ra,0(sp)
    dcec:	dec00104 	addi	sp,sp,4
    dcf0:	f800283a 	ret
    dcf4:	20800417 	ldw	r2,16(r4)
    dcf8:	21000b04 	addi	r4,r4,44
    dcfc:	18800015 	stw	r2,0(r3)
    dd00:	dfc00017 	ldw	ra,0(sp)
    dd04:	dec00104 	addi	sp,sp,4
    dd08:	0010a101 	jmpi	10a10 <_Unwind_DeleteException>
    dd0c:	000ed300 	call	ed30 <_ZSt9terminatev>
    dd10:	11400044 	addi	r5,r2,1
    dd14:	283ff31e 	bne	r5,zero,dce4 <__cxa_end_catch+0x60>
    dd18:	20800417 	ldw	r2,16(r4)
    dd1c:	21400515 	stw	r5,20(r4)
    dd20:	18800015 	stw	r2,0(r3)
    dd24:	003ff006 	br	dce8 <__cxa_end_catch+0x64>

0000dd28 <__cxa_begin_catch>:
    dd28:	deffee04 	addi	sp,sp,-72
    dd2c:	00800074 	movhi	r2,1
    dd30:	10b95604 	addi	r2,r2,-6824
    dd34:	00c000b4 	movhi	r3,2
    dd38:	18f9ab04 	addi	r3,r3,-6484
    dd3c:	d8800615 	stw	r2,24(sp)
    dd40:	d9000e15 	stw	r4,56(sp)
    dd44:	00800074 	movhi	r2,1
    dd48:	10b78704 	addi	r2,r2,-8676
    dd4c:	d809883a 	mov	r4,sp
    dd50:	d8c00715 	stw	r3,28(sp)
    dd54:	dfc01115 	stw	ra,68(sp)
    dd58:	d8800915 	stw	r2,36(sp)
    dd5c:	df001015 	stw	fp,64(sp)
    dd60:	ddc00f15 	stw	r23,60(sp)
    dd64:	dec00815 	stw	sp,32(sp)
    dd68:	dec00a15 	stw	sp,40(sp)
    dd6c:	00108500 	call	10850 <_Unwind_SjLj_Register>
    dd70:	000ec5c0 	call	ec5c <__cxa_get_globals>
    dd74:	100d883a 	mov	r6,r2
    dd78:	d8800e17 	ldw	r2,56(sp)
    dd7c:	31c00017 	ldw	r7,0(r6)
    dd80:	117ff504 	addi	r5,r2,-44
    dd84:	28c00b17 	ldw	r3,44(r5)
    dd88:	0090caf4 	movhi	r2,17195
    dd8c:	108ac004 	addi	r2,r2,11008
    dd90:	29000c17 	ldw	r4,48(r5)
    dd94:	18800b26 	beq	r3,r2,ddc4 <__cxa_begin_catch+0x9c>
    dd98:	38001d1e 	bne	r7,zero,de10 <__cxa_begin_catch+0xe8>
    dd9c:	d8000d15 	stw	zero,52(sp)
    dda0:	31400015 	stw	r5,0(r6)
    dda4:	d809883a 	mov	r4,sp
    dda8:	00108600 	call	10860 <_Unwind_SjLj_Unregister>
    ddac:	d8800d17 	ldw	r2,52(sp)
    ddb0:	dfc01117 	ldw	ra,68(sp)
    ddb4:	df001017 	ldw	fp,64(sp)
    ddb8:	ddc00f17 	ldw	r23,60(sp)
    ddbc:	dec01204 	addi	sp,sp,72
    ddc0:	f800283a 	ret
    ddc4:	0091d3b4 	movhi	r2,18254
    ddc8:	109550c4 	addi	r2,r2,21827
    ddcc:	20bff21e 	bne	r4,r2,dd98 <__cxa_begin_catch+0x70>
    ddd0:	28c00517 	ldw	r3,20(r5)
    ddd4:	18000b16 	blt	r3,zero,de04 <__cxa_begin_catch+0xdc>
    ddd8:	18800044 	addi	r2,r3,1
    dddc:	28800515 	stw	r2,20(r5)
    dde0:	30800117 	ldw	r2,4(r6)
    dde4:	10bfffc4 	addi	r2,r2,-1
    dde8:	30800115 	stw	r2,4(r6)
    ddec:	39400226 	beq	r7,r5,ddf8 <__cxa_begin_catch+0xd0>
    ddf0:	29c00415 	stw	r7,16(r5)
    ddf4:	31400015 	stw	r5,0(r6)
    ddf8:	29400a17 	ldw	r5,40(r5)
    ddfc:	d9400d15 	stw	r5,52(sp)
    de00:	003fe806 	br	dda4 <__cxa_begin_catch+0x7c>
    de04:	00800044 	movi	r2,1
    de08:	10c5c83a 	sub	r2,r2,r3
    de0c:	003ff306 	br	dddc <__cxa_begin_catch+0xb4>
    de10:	00800044 	movi	r2,1
    de14:	d8800115 	stw	r2,4(sp)
    de18:	000ed300 	call	ed30 <_ZSt9terminatev>
    de1c:	d8800317 	ldw	r2,12(sp)
    de20:	00ffffc4 	movi	r3,-1
    de24:	d9000217 	ldw	r4,8(sp)
    de28:	10c00226 	beq	r2,r3,de34 <__cxa_begin_catch+0x10c>
    de2c:	d8c00115 	stw	r3,4(sp)
    de30:	0010b1c0 	call	10b1c <_Unwind_SjLj_Resume>
    de34:	00bfffc4 	movi	r2,-1
    de38:	d8800115 	stw	r2,4(sp)
    de3c:	000e3d80 	call	e3d8 <__cxa_call_unexpected>

0000de40 <_ZdlPv>:
    de40:	20000126 	beq	r4,zero,de48 <_ZdlPv+0x8>
    de44:	00131641 	jmpi	13164 <free>
    de48:	f800283a 	ret

0000de4c <_Z12read_uleb128PKhPj>:
    de4c:	000d883a 	mov	r6,zero
    de50:	000f883a 	mov	r7,zero
    de54:	20c00007 	ldb	r3,0(r4)
    de58:	21000044 	addi	r4,r4,1
    de5c:	18801fcc 	andi	r2,r3,127
    de60:	1184983a 	sll	r2,r2,r6
    de64:	318001c4 	addi	r6,r6,7
    de68:	388eb03a 	or	r7,r7,r2
    de6c:	183ff916 	blt	r3,zero,de54 <_Z12read_uleb128PKhPj+0x8>
    de70:	2005883a 	mov	r2,r4
    de74:	29c00015 	stw	r7,0(r5)
    de78:	f800283a 	ret

0000de7c <_Z12read_sleb128PKhPi>:
    de7c:	000f883a 	mov	r7,zero
    de80:	0011883a 	mov	r8,zero
    de84:	20c00007 	ldb	r3,0(r4)
    de88:	21000044 	addi	r4,r4,1
    de8c:	19803fcc 	andi	r6,r3,255
    de90:	30801fcc 	andi	r2,r6,127
    de94:	11c4983a 	sll	r2,r2,r7
    de98:	39c001c4 	addi	r7,r7,7
    de9c:	4090b03a 	or	r8,r8,r2
    dea0:	183ff816 	blt	r3,zero,de84 <_Z12read_sleb128PKhPi+0x8>
    dea4:	008007c4 	movi	r2,31
    dea8:	11c00636 	bltu	r2,r7,dec4 <_Z12read_sleb128PKhPi+0x48>
    deac:	3080100c 	andi	r2,r6,64
    deb0:	10000426 	beq	r2,zero,dec4 <_Z12read_sleb128PKhPi+0x48>
    deb4:	00800044 	movi	r2,1
    deb8:	11c4983a 	sll	r2,r2,r7
    debc:	0085c83a 	sub	r2,zero,r2
    dec0:	4090b03a 	or	r8,r8,r2
    dec4:	2005883a 	mov	r2,r4
    dec8:	2a000015 	stw	r8,0(r5)
    decc:	f800283a 	ret

0000ded0 <_Z16get_adjusted_ptrPKSt9type_infoS1_PPv>:
    ded0:	28800017 	ldw	r2,0(r5)
    ded4:	defffb04 	addi	sp,sp,-20
    ded8:	30c00017 	ldw	r3,0(r6)
    dedc:	dc400215 	stw	r17,8(sp)
    dee0:	2823883a 	mov	r17,r5
    dee4:	11400217 	ldw	r5,8(r2)
    dee8:	dc800315 	stw	r18,12(sp)
    deec:	dc000115 	stw	r16,4(sp)
    def0:	dfc00415 	stw	ra,16(sp)
    def4:	2021883a 	mov	r16,r4
    def8:	d8c00015 	stw	r3,0(sp)
    defc:	8809883a 	mov	r4,r17
    df00:	3025883a 	mov	r18,r6
    df04:	283ee83a 	callr	r5
    df08:	10803fcc 	andi	r2,r2,255
    df0c:	880b883a 	mov	r5,r17
    df10:	8009883a 	mov	r4,r16
    df14:	d80d883a 	mov	r6,sp
    df18:	01c00044 	movi	r7,1
    df1c:	10000326 	beq	r2,zero,df2c <_Z16get_adjusted_ptrPKSt9type_infoS1_PPv+0x5c>
    df20:	d8800017 	ldw	r2,0(sp)
    df24:	10c00017 	ldw	r3,0(r2)
    df28:	d8c00015 	stw	r3,0(sp)
    df2c:	80800017 	ldw	r2,0(r16)
    df30:	10c00417 	ldw	r3,16(r2)
    df34:	183ee83a 	callr	r3
    df38:	10803fcc 	andi	r2,r2,255
    df3c:	0007883a 	mov	r3,zero
    df40:	10000326 	beq	r2,zero,df50 <_Z16get_adjusted_ptrPKSt9type_infoS1_PPv+0x80>
    df44:	d8800017 	ldw	r2,0(sp)
    df48:	00c00044 	movi	r3,1
    df4c:	90800015 	stw	r2,0(r18)
    df50:	1805883a 	mov	r2,r3
    df54:	dfc00417 	ldw	ra,16(sp)
    df58:	dc800317 	ldw	r18,12(sp)
    df5c:	dc400217 	ldw	r17,8(sp)
    df60:	dc000117 	ldw	r16,4(sp)
    df64:	dec00504 	addi	sp,sp,20
    df68:	f800283a 	ret

0000df6c <_Z28read_encoded_value_with_basehjPKhPj>:
    df6c:	defff904 	addi	sp,sp,-28
    df70:	dc400215 	stw	r17,8(sp)
    df74:	00801404 	movi	r2,80
    df78:	24403fcc 	andi	r17,r4,255
    df7c:	dd000515 	stw	r20,20(sp)
    df80:	dcc00415 	stw	r19,16(sp)
    df84:	dc800315 	stw	r18,12(sp)
    df88:	dc000115 	stw	r16,4(sp)
    df8c:	dfc00615 	stw	ra,24(sp)
    df90:	2025883a 	mov	r18,r4
    df94:	2829883a 	mov	r20,r5
    df98:	3021883a 	mov	r16,r6
    df9c:	3827883a 	mov	r19,r7
    dfa0:	88801826 	beq	r17,r2,e004 <_Z28read_encoded_value_with_basehjPKhPj+0x98>
    dfa4:	88c003cc 	andi	r3,r17,15
    dfa8:	00800304 	movi	r2,12
    dfac:	10c0012e 	bgeu	r2,r3,dfb4 <_Z28read_encoded_value_with_basehjPKhPj+0x48>
    dfb0:	00116940 	call	11694 <abort>
    dfb4:	18c5883a 	add	r2,r3,r3
    dfb8:	1085883a 	add	r2,r2,r2
    dfbc:	00c00074 	movhi	r3,1
    dfc0:	18f7f404 	addi	r3,r3,-8240
    dfc4:	10c5883a 	add	r2,r2,r3
    dfc8:	11000017 	ldw	r4,0(r2)
    dfcc:	2000683a 	jmp	r4
    dfd0:	0000e040 	call	e04 <setImageForCascadeClassifier+0x27c>
    dfd4:	0000e128 	cmpgeui	zero,zero,900
    dfd8:	0000e0d4 	movui	zero,899
    dfdc:	0000e040 	call	e04 <setImageForCascadeClassifier+0x27c>
    dfe0:	0000e098 	cmpnei	zero,zero,898
    dfe4:	0000dfb0 	cmpltui	zero,zero,894
    dfe8:	0000dfb0 	cmpltui	zero,zero,894
    dfec:	0000dfb0 	cmpltui	zero,zero,894
    dff0:	0000dfb0 	cmpltui	zero,zero,894
    dff4:	0000e110 	cmplti	zero,zero,900
    dff8:	0000e0ec 	andhi	zero,zero,899
    dffc:	0000e040 	call	e04 <setImageForCascadeClassifier+0x27c>
    e000:	0000e098 	cmpnei	zero,zero,898
    e004:	308000c4 	addi	r2,r6,3
    e008:	00ffff04 	movi	r3,-4
    e00c:	10c4703a 	and	r2,r2,r3
    e010:	11000017 	ldw	r4,0(r2)
    e014:	11400104 	addi	r5,r2,4
    e018:	2805883a 	mov	r2,r5
    e01c:	99000015 	stw	r4,0(r19)
    e020:	dfc00617 	ldw	ra,24(sp)
    e024:	dd000517 	ldw	r20,20(sp)
    e028:	dcc00417 	ldw	r19,16(sp)
    e02c:	dc800317 	ldw	r18,12(sp)
    e030:	dc400217 	ldw	r17,8(sp)
    e034:	dc000117 	ldw	r16,4(sp)
    e038:	dec00704 	addi	sp,sp,28
    e03c:	f800283a 	ret
    e040:	30800043 	ldbu	r2,1(r6)
    e044:	30c00083 	ldbu	r3,2(r6)
    e048:	310000c3 	ldbu	r4,3(r6)
    e04c:	31400003 	ldbu	r5,0(r6)
    e050:	1004923a 	slli	r2,r2,8
    e054:	1806943a 	slli	r3,r3,16
    e058:	2008963a 	slli	r4,r4,24
    e05c:	1144b03a 	or	r2,r2,r5
    e060:	1886b03a 	or	r3,r3,r2
    e064:	20c8b03a 	or	r4,r4,r3
    e068:	31400104 	addi	r5,r6,4
    e06c:	203fea26 	beq	r4,zero,e018 <_Z28read_encoded_value_with_basehjPKhPj+0xac>
    e070:	88c01c0c 	andi	r3,r17,112
    e074:	00800404 	movi	r2,16
    e078:	18801426 	beq	r3,r2,e0cc <_Z28read_encoded_value_with_basehjPKhPj+0x160>
    e07c:	90803fcc 	andi	r2,r18,255
    e080:	1080201c 	xori	r2,r2,128
    e084:	10bfe004 	addi	r2,r2,-128
    e088:	2509883a 	add	r4,r4,r20
    e08c:	103fe20e 	bge	r2,zero,e018 <_Z28read_encoded_value_with_basehjPKhPj+0xac>
    e090:	21000017 	ldw	r4,0(r4)
    e094:	003fe006 	br	e018 <_Z28read_encoded_value_with_basehjPKhPj+0xac>
    e098:	30800043 	ldbu	r2,1(r6)
    e09c:	31800083 	ldbu	r6,2(r6)
    e0a0:	820000c3 	ldbu	r8,3(r16)
    e0a4:	1004923a 	slli	r2,r2,8
    e0a8:	82400003 	ldbu	r9,0(r16)
    e0ac:	300c943a 	slli	r6,r6,16
    e0b0:	4010963a 	slli	r8,r8,24
    e0b4:	1244b03a 	or	r2,r2,r9
    e0b8:	308cb03a 	or	r6,r6,r2
    e0bc:	4184b03a 	or	r2,r8,r6
    e0c0:	1009883a 	mov	r4,r2
    e0c4:	81400204 	addi	r5,r16,8
    e0c8:	003fe806 	br	e06c <_Z28read_encoded_value_with_basehjPKhPj+0x100>
    e0cc:	8029883a 	mov	r20,r16
    e0d0:	003fea06 	br	e07c <_Z28read_encoded_value_with_basehjPKhPj+0x110>
    e0d4:	30800043 	ldbu	r2,1(r6)
    e0d8:	30c00003 	ldbu	r3,0(r6)
    e0dc:	31400084 	addi	r5,r6,2
    e0e0:	1004923a 	slli	r2,r2,8
    e0e4:	10c8b03a 	or	r4,r2,r3
    e0e8:	003fe006 	br	e06c <_Z28read_encoded_value_with_basehjPKhPj+0x100>
    e0ec:	30800043 	ldbu	r2,1(r6)
    e0f0:	30c00003 	ldbu	r3,0(r6)
    e0f4:	31400084 	addi	r5,r6,2
    e0f8:	1004923a 	slli	r2,r2,8
    e0fc:	10c4b03a 	or	r2,r2,r3
    e100:	113fffcc 	andi	r4,r2,65535
    e104:	2120001c 	xori	r4,r4,32768
    e108:	21200004 	addi	r4,r4,-32768
    e10c:	003fd706 	br	e06c <_Z28read_encoded_value_with_basehjPKhPj+0x100>
    e110:	3009883a 	mov	r4,r6
    e114:	d80b883a 	mov	r5,sp
    e118:	000de7c0 	call	de7c <_Z12read_sleb128PKhPi>
    e11c:	d9000017 	ldw	r4,0(sp)
    e120:	100b883a 	mov	r5,r2
    e124:	003fd106 	br	e06c <_Z28read_encoded_value_with_basehjPKhPj+0x100>
    e128:	3009883a 	mov	r4,r6
    e12c:	d80b883a 	mov	r5,sp
    e130:	000de4c0 	call	de4c <_Z12read_uleb128PKhPj>
    e134:	d9000017 	ldw	r4,0(sp)
    e138:	100b883a 	mov	r5,r2
    e13c:	003fcb06 	br	e06c <_Z28read_encoded_value_with_basehjPKhPj+0x100>

0000e140 <_Z21base_of_encoded_valuehP15_Unwind_Context>:
    e140:	deffff04 	addi	sp,sp,-4
    e144:	21003fcc 	andi	r4,r4,255
    e148:	00803fc4 	movi	r2,255
    e14c:	dfc00015 	stw	ra,0(sp)
    e150:	20800c26 	beq	r4,r2,e184 <_Z21base_of_encoded_valuehP15_Unwind_Context+0x44>
    e154:	21001c0c 	andi	r4,r4,112
    e158:	00800804 	movi	r2,32
    e15c:	20800d26 	beq	r4,r2,e194 <_Z21base_of_encoded_valuehP15_Unwind_Context+0x54>
    e160:	1100070e 	bge	r2,r4,e180 <_Z21base_of_encoded_valuehP15_Unwind_Context+0x40>
    e164:	00801004 	movi	r2,64
    e168:	20801126 	beq	r4,r2,e1b0 <_Z21base_of_encoded_valuehP15_Unwind_Context+0x70>
    e16c:	00801404 	movi	r2,80
    e170:	20800426 	beq	r4,r2,e184 <_Z21base_of_encoded_valuehP15_Unwind_Context+0x44>
    e174:	00800c04 	movi	r2,48
    e178:	20801126 	beq	r4,r2,e1c0 <_Z21base_of_encoded_valuehP15_Unwind_Context+0x80>
    e17c:	00116940 	call	11694 <abort>
    e180:	2000081e 	bne	r4,zero,e1a4 <_Z21base_of_encoded_valuehP15_Unwind_Context+0x64>
    e184:	0005883a 	mov	r2,zero
    e188:	dfc00017 	ldw	ra,0(sp)
    e18c:	dec00104 	addi	sp,sp,4
    e190:	f800283a 	ret
    e194:	2809883a 	mov	r4,r5
    e198:	dfc00017 	ldw	ra,0(sp)
    e19c:	dec00104 	addi	sp,sp,4
    e1a0:	00109081 	jmpi	10908 <_Unwind_GetTextRelBase>
    e1a4:	00800404 	movi	r2,16
    e1a8:	20bff626 	beq	r4,r2,e184 <_Z21base_of_encoded_valuehP15_Unwind_Context+0x44>
    e1ac:	00116940 	call	11694 <abort>
    e1b0:	2809883a 	mov	r4,r5
    e1b4:	dfc00017 	ldw	ra,0(sp)
    e1b8:	dec00104 	addi	sp,sp,4
    e1bc:	00108f01 	jmpi	108f0 <_Unwind_GetRegionStart>
    e1c0:	2809883a 	mov	r4,r5
    e1c4:	dfc00017 	ldw	ra,0(sp)
    e1c8:	dec00104 	addi	sp,sp,4
    e1cc:	00109001 	jmpi	10900 <_Unwind_GetDataRelBase>

0000e1d0 <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
    e1d0:	defffa04 	addi	sp,sp,-24
    e1d4:	dc800415 	stw	r18,16(sp)
    e1d8:	dc400315 	stw	r17,12(sp)
    e1dc:	dc000215 	stw	r16,8(sp)
    e1e0:	dfc00515 	stw	ra,20(sp)
    e1e4:	2021883a 	mov	r16,r4
    e1e8:	000f883a 	mov	r7,zero
    e1ec:	3023883a 	mov	r17,r6
    e1f0:	2825883a 	mov	r18,r5
    e1f4:	20000226 	beq	r4,zero,e200 <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x30>
    e1f8:	00108f00 	call	108f0 <_Unwind_GetRegionStart>
    e1fc:	100f883a 	mov	r7,r2
    e200:	89c00015 	stw	r7,0(r17)
    e204:	90c00003 	ldbu	r3,0(r18)
    e208:	800b883a 	mov	r5,r16
    e20c:	00803fc4 	movi	r2,255
    e210:	1c003fcc 	andi	r16,r3,255
    e214:	91800044 	addi	r6,r18,1
    e218:	8009883a 	mov	r4,r16
    e21c:	18802226 	beq	r3,r2,e2a8 <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xd8>
    e220:	d9800115 	stw	r6,4(sp)
    e224:	000e1400 	call	e140 <_Z21base_of_encoded_valuehP15_Unwind_Context>
    e228:	d9800117 	ldw	r6,4(sp)
    e22c:	8009883a 	mov	r4,r16
    e230:	100b883a 	mov	r5,r2
    e234:	89c00104 	addi	r7,r17,4
    e238:	000df6c0 	call	df6c <_Z28read_encoded_value_with_basehjPKhPj>
    e23c:	100d883a 	mov	r6,r2
    e240:	30800003 	ldbu	r2,0(r6)
    e244:	31c00044 	addi	r7,r6,1
    e248:	00c03fc4 	movi	r3,255
    e24c:	d80b883a 	mov	r5,sp
    e250:	3809883a 	mov	r4,r7
    e254:	88800505 	stb	r2,20(r17)
    e258:	10c01b26 	beq	r2,r3,e2c8 <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xf8>
    e25c:	000de4c0 	call	de4c <_Z12read_uleb128PKhPj>
    e260:	100f883a 	mov	r7,r2
    e264:	d8800017 	ldw	r2,0(sp)
    e268:	3885883a 	add	r2,r7,r2
    e26c:	88800315 	stw	r2,12(r17)
    e270:	38800003 	ldbu	r2,0(r7)
    e274:	39000044 	addi	r4,r7,1
    e278:	d80b883a 	mov	r5,sp
    e27c:	88800545 	stb	r2,21(r17)
    e280:	000de4c0 	call	de4c <_Z12read_uleb128PKhPj>
    e284:	d8c00017 	ldw	r3,0(sp)
    e288:	10c9883a 	add	r4,r2,r3
    e28c:	89000415 	stw	r4,16(r17)
    e290:	dfc00517 	ldw	ra,20(sp)
    e294:	dc800417 	ldw	r18,16(sp)
    e298:	dc400317 	ldw	r17,12(sp)
    e29c:	dc000217 	ldw	r16,8(sp)
    e2a0:	dec00604 	addi	sp,sp,24
    e2a4:	f800283a 	ret
    e2a8:	89c00115 	stw	r7,4(r17)
    e2ac:	30800003 	ldbu	r2,0(r6)
    e2b0:	31c00044 	addi	r7,r6,1
    e2b4:	00c03fc4 	movi	r3,255
    e2b8:	d80b883a 	mov	r5,sp
    e2bc:	3809883a 	mov	r4,r7
    e2c0:	88800505 	stb	r2,20(r17)
    e2c4:	10ffe51e 	bne	r2,r3,e25c <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x8c>
    e2c8:	88000315 	stw	zero,12(r17)
    e2cc:	003fe806 	br	e270 <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xa0>

0000e2d0 <_Z15get_ttype_entryP16lsda_header_infoj>:
    e2d0:	defffe04 	addi	sp,sp,-8
    e2d4:	dfc00115 	stw	ra,4(sp)
    e2d8:	21c00503 	ldbu	r7,20(r4)
    e2dc:	00803fc4 	movi	r2,255
    e2e0:	38801a26 	beq	r7,r2,e34c <_Z15get_ttype_entryP16lsda_header_infoj+0x7c>
    e2e4:	38c001cc 	andi	r3,r7,7
    e2e8:	00800084 	movi	r2,2
    e2ec:	18801326 	beq	r3,r2,e33c <_Z15get_ttype_entryP16lsda_header_infoj+0x6c>
    e2f0:	10c0050e 	bge	r2,r3,e308 <_Z15get_ttype_entryP16lsda_header_infoj+0x38>
    e2f4:	008000c4 	movi	r2,3
    e2f8:	18800426 	beq	r3,r2,e30c <_Z15get_ttype_entryP16lsda_header_infoj+0x3c>
    e2fc:	00800104 	movi	r2,4
    e300:	18801026 	beq	r3,r2,e344 <_Z15get_ttype_entryP16lsda_header_infoj+0x74>
    e304:	00116940 	call	11694 <abort>
    e308:	183ffe1e 	bne	r3,zero,e304 <_Z15get_ttype_entryP16lsda_header_infoj+0x34>
    e30c:	2945883a 	add	r2,r5,r5
    e310:	1085883a 	add	r2,r2,r2
    e314:	21800317 	ldw	r6,12(r4)
    e318:	21400217 	ldw	r5,8(r4)
    e31c:	3809883a 	mov	r4,r7
    e320:	308dc83a 	sub	r6,r6,r2
    e324:	d80f883a 	mov	r7,sp
    e328:	000df6c0 	call	df6c <_Z28read_encoded_value_with_basehjPKhPj>
    e32c:	d8800017 	ldw	r2,0(sp)
    e330:	dfc00117 	ldw	ra,4(sp)
    e334:	dec00204 	addi	sp,sp,8
    e338:	f800283a 	ret
    e33c:	2945883a 	add	r2,r5,r5
    e340:	003ff406 	br	e314 <_Z15get_ttype_entryP16lsda_header_infoj+0x44>
    e344:	280490fa 	slli	r2,r5,3
    e348:	003ff206 	br	e314 <_Z15get_ttype_entryP16lsda_header_infoj+0x44>
    e34c:	0005883a 	mov	r2,zero
    e350:	003ff006 	br	e314 <_Z15get_ttype_entryP16lsda_header_infoj+0x44>

0000e354 <_Z20check_exception_specP16lsda_header_infoPKSt9type_infoPvi>:
    e354:	20800317 	ldw	r2,12(r4)
    e358:	defffa04 	addi	sp,sp,-24
    e35c:	dc800415 	stw	r18,16(sp)
    e360:	11c5c83a 	sub	r2,r2,r7
    e364:	dc400315 	stw	r17,12(sp)
    e368:	dc000215 	stw	r16,8(sp)
    e36c:	dfc00515 	stw	ra,20(sp)
    e370:	2023883a 	mov	r17,r4
    e374:	d9800115 	stw	r6,4(sp)
    e378:	2825883a 	mov	r18,r5
    e37c:	143fffc4 	addi	r16,r2,-1
    e380:	8009883a 	mov	r4,r16
    e384:	d80b883a 	mov	r5,sp
    e388:	000de4c0 	call	de4c <_Z12read_uleb128PKhPj>
    e38c:	1021883a 	mov	r16,r2
    e390:	d8800017 	ldw	r2,0(sp)
    e394:	8809883a 	mov	r4,r17
    e398:	100b883a 	mov	r5,r2
    e39c:	10000826 	beq	r2,zero,e3c0 <_Z20check_exception_specP16lsda_header_infoPKSt9type_infoPvi+0x6c>
    e3a0:	000e2d00 	call	e2d0 <_Z15get_ttype_entryP16lsda_header_infoj>
    e3a4:	1009883a 	mov	r4,r2
    e3a8:	900b883a 	mov	r5,r18
    e3ac:	d9800104 	addi	r6,sp,4
    e3b0:	000ded00 	call	ded0 <_Z16get_adjusted_ptrPKSt9type_infoS1_PPv>
    e3b4:	10803fcc 	andi	r2,r2,255
    e3b8:	103ff126 	beq	r2,zero,e380 <_Z20check_exception_specP16lsda_header_infoPKSt9type_infoPvi+0x2c>
    e3bc:	00800044 	movi	r2,1
    e3c0:	dfc00517 	ldw	ra,20(sp)
    e3c4:	dc800417 	ldw	r18,16(sp)
    e3c8:	dc400317 	ldw	r17,12(sp)
    e3cc:	dc000217 	ldw	r16,8(sp)
    e3d0:	dec00604 	addi	sp,sp,24
    e3d4:	f800283a 	ret

0000e3d8 <__cxa_call_unexpected>:
    e3d8:	deffe204 	addi	sp,sp,-120
    e3dc:	00800074 	movhi	r2,1
    e3e0:	10b95604 	addi	r2,r2,-6824
    e3e4:	00c000b4 	movhi	r3,2
    e3e8:	18f9af04 	addi	r3,r3,-6468
    e3ec:	d8800c15 	stw	r2,48(sp)
    e3f0:	d9001815 	stw	r4,96(sp)
    e3f4:	00800074 	movhi	r2,1
    e3f8:	10b91804 	addi	r2,r2,-7072
    e3fc:	d9000604 	addi	r4,sp,24
    e400:	d8c00d15 	stw	r3,52(sp)
    e404:	dfc01d15 	stw	ra,116(sp)
    e408:	d8800f15 	stw	r2,60(sp)
    e40c:	df001c15 	stw	fp,112(sp)
    e410:	ddc01b15 	stw	r23,108(sp)
    e414:	dec00e15 	stw	sp,56(sp)
    e418:	dec01015 	stw	sp,64(sp)
    e41c:	00108500 	call	10850 <_Unwind_SjLj_Register>
    e420:	d9001817 	ldw	r4,96(sp)
    e424:	000dd280 	call	dd28 <__cxa_begin_catch>
    e428:	d8801817 	ldw	r2,96(sp)
    e42c:	10fff504 	addi	r3,r2,-44
    e430:	18800917 	ldw	r2,36(r3)
    e434:	19400617 	ldw	r5,24(r3)
    e438:	19000217 	ldw	r4,8(r3)
    e43c:	d8800215 	stw	r2,8(sp)
    e440:	18800817 	ldw	r2,32(r3)
    e444:	18c00317 	ldw	r3,12(r3)
    e448:	d9401615 	stw	r5,88(sp)
    e44c:	d8801715 	stw	r2,92(sp)
    e450:	00800084 	movi	r2,2
    e454:	d8c01515 	stw	r3,84(sp)
    e458:	d8800715 	stw	r2,28(sp)
    e45c:	000ed480 	call	ed48 <_ZN10__cxxabiv112__unexpectedEPFvvE>
    e460:	d8800717 	ldw	r2,28(sp)
    e464:	d8c00817 	ldw	r3,32(sp)
    e468:	d8801a15 	stw	r2,104(sp)
    e46c:	d9401a17 	ldw	r5,104(sp)
    e470:	00800044 	movi	r2,1
    e474:	d8c01915 	stw	r3,100(sp)
    e478:	28800826 	beq	r5,r2,e49c <__cxa_call_unexpected+0xc4>
    e47c:	d8000715 	stw	zero,28(sp)
    e480:	000dc840 	call	dc84 <__cxa_end_catch>
    e484:	d8000715 	stw	zero,28(sp)
    e488:	000dc840 	call	dc84 <__cxa_end_catch>
    e48c:	d9001917 	ldw	r4,100(sp)
    e490:	00bfffc4 	movi	r2,-1
    e494:	d8800715 	stw	r2,28(sp)
    e498:	0010b1c0 	call	10b1c <_Unwind_SjLj_Resume>
    e49c:	d9001917 	ldw	r4,100(sp)
    e4a0:	000dd280 	call	dd28 <__cxa_begin_catch>
    e4a4:	000ec540 	call	ec54 <__cxa_get_globals_fast>
    e4a8:	10800017 	ldw	r2,0(r2)
    e4ac:	d8c01a17 	ldw	r3,104(sp)
    e4b0:	0009883a 	mov	r4,zero
    e4b4:	11401004 	addi	r5,r2,64
    e4b8:	d9401315 	stw	r5,76(sp)
    e4bc:	d8801415 	stw	r2,80(sp)
    e4c0:	d8c00715 	stw	r3,28(sp)
    e4c4:	d9401717 	ldw	r5,92(sp)
    e4c8:	d80d883a 	mov	r6,sp
    e4cc:	000e1d00 	call	e1d0 <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
    e4d0:	d8801417 	ldw	r2,80(sp)
    e4d4:	d809883a 	mov	r4,sp
    e4d8:	d9801317 	ldw	r6,76(sp)
    e4dc:	11400017 	ldw	r5,0(r2)
    e4e0:	d9c01617 	ldw	r7,88(sp)
    e4e4:	000e3540 	call	e354 <_Z20check_exception_specP16lsda_header_infoPKSt9type_infoPvi>
    e4e8:	10803fcc 	andi	r2,r2,255
    e4ec:	1000151e 	bne	r2,zero,e544 <__cxa_call_unexpected+0x16c>
    e4f0:	d8c01a17 	ldw	r3,104(sp)
    e4f4:	d809883a 	mov	r4,sp
    e4f8:	014000b4 	movhi	r5,2
    e4fc:	297b4a04 	addi	r5,r5,-4824
    e500:	d8c00715 	stw	r3,28(sp)
    e504:	000d883a 	mov	r6,zero
    e508:	d9c01617 	ldw	r7,88(sp)
    e50c:	000e3540 	call	e354 <_Z20check_exception_specP16lsda_header_infoPKSt9type_infoPvi>
    e510:	10803fcc 	andi	r2,r2,255
    e514:	10000c26 	beq	r2,zero,e548 <__cxa_call_unexpected+0x170>
    e518:	01000104 	movi	r4,4
    e51c:	000efe80 	call	efe8 <__cxa_allocate_exception>
    e520:	1009883a 	mov	r4,r2
    e524:	008000b4 	movhi	r2,2
    e528:	10bb3d04 	addi	r2,r2,-4876
    e52c:	20800015 	stw	r2,0(r4)
    e530:	014000b4 	movhi	r5,2
    e534:	297b4a04 	addi	r5,r5,-4824
    e538:	01800074 	movhi	r6,1
    e53c:	31bbca04 	addi	r6,r6,-4312
    e540:	000db880 	call	db88 <__cxa_throw>
    e544:	000db140 	call	db14 <__cxa_rethrow>
    e548:	d9401a17 	ldw	r5,104(sp)
    e54c:	d9001517 	ldw	r4,84(sp)
    e550:	d9400715 	stw	r5,28(sp)
    e554:	000ec8c0 	call	ec8c <_ZN10__cxxabiv111__terminateEPFvvE>

0000e558 <__gxx_personality_sj0>:
    e558:	deffd304 	addi	sp,sp,-180
    e55c:	00800074 	movhi	r2,1
    e560:	10ba7d04 	addi	r2,r2,-5644
    e564:	00c000b4 	movhi	r3,2
    e568:	18f9b304 	addi	r3,r3,-6452
    e56c:	d8801315 	stw	r2,76(sp)
    e570:	d9002315 	stw	r4,140(sp)
    e574:	00800074 	movhi	r2,1
    e578:	10b95604 	addi	r2,r2,-6824
    e57c:	d9000a04 	addi	r4,sp,40
    e580:	d8801015 	stw	r2,64(sp)
    e584:	d8c01115 	stw	r3,68(sp)
    e588:	dfc02c15 	stw	ra,176(sp)
    e58c:	df002b15 	stw	fp,172(sp)
    e590:	ddc02a15 	stw	r23,168(sp)
    e594:	dec01215 	stw	sp,72(sp)
    e598:	dec01415 	stw	sp,80(sp)
    e59c:	d9802515 	stw	r6,148(sp)
    e5a0:	d9402415 	stw	r5,144(sp)
    e5a4:	d9c02615 	stw	r7,152(sp)
    e5a8:	00108500 	call	10850 <_Unwind_SjLj_Register>
    e5ac:	d8c02317 	ldw	r3,140(sp)
    e5b0:	00800044 	movi	r2,1
    e5b4:	18800a26 	beq	r3,r2,e5e0 <__gxx_personality_sj0+0x88>
    e5b8:	010000c4 	movi	r4,3
    e5bc:	d9002215 	stw	r4,136(sp)
    e5c0:	d9000a04 	addi	r4,sp,40
    e5c4:	00108600 	call	10860 <_Unwind_SjLj_Unregister>
    e5c8:	d8802217 	ldw	r2,136(sp)
    e5cc:	dfc02c17 	ldw	ra,176(sp)
    e5d0:	df002b17 	ldw	fp,172(sp)
    e5d4:	ddc02a17 	ldw	r23,168(sp)
    e5d8:	dec02d04 	addi	sp,sp,180
    e5dc:	f800283a 	ret
    e5e0:	d9402d17 	ldw	r5,180(sp)
    e5e4:	d9002517 	ldw	r4,148(sp)
    e5e8:	0007883a 	mov	r3,zero
    e5ec:	28800504 	addi	r2,r5,20
    e5f0:	d8800015 	stw	r2,0(sp)
    e5f4:	28bff504 	addi	r2,r5,-44
    e5f8:	d8801a15 	stw	r2,104(sp)
    e5fc:	0090caf4 	movhi	r2,17195
    e600:	108ac004 	addi	r2,r2,11008
    e604:	2080ad26 	beq	r4,r2,e8bc <__gxx_personality_sj0+0x364>
    e608:	d8c02105 	stb	r3,132(sp)
    e60c:	d8c02417 	ldw	r3,144(sp)
    e610:	00800184 	movi	r2,6
    e614:	1880281e 	bne	r3,r2,e6b8 <__gxx_personality_sj0+0x160>
    e618:	d8802103 	ldbu	r2,132(sp)
    e61c:	10002626 	beq	r2,zero,e6b8 <__gxx_personality_sj0+0x160>
    e620:	d9001a17 	ldw	r4,104(sp)
    e624:	d9401a17 	ldw	r5,104(sp)
    e628:	d8801a17 	ldw	r2,104(sp)
    e62c:	21000917 	ldw	r4,36(r4)
    e630:	29400617 	ldw	r5,24(r5)
    e634:	10800817 	ldw	r2,32(r2)
    e638:	d9001d15 	stw	r4,116(sp)
    e63c:	d9401b15 	stw	r5,108(sp)
    e640:	d8802015 	stw	r2,128(sp)
    e644:	2000ad1e 	bne	r4,zero,e8fc <__gxx_personality_sj0+0x3a4>
    e648:	01000044 	movi	r4,1
    e64c:	00800044 	movi	r2,1
    e650:	2080e126 	beq	r4,r2,e9d8 <__gxx_personality_sj0+0x480>
    e654:	d8801b17 	ldw	r2,108(sp)
    e658:	1000d316 	blt	r2,zero,e9a8 <__gxx_personality_sj0+0x450>
    e65c:	d9802d17 	ldw	r6,180(sp)
    e660:	d9002e17 	ldw	r4,184(sp)
    e664:	00bfffc4 	movi	r2,-1
    e668:	000b883a 	mov	r5,zero
    e66c:	d8800b15 	stw	r2,44(sp)
    e670:	00108980 	call	10898 <_Unwind_SetGR>
    e674:	d9801b17 	ldw	r6,108(sp)
    e678:	d9002e17 	ldw	r4,184(sp)
    e67c:	01400044 	movi	r5,1
    e680:	00108980 	call	10898 <_Unwind_SetGR>
    e684:	d9002e17 	ldw	r4,184(sp)
    e688:	d9401d17 	ldw	r5,116(sp)
    e68c:	00108d40 	call	108d4 <_Unwind_SetIP>
    e690:	010001c4 	movi	r4,7
    e694:	d9002215 	stw	r4,136(sp)
    e698:	d9000a04 	addi	r4,sp,40
    e69c:	00108600 	call	10860 <_Unwind_SjLj_Unregister>
    e6a0:	d8802217 	ldw	r2,136(sp)
    e6a4:	dfc02c17 	ldw	ra,176(sp)
    e6a8:	df002b17 	ldw	fp,172(sp)
    e6ac:	ddc02a17 	ldw	r23,168(sp)
    e6b0:	dec02d04 	addi	sp,sp,180
    e6b4:	f800283a 	ret
    e6b8:	d9002e17 	ldw	r4,184(sp)
    e6bc:	00ffffc4 	movi	r3,-1
    e6c0:	d8c00b15 	stw	r3,44(sp)
    e6c4:	00108e40 	call	108e4 <_Unwind_GetLanguageSpecificData>
    e6c8:	10007226 	beq	r2,zero,e894 <__gxx_personality_sj0+0x33c>
    e6cc:	d9002e17 	ldw	r4,184(sp)
    e6d0:	d9800404 	addi	r6,sp,16
    e6d4:	100b883a 	mov	r5,r2
    e6d8:	d8802015 	stw	r2,128(sp)
    e6dc:	000e1d00 	call	e1d0 <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
    e6e0:	d9000903 	ldbu	r4,36(sp)
    e6e4:	d9402e17 	ldw	r5,184(sp)
    e6e8:	d8801e15 	stw	r2,120(sp)
    e6ec:	000e1400 	call	e140 <_Z21base_of_encoded_valuehP15_Unwind_Context>
    e6f0:	d9002e17 	ldw	r4,184(sp)
    e6f4:	d8800615 	stw	r2,24(sp)
    e6f8:	00108b00 	call	108b0 <_Unwind_GetIP>
    e6fc:	10bfffc4 	addi	r2,r2,-1
    e700:	d8801c15 	stw	r2,112(sp)
    e704:	10006316 	blt	r2,zero,e894 <__gxx_personality_sj0+0x33c>
    e708:	10001b1e 	bne	r2,zero,e778 <__gxx_personality_sj0+0x220>
    e70c:	01000044 	movi	r4,1
    e710:	d8001f15 	stw	zero,124(sp)
    e714:	d8001d15 	stw	zero,116(sp)
    e718:	d8001b15 	stw	zero,108(sp)
    e71c:	d9402417 	ldw	r5,144(sp)
    e720:	00c00044 	movi	r3,1
    e724:	28c4703a 	and	r2,r5,r3
    e728:	1005003a 	cmpeq	r2,r2,zero
    e72c:	10006a1e 	bne	r2,zero,e8d8 <__gxx_personality_sj0+0x380>
    e730:	00800084 	movi	r2,2
    e734:	20805726 	beq	r4,r2,e894 <__gxx_personality_sj0+0x33c>
    e738:	d8802103 	ldbu	r2,132(sp)
    e73c:	10008626 	beq	r2,zero,e958 <__gxx_personality_sj0+0x400>
    e740:	d9001a17 	ldw	r4,104(sp)
    e744:	d9401d17 	ldw	r5,116(sp)
    e748:	d8801b17 	ldw	r2,108(sp)
    e74c:	00c00184 	movi	r3,6
    e750:	d8c02215 	stw	r3,136(sp)
    e754:	21400915 	stw	r5,36(r4)
    e758:	20800615 	stw	r2,24(r4)
    e75c:	d8c01f17 	ldw	r3,124(sp)
    e760:	d9402017 	ldw	r5,128(sp)
    e764:	d8800017 	ldw	r2,0(sp)
    e768:	20c00715 	stw	r3,28(r4)
    e76c:	21400815 	stw	r5,32(r4)
    e770:	20800a15 	stw	r2,40(r4)
    e774:	003f9206 	br	e5c0 <__gxx_personality_sj0+0x68>
    e778:	d9001e17 	ldw	r4,120(sp)
    e77c:	d9400204 	addi	r5,sp,8
    e780:	000de4c0 	call	de4c <_Z12read_uleb128PKhPj>
    e784:	d9401c17 	ldw	r5,112(sp)
    e788:	1009883a 	mov	r4,r2
    e78c:	297fffc4 	addi	r5,r5,-1
    e790:	d9401c15 	stw	r5,112(sp)
    e794:	d9400104 	addi	r5,sp,4
    e798:	000de4c0 	call	de4c <_Z12read_uleb128PKhPj>
    e79c:	d8801e15 	stw	r2,120(sp)
    e7a0:	d8801c17 	ldw	r2,112(sp)
    e7a4:	103ff41e 	bne	r2,zero,e778 <__gxx_personality_sj0+0x220>
    e7a8:	d8800217 	ldw	r2,8(sp)
    e7ac:	d8c00117 	ldw	r3,4(sp)
    e7b0:	01000044 	movi	r4,1
    e7b4:	1105883a 	add	r2,r2,r4
    e7b8:	d8801d15 	stw	r2,116(sp)
    e7bc:	1800541e 	bne	r3,zero,e910 <__gxx_personality_sj0+0x3b8>
    e7c0:	d8001f15 	stw	zero,124(sp)
    e7c4:	d8c01d17 	ldw	r3,116(sp)
    e7c8:	18003226 	beq	r3,zero,e894 <__gxx_personality_sj0+0x33c>
    e7cc:	d9001f17 	ldw	r4,124(sp)
    e7d0:	20007226 	beq	r4,zero,e99c <__gxx_personality_sj0+0x444>
    e7d4:	d9402417 	ldw	r5,144(sp)
    e7d8:	2880020c 	andi	r2,r5,8
    e7dc:	10006a1e 	bne	r2,zero,e988 <__gxx_personality_sj0+0x430>
    e7e0:	d8802103 	ldbu	r2,132(sp)
    e7e4:	10006826 	beq	r2,zero,e988 <__gxx_personality_sj0+0x430>
    e7e8:	d8801a17 	ldw	r2,104(sp)
    e7ec:	10800017 	ldw	r2,0(r2)
    e7f0:	d8801915 	stw	r2,100(sp)
    e7f4:	d8c01917 	ldw	r3,100(sp)
    e7f8:	d8001805 	stb	zero,96(sp)
    e7fc:	1807003a 	cmpeq	r3,r3,zero
    e800:	d8c02715 	stw	r3,156(sp)
    e804:	00000706 	br	e824 <__gxx_personality_sj0+0x2cc>
    e808:	01000044 	movi	r4,1
    e80c:	d9001805 	stb	r4,96(sp)
    e810:	d8800217 	ldw	r2,8(sp)
    e814:	10005e26 	beq	r2,zero,e990 <__gxx_personality_sj0+0x438>
    e818:	d8c01717 	ldw	r3,92(sp)
    e81c:	1885883a 	add	r2,r3,r2
    e820:	d8801f15 	stw	r2,124(sp)
    e824:	d9001f17 	ldw	r4,124(sp)
    e828:	d9400104 	addi	r5,sp,4
    e82c:	000de7c0 	call	de7c <_Z12read_sleb128PKhPi>
    e830:	1009883a 	mov	r4,r2
    e834:	d9400204 	addi	r5,sp,8
    e838:	d8801715 	stw	r2,92(sp)
    e83c:	000de7c0 	call	de7c <_Z12read_sleb128PKhPi>
    e840:	d8800117 	ldw	r2,4(sp)
    e844:	103ff026 	beq	r2,zero,e808 <__gxx_personality_sj0+0x2b0>
    e848:	0080360e 	bge	zero,r2,e924 <__gxx_personality_sj0+0x3cc>
    e84c:	017fffc4 	movi	r5,-1
    e850:	d9400b15 	stw	r5,44(sp)
    e854:	d9000404 	addi	r4,sp,16
    e858:	100b883a 	mov	r5,r2
    e85c:	000e2d00 	call	e2d0 <_Z15get_ttype_entryP16lsda_header_infoj>
    e860:	10000826 	beq	r2,zero,e884 <__gxx_personality_sj0+0x32c>
    e864:	d8c02717 	ldw	r3,156(sp)
    e868:	183fe91e 	bne	r3,zero,e810 <__gxx_personality_sj0+0x2b8>
    e86c:	d9401917 	ldw	r5,100(sp)
    e870:	1009883a 	mov	r4,r2
    e874:	d80d883a 	mov	r6,sp
    e878:	000ded00 	call	ded0 <_Z16get_adjusted_ptrPKSt9type_infoS1_PPv>
    e87c:	10803fcc 	andi	r2,r2,255
    e880:	103fe326 	beq	r2,zero,e810 <__gxx_personality_sj0+0x2b8>
    e884:	d9000117 	ldw	r4,4(sp)
    e888:	d9001b15 	stw	r4,108(sp)
    e88c:	010000c4 	movi	r4,3
    e890:	003fa206 	br	e71c <__gxx_personality_sj0+0x1c4>
    e894:	01400204 	movi	r5,8
    e898:	d9000a04 	addi	r4,sp,40
    e89c:	d9402215 	stw	r5,136(sp)
    e8a0:	00108600 	call	10860 <_Unwind_SjLj_Unregister>
    e8a4:	d8802217 	ldw	r2,136(sp)
    e8a8:	dfc02c17 	ldw	ra,176(sp)
    e8ac:	df002b17 	ldw	fp,172(sp)
    e8b0:	ddc02a17 	ldw	r23,168(sp)
    e8b4:	dec02d04 	addi	sp,sp,180
    e8b8:	f800283a 	ret
    e8bc:	d9402617 	ldw	r5,152(sp)
    e8c0:	0091d3b4 	movhi	r2,18254
    e8c4:	109550c4 	addi	r2,r2,21827
    e8c8:	28bf4f1e 	bne	r5,r2,e608 <__gxx_personality_sj0+0xb0>
    e8cc:	d8802317 	ldw	r2,140(sp)
    e8d0:	1007883a 	mov	r3,r2
    e8d4:	003f4c06 	br	e608 <__gxx_personality_sj0+0xb0>
    e8d8:	d9402417 	ldw	r5,144(sp)
    e8dc:	2880020c 	andi	r2,r5,8
    e8e0:	10000826 	beq	r2,zero,e904 <__gxx_personality_sj0+0x3ac>
    e8e4:	20c04026 	beq	r4,r3,e9e8 <__gxx_personality_sj0+0x490>
    e8e8:	d8801b17 	ldw	r2,108(sp)
    e8ec:	103f5b0e 	bge	r2,zero,e65c <__gxx_personality_sj0+0x104>
    e8f0:	00800084 	movi	r2,2
    e8f4:	d8800b15 	stw	r2,44(sp)
    e8f8:	000ed580 	call	ed58 <_ZSt10unexpectedv>
    e8fc:	010000c4 	movi	r4,3
    e900:	003f5206 	br	e64c <__gxx_personality_sj0+0xf4>
    e904:	d8802103 	ldbu	r2,132(sp)
    e908:	103f501e 	bne	r2,zero,e64c <__gxx_personality_sj0+0xf4>
    e90c:	003ff506 	br	e8e4 <__gxx_personality_sj0+0x38c>
    e910:	d8800817 	ldw	r2,32(sp)
    e914:	1885883a 	add	r2,r3,r2
    e918:	1105c83a 	sub	r2,r2,r4
    e91c:	d8801f15 	stw	r2,124(sp)
    e920:	003fa806 	br	e7c4 <__gxx_personality_sj0+0x26c>
    e924:	d9002717 	ldw	r4,156(sp)
    e928:	20000e1e 	bne	r4,zero,e964 <__gxx_personality_sj0+0x40c>
    e92c:	017fffc4 	movi	r5,-1
    e930:	d9400b15 	stw	r5,44(sp)
    e934:	d9800017 	ldw	r6,0(sp)
    e938:	d9401917 	ldw	r5,100(sp)
    e93c:	100f883a 	mov	r7,r2
    e940:	d9000404 	addi	r4,sp,16
    e944:	000e3540 	call	e354 <_Z20check_exception_specP16lsda_header_infoPKSt9type_infoPvi>
    e948:	1080005c 	xori	r2,r2,1
    e94c:	10803fcc 	andi	r2,r2,255
    e950:	103faf26 	beq	r2,zero,e810 <__gxx_personality_sj0+0x2b8>
    e954:	003fcb06 	br	e884 <__gxx_personality_sj0+0x32c>
    e958:	00800184 	movi	r2,6
    e95c:	d8802215 	stw	r2,136(sp)
    e960:	003f1706 	br	e5c0 <__gxx_personality_sj0+0x68>
    e964:	d9000717 	ldw	r4,28(sp)
    e968:	d9400304 	addi	r5,sp,12
    e96c:	2089c83a 	sub	r4,r4,r2
    e970:	213fffc4 	addi	r4,r4,-1
    e974:	000de4c0 	call	de4c <_Z12read_uleb128PKhPj>
    e978:	d8c00317 	ldw	r3,12(sp)
    e97c:	1807003a 	cmpeq	r3,r3,zero
    e980:	1805883a 	mov	r2,r3
    e984:	003ff106 	br	e94c <__gxx_personality_sj0+0x3f4>
    e988:	d8001915 	stw	zero,100(sp)
    e98c:	003f9906 	br	e7f4 <__gxx_personality_sj0+0x29c>
    e990:	d8801803 	ldbu	r2,96(sp)
    e994:	1004c03a 	cmpne	r2,r2,zero
    e998:	103fbe26 	beq	r2,zero,e894 <__gxx_personality_sj0+0x33c>
    e99c:	01000084 	movi	r4,2
    e9a0:	d8001b15 	stw	zero,108(sp)
    e9a4:	003f5d06 	br	e71c <__gxx_personality_sj0+0x1c4>
    e9a8:	d9402017 	ldw	r5,128(sp)
    e9ac:	d9002e17 	ldw	r4,184(sp)
    e9b0:	00bfffc4 	movi	r2,-1
    e9b4:	d9800404 	addi	r6,sp,16
    e9b8:	d8800b15 	stw	r2,44(sp)
    e9bc:	000e1d00 	call	e1d0 <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
    e9c0:	d9000903 	ldbu	r4,36(sp)
    e9c4:	d9402e17 	ldw	r5,184(sp)
    e9c8:	000e1400 	call	e140 <_Z21base_of_encoded_valuehP15_Unwind_Context>
    e9cc:	d8c01a17 	ldw	r3,104(sp)
    e9d0:	18800915 	stw	r2,36(r3)
    e9d4:	003f2106 	br	e65c <__gxx_personality_sj0+0x104>
    e9d8:	d9002d17 	ldw	r4,180(sp)
    e9dc:	00bfffc4 	movi	r2,-1
    e9e0:	d8800b15 	stw	r2,44(sp)
    e9e4:	000ee700 	call	ee70 <__cxa_call_terminate>
    e9e8:	00bfffc4 	movi	r2,-1
    e9ec:	d8800b15 	stw	r2,44(sp)
    e9f0:	000ed300 	call	ed30 <_ZSt9terminatev>
    e9f4:	d9000b17 	ldw	r4,44(sp)
    e9f8:	d9400c17 	ldw	r5,48(sp)
    e9fc:	00800044 	movi	r2,1
    ea00:	d9002915 	stw	r4,164(sp)
    ea04:	d9402815 	stw	r5,160(sp)
    ea08:	20800626 	beq	r4,r2,ea24 <__gxx_personality_sj0+0x4cc>
    ea0c:	d8000b15 	stw	zero,44(sp)
    ea10:	000dc840 	call	dc84 <__cxa_end_catch>
    ea14:	d9002817 	ldw	r4,160(sp)
    ea18:	00bfffc4 	movi	r2,-1
    ea1c:	d8800b15 	stw	r2,44(sp)
    ea20:	0010b1c0 	call	10b1c <_Unwind_SjLj_Resume>
    ea24:	d9002817 	ldw	r4,160(sp)
    ea28:	000dd280 	call	dd28 <__cxa_begin_catch>
    ea2c:	d8c02917 	ldw	r3,164(sp)
    ea30:	d8c00b15 	stw	r3,44(sp)
    ea34:	000ed300 	call	ed30 <_ZSt9terminatev>

0000ea38 <_ZNSt8bad_castD0Ev>:
    ea38:	defffe04 	addi	sp,sp,-8
    ea3c:	008000b4 	movhi	r2,2
    ea40:	10bb1a04 	addi	r2,r2,-5016
    ea44:	dc400015 	stw	r17,0(sp)
    ea48:	20800015 	stw	r2,0(r4)
    ea4c:	2023883a 	mov	r17,r4
    ea50:	dfc00115 	stw	ra,4(sp)
    ea54:	000eee40 	call	eee4 <_ZNSt9exceptionD2Ev>
    ea58:	8809883a 	mov	r4,r17
    ea5c:	dfc00117 	ldw	ra,4(sp)
    ea60:	dc400017 	ldw	r17,0(sp)
    ea64:	dec00204 	addi	sp,sp,8
    ea68:	000de401 	jmpi	de40 <_ZdlPv>

0000ea6c <_ZNSt8bad_castD1Ev>:
    ea6c:	008000b4 	movhi	r2,2
    ea70:	10bb1a04 	addi	r2,r2,-5016
    ea74:	20800015 	stw	r2,0(r4)
    ea78:	000eee41 	jmpi	eee4 <_ZNSt9exceptionD2Ev>

0000ea7c <_ZNSt8bad_castD2Ev>:
    ea7c:	008000b4 	movhi	r2,2
    ea80:	10bb1a04 	addi	r2,r2,-5016
    ea84:	20800015 	stw	r2,0(r4)
    ea88:	000eee41 	jmpi	eee4 <_ZNSt9exceptionD2Ev>

0000ea8c <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
    ea8c:	defffb04 	addi	sp,sp,-20
    ea90:	dd400315 	stw	r21,12(sp)
    ea94:	dcc00215 	stw	r19,8(sp)
    ea98:	dc400115 	stw	r17,4(sp)
    ea9c:	dc000015 	stw	r16,0(sp)
    eaa0:	2823883a 	mov	r17,r5
    eaa4:	3027883a 	mov	r19,r6
    eaa8:	382b883a 	mov	r21,r7
    eaac:	dfc00415 	stw	ra,16(sp)
    eab0:	2021883a 	mov	r16,r4
    eab4:	000f2b40 	call	f2b4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
    eab8:	10803fcc 	andi	r2,r2,255
    eabc:	880b883a 	mov	r5,r17
    eac0:	980d883a 	mov	r6,r19
    eac4:	a80f883a 	mov	r7,r21
    eac8:	00c00044 	movi	r3,1
    eacc:	1000051e 	bne	r2,zero,eae4 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x58>
    ead0:	81000217 	ldw	r4,8(r16)
    ead4:	20800017 	ldw	r2,0(r4)
    ead8:	10c00617 	ldw	r3,24(r2)
    eadc:	183ee83a 	callr	r3
    eae0:	10c03fcc 	andi	r3,r2,255
    eae4:	1805883a 	mov	r2,r3
    eae8:	dfc00417 	ldw	ra,16(sp)
    eaec:	dd400317 	ldw	r21,12(sp)
    eaf0:	dcc00217 	ldw	r19,8(sp)
    eaf4:	dc400117 	ldw	r17,4(sp)
    eaf8:	dc000017 	ldw	r16,0(sp)
    eafc:	dec00504 	addi	sp,sp,20
    eb00:	f800283a 	ret

0000eb04 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
    eb04:	defffe04 	addi	sp,sp,-8
    eb08:	008000b4 	movhi	r2,2
    eb0c:	10bb2504 	addi	r2,r2,-4972
    eb10:	dc400015 	stw	r17,0(sp)
    eb14:	20800015 	stw	r2,0(r4)
    eb18:	2023883a 	mov	r17,r4
    eb1c:	dfc00115 	stw	ra,4(sp)
    eb20:	000f2440 	call	f244 <_ZN10__cxxabiv117__class_type_infoD2Ev>
    eb24:	8809883a 	mov	r4,r17
    eb28:	dfc00117 	ldw	ra,4(sp)
    eb2c:	dc400017 	ldw	r17,0(sp)
    eb30:	dec00204 	addi	sp,sp,8
    eb34:	000de401 	jmpi	de40 <_ZdlPv>

0000eb38 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
    eb38:	008000b4 	movhi	r2,2
    eb3c:	10bb2504 	addi	r2,r2,-4972
    eb40:	20800015 	stw	r2,0(r4)
    eb44:	000f2441 	jmpi	f244 <_ZN10__cxxabiv117__class_type_infoD2Ev>

0000eb48 <_ZN10__cxxabiv120__si_class_type_infoD2Ev>:
    eb48:	008000b4 	movhi	r2,2
    eb4c:	10bb2504 	addi	r2,r2,-4972
    eb50:	20800015 	stw	r2,0(r4)
    eb54:	000f2441 	jmpi	f244 <_ZN10__cxxabiv117__class_type_infoD2Ev>

0000eb58 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_>:
    eb58:	da400017 	ldw	r9,0(sp)
    eb5c:	2011883a 	mov	r8,r4
    eb60:	49800526 	beq	r9,r6,eb78 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0x20>
    eb64:	41000217 	ldw	r4,8(r8)
    eb68:	20800017 	ldw	r2,0(r4)
    eb6c:	da400015 	stw	r9,0(sp)
    eb70:	10c00817 	ldw	r3,32(r2)
    eb74:	1800683a 	jmp	r3
    eb78:	39000117 	ldw	r4,4(r7)
    eb7c:	40c00117 	ldw	r3,4(r8)
    eb80:	00800184 	movi	r2,6
    eb84:	193ff71e 	bne	r3,r4,eb64 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0xc>
    eb88:	f800283a 	ret

0000eb8c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
    eb8c:	20c00117 	ldw	r3,4(r4)
    eb90:	38800117 	ldw	r2,4(r7)
    eb94:	defffb04 	addi	sp,sp,-20
    eb98:	dfc00415 	stw	ra,16(sp)
    eb9c:	da000517 	ldw	r8,20(sp)
    eba0:	dac00617 	ldw	r11,24(sp)
    eba4:	da400717 	ldw	r9,28(sp)
    eba8:	da800817 	ldw	r10,32(sp)
    ebac:	18800c1e 	bne	r3,r2,ebe0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
    ebb0:	51800115 	stw	r6,4(r10)
    ebb4:	52000015 	stw	r8,0(r10)
    ebb8:	28001c16 	blt	r5,zero,ec2c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xa0>
    ebbc:	4145883a 	add	r2,r8,r5
    ebc0:	48801e26 	beq	r9,r2,ec3c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xb0>
    ebc4:	00800044 	movi	r2,1
    ebc8:	0007883a 	mov	r3,zero
    ebcc:	50800315 	stw	r2,12(r10)
    ebd0:	1805883a 	mov	r2,r3
    ebd4:	dfc00417 	ldw	ra,16(sp)
    ebd8:	dec00504 	addi	sp,sp,20
    ebdc:	f800283a 	ret
    ebe0:	42400d26 	beq	r8,r9,ec18 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x8c>
    ebe4:	21000217 	ldw	r4,8(r4)
    ebe8:	20800017 	ldw	r2,0(r4)
    ebec:	da000015 	stw	r8,0(sp)
    ebf0:	dac00115 	stw	r11,4(sp)
    ebf4:	da400215 	stw	r9,8(sp)
    ebf8:	da800315 	stw	r10,12(sp)
    ebfc:	10c00717 	ldw	r3,28(r2)
    ec00:	183ee83a 	callr	r3
    ec04:	10c03fcc 	andi	r3,r2,255
    ec08:	1805883a 	mov	r2,r3
    ec0c:	dfc00417 	ldw	ra,16(sp)
    ec10:	dec00504 	addi	sp,sp,20
    ec14:	f800283a 	ret
    ec18:	58800117 	ldw	r2,4(r11)
    ec1c:	18bff11e 	bne	r3,r2,ebe4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x58>
    ec20:	0007883a 	mov	r3,zero
    ec24:	51800215 	stw	r6,8(r10)
    ec28:	003fe906 	br	ebd0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x44>
    ec2c:	00bfff84 	movi	r2,-2
    ec30:	28800426 	beq	r5,r2,ec44 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xb8>
    ec34:	0007883a 	mov	r3,zero
    ec38:	003fe506 	br	ebd0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x44>
    ec3c:	00800184 	movi	r2,6
    ec40:	003fe106 	br	ebc8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3c>
    ec44:	00800044 	movi	r2,1
    ec48:	0007883a 	mov	r3,zero
    ec4c:	50800315 	stw	r2,12(r10)
    ec50:	003fdf06 	br	ebd0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x44>

0000ec54 <__cxa_get_globals_fast>:
    ec54:	d0a70c04 	addi	r2,gp,-25552
    ec58:	f800283a 	ret

0000ec5c <__cxa_get_globals>:
    ec5c:	d0a70c04 	addi	r2,gp,-25552
    ec60:	f800283a 	ret

0000ec64 <_ZSt13set_terminatePFvvE>:
    ec64:	00c000b4 	movhi	r3,2
    ec68:	18c3a504 	addi	r3,r3,3732
    ec6c:	18800017 	ldw	r2,0(r3)
    ec70:	19000015 	stw	r4,0(r3)
    ec74:	f800283a 	ret

0000ec78 <_ZSt14set_unexpectedPFvvE>:
    ec78:	00c000b4 	movhi	r3,2
    ec7c:	18c3a604 	addi	r3,r3,3736
    ec80:	18800017 	ldw	r2,0(r3)
    ec84:	19000015 	stw	r4,0(r3)
    ec88:	f800283a 	ret

0000ec8c <_ZN10__cxxabiv111__terminateEPFvvE>:
    ec8c:	deffed04 	addi	sp,sp,-76
    ec90:	00800074 	movhi	r2,1
    ec94:	10b95604 	addi	r2,r2,-6824
    ec98:	d8800615 	stw	r2,24(sp)
    ec9c:	00c000b4 	movhi	r3,2
    eca0:	18f9b704 	addi	r3,r3,-6436
    eca4:	00800074 	movhi	r2,1
    eca8:	10bb3a04 	addi	r2,r2,-4888
    ecac:	d9000d15 	stw	r4,52(sp)
    ecb0:	d809883a 	mov	r4,sp
    ecb4:	d8800915 	stw	r2,36(sp)
    ecb8:	dfc01215 	stw	ra,72(sp)
    ecbc:	df001115 	stw	fp,68(sp)
    ecc0:	ddc01015 	stw	r23,64(sp)
    ecc4:	d8c00715 	stw	r3,28(sp)
    ecc8:	dec00815 	stw	sp,32(sp)
    eccc:	dec00a15 	stw	sp,40(sp)
    ecd0:	00108500 	call	10850 <_Unwind_SjLj_Register>
    ecd4:	00800084 	movi	r2,2
    ecd8:	d8800115 	stw	r2,4(sp)
    ecdc:	d8800d17 	ldw	r2,52(sp)
    ece0:	103ee83a 	callr	r2
    ece4:	00116940 	call	11694 <abort>
    ece8:	d8800117 	ldw	r2,4(sp)
    ecec:	d8c00217 	ldw	r3,8(sp)
    ecf0:	d8800f15 	stw	r2,60(sp)
    ecf4:	d8c00e15 	stw	r3,56(sp)
    ecf8:	d8c00f17 	ldw	r3,60(sp)
    ecfc:	00800044 	movi	r2,1
    ed00:	18800626 	beq	r3,r2,ed1c <_ZN10__cxxabiv111__terminateEPFvvE+0x90>
    ed04:	d8000115 	stw	zero,4(sp)
    ed08:	000dc840 	call	dc84 <__cxa_end_catch>
    ed0c:	d9000e17 	ldw	r4,56(sp)
    ed10:	00bfffc4 	movi	r2,-1
    ed14:	d8800115 	stw	r2,4(sp)
    ed18:	0010b1c0 	call	10b1c <_Unwind_SjLj_Resume>
    ed1c:	d9000e17 	ldw	r4,56(sp)
    ed20:	000dd280 	call	dd28 <__cxa_begin_catch>
    ed24:	d8c00f17 	ldw	r3,60(sp)
    ed28:	d8c00115 	stw	r3,4(sp)
    ed2c:	00116940 	call	11694 <abort>

0000ed30 <_ZSt9terminatev>:
    ed30:	008000b4 	movhi	r2,2
    ed34:	1083a504 	addi	r2,r2,3732
    ed38:	11000017 	ldw	r4,0(r2)
    ed3c:	deffff04 	addi	sp,sp,-4
    ed40:	dfc00015 	stw	ra,0(sp)
    ed44:	000ec8c0 	call	ec8c <_ZN10__cxxabiv111__terminateEPFvvE>

0000ed48 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
    ed48:	deffff04 	addi	sp,sp,-4
    ed4c:	dfc00015 	stw	ra,0(sp)
    ed50:	203ee83a 	callr	r4
    ed54:	000ed300 	call	ed30 <_ZSt9terminatev>

0000ed58 <_ZSt10unexpectedv>:
    ed58:	008000b4 	movhi	r2,2
    ed5c:	1083a604 	addi	r2,r2,3736
    ed60:	11000017 	ldw	r4,0(r2)
    ed64:	deffff04 	addi	sp,sp,-4
    ed68:	dfc00015 	stw	ra,0(sp)
    ed6c:	000ed480 	call	ed48 <_ZN10__cxxabiv112__unexpectedEPFvvE>

0000ed70 <_Znwm>:
    ed70:	deffee04 	addi	sp,sp,-72
    ed74:	00800074 	movhi	r2,1
    ed78:	10b95604 	addi	r2,r2,-6824
    ed7c:	d8800615 	stw	r2,24(sp)
    ed80:	00c000b4 	movhi	r3,2
    ed84:	18f9bb04 	addi	r3,r3,-6420
    ed88:	00800074 	movhi	r2,1
    ed8c:	10bb9304 	addi	r2,r2,-4532
    ed90:	d9000e15 	stw	r4,56(sp)
    ed94:	d809883a 	mov	r4,sp
    ed98:	d8800915 	stw	r2,36(sp)
    ed9c:	dfc01115 	stw	ra,68(sp)
    eda0:	df001015 	stw	fp,64(sp)
    eda4:	ddc00f15 	stw	r23,60(sp)
    eda8:	d8c00715 	stw	r3,28(sp)
    edac:	dec00815 	stw	sp,32(sp)
    edb0:	dec00a15 	stw	sp,40(sp)
    edb4:	00108500 	call	10850 <_Unwind_SjLj_Register>
    edb8:	d8800e17 	ldw	r2,56(sp)
    edbc:	10000a1e 	bne	r2,zero,ede8 <_Znwm+0x78>
    edc0:	00800044 	movi	r2,1
    edc4:	d8800e15 	stw	r2,56(sp)
    edc8:	00000706 	br	ede8 <_Znwm+0x78>
    edcc:	008000b4 	movhi	r2,2
    edd0:	108ab004 	addi	r2,r2,10944
    edd4:	10c00017 	ldw	r3,0(r2)
    edd8:	18000f26 	beq	r3,zero,ee18 <_Znwm+0xa8>
    eddc:	00800044 	movi	r2,1
    ede0:	d8800115 	stw	r2,4(sp)
    ede4:	183ee83a 	callr	r3
    ede8:	d9000e17 	ldw	r4,56(sp)
    edec:	00131780 	call	13178 <malloc>
    edf0:	d8800d15 	stw	r2,52(sp)
    edf4:	103ff526 	beq	r2,zero,edcc <_Znwm+0x5c>
    edf8:	d809883a 	mov	r4,sp
    edfc:	00108600 	call	10860 <_Unwind_SjLj_Unregister>
    ee00:	d8800d17 	ldw	r2,52(sp)
    ee04:	dfc01117 	ldw	ra,68(sp)
    ee08:	df001017 	ldw	fp,64(sp)
    ee0c:	ddc00f17 	ldw	r23,60(sp)
    ee10:	dec01204 	addi	sp,sp,72
    ee14:	f800283a 	ret
    ee18:	01000104 	movi	r4,4
    ee1c:	000efe80 	call	efe8 <__cxa_allocate_exception>
    ee20:	1009883a 	mov	r4,r2
    ee24:	008000b4 	movhi	r2,2
    ee28:	10bb5304 	addi	r2,r2,-4788
    ee2c:	20800015 	stw	r2,0(r4)
    ee30:	00c00044 	movi	r3,1
    ee34:	d8c00115 	stw	r3,4(sp)
    ee38:	014000b4 	movhi	r5,2
    ee3c:	297b5a04 	addi	r5,r5,-4760
    ee40:	01800074 	movhi	r6,1
    ee44:	31bbe204 	addi	r6,r6,-4216
    ee48:	000db880 	call	db88 <__cxa_throw>
    ee4c:	d8800317 	ldw	r2,12(sp)
    ee50:	00ffffc4 	movi	r3,-1
    ee54:	d9000217 	ldw	r4,8(sp)
    ee58:	10c00226 	beq	r2,r3,ee64 <_Znwm+0xf4>
    ee5c:	d8c00115 	stw	r3,4(sp)
    ee60:	0010b1c0 	call	10b1c <_Unwind_SjLj_Resume>
    ee64:	00bfffc4 	movi	r2,-1
    ee68:	d8800115 	stw	r2,4(sp)
    ee6c:	000e3d80 	call	e3d8 <__cxa_call_unexpected>

0000ee70 <__cxa_call_terminate>:
    ee70:	defffe04 	addi	sp,sp,-8
    ee74:	dc000015 	stw	r16,0(sp)
    ee78:	dfc00115 	stw	ra,4(sp)
    ee7c:	2021883a 	mov	r16,r4
    ee80:	20000626 	beq	r4,zero,ee9c <__cxa_call_terminate+0x2c>
    ee84:	000dd280 	call	dd28 <__cxa_begin_catch>
    ee88:	80c00017 	ldw	r3,0(r16)
    ee8c:	0090caf4 	movhi	r2,17195
    ee90:	108ac004 	addi	r2,r2,11008
    ee94:	81000117 	ldw	r4,4(r16)
    ee98:	18800126 	beq	r3,r2,eea0 <__cxa_call_terminate+0x30>
    ee9c:	000ed300 	call	ed30 <_ZSt9terminatev>
    eea0:	0091d3b4 	movhi	r2,18254
    eea4:	109550c4 	addi	r2,r2,21827
    eea8:	20bffc1e 	bne	r4,r2,ee9c <__cxa_call_terminate+0x2c>
    eeac:	813ff817 	ldw	r4,-32(r16)
    eeb0:	000ec8c0 	call	ec8c <_ZN10__cxxabiv111__terminateEPFvvE>

0000eeb4 <_ZNKSt9exception4whatEv>:
    eeb4:	20800017 	ldw	r2,0(r4)
    eeb8:	10ffff17 	ldw	r3,-4(r2)
    eebc:	18800117 	ldw	r2,4(r3)
    eec0:	f800283a 	ret

0000eec4 <_ZNSt9exceptionD0Ev>:
    eec4:	008000b4 	movhi	r2,2
    eec8:	10bb4204 	addi	r2,r2,-4856
    eecc:	20800015 	stw	r2,0(r4)
    eed0:	000de401 	jmpi	de40 <_ZdlPv>

0000eed4 <_ZNSt9exceptionD1Ev>:
    eed4:	008000b4 	movhi	r2,2
    eed8:	10bb4204 	addi	r2,r2,-4856
    eedc:	20800015 	stw	r2,0(r4)
    eee0:	f800283a 	ret

0000eee4 <_ZNSt9exceptionD2Ev>:
    eee4:	008000b4 	movhi	r2,2
    eee8:	10bb4204 	addi	r2,r2,-4856
    eeec:	20800015 	stw	r2,0(r4)
    eef0:	f800283a 	ret

0000eef4 <_ZNSt13bad_exceptionD0Ev>:
    eef4:	defffe04 	addi	sp,sp,-8
    eef8:	008000b4 	movhi	r2,2
    eefc:	10bb3d04 	addi	r2,r2,-4876
    ef00:	dc400015 	stw	r17,0(sp)
    ef04:	20800015 	stw	r2,0(r4)
    ef08:	2023883a 	mov	r17,r4
    ef0c:	dfc00115 	stw	ra,4(sp)
    ef10:	000eee40 	call	eee4 <_ZNSt9exceptionD2Ev>
    ef14:	8809883a 	mov	r4,r17
    ef18:	dfc00117 	ldw	ra,4(sp)
    ef1c:	dc400017 	ldw	r17,0(sp)
    ef20:	dec00204 	addi	sp,sp,8
    ef24:	000de401 	jmpi	de40 <_ZdlPv>

0000ef28 <_ZNSt13bad_exceptionD1Ev>:
    ef28:	008000b4 	movhi	r2,2
    ef2c:	10bb3d04 	addi	r2,r2,-4876
    ef30:	20800015 	stw	r2,0(r4)
    ef34:	000eee41 	jmpi	eee4 <_ZNSt9exceptionD2Ev>

0000ef38 <_ZNSt13bad_exceptionD2Ev>:
    ef38:	008000b4 	movhi	r2,2
    ef3c:	10bb3d04 	addi	r2,r2,-4876
    ef40:	20800015 	stw	r2,0(r4)
    ef44:	000eee41 	jmpi	eee4 <_ZNSt9exceptionD2Ev>

0000ef48 <_ZSt15set_new_handlerPFvvE>:
    ef48:	d0a70e17 	ldw	r2,-25544(gp)
    ef4c:	d1270e15 	stw	r4,-25544(gp)
    ef50:	f800283a 	ret

0000ef54 <_ZNSt9bad_allocD0Ev>:
    ef54:	defffe04 	addi	sp,sp,-8
    ef58:	008000b4 	movhi	r2,2
    ef5c:	10bb5304 	addi	r2,r2,-4788
    ef60:	dc400015 	stw	r17,0(sp)
    ef64:	20800015 	stw	r2,0(r4)
    ef68:	2023883a 	mov	r17,r4
    ef6c:	dfc00115 	stw	ra,4(sp)
    ef70:	000eee40 	call	eee4 <_ZNSt9exceptionD2Ev>
    ef74:	8809883a 	mov	r4,r17
    ef78:	dfc00117 	ldw	ra,4(sp)
    ef7c:	dc400017 	ldw	r17,0(sp)
    ef80:	dec00204 	addi	sp,sp,8
    ef84:	000de401 	jmpi	de40 <_ZdlPv>

0000ef88 <_ZNSt9bad_allocD1Ev>:
    ef88:	008000b4 	movhi	r2,2
    ef8c:	10bb5304 	addi	r2,r2,-4788
    ef90:	20800015 	stw	r2,0(r4)
    ef94:	000eee41 	jmpi	eee4 <_ZNSt9exceptionD2Ev>

0000ef98 <_ZNSt9bad_allocD2Ev>:
    ef98:	008000b4 	movhi	r2,2
    ef9c:	10bb5304 	addi	r2,r2,-4788
    efa0:	20800015 	stw	r2,0(r4)
    efa4:	000eee41 	jmpi	eee4 <_ZNSt9exceptionD2Ev>

0000efa8 <__cxa_free_exception>:
    efa8:	2007883a 	mov	r3,r4
    efac:	008000b4 	movhi	r2,2
    efb0:	108ac404 	addi	r2,r2,11024
    efb4:	213ff004 	addi	r4,r4,-64
    efb8:	11420004 	addi	r5,r2,2048
    efbc:	18800336 	bltu	r3,r2,efcc <__cxa_free_exception+0x24>
    efc0:	1885c83a 	sub	r2,r3,r2
    efc4:	1004d27a 	srli	r2,r2,9
    efc8:	19400136 	bltu	r3,r5,efd0 <__cxa_free_exception+0x28>
    efcc:	00131641 	jmpi	13164 <free>
    efd0:	00ffff84 	movi	r3,-2
    efd4:	1886183a 	rol	r3,r3,r2
    efd8:	d0a70f17 	ldw	r2,-25540(gp)
    efdc:	10c4703a 	and	r2,r2,r3
    efe0:	d0a70f15 	stw	r2,-25540(gp)
    efe4:	f800283a 	ret

0000efe8 <__cxa_allocate_exception>:
    efe8:	deffed04 	addi	sp,sp,-76
    efec:	00800074 	movhi	r2,1
    eff0:	10b95604 	addi	r2,r2,-6824
    eff4:	21001004 	addi	r4,r4,64
    eff8:	00c000b4 	movhi	r3,2
    effc:	18f9c004 	addi	r3,r3,-6400
    f000:	d8800615 	stw	r2,24(sp)
    f004:	d9000d15 	stw	r4,52(sp)
    f008:	00800074 	movhi	r2,1
    f00c:	10bc3e04 	addi	r2,r2,-3848
    f010:	d809883a 	mov	r4,sp
    f014:	dfc01215 	stw	ra,72(sp)
    f018:	d8c00715 	stw	r3,28(sp)
    f01c:	d8800915 	stw	r2,36(sp)
    f020:	df001115 	stw	fp,68(sp)
    f024:	ddc01015 	stw	r23,64(sp)
    f028:	dec00815 	stw	sp,32(sp)
    f02c:	dec00a15 	stw	sp,40(sp)
    f030:	00108500 	call	10850 <_Unwind_SjLj_Register>
    f034:	d9000d17 	ldw	r4,52(sp)
    f038:	00131780 	call	13178 <malloc>
    f03c:	d8800e15 	stw	r2,56(sp)
    f040:	1000171e 	bne	r2,zero,f0a0 <__cxa_allocate_exception+0xb8>
    f044:	d8c00d17 	ldw	r3,52(sp)
    f048:	00808004 	movi	r2,512
    f04c:	d1e70f17 	ldw	r7,-25540(gp)
    f050:	10c02636 	bltu	r2,r3,f0ec <__cxa_allocate_exception+0x104>
    f054:	3807883a 	mov	r3,r7
    f058:	01400044 	movi	r5,1
    f05c:	1944703a 	and	r2,r3,r5
    f060:	0009883a 	mov	r4,zero
    f064:	01800104 	movi	r6,4
    f068:	10000526 	beq	r2,zero,f080 <__cxa_allocate_exception+0x98>
    f06c:	2149883a 	add	r4,r4,r5
    f070:	21801e26 	beq	r4,r6,f0ec <__cxa_allocate_exception+0x104>
    f074:	1806d07a 	srli	r3,r3,1
    f078:	1944703a 	and	r2,r3,r5
    f07c:	103ffb1e 	bne	r2,zero,f06c <__cxa_allocate_exception+0x84>
    f080:	2904983a 	sll	r2,r5,r4
    f084:	2008927a 	slli	r4,r4,9
    f088:	00c000b4 	movhi	r3,2
    f08c:	18cac404 	addi	r3,r3,11024
    f090:	3884b03a 	or	r2,r7,r2
    f094:	20c9883a 	add	r4,r4,r3
    f098:	d9000e15 	stw	r4,56(sp)
    f09c:	d0a70f15 	stw	r2,-25540(gp)
    f0a0:	000ec5c0 	call	ec5c <__cxa_get_globals>
    f0a4:	10c00117 	ldw	r3,4(r2)
    f0a8:	d9000e17 	ldw	r4,56(sp)
    f0ac:	000b883a 	mov	r5,zero
    f0b0:	18c00044 	addi	r3,r3,1
    f0b4:	10c00115 	stw	r3,4(r2)
    f0b8:	01801004 	movi	r6,64
    f0bc:	0013ba40 	call	13ba4 <memset>
    f0c0:	d8800e17 	ldw	r2,56(sp)
    f0c4:	d809883a 	mov	r4,sp
    f0c8:	10801004 	addi	r2,r2,64
    f0cc:	d8800f15 	stw	r2,60(sp)
    f0d0:	00108600 	call	10860 <_Unwind_SjLj_Unregister>
    f0d4:	d8800f17 	ldw	r2,60(sp)
    f0d8:	dfc01217 	ldw	ra,72(sp)
    f0dc:	df001117 	ldw	fp,68(sp)
    f0e0:	ddc01017 	ldw	r23,64(sp)
    f0e4:	dec01304 	addi	sp,sp,76
    f0e8:	f800283a 	ret
    f0ec:	00800044 	movi	r2,1
    f0f0:	d8800115 	stw	r2,4(sp)
    f0f4:	000ed300 	call	ed30 <_ZSt9terminatev>
    f0f8:	d8800317 	ldw	r2,12(sp)
    f0fc:	00ffffc4 	movi	r3,-1
    f100:	d9000217 	ldw	r4,8(sp)
    f104:	10c00226 	beq	r2,r3,f110 <__cxa_allocate_exception+0x128>
    f108:	d8c00115 	stw	r3,4(sp)
    f10c:	0010b1c0 	call	10b1c <_Unwind_SjLj_Resume>
    f110:	00bfffc4 	movi	r2,-1
    f114:	d8800115 	stw	r2,4(sp)
    f118:	000e3d80 	call	e3d8 <__cxa_call_unexpected>

0000f11c <_ZNKSt9type_info14__is_pointer_pEv>:
    f11c:	0005883a 	mov	r2,zero
    f120:	f800283a 	ret

0000f124 <_ZNKSt9type_info15__is_function_pEv>:
    f124:	0005883a 	mov	r2,zero
    f128:	f800283a 	ret

0000f12c <_ZNKSt9type_info10__do_catchEPKS_PPvj>:
    f12c:	20c00117 	ldw	r3,4(r4)
    f130:	28800117 	ldw	r2,4(r5)
    f134:	1885003a 	cmpeq	r2,r3,r2
    f138:	f800283a 	ret

0000f13c <_ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv>:
    f13c:	0005883a 	mov	r2,zero
    f140:	f800283a 	ret

0000f144 <_ZNSt9type_infoD0Ev>:
    f144:	008000b4 	movhi	r2,2
    f148:	10bb5f04 	addi	r2,r2,-4740
    f14c:	20800015 	stw	r2,0(r4)
    f150:	000de401 	jmpi	de40 <_ZdlPv>

0000f154 <_ZNSt9type_infoD1Ev>:
    f154:	008000b4 	movhi	r2,2
    f158:	10bb5f04 	addi	r2,r2,-4740
    f15c:	20800015 	stw	r2,0(r4)
    f160:	f800283a 	ret

0000f164 <_ZNSt9type_infoD2Ev>:
    f164:	008000b4 	movhi	r2,2
    f168:	10bb5f04 	addi	r2,r2,-4740
    f16c:	20800015 	stw	r2,0(r4)
    f170:	f800283a 	ret

0000f174 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
    f174:	20c00017 	ldw	r3,0(r4)
    f178:	defffa04 	addi	sp,sp,-24
    f17c:	dc000415 	stw	r16,16(sp)
    f180:	1a000617 	ldw	r8,24(r3)
    f184:	3021883a 	mov	r16,r6
    f188:	31800017 	ldw	r6,0(r6)
    f18c:	00800404 	movi	r2,16
    f190:	dfc00515 	stw	ra,20(sp)
    f194:	d8800215 	stw	r2,8(sp)
    f198:	d8000015 	stw	zero,0(sp)
    f19c:	d8000115 	stw	zero,4(sp)
    f1a0:	d8000315 	stw	zero,12(sp)
    f1a4:	d80f883a 	mov	r7,sp
    f1a8:	403ee83a 	callr	r8
    f1ac:	d8800117 	ldw	r2,4(sp)
    f1b0:	00c00184 	movi	r3,6
    f1b4:	0009883a 	mov	r4,zero
    f1b8:	1080018c 	andi	r2,r2,6
    f1bc:	10c0031e 	bne	r2,r3,f1cc <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv+0x58>
    f1c0:	d8800017 	ldw	r2,0(sp)
    f1c4:	01000044 	movi	r4,1
    f1c8:	80800015 	stw	r2,0(r16)
    f1cc:	2005883a 	mov	r2,r4
    f1d0:	dfc00517 	ldw	ra,20(sp)
    f1d4:	dc000417 	ldw	r16,16(sp)
    f1d8:	dec00604 	addi	sp,sp,24
    f1dc:	f800283a 	ret

0000f1e0 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcElPKvPKS0_S2_>:
    f1e0:	d8800017 	ldw	r2,0(sp)
    f1e4:	00c00184 	movi	r3,6
    f1e8:	1180021e 	bne	r2,r6,f1f4 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcElPKvPKS0_S2_+0x14>
    f1ec:	1805883a 	mov	r2,r3
    f1f0:	f800283a 	ret
    f1f4:	00c00044 	movi	r3,1
    f1f8:	1805883a 	mov	r2,r3
    f1fc:	f800283a 	ret

0000f200 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
    f200:	defffe04 	addi	sp,sp,-8
    f204:	008000b4 	movhi	r2,2
    f208:	10bb6b04 	addi	r2,r2,-4692
    f20c:	dc400015 	stw	r17,0(sp)
    f210:	20800015 	stw	r2,0(r4)
    f214:	2023883a 	mov	r17,r4
    f218:	dfc00115 	stw	ra,4(sp)
    f21c:	000f1640 	call	f164 <_ZNSt9type_infoD2Ev>
    f220:	8809883a 	mov	r4,r17
    f224:	dfc00117 	ldw	ra,4(sp)
    f228:	dc400017 	ldw	r17,0(sp)
    f22c:	dec00204 	addi	sp,sp,8
    f230:	000de401 	jmpi	de40 <_ZdlPv>

0000f234 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
    f234:	008000b4 	movhi	r2,2
    f238:	10bb6b04 	addi	r2,r2,-4692
    f23c:	20800015 	stw	r2,0(r4)
    f240:	000f1641 	jmpi	f164 <_ZNSt9type_infoD2Ev>

0000f244 <_ZN10__cxxabiv117__class_type_infoD2Ev>:
    f244:	008000b4 	movhi	r2,2
    f248:	10bb6b04 	addi	r2,r2,-4692
    f24c:	20800015 	stw	r2,0(r4)
    f250:	000f1641 	jmpi	f164 <_ZNSt9type_infoD2Ev>

0000f254 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
    f254:	2811883a 	mov	r8,r5
    f258:	20c00117 	ldw	r3,4(r4)
    f25c:	40800117 	ldw	r2,4(r8)
    f260:	deffff04 	addi	sp,sp,-4
    f264:	dfc00015 	stw	ra,0(sp)
    f268:	200b883a 	mov	r5,r4
    f26c:	02400044 	movi	r9,1
    f270:	18800426 	beq	r3,r2,f284 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x30>
    f274:	008000c4 	movi	r2,3
    f278:	4009883a 	mov	r4,r8
    f27c:	0013883a 	mov	r9,zero
    f280:	11c0042e 	bgeu	r2,r7,f294 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x40>
    f284:	4805883a 	mov	r2,r9
    f288:	dfc00017 	ldw	ra,0(sp)
    f28c:	dec00104 	addi	sp,sp,4
    f290:	f800283a 	ret
    f294:	40800017 	ldw	r2,0(r8)
    f298:	10c00517 	ldw	r3,20(r2)
    f29c:	183ee83a 	callr	r3
    f2a0:	12403fcc 	andi	r9,r2,255
    f2a4:	4805883a 	mov	r2,r9
    f2a8:	dfc00017 	ldw	ra,0(sp)
    f2ac:	dec00104 	addi	sp,sp,4
    f2b0:	f800283a 	ret

0000f2b4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
    f2b4:	20c00117 	ldw	r3,4(r4)
    f2b8:	28800117 	ldw	r2,4(r5)
    f2bc:	0009883a 	mov	r4,zero
    f2c0:	1880061e 	bne	r3,r2,f2dc <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x28>
    f2c4:	00800184 	movi	r2,6
    f2c8:	38800115 	stw	r2,4(r7)
    f2cc:	00800204 	movi	r2,8
    f2d0:	39800015 	stw	r6,0(r7)
    f2d4:	38800315 	stw	r2,12(r7)
    f2d8:	01000044 	movi	r4,1
    f2dc:	2005883a 	mov	r2,r4
    f2e0:	f800283a 	ret

0000f2e4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
    f2e4:	da000017 	ldw	r8,0(sp)
    f2e8:	d8800217 	ldw	r2,8(sp)
    f2ec:	d9400317 	ldw	r5,12(sp)
    f2f0:	40800926 	beq	r8,r2,f318 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x34>
    f2f4:	21000117 	ldw	r4,4(r4)
    f2f8:	38800117 	ldw	r2,4(r7)
    f2fc:	2080041e 	bne	r4,r2,f310 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2c>
    f300:	00800044 	movi	r2,1
    f304:	28800315 	stw	r2,12(r5)
    f308:	2a000015 	stw	r8,0(r5)
    f30c:	29800115 	stw	r6,4(r5)
    f310:	0005883a 	mov	r2,zero
    f314:	f800283a 	ret
    f318:	d8800117 	ldw	r2,4(sp)
    f31c:	21000117 	ldw	r4,4(r4)
    f320:	10c00117 	ldw	r3,4(r2)
    f324:	20fff41e 	bne	r4,r3,f2f8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x14>
    f328:	29800215 	stw	r6,8(r5)
    f32c:	003ff806 	br	f310 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2c>

0000f330 <_fpadd_parts>:
    f330:	21c00017 	ldw	r7,0(r4)
    f334:	02000044 	movi	r8,1
    f338:	41c0332e 	bgeu	r8,r7,f408 <_fpadd_parts+0xd8>
    f33c:	28800017 	ldw	r2,0(r5)
    f340:	4080462e 	bgeu	r8,r2,f45c <_fpadd_parts+0x12c>
    f344:	00c00104 	movi	r3,4
    f348:	38c06b26 	beq	r7,r3,f4f8 <_fpadd_parts+0x1c8>
    f34c:	10c04326 	beq	r2,r3,f45c <_fpadd_parts+0x12c>
    f350:	00c00084 	movi	r3,2
    f354:	10c02e26 	beq	r2,r3,f410 <_fpadd_parts+0xe0>
    f358:	38c04026 	beq	r7,r3,f45c <_fpadd_parts+0x12c>
    f35c:	22800217 	ldw	r10,8(r4)
    f360:	28c00217 	ldw	r3,8(r5)
    f364:	23000317 	ldw	r12,12(r4)
    f368:	2a400317 	ldw	r9,12(r5)
    f36c:	50cfc83a 	sub	r7,r10,r3
    f370:	3817883a 	mov	r11,r7
    f374:	38004f16 	blt	r7,zero,f4b4 <_fpadd_parts+0x184>
    f378:	008007c4 	movi	r2,31
    f37c:	11c03316 	blt	r2,r7,f44c <_fpadd_parts+0x11c>
    f380:	02c0540e 	bge	zero,r11,f4d4 <_fpadd_parts+0x1a4>
    f384:	41c4983a 	sll	r2,r8,r7
    f388:	49c6d83a 	srl	r3,r9,r7
    f38c:	10bfffc4 	addi	r2,r2,-1
    f390:	4884703a 	and	r2,r9,r2
    f394:	1004c03a 	cmpne	r2,r2,zero
    f398:	1892b03a 	or	r9,r3,r2
    f39c:	20c00117 	ldw	r3,4(r4)
    f3a0:	28800117 	ldw	r2,4(r5)
    f3a4:	18803c26 	beq	r3,r2,f498 <_fpadd_parts+0x168>
    f3a8:	18002f26 	beq	r3,zero,f468 <_fpadd_parts+0x138>
    f3ac:	4b05c83a 	sub	r2,r9,r12
    f3b0:	10004216 	blt	r2,zero,f4bc <_fpadd_parts+0x18c>
    f3b4:	32800215 	stw	r10,8(r6)
    f3b8:	30800315 	stw	r2,12(r6)
    f3bc:	30000115 	stw	zero,4(r6)
    f3c0:	31000317 	ldw	r4,12(r6)
    f3c4:	01d00034 	movhi	r7,16384
    f3c8:	39ffff84 	addi	r7,r7,-2
    f3cc:	20bfffc4 	addi	r2,r4,-1
    f3d0:	2007883a 	mov	r3,r4
    f3d4:	38800836 	bltu	r7,r2,f3f8 <_fpadd_parts+0xc8>
    f3d8:	31400217 	ldw	r5,8(r6)
    f3dc:	18c9883a 	add	r4,r3,r3
    f3e0:	20bfffc4 	addi	r2,r4,-1
    f3e4:	297fffc4 	addi	r5,r5,-1
    f3e8:	2007883a 	mov	r3,r4
    f3ec:	38bffb2e 	bgeu	r7,r2,f3dc <_fpadd_parts+0xac>
    f3f0:	31400215 	stw	r5,8(r6)
    f3f4:	31000315 	stw	r4,12(r6)
    f3f8:	008000c4 	movi	r2,3
    f3fc:	30800015 	stw	r2,0(r6)
    f400:	20001b16 	blt	r4,zero,f470 <_fpadd_parts+0x140>
    f404:	3009883a 	mov	r4,r6
    f408:	2005883a 	mov	r2,r4
    f40c:	f800283a 	ret
    f410:	38fffd1e 	bne	r7,r3,f408 <_fpadd_parts+0xd8>
    f414:	31c00015 	stw	r7,0(r6)
    f418:	20800117 	ldw	r2,4(r4)
    f41c:	30800115 	stw	r2,4(r6)
    f420:	20c00217 	ldw	r3,8(r4)
    f424:	30c00215 	stw	r3,8(r6)
    f428:	20800317 	ldw	r2,12(r4)
    f42c:	30800315 	stw	r2,12(r6)
    f430:	20c00117 	ldw	r3,4(r4)
    f434:	28800117 	ldw	r2,4(r5)
    f438:	3009883a 	mov	r4,r6
    f43c:	1886703a 	and	r3,r3,r2
    f440:	2005883a 	mov	r2,r4
    f444:	30c00115 	stw	r3,4(r6)
    f448:	f800283a 	ret
    f44c:	1a801716 	blt	r3,r10,f4ac <_fpadd_parts+0x17c>
    f450:	1815883a 	mov	r10,r3
    f454:	0019883a 	mov	r12,zero
    f458:	003fd006 	br	f39c <_fpadd_parts+0x6c>
    f45c:	2809883a 	mov	r4,r5
    f460:	2005883a 	mov	r2,r4
    f464:	f800283a 	ret
    f468:	6245c83a 	sub	r2,r12,r9
    f46c:	003fd006 	br	f3b0 <_fpadd_parts+0x80>
    f470:	30800217 	ldw	r2,8(r6)
    f474:	2006d07a 	srli	r3,r4,1
    f478:	2100004c 	andi	r4,r4,1
    f47c:	10800044 	addi	r2,r2,1
    f480:	1906b03a 	or	r3,r3,r4
    f484:	3009883a 	mov	r4,r6
    f488:	30800215 	stw	r2,8(r6)
    f48c:	2005883a 	mov	r2,r4
    f490:	30c00315 	stw	r3,12(r6)
    f494:	f800283a 	ret
    f498:	4b09883a 	add	r4,r9,r12
    f49c:	30c00115 	stw	r3,4(r6)
    f4a0:	32800215 	stw	r10,8(r6)
    f4a4:	31000315 	stw	r4,12(r6)
    f4a8:	003fd306 	br	f3f8 <_fpadd_parts+0xc8>
    f4ac:	0013883a 	mov	r9,zero
    f4b0:	003fba06 	br	f39c <_fpadd_parts+0x6c>
    f4b4:	01cfc83a 	sub	r7,zero,r7
    f4b8:	003faf06 	br	f378 <_fpadd_parts+0x48>
    f4bc:	0089c83a 	sub	r4,zero,r2
    f4c0:	00800044 	movi	r2,1
    f4c4:	30800115 	stw	r2,4(r6)
    f4c8:	32800215 	stw	r10,8(r6)
    f4cc:	31000315 	stw	r4,12(r6)
    f4d0:	003fbb06 	br	f3c0 <_fpadd_parts+0x90>
    f4d4:	583fb126 	beq	r11,zero,f39c <_fpadd_parts+0x6c>
    f4d8:	41c4983a 	sll	r2,r8,r7
    f4dc:	61c6d83a 	srl	r3,r12,r7
    f4e0:	51d5883a 	add	r10,r10,r7
    f4e4:	10bfffc4 	addi	r2,r2,-1
    f4e8:	6084703a 	and	r2,r12,r2
    f4ec:	1004c03a 	cmpne	r2,r2,zero
    f4f0:	1898b03a 	or	r12,r3,r2
    f4f4:	003fa906 	br	f39c <_fpadd_parts+0x6c>
    f4f8:	11ffc31e 	bne	r2,r7,f408 <_fpadd_parts+0xd8>
    f4fc:	28c00117 	ldw	r3,4(r5)
    f500:	20800117 	ldw	r2,4(r4)
    f504:	10ffc026 	beq	r2,r3,f408 <_fpadd_parts+0xd8>
    f508:	010000b4 	movhi	r4,2
    f50c:	213b8004 	addi	r4,r4,-4608
    f510:	003fbd06 	br	f408 <_fpadd_parts+0xd8>

0000f514 <__subsf3>:
    f514:	deffef04 	addi	sp,sp,-68
    f518:	dcc00f15 	stw	r19,60(sp)
    f51c:	dcc00204 	addi	r19,sp,8
    f520:	dc400e15 	stw	r17,56(sp)
    f524:	d9000015 	stw	r4,0(sp)
    f528:	d9400115 	stw	r5,4(sp)
    f52c:	d809883a 	mov	r4,sp
    f530:	980b883a 	mov	r5,r19
    f534:	dc400604 	addi	r17,sp,24
    f538:	dfc01015 	stw	ra,64(sp)
    f53c:	00110100 	call	11010 <__unpack_f>
    f540:	d9000104 	addi	r4,sp,4
    f544:	880b883a 	mov	r5,r17
    f548:	00110100 	call	11010 <__unpack_f>
    f54c:	d8800717 	ldw	r2,28(sp)
    f550:	9809883a 	mov	r4,r19
    f554:	880b883a 	mov	r5,r17
    f558:	d9800a04 	addi	r6,sp,40
    f55c:	1080005c 	xori	r2,r2,1
    f560:	d8800715 	stw	r2,28(sp)
    f564:	000f3300 	call	f330 <_fpadd_parts>
    f568:	1009883a 	mov	r4,r2
    f56c:	0010eb00 	call	10eb0 <__pack_f>
    f570:	dfc01017 	ldw	ra,64(sp)
    f574:	dcc00f17 	ldw	r19,60(sp)
    f578:	dc400e17 	ldw	r17,56(sp)
    f57c:	dec01104 	addi	sp,sp,68
    f580:	f800283a 	ret

0000f584 <__addsf3>:
    f584:	deffef04 	addi	sp,sp,-68
    f588:	dcc00f15 	stw	r19,60(sp)
    f58c:	dcc00204 	addi	r19,sp,8
    f590:	dc400e15 	stw	r17,56(sp)
    f594:	d9000015 	stw	r4,0(sp)
    f598:	d9400115 	stw	r5,4(sp)
    f59c:	d809883a 	mov	r4,sp
    f5a0:	980b883a 	mov	r5,r19
    f5a4:	dc400604 	addi	r17,sp,24
    f5a8:	dfc01015 	stw	ra,64(sp)
    f5ac:	00110100 	call	11010 <__unpack_f>
    f5b0:	d9000104 	addi	r4,sp,4
    f5b4:	880b883a 	mov	r5,r17
    f5b8:	00110100 	call	11010 <__unpack_f>
    f5bc:	d9800a04 	addi	r6,sp,40
    f5c0:	9809883a 	mov	r4,r19
    f5c4:	880b883a 	mov	r5,r17
    f5c8:	000f3300 	call	f330 <_fpadd_parts>
    f5cc:	1009883a 	mov	r4,r2
    f5d0:	0010eb00 	call	10eb0 <__pack_f>
    f5d4:	dfc01017 	ldw	ra,64(sp)
    f5d8:	dcc00f17 	ldw	r19,60(sp)
    f5dc:	dc400e17 	ldw	r17,56(sp)
    f5e0:	dec01104 	addi	sp,sp,68
    f5e4:	f800283a 	ret

0000f5e8 <__mulsf3>:
    f5e8:	deffef04 	addi	sp,sp,-68
    f5ec:	dc400f15 	stw	r17,60(sp)
    f5f0:	dc400204 	addi	r17,sp,8
    f5f4:	dc000e15 	stw	r16,56(sp)
    f5f8:	d9000015 	stw	r4,0(sp)
    f5fc:	d9400115 	stw	r5,4(sp)
    f600:	d809883a 	mov	r4,sp
    f604:	880b883a 	mov	r5,r17
    f608:	dc000604 	addi	r16,sp,24
    f60c:	dfc01015 	stw	ra,64(sp)
    f610:	00110100 	call	11010 <__unpack_f>
    f614:	d9000104 	addi	r4,sp,4
    f618:	800b883a 	mov	r5,r16
    f61c:	00110100 	call	11010 <__unpack_f>
    f620:	d9000217 	ldw	r4,8(sp)
    f624:	00800044 	movi	r2,1
    f628:	01400104 	movi	r5,4
    f62c:	1100142e 	bgeu	r2,r4,f680 <__mulsf3+0x98>
    f630:	d8c00617 	ldw	r3,24(sp)
    f634:	10c0052e 	bgeu	r2,r3,f64c <__mulsf3+0x64>
    f638:	21400f26 	beq	r4,r5,f678 <__mulsf3+0x90>
    f63c:	19405d26 	beq	r3,r5,f7b4 <__mulsf3+0x1cc>
    f640:	00800084 	movi	r2,2
    f644:	20800e26 	beq	r4,r2,f680 <__mulsf3+0x98>
    f648:	1880181e 	bne	r3,r2,f6ac <__mulsf3+0xc4>
    f64c:	d8c00717 	ldw	r3,28(sp)
    f650:	d8800317 	ldw	r2,12(sp)
    f654:	8009883a 	mov	r4,r16
    f658:	10c4c03a 	cmpne	r2,r2,r3
    f65c:	d8800715 	stw	r2,28(sp)
    f660:	0010eb00 	call	10eb0 <__pack_f>
    f664:	dfc01017 	ldw	ra,64(sp)
    f668:	dc400f17 	ldw	r17,60(sp)
    f66c:	dc000e17 	ldw	r16,56(sp)
    f670:	dec01104 	addi	sp,sp,68
    f674:	f800283a 	ret
    f678:	00800084 	movi	r2,2
    f67c:	18804f26 	beq	r3,r2,f7bc <__mulsf3+0x1d4>
    f680:	d8800317 	ldw	r2,12(sp)
    f684:	d8c00717 	ldw	r3,28(sp)
    f688:	8809883a 	mov	r4,r17
    f68c:	10c4c03a 	cmpne	r2,r2,r3
    f690:	d8800315 	stw	r2,12(sp)
    f694:	0010eb00 	call	10eb0 <__pack_f>
    f698:	dfc01017 	ldw	ra,64(sp)
    f69c:	dc400f17 	ldw	r17,60(sp)
    f6a0:	dc000e17 	ldw	r16,56(sp)
    f6a4:	dec01104 	addi	sp,sp,68
    f6a8:	f800283a 	ret
    f6ac:	d8800517 	ldw	r2,20(sp)
    f6b0:	da000917 	ldw	r8,36(sp)
    f6b4:	0013883a 	mov	r9,zero
    f6b8:	0007883a 	mov	r3,zero
    f6bc:	480f883a 	mov	r7,r9
    f6c0:	180b883a 	mov	r5,r3
    f6c4:	400d883a 	mov	r6,r8
    f6c8:	1009883a 	mov	r4,r2
    f6cc:	0010d980 	call	10d98 <__muldi3>
    f6d0:	da800417 	ldw	r10,16(sp)
    f6d4:	d9800817 	ldw	r6,32(sp)
    f6d8:	da400317 	ldw	r9,12(sp)
    f6dc:	52800084 	addi	r10,r10,2
    f6e0:	3295883a 	add	r10,r6,r10
    f6e4:	d9800717 	ldw	r6,28(sp)
    f6e8:	180b883a 	mov	r5,r3
    f6ec:	180f883a 	mov	r7,r3
    f6f0:	4992c03a 	cmpne	r9,r9,r6
    f6f4:	da400b15 	stw	r9,44(sp)
    f6f8:	1007883a 	mov	r3,r2
    f6fc:	da800c15 	stw	r10,48(sp)
    f700:	2800070e 	bge	r5,zero,f720 <__mulsf3+0x138>
    f704:	2880004c 	andi	r2,r5,1
    f708:	1005003a 	cmpeq	r2,r2,zero
    f70c:	500d883a 	mov	r6,r10
    f710:	10001e26 	beq	r2,zero,f78c <__mulsf3+0x1a4>
    f714:	380ed07a 	srli	r7,r7,1
    f718:	31800044 	addi	r6,r6,1
    f71c:	d9800c15 	stw	r6,48(sp)
    f720:	01100034 	movhi	r4,16384
    f724:	213fffc4 	addi	r4,r4,-1
    f728:	21c00b36 	bltu	r4,r7,f758 <__mulsf3+0x170>
    f72c:	d8800c17 	ldw	r2,48(sp)
    f730:	00000206 	br	f73c <__mulsf3+0x154>
    f734:	18c7883a 	add	r3,r3,r3
    f738:	21c00636 	bltu	r4,r7,f754 <__mulsf3+0x16c>
    f73c:	10bfffc4 	addi	r2,r2,-1
    f740:	39cf883a 	add	r7,r7,r7
    f744:	183ffb0e 	bge	r3,zero,f734 <__mulsf3+0x14c>
    f748:	39c00054 	ori	r7,r7,1
    f74c:	18c7883a 	add	r3,r3,r3
    f750:	21fffa2e 	bgeu	r4,r7,f73c <__mulsf3+0x154>
    f754:	d8800c15 	stw	r2,48(sp)
    f758:	39001fcc 	andi	r4,r7,127
    f75c:	00801004 	movi	r2,64
    f760:	20800d26 	beq	r4,r2,f798 <__mulsf3+0x1b0>
    f764:	008000c4 	movi	r2,3
    f768:	d9000a04 	addi	r4,sp,40
    f76c:	d9c00d15 	stw	r7,52(sp)
    f770:	d8800a15 	stw	r2,40(sp)
    f774:	0010eb00 	call	10eb0 <__pack_f>
    f778:	dfc01017 	ldw	ra,64(sp)
    f77c:	dc400f17 	ldw	r17,60(sp)
    f780:	dc000e17 	ldw	r16,56(sp)
    f784:	dec01104 	addi	sp,sp,68
    f788:	f800283a 	ret
    f78c:	1804d07a 	srli	r2,r3,1
    f790:	10e00034 	orhi	r3,r2,32768
    f794:	003fdf06 	br	f714 <__mulsf3+0x12c>
    f798:	3880200c 	andi	r2,r7,128
    f79c:	103ff11e 	bne	r2,zero,f764 <__mulsf3+0x17c>
    f7a0:	183ff026 	beq	r3,zero,f764 <__mulsf3+0x17c>
    f7a4:	3907883a 	add	r3,r7,r4
    f7a8:	00bfe004 	movi	r2,-128
    f7ac:	188e703a 	and	r7,r3,r2
    f7b0:	003fec06 	br	f764 <__mulsf3+0x17c>
    f7b4:	00800084 	movi	r2,2
    f7b8:	20bfa41e 	bne	r4,r2,f64c <__mulsf3+0x64>
    f7bc:	010000b4 	movhi	r4,2
    f7c0:	213b8004 	addi	r4,r4,-4608
    f7c4:	003fb306 	br	f694 <__mulsf3+0xac>

0000f7c8 <__divsf3>:
    f7c8:	defff304 	addi	sp,sp,-52
    f7cc:	dc400b15 	stw	r17,44(sp)
    f7d0:	dc400204 	addi	r17,sp,8
    f7d4:	dc000a15 	stw	r16,40(sp)
    f7d8:	d9000015 	stw	r4,0(sp)
    f7dc:	d9400115 	stw	r5,4(sp)
    f7e0:	d809883a 	mov	r4,sp
    f7e4:	880b883a 	mov	r5,r17
    f7e8:	dc000604 	addi	r16,sp,24
    f7ec:	dfc00c15 	stw	ra,48(sp)
    f7f0:	00110100 	call	11010 <__unpack_f>
    f7f4:	d9000104 	addi	r4,sp,4
    f7f8:	800b883a 	mov	r5,r16
    f7fc:	00110100 	call	11010 <__unpack_f>
    f800:	d9000217 	ldw	r4,8(sp)
    f804:	00800044 	movi	r2,1
    f808:	01800104 	movi	r6,4
    f80c:	11000a2e 	bgeu	r2,r4,f838 <__divsf3+0x70>
    f810:	d9400617 	ldw	r5,24(sp)
    f814:	1140432e 	bgeu	r2,r5,f924 <__divsf3+0x15c>
    f818:	d8800317 	ldw	r2,12(sp)
    f81c:	d8c00717 	ldw	r3,28(sp)
    f820:	10c4f03a 	xor	r2,r2,r3
    f824:	d8800315 	stw	r2,12(sp)
    f828:	21800226 	beq	r4,r6,f834 <__divsf3+0x6c>
    f82c:	00800084 	movi	r2,2
    f830:	2080101e 	bne	r4,r2,f874 <__divsf3+0xac>
    f834:	29000726 	beq	r5,r4,f854 <__divsf3+0x8c>
    f838:	8809883a 	mov	r4,r17
    f83c:	0010eb00 	call	10eb0 <__pack_f>
    f840:	dfc00c17 	ldw	ra,48(sp)
    f844:	dc400b17 	ldw	r17,44(sp)
    f848:	dc000a17 	ldw	r16,40(sp)
    f84c:	dec00d04 	addi	sp,sp,52
    f850:	f800283a 	ret
    f854:	010000b4 	movhi	r4,2
    f858:	213b8004 	addi	r4,r4,-4608
    f85c:	0010eb00 	call	10eb0 <__pack_f>
    f860:	dfc00c17 	ldw	ra,48(sp)
    f864:	dc400b17 	ldw	r17,44(sp)
    f868:	dc000a17 	ldw	r16,40(sp)
    f86c:	dec00d04 	addi	sp,sp,52
    f870:	f800283a 	ret
    f874:	29802d26 	beq	r5,r6,f92c <__divsf3+0x164>
    f878:	28801a26 	beq	r5,r2,f8e4 <__divsf3+0x11c>
    f87c:	d8c00417 	ldw	r3,16(sp)
    f880:	d8800817 	ldw	r2,32(sp)
    f884:	d9000517 	ldw	r4,20(sp)
    f888:	d9800917 	ldw	r6,36(sp)
    f88c:	1885c83a 	sub	r2,r3,r2
    f890:	d8800415 	stw	r2,16(sp)
    f894:	2180032e 	bgeu	r4,r6,f8a4 <__divsf3+0xdc>
    f898:	10bfffc4 	addi	r2,r2,-1
    f89c:	d8800415 	stw	r2,16(sp)
    f8a0:	2109883a 	add	r4,r4,r4
    f8a4:	01500034 	movhi	r5,16384
    f8a8:	0007883a 	mov	r3,zero
    f8ac:	0005883a 	mov	r2,zero
    f8b0:	01c007c4 	movi	r7,31
    f8b4:	10800044 	addi	r2,r2,1
    f8b8:	21800236 	bltu	r4,r6,f8c4 <__divsf3+0xfc>
    f8bc:	1946b03a 	or	r3,r3,r5
    f8c0:	2189c83a 	sub	r4,r4,r6
    f8c4:	280ad07a 	srli	r5,r5,1
    f8c8:	2109883a 	add	r4,r4,r4
    f8cc:	11fff91e 	bne	r2,r7,f8b4 <__divsf3+0xec>
    f8d0:	19401fcc 	andi	r5,r3,127
    f8d4:	00801004 	movi	r2,64
    f8d8:	28800a26 	beq	r5,r2,f904 <__divsf3+0x13c>
    f8dc:	d8c00515 	stw	r3,20(sp)
    f8e0:	003fd506 	br	f838 <__divsf3+0x70>
    f8e4:	8809883a 	mov	r4,r17
    f8e8:	d9800215 	stw	r6,8(sp)
    f8ec:	0010eb00 	call	10eb0 <__pack_f>
    f8f0:	dfc00c17 	ldw	ra,48(sp)
    f8f4:	dc400b17 	ldw	r17,44(sp)
    f8f8:	dc000a17 	ldw	r16,40(sp)
    f8fc:	dec00d04 	addi	sp,sp,52
    f900:	f800283a 	ret
    f904:	1880200c 	andi	r2,r3,128
    f908:	103ff41e 	bne	r2,zero,f8dc <__divsf3+0x114>
    f90c:	203ff326 	beq	r4,zero,f8dc <__divsf3+0x114>
    f910:	1947883a 	add	r3,r3,r5
    f914:	00bfe004 	movi	r2,-128
    f918:	1886703a 	and	r3,r3,r2
    f91c:	d8c00515 	stw	r3,20(sp)
    f920:	003fc506 	br	f838 <__divsf3+0x70>
    f924:	8009883a 	mov	r4,r16
    f928:	003fc406 	br	f83c <__divsf3+0x74>
    f92c:	8809883a 	mov	r4,r17
    f930:	d8000515 	stw	zero,20(sp)
    f934:	d8000415 	stw	zero,16(sp)
    f938:	003fc006 	br	f83c <__divsf3+0x74>

0000f93c <__gesf2>:
    f93c:	defff304 	addi	sp,sp,-52
    f940:	dc400b15 	stw	r17,44(sp)
    f944:	dc400204 	addi	r17,sp,8
    f948:	dc000a15 	stw	r16,40(sp)
    f94c:	d9000015 	stw	r4,0(sp)
    f950:	d9400115 	stw	r5,4(sp)
    f954:	d809883a 	mov	r4,sp
    f958:	880b883a 	mov	r5,r17
    f95c:	dc000604 	addi	r16,sp,24
    f960:	dfc00c15 	stw	ra,48(sp)
    f964:	00110100 	call	11010 <__unpack_f>
    f968:	d9000104 	addi	r4,sp,4
    f96c:	800b883a 	mov	r5,r16
    f970:	00110100 	call	11010 <__unpack_f>
    f974:	d8800217 	ldw	r2,8(sp)
    f978:	00c00044 	movi	r3,1
    f97c:	01bfffc4 	movi	r6,-1
    f980:	1880062e 	bgeu	r3,r2,f99c <__gesf2+0x60>
    f984:	d8800617 	ldw	r2,24(sp)
    f988:	8809883a 	mov	r4,r17
    f98c:	800b883a 	mov	r5,r16
    f990:	1880022e 	bgeu	r3,r2,f99c <__gesf2+0x60>
    f994:	00110d80 	call	110d8 <__fpcmp_parts_f>
    f998:	100d883a 	mov	r6,r2
    f99c:	3005883a 	mov	r2,r6
    f9a0:	dfc00c17 	ldw	ra,48(sp)
    f9a4:	dc400b17 	ldw	r17,44(sp)
    f9a8:	dc000a17 	ldw	r16,40(sp)
    f9ac:	dec00d04 	addi	sp,sp,52
    f9b0:	f800283a 	ret

0000f9b4 <__lesf2>:
    f9b4:	defff304 	addi	sp,sp,-52
    f9b8:	dc400b15 	stw	r17,44(sp)
    f9bc:	dc400204 	addi	r17,sp,8
    f9c0:	dc000a15 	stw	r16,40(sp)
    f9c4:	d9000015 	stw	r4,0(sp)
    f9c8:	d9400115 	stw	r5,4(sp)
    f9cc:	d809883a 	mov	r4,sp
    f9d0:	880b883a 	mov	r5,r17
    f9d4:	dc000604 	addi	r16,sp,24
    f9d8:	dfc00c15 	stw	ra,48(sp)
    f9dc:	00110100 	call	11010 <__unpack_f>
    f9e0:	d9000104 	addi	r4,sp,4
    f9e4:	800b883a 	mov	r5,r16
    f9e8:	00110100 	call	11010 <__unpack_f>
    f9ec:	d8800217 	ldw	r2,8(sp)
    f9f0:	00c00044 	movi	r3,1
    f9f4:	180d883a 	mov	r6,r3
    f9f8:	1880062e 	bgeu	r3,r2,fa14 <__lesf2+0x60>
    f9fc:	d8800617 	ldw	r2,24(sp)
    fa00:	8809883a 	mov	r4,r17
    fa04:	800b883a 	mov	r5,r16
    fa08:	1880022e 	bgeu	r3,r2,fa14 <__lesf2+0x60>
    fa0c:	00110d80 	call	110d8 <__fpcmp_parts_f>
    fa10:	100d883a 	mov	r6,r2
    fa14:	3005883a 	mov	r2,r6
    fa18:	dfc00c17 	ldw	ra,48(sp)
    fa1c:	dc400b17 	ldw	r17,44(sp)
    fa20:	dc000a17 	ldw	r16,40(sp)
    fa24:	dec00d04 	addi	sp,sp,52
    fa28:	f800283a 	ret

0000fa2c <__floatsisf>:
    fa2c:	2006d7fa 	srli	r3,r4,31
    fa30:	defffa04 	addi	sp,sp,-24
    fa34:	008000c4 	movi	r2,3
    fa38:	dfc00515 	stw	ra,20(sp)
    fa3c:	dc000415 	stw	r16,16(sp)
    fa40:	d8800015 	stw	r2,0(sp)
    fa44:	d8c00115 	stw	r3,4(sp)
    fa48:	2000081e 	bne	r4,zero,fa6c <__floatsisf+0x40>
    fa4c:	00800084 	movi	r2,2
    fa50:	d8800015 	stw	r2,0(sp)
    fa54:	d809883a 	mov	r4,sp
    fa58:	0010eb00 	call	10eb0 <__pack_f>
    fa5c:	dfc00517 	ldw	ra,20(sp)
    fa60:	dc000417 	ldw	r16,16(sp)
    fa64:	dec00604 	addi	sp,sp,24
    fa68:	f800283a 	ret
    fa6c:	00800784 	movi	r2,30
    fa70:	1807003a 	cmpeq	r3,r3,zero
    fa74:	d8800215 	stw	r2,8(sp)
    fa78:	18000e1e 	bne	r3,zero,fab4 <__floatsisf+0x88>
    fa7c:	00a00034 	movhi	r2,32768
    fa80:	20800e26 	beq	r4,r2,fabc <__floatsisf+0x90>
    fa84:	0121c83a 	sub	r16,zero,r4
    fa88:	8009883a 	mov	r4,r16
    fa8c:	dc000315 	stw	r16,12(sp)
    fa90:	0010e300 	call	10e30 <__clzsi2>
    fa94:	117fffc4 	addi	r5,r2,-1
    fa98:	017fee0e 	bge	zero,r5,fa54 <__floatsisf+0x28>
    fa9c:	d8800217 	ldw	r2,8(sp)
    faa0:	8146983a 	sll	r3,r16,r5
    faa4:	1145c83a 	sub	r2,r2,r5
    faa8:	d8c00315 	stw	r3,12(sp)
    faac:	d8800215 	stw	r2,8(sp)
    fab0:	003fe806 	br	fa54 <__floatsisf+0x28>
    fab4:	2021883a 	mov	r16,r4
    fab8:	003ff306 	br	fa88 <__floatsisf+0x5c>
    fabc:	00b3c034 	movhi	r2,52992
    fac0:	003fe606 	br	fa5c <__floatsisf+0x30>

0000fac4 <__fixsfsi>:
    fac4:	defffa04 	addi	sp,sp,-24
    fac8:	d9000015 	stw	r4,0(sp)
    facc:	d9400104 	addi	r5,sp,4
    fad0:	d809883a 	mov	r4,sp
    fad4:	dfc00515 	stw	ra,20(sp)
    fad8:	00110100 	call	11010 <__unpack_f>
    fadc:	d8c00117 	ldw	r3,4(sp)
    fae0:	00800084 	movi	r2,2
    fae4:	1880041e 	bne	r3,r2,faf8 <__fixsfsi+0x34>
    fae8:	0005883a 	mov	r2,zero
    faec:	dfc00517 	ldw	ra,20(sp)
    faf0:	dec00604 	addi	sp,sp,24
    faf4:	f800283a 	ret
    faf8:	00800044 	movi	r2,1
    fafc:	10fffa2e 	bgeu	r2,r3,fae8 <__fixsfsi+0x24>
    fb00:	00800104 	movi	r2,4
    fb04:	18800426 	beq	r3,r2,fb18 <__fixsfsi+0x54>
    fb08:	d8800317 	ldw	r2,12(sp)
    fb0c:	103ff616 	blt	r2,zero,fae8 <__fixsfsi+0x24>
    fb10:	00c00784 	movi	r3,30
    fb14:	1880070e 	bge	r3,r2,fb34 <__fixsfsi+0x70>
    fb18:	d8800217 	ldw	r2,8(sp)
    fb1c:	10000c1e 	bne	r2,zero,fb50 <__fixsfsi+0x8c>
    fb20:	00a00034 	movhi	r2,32768
    fb24:	10bfffc4 	addi	r2,r2,-1
    fb28:	dfc00517 	ldw	ra,20(sp)
    fb2c:	dec00604 	addi	sp,sp,24
    fb30:	f800283a 	ret
    fb34:	1885c83a 	sub	r2,r3,r2
    fb38:	d9000217 	ldw	r4,8(sp)
    fb3c:	d8c00417 	ldw	r3,16(sp)
    fb40:	1884d83a 	srl	r2,r3,r2
    fb44:	203fe926 	beq	r4,zero,faec <__fixsfsi+0x28>
    fb48:	0085c83a 	sub	r2,zero,r2
    fb4c:	003fe706 	br	faec <__fixsfsi+0x28>
    fb50:	00a00034 	movhi	r2,32768
    fb54:	003fe506 	br	faec <__fixsfsi+0x28>

0000fb58 <__extendsfdf2>:
    fb58:	defff904 	addi	sp,sp,-28
    fb5c:	d9000115 	stw	r4,4(sp)
    fb60:	d9400204 	addi	r5,sp,8
    fb64:	d9000104 	addi	r4,sp,4
    fb68:	dfc00615 	stw	ra,24(sp)
    fb6c:	00110100 	call	11010 <__unpack_f>
    fb70:	d9c00517 	ldw	r7,20(sp)
    fb74:	0011883a 	mov	r8,zero
    fb78:	400697ba 	slli	r3,r8,30
    fb7c:	3812d0ba 	srli	r9,r7,2
    fb80:	380497ba 	slli	r2,r7,30
    fb84:	d9000217 	ldw	r4,8(sp)
    fb88:	d9400317 	ldw	r5,12(sp)
    fb8c:	d9800417 	ldw	r6,16(sp)
    fb90:	48c6b03a 	or	r3,r9,r3
    fb94:	100f883a 	mov	r7,r2
    fb98:	d8c00015 	stw	r3,0(sp)
    fb9c:	00106cc0 	call	106cc <__make_dp>
    fba0:	dfc00617 	ldw	ra,24(sp)
    fba4:	dec00704 	addi	sp,sp,28
    fba8:	f800283a 	ret

0000fbac <_fpadd_parts>:
    fbac:	defff804 	addi	sp,sp,-32
    fbb0:	dcc00315 	stw	r19,12(sp)
    fbb4:	2027883a 	mov	r19,r4
    fbb8:	21000017 	ldw	r4,0(r4)
    fbbc:	00c00044 	movi	r3,1
    fbc0:	dd400515 	stw	r21,20(sp)
    fbc4:	dd000415 	stw	r20,16(sp)
    fbc8:	ddc00715 	stw	r23,28(sp)
    fbcc:	dd800615 	stw	r22,24(sp)
    fbd0:	dc800215 	stw	r18,8(sp)
    fbd4:	dc400115 	stw	r17,4(sp)
    fbd8:	dc000015 	stw	r16,0(sp)
    fbdc:	282b883a 	mov	r21,r5
    fbe0:	3029883a 	mov	r20,r6
    fbe4:	1900632e 	bgeu	r3,r4,fd74 <_fpadd_parts+0x1c8>
    fbe8:	28800017 	ldw	r2,0(r5)
    fbec:	1880812e 	bgeu	r3,r2,fdf4 <_fpadd_parts+0x248>
    fbf0:	00c00104 	movi	r3,4
    fbf4:	20c0dc26 	beq	r4,r3,ff68 <_fpadd_parts+0x3bc>
    fbf8:	10c07e26 	beq	r2,r3,fdf4 <_fpadd_parts+0x248>
    fbfc:	00c00084 	movi	r3,2
    fc00:	10c06726 	beq	r2,r3,fda0 <_fpadd_parts+0x1f4>
    fc04:	20c07b26 	beq	r4,r3,fdf4 <_fpadd_parts+0x248>
    fc08:	9dc00217 	ldw	r23,8(r19)
    fc0c:	28c00217 	ldw	r3,8(r5)
    fc10:	9c400317 	ldw	r17,12(r19)
    fc14:	2bc00317 	ldw	r15,12(r5)
    fc18:	b8cdc83a 	sub	r6,r23,r3
    fc1c:	9c800417 	ldw	r18,16(r19)
    fc20:	2c000417 	ldw	r16,16(r5)
    fc24:	3009883a 	mov	r4,r6
    fc28:	30009716 	blt	r6,zero,fe88 <_fpadd_parts+0x2dc>
    fc2c:	00800fc4 	movi	r2,63
    fc30:	11806b16 	blt	r2,r6,fde0 <_fpadd_parts+0x234>
    fc34:	0100a40e 	bge	zero,r4,fec8 <_fpadd_parts+0x31c>
    fc38:	35bff804 	addi	r22,r6,-32
    fc3c:	b000bc16 	blt	r22,zero,ff30 <_fpadd_parts+0x384>
    fc40:	8596d83a 	srl	r11,r16,r22
    fc44:	0019883a 	mov	r12,zero
    fc48:	0013883a 	mov	r9,zero
    fc4c:	01000044 	movi	r4,1
    fc50:	0015883a 	mov	r10,zero
    fc54:	b000be16 	blt	r22,zero,ff50 <_fpadd_parts+0x3a4>
    fc58:	2590983a 	sll	r8,r4,r22
    fc5c:	000f883a 	mov	r7,zero
    fc60:	00bfffc4 	movi	r2,-1
    fc64:	3889883a 	add	r4,r7,r2
    fc68:	408b883a 	add	r5,r8,r2
    fc6c:	21cd803a 	cmpltu	r6,r4,r7
    fc70:	314b883a 	add	r5,r6,r5
    fc74:	7904703a 	and	r2,r15,r4
    fc78:	8146703a 	and	r3,r16,r5
    fc7c:	10c4b03a 	or	r2,r2,r3
    fc80:	10000226 	beq	r2,zero,fc8c <_fpadd_parts+0xe0>
    fc84:	02400044 	movi	r9,1
    fc88:	0015883a 	mov	r10,zero
    fc8c:	5a5eb03a 	or	r15,r11,r9
    fc90:	62a0b03a 	or	r16,r12,r10
    fc94:	99400117 	ldw	r5,4(r19)
    fc98:	a8800117 	ldw	r2,4(r21)
    fc9c:	28806e26 	beq	r5,r2,fe58 <_fpadd_parts+0x2ac>
    fca0:	28006626 	beq	r5,zero,fe3c <_fpadd_parts+0x290>
    fca4:	7c45c83a 	sub	r2,r15,r17
    fca8:	7889803a 	cmpltu	r4,r15,r2
    fcac:	8487c83a 	sub	r3,r16,r18
    fcb0:	1909c83a 	sub	r4,r3,r4
    fcb4:	100d883a 	mov	r6,r2
    fcb8:	200f883a 	mov	r7,r4
    fcbc:	38007716 	blt	r7,zero,fe9c <_fpadd_parts+0x2f0>
    fcc0:	a5c00215 	stw	r23,8(r20)
    fcc4:	a1c00415 	stw	r7,16(r20)
    fcc8:	a0000115 	stw	zero,4(r20)
    fccc:	a1800315 	stw	r6,12(r20)
    fcd0:	a2000317 	ldw	r8,12(r20)
    fcd4:	a2400417 	ldw	r9,16(r20)
    fcd8:	00bfffc4 	movi	r2,-1
    fcdc:	408b883a 	add	r5,r8,r2
    fce0:	2a09803a 	cmpltu	r4,r5,r8
    fce4:	488d883a 	add	r6,r9,r2
    fce8:	01c40034 	movhi	r7,4096
    fcec:	39ffffc4 	addi	r7,r7,-1
    fcf0:	218d883a 	add	r6,r4,r6
    fcf4:	39801736 	bltu	r7,r6,fd54 <_fpadd_parts+0x1a8>
    fcf8:	31c06526 	beq	r6,r7,fe90 <_fpadd_parts+0x2e4>
    fcfc:	a3000217 	ldw	r12,8(r20)
    fd00:	4209883a 	add	r4,r8,r8
    fd04:	00bfffc4 	movi	r2,-1
    fd08:	220f803a 	cmpltu	r7,r4,r8
    fd0c:	4a4b883a 	add	r5,r9,r9
    fd10:	394f883a 	add	r7,r7,r5
    fd14:	2095883a 	add	r10,r4,r2
    fd18:	3897883a 	add	r11,r7,r2
    fd1c:	510d803a 	cmpltu	r6,r10,r4
    fd20:	6099883a 	add	r12,r12,r2
    fd24:	32d7883a 	add	r11,r6,r11
    fd28:	00840034 	movhi	r2,4096
    fd2c:	10bfffc4 	addi	r2,r2,-1
    fd30:	2011883a 	mov	r8,r4
    fd34:	3813883a 	mov	r9,r7
    fd38:	a1000315 	stw	r4,12(r20)
    fd3c:	a1c00415 	stw	r7,16(r20)
    fd40:	a3000215 	stw	r12,8(r20)
    fd44:	12c00336 	bltu	r2,r11,fd54 <_fpadd_parts+0x1a8>
    fd48:	58bfed1e 	bne	r11,r2,fd00 <_fpadd_parts+0x154>
    fd4c:	00bfff84 	movi	r2,-2
    fd50:	12bfeb2e 	bgeu	r2,r10,fd00 <_fpadd_parts+0x154>
    fd54:	a2800417 	ldw	r10,16(r20)
    fd58:	008000c4 	movi	r2,3
    fd5c:	00c80034 	movhi	r3,8192
    fd60:	18ffffc4 	addi	r3,r3,-1
    fd64:	a2400317 	ldw	r9,12(r20)
    fd68:	a0800015 	stw	r2,0(r20)
    fd6c:	1a802336 	bltu	r3,r10,fdfc <_fpadd_parts+0x250>
    fd70:	a027883a 	mov	r19,r20
    fd74:	9805883a 	mov	r2,r19
    fd78:	ddc00717 	ldw	r23,28(sp)
    fd7c:	dd800617 	ldw	r22,24(sp)
    fd80:	dd400517 	ldw	r21,20(sp)
    fd84:	dd000417 	ldw	r20,16(sp)
    fd88:	dcc00317 	ldw	r19,12(sp)
    fd8c:	dc800217 	ldw	r18,8(sp)
    fd90:	dc400117 	ldw	r17,4(sp)
    fd94:	dc000017 	ldw	r16,0(sp)
    fd98:	dec00804 	addi	sp,sp,32
    fd9c:	f800283a 	ret
    fda0:	20fff41e 	bne	r4,r3,fd74 <_fpadd_parts+0x1c8>
    fda4:	31000015 	stw	r4,0(r6)
    fda8:	98800117 	ldw	r2,4(r19)
    fdac:	30800115 	stw	r2,4(r6)
    fdb0:	98c00217 	ldw	r3,8(r19)
    fdb4:	30c00215 	stw	r3,8(r6)
    fdb8:	98800317 	ldw	r2,12(r19)
    fdbc:	30800315 	stw	r2,12(r6)
    fdc0:	98c00417 	ldw	r3,16(r19)
    fdc4:	30c00415 	stw	r3,16(r6)
    fdc8:	98800117 	ldw	r2,4(r19)
    fdcc:	28c00117 	ldw	r3,4(r5)
    fdd0:	3027883a 	mov	r19,r6
    fdd4:	10c4703a 	and	r2,r2,r3
    fdd8:	30800115 	stw	r2,4(r6)
    fddc:	003fe506 	br	fd74 <_fpadd_parts+0x1c8>
    fde0:	1dc02616 	blt	r3,r23,fe7c <_fpadd_parts+0x2d0>
    fde4:	0023883a 	mov	r17,zero
    fde8:	182f883a 	mov	r23,r3
    fdec:	0025883a 	mov	r18,zero
    fdf0:	003fa806 	br	fc94 <_fpadd_parts+0xe8>
    fdf4:	a827883a 	mov	r19,r21
    fdf8:	003fde06 	br	fd74 <_fpadd_parts+0x1c8>
    fdfc:	01800044 	movi	r6,1
    fe00:	500497fa 	slli	r2,r10,31
    fe04:	4808d07a 	srli	r4,r9,1
    fe08:	518ad83a 	srl	r5,r10,r6
    fe0c:	a2000217 	ldw	r8,8(r20)
    fe10:	1108b03a 	or	r4,r2,r4
    fe14:	0007883a 	mov	r3,zero
    fe18:	4984703a 	and	r2,r9,r6
    fe1c:	208cb03a 	or	r6,r4,r2
    fe20:	28ceb03a 	or	r7,r5,r3
    fe24:	42000044 	addi	r8,r8,1
    fe28:	a027883a 	mov	r19,r20
    fe2c:	a1c00415 	stw	r7,16(r20)
    fe30:	a2000215 	stw	r8,8(r20)
    fe34:	a1800315 	stw	r6,12(r20)
    fe38:	003fce06 	br	fd74 <_fpadd_parts+0x1c8>
    fe3c:	8bc5c83a 	sub	r2,r17,r15
    fe40:	8889803a 	cmpltu	r4,r17,r2
    fe44:	9407c83a 	sub	r3,r18,r16
    fe48:	1909c83a 	sub	r4,r3,r4
    fe4c:	100d883a 	mov	r6,r2
    fe50:	200f883a 	mov	r7,r4
    fe54:	003f9906 	br	fcbc <_fpadd_parts+0x110>
    fe58:	7c45883a 	add	r2,r15,r17
    fe5c:	13c9803a 	cmpltu	r4,r2,r15
    fe60:	8487883a 	add	r3,r16,r18
    fe64:	20c9883a 	add	r4,r4,r3
    fe68:	a1400115 	stw	r5,4(r20)
    fe6c:	a5c00215 	stw	r23,8(r20)
    fe70:	a0800315 	stw	r2,12(r20)
    fe74:	a1000415 	stw	r4,16(r20)
    fe78:	003fb606 	br	fd54 <_fpadd_parts+0x1a8>
    fe7c:	001f883a 	mov	r15,zero
    fe80:	0021883a 	mov	r16,zero
    fe84:	003f8306 	br	fc94 <_fpadd_parts+0xe8>
    fe88:	018dc83a 	sub	r6,zero,r6
    fe8c:	003f6706 	br	fc2c <_fpadd_parts+0x80>
    fe90:	00bfff84 	movi	r2,-2
    fe94:	117faf36 	bltu	r2,r5,fd54 <_fpadd_parts+0x1a8>
    fe98:	003f9806 	br	fcfc <_fpadd_parts+0x150>
    fe9c:	0005883a 	mov	r2,zero
    fea0:	1189c83a 	sub	r4,r2,r6
    fea4:	1105803a 	cmpltu	r2,r2,r4
    fea8:	01cbc83a 	sub	r5,zero,r7
    feac:	2885c83a 	sub	r2,r5,r2
    feb0:	01800044 	movi	r6,1
    feb4:	a1800115 	stw	r6,4(r20)
    feb8:	a5c00215 	stw	r23,8(r20)
    febc:	a1000315 	stw	r4,12(r20)
    fec0:	a0800415 	stw	r2,16(r20)
    fec4:	003f8206 	br	fcd0 <_fpadd_parts+0x124>
    fec8:	203f7226 	beq	r4,zero,fc94 <_fpadd_parts+0xe8>
    fecc:	35bff804 	addi	r22,r6,-32
    fed0:	b9af883a 	add	r23,r23,r6
    fed4:	b0003116 	blt	r22,zero,ff9c <_fpadd_parts+0x3f0>
    fed8:	959ad83a 	srl	r13,r18,r22
    fedc:	001d883a 	mov	r14,zero
    fee0:	000f883a 	mov	r7,zero
    fee4:	01000044 	movi	r4,1
    fee8:	0011883a 	mov	r8,zero
    feec:	b0002516 	blt	r22,zero,ff84 <_fpadd_parts+0x3d8>
    fef0:	2594983a 	sll	r10,r4,r22
    fef4:	0013883a 	mov	r9,zero
    fef8:	00bfffc4 	movi	r2,-1
    fefc:	4889883a 	add	r4,r9,r2
    ff00:	508b883a 	add	r5,r10,r2
    ff04:	224d803a 	cmpltu	r6,r4,r9
    ff08:	314b883a 	add	r5,r6,r5
    ff0c:	8904703a 	and	r2,r17,r4
    ff10:	9146703a 	and	r3,r18,r5
    ff14:	10c4b03a 	or	r2,r2,r3
    ff18:	10000226 	beq	r2,zero,ff24 <_fpadd_parts+0x378>
    ff1c:	01c00044 	movi	r7,1
    ff20:	0011883a 	mov	r8,zero
    ff24:	69e2b03a 	or	r17,r13,r7
    ff28:	7224b03a 	or	r18,r14,r8
    ff2c:	003f5906 	br	fc94 <_fpadd_parts+0xe8>
    ff30:	8407883a 	add	r3,r16,r16
    ff34:	008007c4 	movi	r2,31
    ff38:	1185c83a 	sub	r2,r2,r6
    ff3c:	1886983a 	sll	r3,r3,r2
    ff40:	7996d83a 	srl	r11,r15,r6
    ff44:	8198d83a 	srl	r12,r16,r6
    ff48:	1ad6b03a 	or	r11,r3,r11
    ff4c:	003f3e06 	br	fc48 <_fpadd_parts+0x9c>
    ff50:	2006d07a 	srli	r3,r4,1
    ff54:	008007c4 	movi	r2,31
    ff58:	1185c83a 	sub	r2,r2,r6
    ff5c:	1890d83a 	srl	r8,r3,r2
    ff60:	218e983a 	sll	r7,r4,r6
    ff64:	003f3e06 	br	fc60 <_fpadd_parts+0xb4>
    ff68:	113f821e 	bne	r2,r4,fd74 <_fpadd_parts+0x1c8>
    ff6c:	28c00117 	ldw	r3,4(r5)
    ff70:	98800117 	ldw	r2,4(r19)
    ff74:	10ff7f26 	beq	r2,r3,fd74 <_fpadd_parts+0x1c8>
    ff78:	04c000b4 	movhi	r19,2
    ff7c:	9cfb8404 	addi	r19,r19,-4592
    ff80:	003f7c06 	br	fd74 <_fpadd_parts+0x1c8>
    ff84:	2006d07a 	srli	r3,r4,1
    ff88:	008007c4 	movi	r2,31
    ff8c:	1185c83a 	sub	r2,r2,r6
    ff90:	1894d83a 	srl	r10,r3,r2
    ff94:	2192983a 	sll	r9,r4,r6
    ff98:	003fd706 	br	fef8 <_fpadd_parts+0x34c>
    ff9c:	9487883a 	add	r3,r18,r18
    ffa0:	008007c4 	movi	r2,31
    ffa4:	1185c83a 	sub	r2,r2,r6
    ffa8:	1886983a 	sll	r3,r3,r2
    ffac:	899ad83a 	srl	r13,r17,r6
    ffb0:	919cd83a 	srl	r14,r18,r6
    ffb4:	1b5ab03a 	or	r13,r3,r13
    ffb8:	003fc906 	br	fee0 <_fpadd_parts+0x334>

0000ffbc <__subdf3>:
    ffbc:	deffea04 	addi	sp,sp,-88
    ffc0:	dcc01415 	stw	r19,80(sp)
    ffc4:	dcc00404 	addi	r19,sp,16
    ffc8:	2011883a 	mov	r8,r4
    ffcc:	2813883a 	mov	r9,r5
    ffd0:	dc401315 	stw	r17,76(sp)
    ffd4:	d809883a 	mov	r4,sp
    ffd8:	980b883a 	mov	r5,r19
    ffdc:	dc400904 	addi	r17,sp,36
    ffe0:	dfc01515 	stw	ra,84(sp)
    ffe4:	da400115 	stw	r9,4(sp)
    ffe8:	d9c00315 	stw	r7,12(sp)
    ffec:	da000015 	stw	r8,0(sp)
    fff0:	d9800215 	stw	r6,8(sp)
    fff4:	00114940 	call	11494 <__unpack_d>
    fff8:	d9000204 	addi	r4,sp,8
    fffc:	880b883a 	mov	r5,r17
   10000:	00114940 	call	11494 <__unpack_d>
   10004:	d8800a17 	ldw	r2,40(sp)
   10008:	880b883a 	mov	r5,r17
   1000c:	9809883a 	mov	r4,r19
   10010:	d9800e04 	addi	r6,sp,56
   10014:	1080005c 	xori	r2,r2,1
   10018:	d8800a15 	stw	r2,40(sp)
   1001c:	000fbac0 	call	fbac <_fpadd_parts>
   10020:	1009883a 	mov	r4,r2
   10024:	00111800 	call	11180 <__pack_d>
   10028:	dfc01517 	ldw	ra,84(sp)
   1002c:	dcc01417 	ldw	r19,80(sp)
   10030:	dc401317 	ldw	r17,76(sp)
   10034:	dec01604 	addi	sp,sp,88
   10038:	f800283a 	ret

0001003c <__adddf3>:
   1003c:	deffea04 	addi	sp,sp,-88
   10040:	dcc01415 	stw	r19,80(sp)
   10044:	dcc00404 	addi	r19,sp,16
   10048:	2011883a 	mov	r8,r4
   1004c:	2813883a 	mov	r9,r5
   10050:	dc401315 	stw	r17,76(sp)
   10054:	d809883a 	mov	r4,sp
   10058:	980b883a 	mov	r5,r19
   1005c:	dc400904 	addi	r17,sp,36
   10060:	dfc01515 	stw	ra,84(sp)
   10064:	da400115 	stw	r9,4(sp)
   10068:	d9c00315 	stw	r7,12(sp)
   1006c:	da000015 	stw	r8,0(sp)
   10070:	d9800215 	stw	r6,8(sp)
   10074:	00114940 	call	11494 <__unpack_d>
   10078:	d9000204 	addi	r4,sp,8
   1007c:	880b883a 	mov	r5,r17
   10080:	00114940 	call	11494 <__unpack_d>
   10084:	d9800e04 	addi	r6,sp,56
   10088:	9809883a 	mov	r4,r19
   1008c:	880b883a 	mov	r5,r17
   10090:	000fbac0 	call	fbac <_fpadd_parts>
   10094:	1009883a 	mov	r4,r2
   10098:	00111800 	call	11180 <__pack_d>
   1009c:	dfc01517 	ldw	ra,84(sp)
   100a0:	dcc01417 	ldw	r19,80(sp)
   100a4:	dc401317 	ldw	r17,76(sp)
   100a8:	dec01604 	addi	sp,sp,88
   100ac:	f800283a 	ret

000100b0 <__muldf3>:
   100b0:	deffe004 	addi	sp,sp,-128
   100b4:	dc401815 	stw	r17,96(sp)
   100b8:	dc400404 	addi	r17,sp,16
   100bc:	2011883a 	mov	r8,r4
   100c0:	2813883a 	mov	r9,r5
   100c4:	dc001715 	stw	r16,92(sp)
   100c8:	d809883a 	mov	r4,sp
   100cc:	880b883a 	mov	r5,r17
   100d0:	dc000904 	addi	r16,sp,36
   100d4:	dfc01f15 	stw	ra,124(sp)
   100d8:	da400115 	stw	r9,4(sp)
   100dc:	d9c00315 	stw	r7,12(sp)
   100e0:	da000015 	stw	r8,0(sp)
   100e4:	d9800215 	stw	r6,8(sp)
   100e8:	ddc01e15 	stw	r23,120(sp)
   100ec:	dd801d15 	stw	r22,116(sp)
   100f0:	dd401c15 	stw	r21,112(sp)
   100f4:	dd001b15 	stw	r20,108(sp)
   100f8:	dcc01a15 	stw	r19,104(sp)
   100fc:	dc801915 	stw	r18,100(sp)
   10100:	00114940 	call	11494 <__unpack_d>
   10104:	d9000204 	addi	r4,sp,8
   10108:	800b883a 	mov	r5,r16
   1010c:	00114940 	call	11494 <__unpack_d>
   10110:	d9000417 	ldw	r4,16(sp)
   10114:	00800044 	movi	r2,1
   10118:	1100102e 	bgeu	r2,r4,1015c <__muldf3+0xac>
   1011c:	d8c00917 	ldw	r3,36(sp)
   10120:	10c0062e 	bgeu	r2,r3,1013c <__muldf3+0x8c>
   10124:	00800104 	movi	r2,4
   10128:	20800a26 	beq	r4,r2,10154 <__muldf3+0xa4>
   1012c:	1880cc26 	beq	r3,r2,10460 <__muldf3+0x3b0>
   10130:	00800084 	movi	r2,2
   10134:	20800926 	beq	r4,r2,1015c <__muldf3+0xac>
   10138:	1880191e 	bne	r3,r2,101a0 <__muldf3+0xf0>
   1013c:	d8c00a17 	ldw	r3,40(sp)
   10140:	d8800517 	ldw	r2,20(sp)
   10144:	8009883a 	mov	r4,r16
   10148:	10c4c03a 	cmpne	r2,r2,r3
   1014c:	d8800a15 	stw	r2,40(sp)
   10150:	00000706 	br	10170 <__muldf3+0xc0>
   10154:	00800084 	movi	r2,2
   10158:	1880c326 	beq	r3,r2,10468 <__muldf3+0x3b8>
   1015c:	d8800517 	ldw	r2,20(sp)
   10160:	d8c00a17 	ldw	r3,40(sp)
   10164:	8809883a 	mov	r4,r17
   10168:	10c4c03a 	cmpne	r2,r2,r3
   1016c:	d8800515 	stw	r2,20(sp)
   10170:	00111800 	call	11180 <__pack_d>
   10174:	dfc01f17 	ldw	ra,124(sp)
   10178:	ddc01e17 	ldw	r23,120(sp)
   1017c:	dd801d17 	ldw	r22,116(sp)
   10180:	dd401c17 	ldw	r21,112(sp)
   10184:	dd001b17 	ldw	r20,108(sp)
   10188:	dcc01a17 	ldw	r19,104(sp)
   1018c:	dc801917 	ldw	r18,100(sp)
   10190:	dc401817 	ldw	r17,96(sp)
   10194:	dc001717 	ldw	r16,92(sp)
   10198:	dec02004 	addi	sp,sp,128
   1019c:	f800283a 	ret
   101a0:	dd800717 	ldw	r22,28(sp)
   101a4:	dc800c17 	ldw	r18,48(sp)
   101a8:	002b883a 	mov	r21,zero
   101ac:	0023883a 	mov	r17,zero
   101b0:	a80b883a 	mov	r5,r21
   101b4:	b00d883a 	mov	r6,r22
   101b8:	880f883a 	mov	r7,r17
   101bc:	ddc00817 	ldw	r23,32(sp)
   101c0:	dcc00d17 	ldw	r19,52(sp)
   101c4:	9009883a 	mov	r4,r18
   101c8:	0010d980 	call	10d98 <__muldi3>
   101cc:	001b883a 	mov	r13,zero
   101d0:	680f883a 	mov	r7,r13
   101d4:	b009883a 	mov	r4,r22
   101d8:	000b883a 	mov	r5,zero
   101dc:	980d883a 	mov	r6,r19
   101e0:	b82d883a 	mov	r22,r23
   101e4:	002f883a 	mov	r23,zero
   101e8:	db401615 	stw	r13,88(sp)
   101ec:	d8801315 	stw	r2,76(sp)
   101f0:	d8c01415 	stw	r3,80(sp)
   101f4:	dcc01515 	stw	r19,84(sp)
   101f8:	0010d980 	call	10d98 <__muldi3>
   101fc:	b00d883a 	mov	r6,r22
   10200:	000b883a 	mov	r5,zero
   10204:	9009883a 	mov	r4,r18
   10208:	b80f883a 	mov	r7,r23
   1020c:	1021883a 	mov	r16,r2
   10210:	1823883a 	mov	r17,r3
   10214:	0010d980 	call	10d98 <__muldi3>
   10218:	8085883a 	add	r2,r16,r2
   1021c:	140d803a 	cmpltu	r6,r2,r16
   10220:	88c7883a 	add	r3,r17,r3
   10224:	30cd883a 	add	r6,r6,r3
   10228:	1029883a 	mov	r20,r2
   1022c:	302b883a 	mov	r21,r6
   10230:	da801317 	ldw	r10,76(sp)
   10234:	dac01417 	ldw	r11,80(sp)
   10238:	db001517 	ldw	r12,84(sp)
   1023c:	db401617 	ldw	r13,88(sp)
   10240:	3440612e 	bgeu	r6,r17,103c8 <__muldf3+0x318>
   10244:	0009883a 	mov	r4,zero
   10248:	5105883a 	add	r2,r10,r4
   1024c:	128d803a 	cmpltu	r6,r2,r10
   10250:	5d07883a 	add	r3,r11,r20
   10254:	30cd883a 	add	r6,r6,r3
   10258:	0021883a 	mov	r16,zero
   1025c:	04400044 	movi	r17,1
   10260:	1025883a 	mov	r18,r2
   10264:	3027883a 	mov	r19,r6
   10268:	32c06236 	bltu	r6,r11,103f4 <__muldf3+0x344>
   1026c:	59807a26 	beq	r11,r6,10458 <__muldf3+0x3a8>
   10270:	680b883a 	mov	r5,r13
   10274:	b80f883a 	mov	r7,r23
   10278:	6009883a 	mov	r4,r12
   1027c:	b00d883a 	mov	r6,r22
   10280:	0010d980 	call	10d98 <__muldi3>
   10284:	1009883a 	mov	r4,r2
   10288:	000f883a 	mov	r7,zero
   1028c:	1545883a 	add	r2,r2,r21
   10290:	1111803a 	cmpltu	r8,r2,r4
   10294:	19c7883a 	add	r3,r3,r7
   10298:	40c7883a 	add	r3,r8,r3
   1029c:	88cb883a 	add	r5,r17,r3
   102a0:	d8c00617 	ldw	r3,24(sp)
   102a4:	8089883a 	add	r4,r16,r2
   102a8:	d8800b17 	ldw	r2,44(sp)
   102ac:	18c00104 	addi	r3,r3,4
   102b0:	240d803a 	cmpltu	r6,r4,r16
   102b4:	10c7883a 	add	r3,r2,r3
   102b8:	2013883a 	mov	r9,r4
   102bc:	d8800a17 	ldw	r2,40(sp)
   102c0:	d9000517 	ldw	r4,20(sp)
   102c4:	314d883a 	add	r6,r6,r5
   102c8:	3015883a 	mov	r10,r6
   102cc:	2088c03a 	cmpne	r4,r4,r2
   102d0:	00880034 	movhi	r2,8192
   102d4:	10bfffc4 	addi	r2,r2,-1
   102d8:	d9000f15 	stw	r4,60(sp)
   102dc:	d8c01015 	stw	r3,64(sp)
   102e0:	1180162e 	bgeu	r2,r6,1033c <__muldf3+0x28c>
   102e4:	1811883a 	mov	r8,r3
   102e8:	101f883a 	mov	r15,r2
   102ec:	980497fa 	slli	r2,r19,31
   102f0:	9016d07a 	srli	r11,r18,1
   102f4:	500697fa 	slli	r3,r10,31
   102f8:	480cd07a 	srli	r6,r9,1
   102fc:	500ed07a 	srli	r7,r10,1
   10300:	12d6b03a 	or	r11,r2,r11
   10304:	00800044 	movi	r2,1
   10308:	198cb03a 	or	r6,r3,r6
   1030c:	4888703a 	and	r4,r9,r2
   10310:	9818d07a 	srli	r12,r19,1
   10314:	001b883a 	mov	r13,zero
   10318:	03a00034 	movhi	r14,32768
   1031c:	3013883a 	mov	r9,r6
   10320:	3815883a 	mov	r10,r7
   10324:	4091883a 	add	r8,r8,r2
   10328:	20000226 	beq	r4,zero,10334 <__muldf3+0x284>
   1032c:	5b64b03a 	or	r18,r11,r13
   10330:	63a6b03a 	or	r19,r12,r14
   10334:	7abfed36 	bltu	r15,r10,102ec <__muldf3+0x23c>
   10338:	da001015 	stw	r8,64(sp)
   1033c:	00840034 	movhi	r2,4096
   10340:	10bfffc4 	addi	r2,r2,-1
   10344:	12801436 	bltu	r2,r10,10398 <__muldf3+0x2e8>
   10348:	da001017 	ldw	r8,64(sp)
   1034c:	101f883a 	mov	r15,r2
   10350:	4a45883a 	add	r2,r9,r9
   10354:	124d803a 	cmpltu	r6,r2,r9
   10358:	5287883a 	add	r3,r10,r10
   1035c:	9497883a 	add	r11,r18,r18
   10360:	5c8f803a 	cmpltu	r7,r11,r18
   10364:	9cd9883a 	add	r12,r19,r19
   10368:	01000044 	movi	r4,1
   1036c:	30cd883a 	add	r6,r6,r3
   10370:	3b0f883a 	add	r7,r7,r12
   10374:	423fffc4 	addi	r8,r8,-1
   10378:	1013883a 	mov	r9,r2
   1037c:	3015883a 	mov	r10,r6
   10380:	111ab03a 	or	r13,r2,r4
   10384:	98003016 	blt	r19,zero,10448 <__muldf3+0x398>
   10388:	5825883a 	mov	r18,r11
   1038c:	3827883a 	mov	r19,r7
   10390:	7abfef2e 	bgeu	r15,r10,10350 <__muldf3+0x2a0>
   10394:	da001015 	stw	r8,64(sp)
   10398:	00803fc4 	movi	r2,255
   1039c:	488e703a 	and	r7,r9,r2
   103a0:	00802004 	movi	r2,128
   103a4:	0007883a 	mov	r3,zero
   103a8:	0011883a 	mov	r8,zero
   103ac:	38801826 	beq	r7,r2,10410 <__muldf3+0x360>
   103b0:	008000c4 	movi	r2,3
   103b4:	d9000e04 	addi	r4,sp,56
   103b8:	da801215 	stw	r10,72(sp)
   103bc:	d8800e15 	stw	r2,56(sp)
   103c0:	da401115 	stw	r9,68(sp)
   103c4:	003f6a06 	br	10170 <__muldf3+0xc0>
   103c8:	89802126 	beq	r17,r6,10450 <__muldf3+0x3a0>
   103cc:	0009883a 	mov	r4,zero
   103d0:	5105883a 	add	r2,r10,r4
   103d4:	128d803a 	cmpltu	r6,r2,r10
   103d8:	5d07883a 	add	r3,r11,r20
   103dc:	30cd883a 	add	r6,r6,r3
   103e0:	0021883a 	mov	r16,zero
   103e4:	0023883a 	mov	r17,zero
   103e8:	1025883a 	mov	r18,r2
   103ec:	3027883a 	mov	r19,r6
   103f0:	32ff9e2e 	bgeu	r6,r11,1026c <__muldf3+0x1bc>
   103f4:	00800044 	movi	r2,1
   103f8:	8089883a 	add	r4,r16,r2
   103fc:	240d803a 	cmpltu	r6,r4,r16
   10400:	344d883a 	add	r6,r6,r17
   10404:	2021883a 	mov	r16,r4
   10408:	3023883a 	mov	r17,r6
   1040c:	003f9806 	br	10270 <__muldf3+0x1c0>
   10410:	403fe71e 	bne	r8,zero,103b0 <__muldf3+0x300>
   10414:	01004004 	movi	r4,256
   10418:	4904703a 	and	r2,r9,r4
   1041c:	10c4b03a 	or	r2,r2,r3
   10420:	103fe31e 	bne	r2,zero,103b0 <__muldf3+0x300>
   10424:	94c4b03a 	or	r2,r18,r19
   10428:	103fe126 	beq	r2,zero,103b0 <__muldf3+0x300>
   1042c:	49c5883a 	add	r2,r9,r7
   10430:	1251803a 	cmpltu	r8,r2,r9
   10434:	4291883a 	add	r8,r8,r10
   10438:	013fc004 	movi	r4,-256
   1043c:	1112703a 	and	r9,r2,r4
   10440:	4015883a 	mov	r10,r8
   10444:	003fda06 	br	103b0 <__muldf3+0x300>
   10448:	6813883a 	mov	r9,r13
   1044c:	003fce06 	br	10388 <__muldf3+0x2d8>
   10450:	143f7c36 	bltu	r2,r16,10244 <__muldf3+0x194>
   10454:	003fdd06 	br	103cc <__muldf3+0x31c>
   10458:	12bf852e 	bgeu	r2,r10,10270 <__muldf3+0x1c0>
   1045c:	003fe506 	br	103f4 <__muldf3+0x344>
   10460:	00800084 	movi	r2,2
   10464:	20bf351e 	bne	r4,r2,1013c <__muldf3+0x8c>
   10468:	010000b4 	movhi	r4,2
   1046c:	213b8404 	addi	r4,r4,-4592
   10470:	003f3f06 	br	10170 <__muldf3+0xc0>

00010474 <__ltdf2>:
   10474:	deffef04 	addi	sp,sp,-68
   10478:	dc400f15 	stw	r17,60(sp)
   1047c:	dc400404 	addi	r17,sp,16
   10480:	2005883a 	mov	r2,r4
   10484:	2807883a 	mov	r3,r5
   10488:	dc000e15 	stw	r16,56(sp)
   1048c:	d809883a 	mov	r4,sp
   10490:	880b883a 	mov	r5,r17
   10494:	dc000904 	addi	r16,sp,36
   10498:	d8c00115 	stw	r3,4(sp)
   1049c:	d8800015 	stw	r2,0(sp)
   104a0:	d9800215 	stw	r6,8(sp)
   104a4:	dfc01015 	stw	ra,64(sp)
   104a8:	d9c00315 	stw	r7,12(sp)
   104ac:	00114940 	call	11494 <__unpack_d>
   104b0:	d9000204 	addi	r4,sp,8
   104b4:	800b883a 	mov	r5,r16
   104b8:	00114940 	call	11494 <__unpack_d>
   104bc:	d8800417 	ldw	r2,16(sp)
   104c0:	00c00044 	movi	r3,1
   104c4:	180d883a 	mov	r6,r3
   104c8:	1880062e 	bgeu	r3,r2,104e4 <__ltdf2+0x70>
   104cc:	d8800917 	ldw	r2,36(sp)
   104d0:	8809883a 	mov	r4,r17
   104d4:	800b883a 	mov	r5,r16
   104d8:	1880022e 	bgeu	r3,r2,104e4 <__ltdf2+0x70>
   104dc:	00115cc0 	call	115cc <__fpcmp_parts_d>
   104e0:	100d883a 	mov	r6,r2
   104e4:	3005883a 	mov	r2,r6
   104e8:	dfc01017 	ldw	ra,64(sp)
   104ec:	dc400f17 	ldw	r17,60(sp)
   104f0:	dc000e17 	ldw	r16,56(sp)
   104f4:	dec01104 	addi	sp,sp,68
   104f8:	f800283a 	ret

000104fc <__floatsidf>:
   104fc:	2006d7fa 	srli	r3,r4,31
   10500:	defff604 	addi	sp,sp,-40
   10504:	008000c4 	movi	r2,3
   10508:	dfc00915 	stw	ra,36(sp)
   1050c:	dcc00815 	stw	r19,32(sp)
   10510:	dc800715 	stw	r18,28(sp)
   10514:	dc400615 	stw	r17,24(sp)
   10518:	dc000515 	stw	r16,20(sp)
   1051c:	d8800015 	stw	r2,0(sp)
   10520:	d8c00115 	stw	r3,4(sp)
   10524:	20000f1e 	bne	r4,zero,10564 <__floatsidf+0x68>
   10528:	00800084 	movi	r2,2
   1052c:	d8800015 	stw	r2,0(sp)
   10530:	d809883a 	mov	r4,sp
   10534:	00111800 	call	11180 <__pack_d>
   10538:	1009883a 	mov	r4,r2
   1053c:	180b883a 	mov	r5,r3
   10540:	2005883a 	mov	r2,r4
   10544:	2807883a 	mov	r3,r5
   10548:	dfc00917 	ldw	ra,36(sp)
   1054c:	dcc00817 	ldw	r19,32(sp)
   10550:	dc800717 	ldw	r18,28(sp)
   10554:	dc400617 	ldw	r17,24(sp)
   10558:	dc000517 	ldw	r16,20(sp)
   1055c:	dec00a04 	addi	sp,sp,40
   10560:	f800283a 	ret
   10564:	00800f04 	movi	r2,60
   10568:	1807003a 	cmpeq	r3,r3,zero
   1056c:	d8800215 	stw	r2,8(sp)
   10570:	18001126 	beq	r3,zero,105b8 <__floatsidf+0xbc>
   10574:	0027883a 	mov	r19,zero
   10578:	2025883a 	mov	r18,r4
   1057c:	d9000315 	stw	r4,12(sp)
   10580:	dcc00415 	stw	r19,16(sp)
   10584:	0010e300 	call	10e30 <__clzsi2>
   10588:	11000744 	addi	r4,r2,29
   1058c:	013fe80e 	bge	zero,r4,10530 <__floatsidf+0x34>
   10590:	10bfff44 	addi	r2,r2,-3
   10594:	10000c16 	blt	r2,zero,105c8 <__floatsidf+0xcc>
   10598:	90a2983a 	sll	r17,r18,r2
   1059c:	0021883a 	mov	r16,zero
   105a0:	d8800217 	ldw	r2,8(sp)
   105a4:	dc400415 	stw	r17,16(sp)
   105a8:	dc000315 	stw	r16,12(sp)
   105ac:	1105c83a 	sub	r2,r2,r4
   105b0:	d8800215 	stw	r2,8(sp)
   105b4:	003fde06 	br	10530 <__floatsidf+0x34>
   105b8:	00a00034 	movhi	r2,32768
   105bc:	20800a26 	beq	r4,r2,105e8 <__floatsidf+0xec>
   105c0:	0109c83a 	sub	r4,zero,r4
   105c4:	003feb06 	br	10574 <__floatsidf+0x78>
   105c8:	9006d07a 	srli	r3,r18,1
   105cc:	008007c4 	movi	r2,31
   105d0:	1105c83a 	sub	r2,r2,r4
   105d4:	1886d83a 	srl	r3,r3,r2
   105d8:	9922983a 	sll	r17,r19,r4
   105dc:	9120983a 	sll	r16,r18,r4
   105e0:	1c62b03a 	or	r17,r3,r17
   105e4:	003fee06 	br	105a0 <__floatsidf+0xa4>
   105e8:	0009883a 	mov	r4,zero
   105ec:	01707834 	movhi	r5,49632
   105f0:	003fd306 	br	10540 <__floatsidf+0x44>

000105f4 <__fixdfsi>:
   105f4:	defff804 	addi	sp,sp,-32
   105f8:	2005883a 	mov	r2,r4
   105fc:	2807883a 	mov	r3,r5
   10600:	d809883a 	mov	r4,sp
   10604:	d9400204 	addi	r5,sp,8
   10608:	d8c00115 	stw	r3,4(sp)
   1060c:	d8800015 	stw	r2,0(sp)
   10610:	dfc00715 	stw	ra,28(sp)
   10614:	00114940 	call	11494 <__unpack_d>
   10618:	d8c00217 	ldw	r3,8(sp)
   1061c:	00800084 	movi	r2,2
   10620:	1880051e 	bne	r3,r2,10638 <__fixdfsi+0x44>
   10624:	0007883a 	mov	r3,zero
   10628:	1805883a 	mov	r2,r3
   1062c:	dfc00717 	ldw	ra,28(sp)
   10630:	dec00804 	addi	sp,sp,32
   10634:	f800283a 	ret
   10638:	00800044 	movi	r2,1
   1063c:	10fff92e 	bgeu	r2,r3,10624 <__fixdfsi+0x30>
   10640:	00800104 	movi	r2,4
   10644:	18800426 	beq	r3,r2,10658 <__fixdfsi+0x64>
   10648:	d8c00417 	ldw	r3,16(sp)
   1064c:	183ff516 	blt	r3,zero,10624 <__fixdfsi+0x30>
   10650:	00800784 	movi	r2,30
   10654:	10c0080e 	bge	r2,r3,10678 <__fixdfsi+0x84>
   10658:	d8800317 	ldw	r2,12(sp)
   1065c:	1000121e 	bne	r2,zero,106a8 <__fixdfsi+0xb4>
   10660:	00e00034 	movhi	r3,32768
   10664:	18ffffc4 	addi	r3,r3,-1
   10668:	1805883a 	mov	r2,r3
   1066c:	dfc00717 	ldw	ra,28(sp)
   10670:	dec00804 	addi	sp,sp,32
   10674:	f800283a 	ret
   10678:	00800f04 	movi	r2,60
   1067c:	10d1c83a 	sub	r8,r2,r3
   10680:	40bff804 	addi	r2,r8,-32
   10684:	d9800517 	ldw	r6,20(sp)
   10688:	d9c00617 	ldw	r7,24(sp)
   1068c:	10000816 	blt	r2,zero,106b0 <__fixdfsi+0xbc>
   10690:	3888d83a 	srl	r4,r7,r2
   10694:	d8800317 	ldw	r2,12(sp)
   10698:	2007883a 	mov	r3,r4
   1069c:	103fe226 	beq	r2,zero,10628 <__fixdfsi+0x34>
   106a0:	0107c83a 	sub	r3,zero,r4
   106a4:	003fe006 	br	10628 <__fixdfsi+0x34>
   106a8:	00e00034 	movhi	r3,32768
   106ac:	003fde06 	br	10628 <__fixdfsi+0x34>
   106b0:	39c7883a 	add	r3,r7,r7
   106b4:	008007c4 	movi	r2,31
   106b8:	1205c83a 	sub	r2,r2,r8
   106bc:	1886983a 	sll	r3,r3,r2
   106c0:	3208d83a 	srl	r4,r6,r8
   106c4:	1908b03a 	or	r4,r3,r4
   106c8:	003ff206 	br	10694 <__fixdfsi+0xa0>

000106cc <__make_dp>:
   106cc:	defff904 	addi	sp,sp,-28
   106d0:	d8c00717 	ldw	r3,28(sp)
   106d4:	d9000015 	stw	r4,0(sp)
   106d8:	d809883a 	mov	r4,sp
   106dc:	dfc00515 	stw	ra,20(sp)
   106e0:	d9c00615 	stw	r7,24(sp)
   106e4:	d9400115 	stw	r5,4(sp)
   106e8:	d9800215 	stw	r6,8(sp)
   106ec:	d8c00415 	stw	r3,16(sp)
   106f0:	d9c00315 	stw	r7,12(sp)
   106f4:	00111800 	call	11180 <__pack_d>
   106f8:	dfc00517 	ldw	ra,20(sp)
   106fc:	dec00704 	addi	sp,sp,28
   10700:	f800283a 	ret

00010704 <udivmodsi4>:
   10704:	29001b2e 	bgeu	r5,r4,10774 <udivmodsi4+0x70>
   10708:	28001a16 	blt	r5,zero,10774 <udivmodsi4+0x70>
   1070c:	00800044 	movi	r2,1
   10710:	0007883a 	mov	r3,zero
   10714:	01c007c4 	movi	r7,31
   10718:	00000306 	br	10728 <udivmodsi4+0x24>
   1071c:	19c01326 	beq	r3,r7,1076c <udivmodsi4+0x68>
   10720:	18c00044 	addi	r3,r3,1
   10724:	28000416 	blt	r5,zero,10738 <udivmodsi4+0x34>
   10728:	294b883a 	add	r5,r5,r5
   1072c:	1085883a 	add	r2,r2,r2
   10730:	293ffa36 	bltu	r5,r4,1071c <udivmodsi4+0x18>
   10734:	10000d26 	beq	r2,zero,1076c <udivmodsi4+0x68>
   10738:	0007883a 	mov	r3,zero
   1073c:	21400236 	bltu	r4,r5,10748 <udivmodsi4+0x44>
   10740:	2149c83a 	sub	r4,r4,r5
   10744:	1886b03a 	or	r3,r3,r2
   10748:	1004d07a 	srli	r2,r2,1
   1074c:	280ad07a 	srli	r5,r5,1
   10750:	103ffa1e 	bne	r2,zero,1073c <udivmodsi4+0x38>
   10754:	30000226 	beq	r6,zero,10760 <udivmodsi4+0x5c>
   10758:	2005883a 	mov	r2,r4
   1075c:	f800283a 	ret
   10760:	1809883a 	mov	r4,r3
   10764:	2005883a 	mov	r2,r4
   10768:	f800283a 	ret
   1076c:	0007883a 	mov	r3,zero
   10770:	003ff806 	br	10754 <udivmodsi4+0x50>
   10774:	00800044 	movi	r2,1
   10778:	0007883a 	mov	r3,zero
   1077c:	003fef06 	br	1073c <udivmodsi4+0x38>

00010780 <__divsi3>:
   10780:	defffe04 	addi	sp,sp,-8
   10784:	dc000015 	stw	r16,0(sp)
   10788:	dfc00115 	stw	ra,4(sp)
   1078c:	0021883a 	mov	r16,zero
   10790:	20000c16 	blt	r4,zero,107c4 <__divsi3+0x44>
   10794:	000d883a 	mov	r6,zero
   10798:	28000e16 	blt	r5,zero,107d4 <__divsi3+0x54>
   1079c:	00107040 	call	10704 <udivmodsi4>
   107a0:	1007883a 	mov	r3,r2
   107a4:	8005003a 	cmpeq	r2,r16,zero
   107a8:	1000011e 	bne	r2,zero,107b0 <__divsi3+0x30>
   107ac:	00c7c83a 	sub	r3,zero,r3
   107b0:	1805883a 	mov	r2,r3
   107b4:	dfc00117 	ldw	ra,4(sp)
   107b8:	dc000017 	ldw	r16,0(sp)
   107bc:	dec00204 	addi	sp,sp,8
   107c0:	f800283a 	ret
   107c4:	0109c83a 	sub	r4,zero,r4
   107c8:	04000044 	movi	r16,1
   107cc:	000d883a 	mov	r6,zero
   107d0:	283ff20e 	bge	r5,zero,1079c <__divsi3+0x1c>
   107d4:	014bc83a 	sub	r5,zero,r5
   107d8:	8021003a 	cmpeq	r16,r16,zero
   107dc:	003fef06 	br	1079c <__divsi3+0x1c>

000107e0 <__modsi3>:
   107e0:	deffff04 	addi	sp,sp,-4
   107e4:	dfc00015 	stw	ra,0(sp)
   107e8:	01800044 	movi	r6,1
   107ec:	2807883a 	mov	r3,r5
   107f0:	20000416 	blt	r4,zero,10804 <__modsi3+0x24>
   107f4:	28000c16 	blt	r5,zero,10828 <__modsi3+0x48>
   107f8:	dfc00017 	ldw	ra,0(sp)
   107fc:	dec00104 	addi	sp,sp,4
   10800:	00107041 	jmpi	10704 <udivmodsi4>
   10804:	0109c83a 	sub	r4,zero,r4
   10808:	28000b16 	blt	r5,zero,10838 <__modsi3+0x58>
   1080c:	180b883a 	mov	r5,r3
   10810:	01800044 	movi	r6,1
   10814:	00107040 	call	10704 <udivmodsi4>
   10818:	0085c83a 	sub	r2,zero,r2
   1081c:	dfc00017 	ldw	ra,0(sp)
   10820:	dec00104 	addi	sp,sp,4
   10824:	f800283a 	ret
   10828:	014bc83a 	sub	r5,zero,r5
   1082c:	dfc00017 	ldw	ra,0(sp)
   10830:	dec00104 	addi	sp,sp,4
   10834:	00107041 	jmpi	10704 <udivmodsi4>
   10838:	0147c83a 	sub	r3,zero,r5
   1083c:	003ff306 	br	1080c <__modsi3+0x2c>

00010840 <__udivsi3>:
   10840:	000d883a 	mov	r6,zero
   10844:	00107041 	jmpi	10704 <udivmodsi4>

00010848 <__umodsi3>:
   10848:	01800044 	movi	r6,1
   1084c:	00107041 	jmpi	10704 <udivmodsi4>

00010850 <_Unwind_SjLj_Register>:
   10850:	d0a71017 	ldw	r2,-25536(gp)
   10854:	20800015 	stw	r2,0(r4)
   10858:	d1271015 	stw	r4,-25536(gp)
   1085c:	f800283a 	ret

00010860 <_Unwind_SjLj_Unregister>:
   10860:	20800017 	ldw	r2,0(r4)
   10864:	d0a71015 	stw	r2,-25536(gp)
   10868:	f800283a 	ret

0001086c <_Unwind_GetGR>:
   1086c:	20800017 	ldw	r2,0(r4)
   10870:	294b883a 	add	r5,r5,r5
   10874:	294b883a 	add	r5,r5,r5
   10878:	288b883a 	add	r5,r5,r2
   1087c:	28800217 	ldw	r2,8(r5)
   10880:	f800283a 	ret

00010884 <_Unwind_GetCFA>:
   10884:	21000017 	ldw	r4,0(r4)
   10888:	0005883a 	mov	r2,zero
   1088c:	20000126 	beq	r4,zero,10894 <_Unwind_GetCFA+0x10>
   10890:	20800a17 	ldw	r2,40(r4)
   10894:	f800283a 	ret

00010898 <_Unwind_SetGR>:
   10898:	20800017 	ldw	r2,0(r4)
   1089c:	294b883a 	add	r5,r5,r5
   108a0:	294b883a 	add	r5,r5,r5
   108a4:	288b883a 	add	r5,r5,r2
   108a8:	29800215 	stw	r6,8(r5)
   108ac:	f800283a 	ret

000108b0 <_Unwind_GetIP>:
   108b0:	20c00017 	ldw	r3,0(r4)
   108b4:	18800117 	ldw	r2,4(r3)
   108b8:	10800044 	addi	r2,r2,1
   108bc:	f800283a 	ret

000108c0 <_Unwind_GetIPInfo>:
   108c0:	20c00017 	ldw	r3,0(r4)
   108c4:	28000015 	stw	zero,0(r5)
   108c8:	18800117 	ldw	r2,4(r3)
   108cc:	10800044 	addi	r2,r2,1
   108d0:	f800283a 	ret

000108d4 <_Unwind_SetIP>:
   108d4:	20800017 	ldw	r2,0(r4)
   108d8:	297fffc4 	addi	r5,r5,-1
   108dc:	11400115 	stw	r5,4(r2)
   108e0:	f800283a 	ret

000108e4 <_Unwind_GetLanguageSpecificData>:
   108e4:	20c00017 	ldw	r3,0(r4)
   108e8:	18800717 	ldw	r2,28(r3)
   108ec:	f800283a 	ret

000108f0 <_Unwind_GetRegionStart>:
   108f0:	0005883a 	mov	r2,zero
   108f4:	f800283a 	ret

000108f8 <_Unwind_FindEnclosingFunction>:
   108f8:	0005883a 	mov	r2,zero
   108fc:	f800283a 	ret

00010900 <_Unwind_GetDataRelBase>:
   10900:	0005883a 	mov	r2,zero
   10904:	f800283a 	ret

00010908 <_Unwind_GetTextRelBase>:
   10908:	0005883a 	mov	r2,zero
   1090c:	f800283a 	ret

00010910 <_Unwind_ForcedUnwind_Phase2>:
   10910:	defff604 	addi	sp,sp,-40
   10914:	dd400815 	stw	r21,32(sp)
   10918:	dd000715 	stw	r20,28(sp)
   1091c:	25400317 	ldw	r21,12(r4)
   10920:	25000417 	ldw	r20,16(r4)
   10924:	28800017 	ldw	r2,0(r5)
   10928:	dc800515 	stw	r18,20(sp)
   1092c:	dc000315 	stw	r16,12(sp)
   10930:	2825883a 	mov	r18,r5
   10934:	2021883a 	mov	r16,r4
   10938:	dfc00915 	stw	ra,36(sp)
   1093c:	dcc00615 	stw	r19,24(sp)
   10940:	dc400415 	stw	r17,16(sp)
   10944:	00001406 	br	10998 <_Unwind_ForcedUnwind_Phase2+0x88>
   10948:	00800144 	movi	r2,5
   1094c:	88802626 	beq	r17,r2,109e8 <_Unwind_ForcedUnwind_Phase2+0xd8>
   10950:	98000c26 	beq	r19,zero,10984 <_Unwind_ForcedUnwind_Phase2+0x74>
   10954:	82000017 	ldw	r8,0(r16)
   10958:	dc000015 	stw	r16,0(sp)
   1095c:	dc800115 	stw	r18,4(sp)
   10960:	82400117 	ldw	r9,4(r16)
   10964:	400d883a 	mov	r6,r8
   10968:	480f883a 	mov	r7,r9
   1096c:	983ee83a 	callr	r19
   10970:	1023883a 	mov	r17,r2
   10974:	008001c4 	movi	r2,7
   10978:	88801b26 	beq	r17,r2,109e8 <_Unwind_ForcedUnwind_Phase2+0xd8>
   1097c:	00800204 	movi	r2,8
   10980:	8880181e 	bne	r17,r2,109e4 <_Unwind_ForcedUnwind_Phase2+0xd4>
   10984:	91000017 	ldw	r4,0(r18)
   10988:	00108600 	call	10860 <_Unwind_SjLj_Unregister>
   1098c:	90800017 	ldw	r2,0(r18)
   10990:	10800017 	ldw	r2,0(r2)
   10994:	90800015 	stw	r2,0(r18)
   10998:	01400684 	movi	r5,26
   1099c:	04400144 	movi	r17,5
   109a0:	0027883a 	mov	r19,zero
   109a4:	10000326 	beq	r2,zero,109b4 <_Unwind_ForcedUnwind_Phase2+0xa4>
   109a8:	14c00617 	ldw	r19,24(r2)
   109ac:	0023883a 	mov	r17,zero
   109b0:	01400284 	movi	r5,10
   109b4:	dc000015 	stw	r16,0(sp)
   109b8:	dc800115 	stw	r18,4(sp)
   109bc:	80800017 	ldw	r2,0(r16)
   109c0:	dd000215 	stw	r20,8(sp)
   109c4:	80c00117 	ldw	r3,4(r16)
   109c8:	01000044 	movi	r4,1
   109cc:	100d883a 	mov	r6,r2
   109d0:	180f883a 	mov	r7,r3
   109d4:	a83ee83a 	callr	r21
   109d8:	01400284 	movi	r5,10
   109dc:	01000044 	movi	r4,1
   109e0:	103fd926 	beq	r2,zero,10948 <_Unwind_ForcedUnwind_Phase2+0x38>
   109e4:	04400084 	movi	r17,2
   109e8:	8805883a 	mov	r2,r17
   109ec:	dfc00917 	ldw	ra,36(sp)
   109f0:	dd400817 	ldw	r21,32(sp)
   109f4:	dd000717 	ldw	r20,28(sp)
   109f8:	dcc00617 	ldw	r19,24(sp)
   109fc:	dc800517 	ldw	r18,20(sp)
   10a00:	dc400417 	ldw	r17,16(sp)
   10a04:	dc000317 	ldw	r16,12(sp)
   10a08:	dec00a04 	addi	sp,sp,40
   10a0c:	f800283a 	ret

00010a10 <_Unwind_DeleteException>:
   10a10:	20800217 	ldw	r2,8(r4)
   10a14:	200b883a 	mov	r5,r4
   10a18:	01000044 	movi	r4,1
   10a1c:	10000126 	beq	r2,zero,10a24 <_Unwind_DeleteException+0x14>
   10a20:	1000683a 	jmp	r2
   10a24:	f800283a 	ret

00010a28 <_Unwind_RaiseException_Phase2>:
   10a28:	defffa04 	addi	sp,sp,-24
   10a2c:	dc800415 	stw	r18,16(sp)
   10a30:	2825883a 	mov	r18,r5
   10a34:	29400017 	ldw	r5,0(r5)
   10a38:	dc400315 	stw	r17,12(sp)
   10a3c:	dfc00515 	stw	ra,20(sp)
   10a40:	dc000215 	stw	r16,8(sp)
   10a44:	2023883a 	mov	r17,r4
   10a48:	28001b26 	beq	r5,zero,10ab8 <_Unwind_RaiseException_Phase2+0x90>
   10a4c:	88800417 	ldw	r2,16(r17)
   10a50:	0007883a 	mov	r3,zero
   10a54:	2a000617 	ldw	r8,24(r5)
   10a58:	28a1003a 	cmpeq	r16,r5,r2
   10a5c:	802090ba 	slli	r16,r16,2
   10a60:	18001b1e 	bne	r3,zero,10ad0 <_Unwind_RaiseException_Phase2+0xa8>
   10a64:	40000e26 	beq	r8,zero,10aa0 <_Unwind_RaiseException_Phase2+0x78>
   10a68:	88800017 	ldw	r2,0(r17)
   10a6c:	dc400015 	stw	r17,0(sp)
   10a70:	dc800115 	stw	r18,4(sp)
   10a74:	88c00117 	ldw	r3,4(r17)
   10a78:	01000044 	movi	r4,1
   10a7c:	81400094 	ori	r5,r16,2
   10a80:	180f883a 	mov	r7,r3
   10a84:	100d883a 	mov	r6,r2
   10a88:	403ee83a 	callr	r8
   10a8c:	1007883a 	mov	r3,r2
   10a90:	008001c4 	movi	r2,7
   10a94:	18800f26 	beq	r3,r2,10ad4 <_Unwind_RaiseException_Phase2+0xac>
   10a98:	00800204 	movi	r2,8
   10a9c:	18800c1e 	bne	r3,r2,10ad0 <_Unwind_RaiseException_Phase2+0xa8>
   10aa0:	8000131e 	bne	r16,zero,10af0 <_Unwind_RaiseException_Phase2+0xc8>
   10aa4:	91400017 	ldw	r5,0(r18)
   10aa8:	28800017 	ldw	r2,0(r5)
   10aac:	100b883a 	mov	r5,r2
   10ab0:	90800015 	stw	r2,0(r18)
   10ab4:	283fe51e 	bne	r5,zero,10a4c <_Unwind_RaiseException_Phase2+0x24>
   10ab8:	88800417 	ldw	r2,16(r17)
   10abc:	00c00144 	movi	r3,5
   10ac0:	0011883a 	mov	r8,zero
   10ac4:	28a1003a 	cmpeq	r16,r5,r2
   10ac8:	802090ba 	slli	r16,r16,2
   10acc:	183fe526 	beq	r3,zero,10a64 <_Unwind_RaiseException_Phase2+0x3c>
   10ad0:	00c00084 	movi	r3,2
   10ad4:	1805883a 	mov	r2,r3
   10ad8:	dfc00517 	ldw	ra,20(sp)
   10adc:	dc800417 	ldw	r18,16(sp)
   10ae0:	dc400317 	ldw	r17,12(sp)
   10ae4:	dc000217 	ldw	r16,8(sp)
   10ae8:	dec00604 	addi	sp,sp,24
   10aec:	f800283a 	ret
   10af0:	00116940 	call	11694 <abort>

00010af4 <uw_install_context>:
   10af4:	28800017 	ldw	r2,0(r5)
   10af8:	deffff04 	addi	sp,sp,-4
   10afc:	df000015 	stw	fp,0(sp)
   10b00:	10c00804 	addi	r3,r2,32
   10b04:	d839883a 	mov	fp,sp
   10b08:	d0a71015 	stw	r2,-25536(gp)
   10b0c:	19000117 	ldw	r4,4(r3)
   10b10:	1f000017 	ldw	fp,0(r3)
   10b14:	1ec00217 	ldw	sp,8(r3)
   10b18:	2000683a 	jmp	r4

00010b1c <_Unwind_SjLj_Resume>:
   10b1c:	d0e71017 	ldw	r3,-25536(gp)
   10b20:	20800317 	ldw	r2,12(r4)
   10b24:	defffc04 	addi	sp,sp,-16
   10b28:	dfc00315 	stw	ra,12(sp)
   10b2c:	dc000215 	stw	r16,8(sp)
   10b30:	d8c00015 	stw	r3,0(sp)
   10b34:	d8c00115 	stw	r3,4(sp)
   10b38:	1000071e 	bne	r2,zero,10b58 <_Unwind_SjLj_Resume+0x3c>
   10b3c:	dc000104 	addi	r16,sp,4
   10b40:	800b883a 	mov	r5,r16
   10b44:	0010a280 	call	10a28 <_Unwind_RaiseException_Phase2>
   10b48:	1007883a 	mov	r3,r2
   10b4c:	008001c4 	movi	r2,7
   10b50:	18800626 	beq	r3,r2,10b6c <_Unwind_SjLj_Resume+0x50>
   10b54:	00116940 	call	11694 <abort>
   10b58:	dc000104 	addi	r16,sp,4
   10b5c:	800b883a 	mov	r5,r16
   10b60:	00109100 	call	10910 <_Unwind_ForcedUnwind_Phase2>
   10b64:	1007883a 	mov	r3,r2
   10b68:	003ff806 	br	10b4c <_Unwind_SjLj_Resume+0x30>
   10b6c:	800b883a 	mov	r5,r16
   10b70:	d809883a 	mov	r4,sp
   10b74:	0010af40 	call	10af4 <uw_install_context>

00010b78 <_Unwind_SjLj_RaiseException>:
   10b78:	d0a71017 	ldw	r2,-25536(gp)
   10b7c:	defff804 	addi	sp,sp,-32
   10b80:	dc000415 	stw	r16,16(sp)
   10b84:	dfc00715 	stw	ra,28(sp)
   10b88:	dc800615 	stw	r18,24(sp)
   10b8c:	dc400515 	stw	r17,20(sp)
   10b90:	2021883a 	mov	r16,r4
   10b94:	d8800215 	stw	r2,8(sp)
   10b98:	d8800315 	stw	r2,12(sp)
   10b9c:	10001626 	beq	r2,zero,10bf8 <_Unwind_SjLj_RaiseException+0x80>
   10ba0:	dc400304 	addi	r17,sp,12
   10ba4:	04800184 	movi	r18,6
   10ba8:	00000106 	br	10bb0 <_Unwind_SjLj_RaiseException+0x38>
   10bac:	d8800315 	stw	r2,12(sp)
   10bb0:	12000617 	ldw	r8,24(r2)
   10bb4:	40000d26 	beq	r8,zero,10bec <_Unwind_SjLj_RaiseException+0x74>
   10bb8:	80800017 	ldw	r2,0(r16)
   10bbc:	dc000015 	stw	r16,0(sp)
   10bc0:	80c00117 	ldw	r3,4(r16)
   10bc4:	01000044 	movi	r4,1
   10bc8:	dc400115 	stw	r17,4(sp)
   10bcc:	180f883a 	mov	r7,r3
   10bd0:	200b883a 	mov	r5,r4
   10bd4:	100d883a 	mov	r6,r2
   10bd8:	403ee83a 	callr	r8
   10bdc:	1007883a 	mov	r3,r2
   10be0:	14800d26 	beq	r2,r18,10c18 <_Unwind_SjLj_RaiseException+0xa0>
   10be4:	00800204 	movi	r2,8
   10be8:	1880191e 	bne	r3,r2,10c50 <_Unwind_SjLj_RaiseException+0xd8>
   10bec:	d8800317 	ldw	r2,12(sp)
   10bf0:	10800017 	ldw	r2,0(r2)
   10bf4:	103fed1e 	bne	r2,zero,10bac <_Unwind_SjLj_RaiseException+0x34>
   10bf8:	00c00144 	movi	r3,5
   10bfc:	1805883a 	mov	r2,r3
   10c00:	dfc00717 	ldw	ra,28(sp)
   10c04:	dc800617 	ldw	r18,24(sp)
   10c08:	dc400517 	ldw	r17,20(sp)
   10c0c:	dc000417 	ldw	r16,16(sp)
   10c10:	dec00804 	addi	sp,sp,32
   10c14:	f800283a 	ret
   10c18:	d8800317 	ldw	r2,12(sp)
   10c1c:	80000315 	stw	zero,12(r16)
   10c20:	8009883a 	mov	r4,r16
   10c24:	80800415 	stw	r2,16(r16)
   10c28:	d8800217 	ldw	r2,8(sp)
   10c2c:	880b883a 	mov	r5,r17
   10c30:	d8800315 	stw	r2,12(sp)
   10c34:	0010a280 	call	10a28 <_Unwind_RaiseException_Phase2>
   10c38:	1007883a 	mov	r3,r2
   10c3c:	008001c4 	movi	r2,7
   10c40:	18bfee1e 	bne	r3,r2,10bfc <_Unwind_SjLj_RaiseException+0x84>
   10c44:	880b883a 	mov	r5,r17
   10c48:	d9000204 	addi	r4,sp,8
   10c4c:	0010af40 	call	10af4 <uw_install_context>
   10c50:	00c000c4 	movi	r3,3
   10c54:	1805883a 	mov	r2,r3
   10c58:	dfc00717 	ldw	ra,28(sp)
   10c5c:	dc800617 	ldw	r18,24(sp)
   10c60:	dc400517 	ldw	r17,20(sp)
   10c64:	dc000417 	ldw	r16,16(sp)
   10c68:	dec00804 	addi	sp,sp,32
   10c6c:	f800283a 	ret

00010c70 <_Unwind_SjLj_ForcedUnwind>:
   10c70:	defffc04 	addi	sp,sp,-16
   10c74:	d0a71017 	ldw	r2,-25536(gp)
   10c78:	dc000215 	stw	r16,8(sp)
   10c7c:	dc000104 	addi	r16,sp,4
   10c80:	21400315 	stw	r5,12(r4)
   10c84:	21800415 	stw	r6,16(r4)
   10c88:	800b883a 	mov	r5,r16
   10c8c:	dfc00315 	stw	ra,12(sp)
   10c90:	d8800015 	stw	r2,0(sp)
   10c94:	d8800115 	stw	r2,4(sp)
   10c98:	00109100 	call	10910 <_Unwind_ForcedUnwind_Phase2>
   10c9c:	00c001c4 	movi	r3,7
   10ca0:	10c00426 	beq	r2,r3,10cb4 <_Unwind_SjLj_ForcedUnwind+0x44>
   10ca4:	dfc00317 	ldw	ra,12(sp)
   10ca8:	dc000217 	ldw	r16,8(sp)
   10cac:	dec00404 	addi	sp,sp,16
   10cb0:	f800283a 	ret
   10cb4:	800b883a 	mov	r5,r16
   10cb8:	d809883a 	mov	r4,sp
   10cbc:	0010af40 	call	10af4 <uw_install_context>

00010cc0 <_Unwind_Backtrace>:
   10cc0:	d0a71017 	ldw	r2,-25536(gp)
   10cc4:	defffa04 	addi	sp,sp,-24
   10cc8:	dcc00415 	stw	r19,16(sp)
   10ccc:	dc800315 	stw	r18,12(sp)
   10cd0:	dc400215 	stw	r17,8(sp)
   10cd4:	2025883a 	mov	r18,r4
   10cd8:	2823883a 	mov	r17,r5
   10cdc:	04c00144 	movi	r19,5
   10ce0:	dfc00515 	stw	ra,20(sp)
   10ce4:	dc000115 	stw	r16,4(sp)
   10ce8:	d8800015 	stw	r2,0(sp)
   10cec:	00000406 	br	10d00 <_Unwind_Backtrace+0x40>
   10cf0:	84c00b26 	beq	r16,r19,10d20 <_Unwind_Backtrace+0x60>
   10cf4:	d8800017 	ldw	r2,0(sp)
   10cf8:	10800017 	ldw	r2,0(r2)
   10cfc:	d8800015 	stw	r2,0(sp)
   10d00:	04000144 	movi	r16,5
   10d04:	10000126 	beq	r2,zero,10d0c <_Unwind_Backtrace+0x4c>
   10d08:	0021883a 	mov	r16,zero
   10d0c:	d809883a 	mov	r4,sp
   10d10:	880b883a 	mov	r5,r17
   10d14:	903ee83a 	callr	r18
   10d18:	103ff526 	beq	r2,zero,10cf0 <_Unwind_Backtrace+0x30>
   10d1c:	040000c4 	movi	r16,3
   10d20:	8005883a 	mov	r2,r16
   10d24:	dfc00517 	ldw	ra,20(sp)
   10d28:	dcc00417 	ldw	r19,16(sp)
   10d2c:	dc800317 	ldw	r18,12(sp)
   10d30:	dc400217 	ldw	r17,8(sp)
   10d34:	dc000117 	ldw	r16,4(sp)
   10d38:	dec00604 	addi	sp,sp,24
   10d3c:	f800283a 	ret

00010d40 <_Unwind_SjLj_Resume_or_Rethrow>:
   10d40:	20800317 	ldw	r2,12(r4)
   10d44:	defffc04 	addi	sp,sp,-16
   10d48:	dfc00315 	stw	ra,12(sp)
   10d4c:	dc000215 	stw	r16,8(sp)
   10d50:	10000926 	beq	r2,zero,10d78 <_Unwind_SjLj_Resume_or_Rethrow+0x38>
   10d54:	d0a71017 	ldw	r2,-25536(gp)
   10d58:	dc000104 	addi	r16,sp,4
   10d5c:	800b883a 	mov	r5,r16
   10d60:	d8800015 	stw	r2,0(sp)
   10d64:	d8800115 	stw	r2,4(sp)
   10d68:	00109100 	call	10910 <_Unwind_ForcedUnwind_Phase2>
   10d6c:	00c001c4 	movi	r3,7
   10d70:	10c00626 	beq	r2,r3,10d8c <_Unwind_SjLj_Resume_or_Rethrow+0x4c>
   10d74:	00116940 	call	11694 <abort>
   10d78:	0010b780 	call	10b78 <_Unwind_SjLj_RaiseException>
   10d7c:	dfc00317 	ldw	ra,12(sp)
   10d80:	dc000217 	ldw	r16,8(sp)
   10d84:	dec00404 	addi	sp,sp,16
   10d88:	f800283a 	ret
   10d8c:	800b883a 	mov	r5,r16
   10d90:	d809883a 	mov	r4,sp
   10d94:	0010af40 	call	10af4 <uw_install_context>

00010d98 <__muldi3>:
   10d98:	2011883a 	mov	r8,r4
   10d9c:	427fffcc 	andi	r9,r8,65535
   10da0:	4018d43a 	srli	r12,r8,16
   10da4:	32bfffcc 	andi	r10,r6,65535
   10da8:	3016d43a 	srli	r11,r6,16
   10dac:	4a85383a 	mul	r2,r9,r10
   10db0:	6295383a 	mul	r10,r12,r10
   10db4:	4ad3383a 	mul	r9,r9,r11
   10db8:	113fffcc 	andi	r4,r2,65535
   10dbc:	1004d43a 	srli	r2,r2,16
   10dc0:	4a93883a 	add	r9,r9,r10
   10dc4:	3807883a 	mov	r3,r7
   10dc8:	1245883a 	add	r2,r2,r9
   10dcc:	280f883a 	mov	r7,r5
   10dd0:	180b883a 	mov	r5,r3
   10dd4:	1006943a 	slli	r3,r2,16
   10dd8:	defffd04 	addi	sp,sp,-12
   10ddc:	dc800215 	stw	r18,8(sp)
   10de0:	1907883a 	add	r3,r3,r4
   10de4:	dc400115 	stw	r17,4(sp)
   10de8:	dc000015 	stw	r16,0(sp)
   10dec:	4165383a 	mul	r18,r8,r5
   10df0:	31e3383a 	mul	r17,r6,r7
   10df4:	1012d43a 	srli	r9,r2,16
   10df8:	62d9383a 	mul	r12,r12,r11
   10dfc:	181f883a 	mov	r15,r3
   10e00:	1280022e 	bgeu	r2,r10,10e0c <__muldi3+0x74>
   10e04:	00800074 	movhi	r2,1
   10e08:	6099883a 	add	r12,r12,r2
   10e0c:	624d883a 	add	r6,r12,r9
   10e10:	9187883a 	add	r3,r18,r6
   10e14:	88c7883a 	add	r3,r17,r3
   10e18:	7805883a 	mov	r2,r15
   10e1c:	dc800217 	ldw	r18,8(sp)
   10e20:	dc400117 	ldw	r17,4(sp)
   10e24:	dc000017 	ldw	r16,0(sp)
   10e28:	dec00304 	addi	sp,sp,12
   10e2c:	f800283a 	ret

00010e30 <__clzsi2>:
   10e30:	00bfffd4 	movui	r2,65535
   10e34:	11000e36 	bltu	r2,r4,10e70 <__clzsi2+0x40>
   10e38:	00803fc4 	movi	r2,255
   10e3c:	01400204 	movi	r5,8
   10e40:	0007883a 	mov	r3,zero
   10e44:	11001036 	bltu	r2,r4,10e88 <__clzsi2+0x58>
   10e48:	000b883a 	mov	r5,zero
   10e4c:	20c6d83a 	srl	r3,r4,r3
   10e50:	008000b4 	movhi	r2,2
   10e54:	10bb8904 	addi	r2,r2,-4572
   10e58:	1887883a 	add	r3,r3,r2
   10e5c:	18800003 	ldbu	r2,0(r3)
   10e60:	00c00804 	movi	r3,32
   10e64:	2885883a 	add	r2,r5,r2
   10e68:	1885c83a 	sub	r2,r3,r2
   10e6c:	f800283a 	ret
   10e70:	01400404 	movi	r5,16
   10e74:	00804034 	movhi	r2,256
   10e78:	10bfffc4 	addi	r2,r2,-1
   10e7c:	2807883a 	mov	r3,r5
   10e80:	113ff22e 	bgeu	r2,r4,10e4c <__clzsi2+0x1c>
   10e84:	01400604 	movi	r5,24
   10e88:	2807883a 	mov	r3,r5
   10e8c:	20c6d83a 	srl	r3,r4,r3
   10e90:	008000b4 	movhi	r2,2
   10e94:	10bb8904 	addi	r2,r2,-4572
   10e98:	1887883a 	add	r3,r3,r2
   10e9c:	18800003 	ldbu	r2,0(r3)
   10ea0:	00c00804 	movi	r3,32
   10ea4:	2885883a 	add	r2,r5,r2
   10ea8:	1885c83a 	sub	r2,r3,r2
   10eac:	f800283a 	ret

00010eb0 <__pack_f>:
   10eb0:	20c00017 	ldw	r3,0(r4)
   10eb4:	01c00044 	movi	r7,1
   10eb8:	21800317 	ldw	r6,12(r4)
   10ebc:	21400117 	ldw	r5,4(r4)
   10ec0:	38c02d2e 	bgeu	r7,r3,10f78 <__pack_f+0xc8>
   10ec4:	00800104 	movi	r2,4
   10ec8:	18802826 	beq	r3,r2,10f6c <__pack_f+0xbc>
   10ecc:	00800084 	movi	r2,2
   10ed0:	18800126 	beq	r3,r2,10ed8 <__pack_f+0x28>
   10ed4:	3000101e 	bne	r6,zero,10f18 <__pack_f+0x68>
   10ed8:	000d883a 	mov	r6,zero
   10edc:	0007883a 	mov	r3,zero
   10ee0:	19003fcc 	andi	r4,r3,255
   10ee4:	200895fa 	slli	r4,r4,23
   10ee8:	00c02034 	movhi	r3,128
   10eec:	18ffffc4 	addi	r3,r3,-1
   10ef0:	30c6703a 	and	r3,r6,r3
   10ef4:	10a0002c 	andhi	r2,r2,32768
   10ef8:	10c4b03a 	or	r2,r2,r3
   10efc:	280a97fa 	slli	r5,r5,31
   10f00:	1104b03a 	or	r2,r2,r4
   10f04:	00e00034 	movhi	r3,32768
   10f08:	18ffffc4 	addi	r3,r3,-1
   10f0c:	10c4703a 	and	r2,r2,r3
   10f10:	1144b03a 	or	r2,r2,r5
   10f14:	f800283a 	ret
   10f18:	21000217 	ldw	r4,8(r4)
   10f1c:	00bfe084 	movi	r2,-126
   10f20:	20801b16 	blt	r4,r2,10f90 <__pack_f+0xe0>
   10f24:	00801fc4 	movi	r2,127
   10f28:	11001016 	blt	r2,r4,10f6c <__pack_f+0xbc>
   10f2c:	308e703a 	and	r7,r6,r2
   10f30:	2087883a 	add	r3,r4,r2
   10f34:	00801004 	movi	r2,64
   10f38:	38800526 	beq	r7,r2,10f50 <__pack_f+0xa0>
   10f3c:	31800fc4 	addi	r6,r6,63
   10f40:	30000716 	blt	r6,zero,10f60 <__pack_f+0xb0>
   10f44:	300490ba 	slli	r2,r6,2
   10f48:	100cd27a 	srli	r6,r2,9
   10f4c:	003fe406 	br	10ee0 <__pack_f+0x30>
   10f50:	3080200c 	andi	r2,r6,128
   10f54:	103ffa26 	beq	r2,zero,10f40 <__pack_f+0x90>
   10f58:	31cd883a 	add	r6,r6,r7
   10f5c:	003ff806 	br	10f40 <__pack_f+0x90>
   10f60:	300cd07a 	srli	r6,r6,1
   10f64:	18c00044 	addi	r3,r3,1
   10f68:	003ff606 	br	10f44 <__pack_f+0x94>
   10f6c:	000d883a 	mov	r6,zero
   10f70:	00ffffc4 	movi	r3,-1
   10f74:	003fda06 	br	10ee0 <__pack_f+0x30>
   10f78:	31800434 	orhi	r6,r6,16
   10f7c:	00802034 	movhi	r2,128
   10f80:	10bfffc4 	addi	r2,r2,-1
   10f84:	308c703a 	and	r6,r6,r2
   10f88:	00ffffc4 	movi	r3,-1
   10f8c:	003fd406 	br	10ee0 <__pack_f+0x30>
   10f90:	1109c83a 	sub	r4,r2,r4
   10f94:	00800644 	movi	r2,25
   10f98:	11001216 	blt	r2,r4,10fe4 <__pack_f+0x134>
   10f9c:	3904983a 	sll	r2,r7,r4
   10fa0:	3106d83a 	srl	r3,r6,r4
   10fa4:	10bfffc4 	addi	r2,r2,-1
   10fa8:	3084703a 	and	r2,r6,r2
   10fac:	1004c03a 	cmpne	r2,r2,zero
   10fb0:	1886b03a 	or	r3,r3,r2
   10fb4:	19001fcc 	andi	r4,r3,127
   10fb8:	00801004 	movi	r2,64
   10fbc:	20800c26 	beq	r4,r2,10ff0 <__pack_f+0x140>
   10fc0:	18c00fc4 	addi	r3,r3,63
   10fc4:	00900034 	movhi	r2,16384
   10fc8:	10bfffc4 	addi	r2,r2,-1
   10fcc:	180cd1fa 	srli	r6,r3,7
   10fd0:	10c7803a 	cmpltu	r3,r2,r3
   10fd4:	00802034 	movhi	r2,128
   10fd8:	10bfffc4 	addi	r2,r2,-1
   10fdc:	308c703a 	and	r6,r6,r2
   10fe0:	003fbf06 	br	10ee0 <__pack_f+0x30>
   10fe4:	0007883a 	mov	r3,zero
   10fe8:	000d883a 	mov	r6,zero
   10fec:	003ff906 	br	10fd4 <__pack_f+0x124>
   10ff0:	1880200c 	andi	r2,r3,128
   10ff4:	10000126 	beq	r2,zero,10ffc <__pack_f+0x14c>
   10ff8:	1907883a 	add	r3,r3,r4
   10ffc:	180cd1fa 	srli	r6,r3,7
   11000:	00900034 	movhi	r2,16384
   11004:	10bfffc4 	addi	r2,r2,-1
   11008:	10c7803a 	cmpltu	r3,r2,r3
   1100c:	003ff106 	br	10fd4 <__pack_f+0x124>

00011010 <__unpack_f>:
   11010:	21800017 	ldw	r6,0(r4)
   11014:	00c02034 	movhi	r3,128
   11018:	18ffffc4 	addi	r3,r3,-1
   1101c:	3004d5fa 	srli	r2,r6,23
   11020:	3008d7fa 	srli	r4,r6,31
   11024:	30ce703a 	and	r7,r6,r3
   11028:	10c03fcc 	andi	r3,r2,255
   1102c:	29000115 	stw	r4,4(r5)
   11030:	1800131e 	bne	r3,zero,11080 <__unpack_f+0x70>
   11034:	38000f26 	beq	r7,zero,11074 <__unpack_f+0x64>
   11038:	380691fa 	slli	r3,r7,7
   1103c:	01bfe084 	movi	r6,-126
   11040:	008000c4 	movi	r2,3
   11044:	01100034 	movhi	r4,16384
   11048:	213fffc4 	addi	r4,r4,-1
   1104c:	28800015 	stw	r2,0(r5)
   11050:	29800215 	stw	r6,8(r5)
   11054:	20c00536 	bltu	r4,r3,1106c <__unpack_f+0x5c>
   11058:	3005883a 	mov	r2,r6
   1105c:	18c7883a 	add	r3,r3,r3
   11060:	10bfffc4 	addi	r2,r2,-1
   11064:	20fffd2e 	bgeu	r4,r3,1105c <__unpack_f+0x4c>
   11068:	28800215 	stw	r2,8(r5)
   1106c:	28c00315 	stw	r3,12(r5)
   11070:	f800283a 	ret
   11074:	00800084 	movi	r2,2
   11078:	28800015 	stw	r2,0(r5)
   1107c:	f800283a 	ret
   11080:	00803fc4 	movi	r2,255
   11084:	18800826 	beq	r3,r2,110a8 <__unpack_f+0x98>
   11088:	380491fa 	slli	r2,r7,7
   1108c:	18ffe044 	addi	r3,r3,-127
   11090:	28c00215 	stw	r3,8(r5)
   11094:	10900034 	orhi	r2,r2,16384
   11098:	28800315 	stw	r2,12(r5)
   1109c:	008000c4 	movi	r2,3
   110a0:	28800015 	stw	r2,0(r5)
   110a4:	f800283a 	ret
   110a8:	3800031e 	bne	r7,zero,110b8 <__unpack_f+0xa8>
   110ac:	00800104 	movi	r2,4
   110b0:	28800015 	stw	r2,0(r5)
   110b4:	f800283a 	ret
   110b8:	3080042c 	andhi	r2,r6,16
   110bc:	10000426 	beq	r2,zero,110d0 <__unpack_f+0xc0>
   110c0:	00800044 	movi	r2,1
   110c4:	28800015 	stw	r2,0(r5)
   110c8:	29c00315 	stw	r7,12(r5)
   110cc:	f800283a 	ret
   110d0:	28000015 	stw	zero,0(r5)
   110d4:	003ffc06 	br	110c8 <__unpack_f+0xb8>

000110d8 <__fpcmp_parts_f>:
   110d8:	21800017 	ldw	r6,0(r4)
   110dc:	00c00044 	movi	r3,1
   110e0:	19800a2e 	bgeu	r3,r6,1110c <__fpcmp_parts_f+0x34>
   110e4:	28800017 	ldw	r2,0(r5)
   110e8:	1880082e 	bgeu	r3,r2,1110c <__fpcmp_parts_f+0x34>
   110ec:	00c00104 	movi	r3,4
   110f0:	30c01e26 	beq	r6,r3,1116c <__fpcmp_parts_f+0x94>
   110f4:	10c01a26 	beq	r2,r3,11160 <__fpcmp_parts_f+0x88>
   110f8:	00c00084 	movi	r3,2
   110fc:	30c00526 	beq	r6,r3,11114 <__fpcmp_parts_f+0x3c>
   11100:	10c0071e 	bne	r2,r3,11120 <__fpcmp_parts_f+0x48>
   11104:	20800117 	ldw	r2,4(r4)
   11108:	1000091e 	bne	r2,zero,11130 <__fpcmp_parts_f+0x58>
   1110c:	00800044 	movi	r2,1
   11110:	f800283a 	ret
   11114:	10c0121e 	bne	r2,r3,11160 <__fpcmp_parts_f+0x88>
   11118:	0005883a 	mov	r2,zero
   1111c:	f800283a 	ret
   11120:	20c00117 	ldw	r3,4(r4)
   11124:	28800117 	ldw	r2,4(r5)
   11128:	18800326 	beq	r3,r2,11138 <__fpcmp_parts_f+0x60>
   1112c:	183ff726 	beq	r3,zero,1110c <__fpcmp_parts_f+0x34>
   11130:	00bfffc4 	movi	r2,-1
   11134:	f800283a 	ret
   11138:	21800217 	ldw	r6,8(r4)
   1113c:	28800217 	ldw	r2,8(r5)
   11140:	11bffa16 	blt	r2,r6,1112c <__fpcmp_parts_f+0x54>
   11144:	30800416 	blt	r6,r2,11158 <__fpcmp_parts_f+0x80>
   11148:	21000317 	ldw	r4,12(r4)
   1114c:	29400317 	ldw	r5,12(r5)
   11150:	293ff636 	bltu	r5,r4,1112c <__fpcmp_parts_f+0x54>
   11154:	217ff02e 	bgeu	r4,r5,11118 <__fpcmp_parts_f+0x40>
   11158:	183fec1e 	bne	r3,zero,1110c <__fpcmp_parts_f+0x34>
   1115c:	003ff406 	br	11130 <__fpcmp_parts_f+0x58>
   11160:	28800117 	ldw	r2,4(r5)
   11164:	103fe91e 	bne	r2,zero,1110c <__fpcmp_parts_f+0x34>
   11168:	003ff106 	br	11130 <__fpcmp_parts_f+0x58>
   1116c:	11bfe51e 	bne	r2,r6,11104 <__fpcmp_parts_f+0x2c>
   11170:	28c00117 	ldw	r3,4(r5)
   11174:	20800117 	ldw	r2,4(r4)
   11178:	1885c83a 	sub	r2,r3,r2
   1117c:	f800283a 	ret

00011180 <__pack_d>:
   11180:	20c00017 	ldw	r3,0(r4)
   11184:	defffd04 	addi	sp,sp,-12
   11188:	dc000015 	stw	r16,0(sp)
   1118c:	dc800215 	stw	r18,8(sp)
   11190:	dc400115 	stw	r17,4(sp)
   11194:	00800044 	movi	r2,1
   11198:	22000317 	ldw	r8,12(r4)
   1119c:	001f883a 	mov	r15,zero
   111a0:	22400417 	ldw	r9,16(r4)
   111a4:	24000117 	ldw	r16,4(r4)
   111a8:	10c0552e 	bgeu	r2,r3,11300 <__pack_d+0x180>
   111ac:	00800104 	movi	r2,4
   111b0:	18804f26 	beq	r3,r2,112f0 <__pack_d+0x170>
   111b4:	00800084 	movi	r2,2
   111b8:	18800226 	beq	r3,r2,111c4 <__pack_d+0x44>
   111bc:	4244b03a 	or	r2,r8,r9
   111c0:	10001a1e 	bne	r2,zero,1122c <__pack_d+0xac>
   111c4:	000d883a 	mov	r6,zero
   111c8:	000f883a 	mov	r7,zero
   111cc:	0011883a 	mov	r8,zero
   111d0:	00800434 	movhi	r2,16
   111d4:	10bfffc4 	addi	r2,r2,-1
   111d8:	301d883a 	mov	r14,r6
   111dc:	3884703a 	and	r2,r7,r2
   111e0:	400a953a 	slli	r5,r8,20
   111e4:	79bffc2c 	andhi	r6,r15,65520
   111e8:	308cb03a 	or	r6,r6,r2
   111ec:	00e00434 	movhi	r3,32784
   111f0:	18ffffc4 	addi	r3,r3,-1
   111f4:	800497fa 	slli	r2,r16,31
   111f8:	30c6703a 	and	r3,r6,r3
   111fc:	1946b03a 	or	r3,r3,r5
   11200:	01600034 	movhi	r5,32768
   11204:	297fffc4 	addi	r5,r5,-1
   11208:	194a703a 	and	r5,r3,r5
   1120c:	288ab03a 	or	r5,r5,r2
   11210:	2807883a 	mov	r3,r5
   11214:	7005883a 	mov	r2,r14
   11218:	dc800217 	ldw	r18,8(sp)
   1121c:	dc400117 	ldw	r17,4(sp)
   11220:	dc000017 	ldw	r16,0(sp)
   11224:	dec00304 	addi	sp,sp,12
   11228:	f800283a 	ret
   1122c:	21000217 	ldw	r4,8(r4)
   11230:	00bf0084 	movi	r2,-1022
   11234:	20803f16 	blt	r4,r2,11334 <__pack_d+0x1b4>
   11238:	0080ffc4 	movi	r2,1023
   1123c:	11002c16 	blt	r2,r4,112f0 <__pack_d+0x170>
   11240:	00803fc4 	movi	r2,255
   11244:	408c703a 	and	r6,r8,r2
   11248:	00802004 	movi	r2,128
   1124c:	0007883a 	mov	r3,zero
   11250:	000f883a 	mov	r7,zero
   11254:	2280ffc4 	addi	r10,r4,1023
   11258:	30801e26 	beq	r6,r2,112d4 <__pack_d+0x154>
   1125c:	00801fc4 	movi	r2,127
   11260:	4089883a 	add	r4,r8,r2
   11264:	220d803a 	cmpltu	r6,r4,r8
   11268:	324d883a 	add	r6,r6,r9
   1126c:	2011883a 	mov	r8,r4
   11270:	3013883a 	mov	r9,r6
   11274:	00880034 	movhi	r2,8192
   11278:	10bfffc4 	addi	r2,r2,-1
   1127c:	12400d36 	bltu	r2,r9,112b4 <__pack_d+0x134>
   11280:	4804963a 	slli	r2,r9,24
   11284:	400cd23a 	srli	r6,r8,8
   11288:	480ed23a 	srli	r7,r9,8
   1128c:	013fffc4 	movi	r4,-1
   11290:	118cb03a 	or	r6,r2,r6
   11294:	01400434 	movhi	r5,16
   11298:	297fffc4 	addi	r5,r5,-1
   1129c:	3104703a 	and	r2,r6,r4
   112a0:	3946703a 	and	r3,r7,r5
   112a4:	5201ffcc 	andi	r8,r10,2047
   112a8:	100d883a 	mov	r6,r2
   112ac:	180f883a 	mov	r7,r3
   112b0:	003fc706 	br	111d0 <__pack_d+0x50>
   112b4:	480897fa 	slli	r4,r9,31
   112b8:	4004d07a 	srli	r2,r8,1
   112bc:	4806d07a 	srli	r3,r9,1
   112c0:	52800044 	addi	r10,r10,1
   112c4:	2084b03a 	or	r2,r4,r2
   112c8:	1011883a 	mov	r8,r2
   112cc:	1813883a 	mov	r9,r3
   112d0:	003feb06 	br	11280 <__pack_d+0x100>
   112d4:	383fe11e 	bne	r7,zero,1125c <__pack_d+0xdc>
   112d8:	01004004 	movi	r4,256
   112dc:	4104703a 	and	r2,r8,r4
   112e0:	10c4b03a 	or	r2,r2,r3
   112e4:	103fe326 	beq	r2,zero,11274 <__pack_d+0xf4>
   112e8:	3005883a 	mov	r2,r6
   112ec:	003fdc06 	br	11260 <__pack_d+0xe0>
   112f0:	000d883a 	mov	r6,zero
   112f4:	000f883a 	mov	r7,zero
   112f8:	0201ffc4 	movi	r8,2047
   112fc:	003fb406 	br	111d0 <__pack_d+0x50>
   11300:	0005883a 	mov	r2,zero
   11304:	00c00234 	movhi	r3,8
   11308:	408cb03a 	or	r6,r8,r2
   1130c:	48ceb03a 	or	r7,r9,r3
   11310:	013fffc4 	movi	r4,-1
   11314:	01400434 	movhi	r5,16
   11318:	297fffc4 	addi	r5,r5,-1
   1131c:	3104703a 	and	r2,r6,r4
   11320:	3946703a 	and	r3,r7,r5
   11324:	100d883a 	mov	r6,r2
   11328:	180f883a 	mov	r7,r3
   1132c:	0201ffc4 	movi	r8,2047
   11330:	003fa706 	br	111d0 <__pack_d+0x50>
   11334:	1109c83a 	sub	r4,r2,r4
   11338:	00800e04 	movi	r2,56
   1133c:	11004316 	blt	r2,r4,1144c <__pack_d+0x2cc>
   11340:	21fff804 	addi	r7,r4,-32
   11344:	38004516 	blt	r7,zero,1145c <__pack_d+0x2dc>
   11348:	49d8d83a 	srl	r12,r9,r7
   1134c:	001b883a 	mov	r13,zero
   11350:	0023883a 	mov	r17,zero
   11354:	01400044 	movi	r5,1
   11358:	0025883a 	mov	r18,zero
   1135c:	38004716 	blt	r7,zero,1147c <__pack_d+0x2fc>
   11360:	29d6983a 	sll	r11,r5,r7
   11364:	0015883a 	mov	r10,zero
   11368:	00bfffc4 	movi	r2,-1
   1136c:	5089883a 	add	r4,r10,r2
   11370:	588b883a 	add	r5,r11,r2
   11374:	228d803a 	cmpltu	r6,r4,r10
   11378:	314b883a 	add	r5,r6,r5
   1137c:	4104703a 	and	r2,r8,r4
   11380:	4946703a 	and	r3,r9,r5
   11384:	10c4b03a 	or	r2,r2,r3
   11388:	10000226 	beq	r2,zero,11394 <__pack_d+0x214>
   1138c:	04400044 	movi	r17,1
   11390:	0025883a 	mov	r18,zero
   11394:	00803fc4 	movi	r2,255
   11398:	644eb03a 	or	r7,r12,r17
   1139c:	3892703a 	and	r9,r7,r2
   113a0:	00802004 	movi	r2,128
   113a4:	6c90b03a 	or	r8,r13,r18
   113a8:	0015883a 	mov	r10,zero
   113ac:	48801626 	beq	r9,r2,11408 <__pack_d+0x288>
   113b0:	01001fc4 	movi	r4,127
   113b4:	3905883a 	add	r2,r7,r4
   113b8:	11cd803a 	cmpltu	r6,r2,r7
   113bc:	320d883a 	add	r6,r6,r8
   113c0:	100f883a 	mov	r7,r2
   113c4:	00840034 	movhi	r2,4096
   113c8:	10bfffc4 	addi	r2,r2,-1
   113cc:	3011883a 	mov	r8,r6
   113d0:	0007883a 	mov	r3,zero
   113d4:	11801b36 	bltu	r2,r6,11444 <__pack_d+0x2c4>
   113d8:	4004963a 	slli	r2,r8,24
   113dc:	3808d23a 	srli	r4,r7,8
   113e0:	400ad23a 	srli	r5,r8,8
   113e4:	1813883a 	mov	r9,r3
   113e8:	1108b03a 	or	r4,r2,r4
   113ec:	00bfffc4 	movi	r2,-1
   113f0:	00c00434 	movhi	r3,16
   113f4:	18ffffc4 	addi	r3,r3,-1
   113f8:	208c703a 	and	r6,r4,r2
   113fc:	28ce703a 	and	r7,r5,r3
   11400:	4a01ffcc 	andi	r8,r9,2047
   11404:	003f7206 	br	111d0 <__pack_d+0x50>
   11408:	503fe91e 	bne	r10,zero,113b0 <__pack_d+0x230>
   1140c:	01004004 	movi	r4,256
   11410:	3904703a 	and	r2,r7,r4
   11414:	0007883a 	mov	r3,zero
   11418:	10c4b03a 	or	r2,r2,r3
   1141c:	10000626 	beq	r2,zero,11438 <__pack_d+0x2b8>
   11420:	3a45883a 	add	r2,r7,r9
   11424:	11cd803a 	cmpltu	r6,r2,r7
   11428:	320d883a 	add	r6,r6,r8
   1142c:	100f883a 	mov	r7,r2
   11430:	3011883a 	mov	r8,r6
   11434:	0007883a 	mov	r3,zero
   11438:	00840034 	movhi	r2,4096
   1143c:	10bfffc4 	addi	r2,r2,-1
   11440:	123fe52e 	bgeu	r2,r8,113d8 <__pack_d+0x258>
   11444:	00c00044 	movi	r3,1
   11448:	003fe306 	br	113d8 <__pack_d+0x258>
   1144c:	0009883a 	mov	r4,zero
   11450:	0013883a 	mov	r9,zero
   11454:	000b883a 	mov	r5,zero
   11458:	003fe406 	br	113ec <__pack_d+0x26c>
   1145c:	4a47883a 	add	r3,r9,r9
   11460:	008007c4 	movi	r2,31
   11464:	1105c83a 	sub	r2,r2,r4
   11468:	1886983a 	sll	r3,r3,r2
   1146c:	4118d83a 	srl	r12,r8,r4
   11470:	491ad83a 	srl	r13,r9,r4
   11474:	1b18b03a 	or	r12,r3,r12
   11478:	003fb506 	br	11350 <__pack_d+0x1d0>
   1147c:	2806d07a 	srli	r3,r5,1
   11480:	008007c4 	movi	r2,31
   11484:	1105c83a 	sub	r2,r2,r4
   11488:	1896d83a 	srl	r11,r3,r2
   1148c:	2914983a 	sll	r10,r5,r4
   11490:	003fb506 	br	11368 <__pack_d+0x1e8>

00011494 <__unpack_d>:
   11494:	20c00117 	ldw	r3,4(r4)
   11498:	22400017 	ldw	r9,0(r4)
   1149c:	00800434 	movhi	r2,16
   114a0:	10bfffc4 	addi	r2,r2,-1
   114a4:	1808d53a 	srli	r4,r3,20
   114a8:	180cd7fa 	srli	r6,r3,31
   114ac:	1894703a 	and	r10,r3,r2
   114b0:	2201ffcc 	andi	r8,r4,2047
   114b4:	281b883a 	mov	r13,r5
   114b8:	4817883a 	mov	r11,r9
   114bc:	29800115 	stw	r6,4(r5)
   114c0:	5019883a 	mov	r12,r10
   114c4:	40001e1e 	bne	r8,zero,11540 <__unpack_d+0xac>
   114c8:	4a84b03a 	or	r2,r9,r10
   114cc:	10001926 	beq	r2,zero,11534 <__unpack_d+0xa0>
   114d0:	4804d63a 	srli	r2,r9,24
   114d4:	500c923a 	slli	r6,r10,8
   114d8:	013f0084 	movi	r4,-1022
   114dc:	00c40034 	movhi	r3,4096
   114e0:	18ffffc4 	addi	r3,r3,-1
   114e4:	118cb03a 	or	r6,r2,r6
   114e8:	008000c4 	movi	r2,3
   114ec:	480a923a 	slli	r5,r9,8
   114f0:	68800015 	stw	r2,0(r13)
   114f4:	69000215 	stw	r4,8(r13)
   114f8:	19800b36 	bltu	r3,r6,11528 <__unpack_d+0x94>
   114fc:	200f883a 	mov	r7,r4
   11500:	1811883a 	mov	r8,r3
   11504:	2945883a 	add	r2,r5,r5
   11508:	1149803a 	cmpltu	r4,r2,r5
   1150c:	3187883a 	add	r3,r6,r6
   11510:	20c9883a 	add	r4,r4,r3
   11514:	100b883a 	mov	r5,r2
   11518:	200d883a 	mov	r6,r4
   1151c:	39ffffc4 	addi	r7,r7,-1
   11520:	413ff82e 	bgeu	r8,r4,11504 <__unpack_d+0x70>
   11524:	69c00215 	stw	r7,8(r13)
   11528:	69800415 	stw	r6,16(r13)
   1152c:	69400315 	stw	r5,12(r13)
   11530:	f800283a 	ret
   11534:	00800084 	movi	r2,2
   11538:	28800015 	stw	r2,0(r5)
   1153c:	f800283a 	ret
   11540:	0081ffc4 	movi	r2,2047
   11544:	40800f26 	beq	r8,r2,11584 <__unpack_d+0xf0>
   11548:	480cd63a 	srli	r6,r9,24
   1154c:	5006923a 	slli	r3,r10,8
   11550:	4804923a 	slli	r2,r9,8
   11554:	0009883a 	mov	r4,zero
   11558:	30c6b03a 	or	r3,r6,r3
   1155c:	01440034 	movhi	r5,4096
   11560:	110cb03a 	or	r6,r2,r4
   11564:	423f0044 	addi	r8,r8,-1023
   11568:	194eb03a 	or	r7,r3,r5
   1156c:	008000c4 	movi	r2,3
   11570:	69c00415 	stw	r7,16(r13)
   11574:	6a000215 	stw	r8,8(r13)
   11578:	68800015 	stw	r2,0(r13)
   1157c:	69800315 	stw	r6,12(r13)
   11580:	f800283a 	ret
   11584:	4a84b03a 	or	r2,r9,r10
   11588:	1000031e 	bne	r2,zero,11598 <__unpack_d+0x104>
   1158c:	00800104 	movi	r2,4
   11590:	28800015 	stw	r2,0(r5)
   11594:	f800283a 	ret
   11598:	0009883a 	mov	r4,zero
   1159c:	01400234 	movhi	r5,8
   115a0:	4904703a 	and	r2,r9,r4
   115a4:	5146703a 	and	r3,r10,r5
   115a8:	10c4b03a 	or	r2,r2,r3
   115ac:	10000526 	beq	r2,zero,115c4 <__unpack_d+0x130>
   115b0:	00800044 	movi	r2,1
   115b4:	68800015 	stw	r2,0(r13)
   115b8:	6b000415 	stw	r12,16(r13)
   115bc:	6ac00315 	stw	r11,12(r13)
   115c0:	f800283a 	ret
   115c4:	68000015 	stw	zero,0(r13)
   115c8:	003ffb06 	br	115b8 <__unpack_d+0x124>

000115cc <__fpcmp_parts_d>:
   115cc:	21800017 	ldw	r6,0(r4)
   115d0:	00c00044 	movi	r3,1
   115d4:	19800a2e 	bgeu	r3,r6,11600 <__fpcmp_parts_d+0x34>
   115d8:	28800017 	ldw	r2,0(r5)
   115dc:	1880082e 	bgeu	r3,r2,11600 <__fpcmp_parts_d+0x34>
   115e0:	00c00104 	movi	r3,4
   115e4:	30c02626 	beq	r6,r3,11680 <__fpcmp_parts_d+0xb4>
   115e8:	10c02226 	beq	r2,r3,11674 <__fpcmp_parts_d+0xa8>
   115ec:	00c00084 	movi	r3,2
   115f0:	30c00526 	beq	r6,r3,11608 <__fpcmp_parts_d+0x3c>
   115f4:	10c0071e 	bne	r2,r3,11614 <__fpcmp_parts_d+0x48>
   115f8:	20800117 	ldw	r2,4(r4)
   115fc:	1000091e 	bne	r2,zero,11624 <__fpcmp_parts_d+0x58>
   11600:	00800044 	movi	r2,1
   11604:	f800283a 	ret
   11608:	10c01a1e 	bne	r2,r3,11674 <__fpcmp_parts_d+0xa8>
   1160c:	0005883a 	mov	r2,zero
   11610:	f800283a 	ret
   11614:	22000117 	ldw	r8,4(r4)
   11618:	28800117 	ldw	r2,4(r5)
   1161c:	40800326 	beq	r8,r2,1162c <__fpcmp_parts_d+0x60>
   11620:	403ff726 	beq	r8,zero,11600 <__fpcmp_parts_d+0x34>
   11624:	00bfffc4 	movi	r2,-1
   11628:	f800283a 	ret
   1162c:	20c00217 	ldw	r3,8(r4)
   11630:	28800217 	ldw	r2,8(r5)
   11634:	10fffa16 	blt	r2,r3,11620 <__fpcmp_parts_d+0x54>
   11638:	18800916 	blt	r3,r2,11660 <__fpcmp_parts_d+0x94>
   1163c:	21c00417 	ldw	r7,16(r4)
   11640:	28c00417 	ldw	r3,16(r5)
   11644:	21800317 	ldw	r6,12(r4)
   11648:	28800317 	ldw	r2,12(r5)
   1164c:	19fff436 	bltu	r3,r7,11620 <__fpcmp_parts_d+0x54>
   11650:	38c00526 	beq	r7,r3,11668 <__fpcmp_parts_d+0x9c>
   11654:	38c00236 	bltu	r7,r3,11660 <__fpcmp_parts_d+0x94>
   11658:	19ffec1e 	bne	r3,r7,1160c <__fpcmp_parts_d+0x40>
   1165c:	30bfeb2e 	bgeu	r6,r2,1160c <__fpcmp_parts_d+0x40>
   11660:	403fe71e 	bne	r8,zero,11600 <__fpcmp_parts_d+0x34>
   11664:	003fef06 	br	11624 <__fpcmp_parts_d+0x58>
   11668:	11bffa2e 	bgeu	r2,r6,11654 <__fpcmp_parts_d+0x88>
   1166c:	403fe426 	beq	r8,zero,11600 <__fpcmp_parts_d+0x34>
   11670:	003fec06 	br	11624 <__fpcmp_parts_d+0x58>
   11674:	28800117 	ldw	r2,4(r5)
   11678:	103fe11e 	bne	r2,zero,11600 <__fpcmp_parts_d+0x34>
   1167c:	003fe906 	br	11624 <__fpcmp_parts_d+0x58>
   11680:	11bfdd1e 	bne	r2,r6,115f8 <__fpcmp_parts_d+0x2c>
   11684:	28c00117 	ldw	r3,4(r5)
   11688:	20800117 	ldw	r2,4(r4)
   1168c:	1885c83a 	sub	r2,r3,r2
   11690:	f800283a 	ret

00011694 <abort>:
   11694:	deffff04 	addi	sp,sp,-4
   11698:	01000184 	movi	r4,6
   1169c:	dfc00015 	stw	ra,0(sp)
   116a0:	00148dc0 	call	148dc <raise>
   116a4:	01000044 	movi	r4,1
   116a8:	001b1e40 	call	1b1e4 <_exit>

000116ac <_atoi_r>:
   116ac:	000d883a 	mov	r6,zero
   116b0:	01c00284 	movi	r7,10
   116b4:	0014d201 	jmpi	14d20 <_strtol_r>

000116b8 <atoi>:
   116b8:	000b883a 	mov	r5,zero
   116bc:	01800284 	movi	r6,10
   116c0:	0014f641 	jmpi	14f64 <strtol>

000116c4 <_fclose_r>:
   116c4:	defffc04 	addi	sp,sp,-16
   116c8:	dc400115 	stw	r17,4(sp)
   116cc:	dc000015 	stw	r16,0(sp)
   116d0:	dfc00315 	stw	ra,12(sp)
   116d4:	dc800215 	stw	r18,8(sp)
   116d8:	2821883a 	mov	r16,r5
   116dc:	2023883a 	mov	r17,r4
   116e0:	28002926 	beq	r5,zero,11788 <_fclose_r+0xc4>
   116e4:	0011bdc0 	call	11bdc <__sfp_lock_acquire>
   116e8:	88000226 	beq	r17,zero,116f4 <_fclose_r+0x30>
   116ec:	88800e17 	ldw	r2,56(r17)
   116f0:	10002d26 	beq	r2,zero,117a8 <_fclose_r+0xe4>
   116f4:	8080030f 	ldh	r2,12(r16)
   116f8:	10002226 	beq	r2,zero,11784 <_fclose_r+0xc0>
   116fc:	8809883a 	mov	r4,r17
   11700:	800b883a 	mov	r5,r16
   11704:	00117e80 	call	117e8 <_fflush_r>
   11708:	1025883a 	mov	r18,r2
   1170c:	80800b17 	ldw	r2,44(r16)
   11710:	10000426 	beq	r2,zero,11724 <_fclose_r+0x60>
   11714:	81400717 	ldw	r5,28(r16)
   11718:	8809883a 	mov	r4,r17
   1171c:	103ee83a 	callr	r2
   11720:	10002a16 	blt	r2,zero,117cc <_fclose_r+0x108>
   11724:	8080030b 	ldhu	r2,12(r16)
   11728:	1080200c 	andi	r2,r2,128
   1172c:	1000231e 	bne	r2,zero,117bc <_fclose_r+0xf8>
   11730:	81400c17 	ldw	r5,48(r16)
   11734:	28000526 	beq	r5,zero,1174c <_fclose_r+0x88>
   11738:	80801004 	addi	r2,r16,64
   1173c:	28800226 	beq	r5,r2,11748 <_fclose_r+0x84>
   11740:	8809883a 	mov	r4,r17
   11744:	00121cc0 	call	121cc <_free_r>
   11748:	80000c15 	stw	zero,48(r16)
   1174c:	81401117 	ldw	r5,68(r16)
   11750:	28000326 	beq	r5,zero,11760 <_fclose_r+0x9c>
   11754:	8809883a 	mov	r4,r17
   11758:	00121cc0 	call	121cc <_free_r>
   1175c:	80001115 	stw	zero,68(r16)
   11760:	8000030d 	sth	zero,12(r16)
   11764:	0011be00 	call	11be0 <__sfp_lock_release>
   11768:	9005883a 	mov	r2,r18
   1176c:	dfc00317 	ldw	ra,12(sp)
   11770:	dc800217 	ldw	r18,8(sp)
   11774:	dc400117 	ldw	r17,4(sp)
   11778:	dc000017 	ldw	r16,0(sp)
   1177c:	dec00404 	addi	sp,sp,16
   11780:	f800283a 	ret
   11784:	0011be00 	call	11be0 <__sfp_lock_release>
   11788:	0025883a 	mov	r18,zero
   1178c:	9005883a 	mov	r2,r18
   11790:	dfc00317 	ldw	ra,12(sp)
   11794:	dc800217 	ldw	r18,8(sp)
   11798:	dc400117 	ldw	r17,4(sp)
   1179c:	dc000017 	ldw	r16,0(sp)
   117a0:	dec00404 	addi	sp,sp,16
   117a4:	f800283a 	ret
   117a8:	8809883a 	mov	r4,r17
   117ac:	0011bec0 	call	11bec <__sinit>
   117b0:	8080030f 	ldh	r2,12(r16)
   117b4:	103fd11e 	bne	r2,zero,116fc <_fclose_r+0x38>
   117b8:	003ff206 	br	11784 <_fclose_r+0xc0>
   117bc:	81400417 	ldw	r5,16(r16)
   117c0:	8809883a 	mov	r4,r17
   117c4:	00121cc0 	call	121cc <_free_r>
   117c8:	003fd906 	br	11730 <_fclose_r+0x6c>
   117cc:	04bfffc4 	movi	r18,-1
   117d0:	003fd406 	br	11724 <_fclose_r+0x60>

000117d4 <fclose>:
   117d4:	008000b4 	movhi	r2,2
   117d8:	1083ac04 	addi	r2,r2,3760
   117dc:	200b883a 	mov	r5,r4
   117e0:	11000017 	ldw	r4,0(r2)
   117e4:	00116c41 	jmpi	116c4 <_fclose_r>

000117e8 <_fflush_r>:
   117e8:	defffb04 	addi	sp,sp,-20
   117ec:	dcc00315 	stw	r19,12(sp)
   117f0:	dc800215 	stw	r18,8(sp)
   117f4:	dfc00415 	stw	ra,16(sp)
   117f8:	dc400115 	stw	r17,4(sp)
   117fc:	dc000015 	stw	r16,0(sp)
   11800:	2027883a 	mov	r19,r4
   11804:	2825883a 	mov	r18,r5
   11808:	20000226 	beq	r4,zero,11814 <_fflush_r+0x2c>
   1180c:	20800e17 	ldw	r2,56(r4)
   11810:	10005626 	beq	r2,zero,1196c <_fflush_r+0x184>
   11814:	9100030b 	ldhu	r4,12(r18)
   11818:	20ffffcc 	andi	r3,r4,65535
   1181c:	18e0001c 	xori	r3,r3,32768
   11820:	18e00004 	addi	r3,r3,-32768
   11824:	1880020c 	andi	r2,r3,8
   11828:	1000261e 	bne	r2,zero,118c4 <_fflush_r+0xdc>
   1182c:	90c00117 	ldw	r3,4(r18)
   11830:	20820014 	ori	r2,r4,2048
   11834:	9080030d 	sth	r2,12(r18)
   11838:	1009883a 	mov	r4,r2
   1183c:	00c0400e 	bge	zero,r3,11940 <_fflush_r+0x158>
   11840:	92000a17 	ldw	r8,40(r18)
   11844:	40004026 	beq	r8,zero,11948 <_fflush_r+0x160>
   11848:	2084000c 	andi	r2,r4,4096
   1184c:	10005326 	beq	r2,zero,1199c <_fflush_r+0x1b4>
   11850:	94001417 	ldw	r16,80(r18)
   11854:	9080030b 	ldhu	r2,12(r18)
   11858:	1080010c 	andi	r2,r2,4
   1185c:	1000481e 	bne	r2,zero,11980 <_fflush_r+0x198>
   11860:	91400717 	ldw	r5,28(r18)
   11864:	9809883a 	mov	r4,r19
   11868:	800d883a 	mov	r6,r16
   1186c:	000f883a 	mov	r7,zero
   11870:	403ee83a 	callr	r8
   11874:	8080261e 	bne	r16,r2,11910 <_fflush_r+0x128>
   11878:	9080030b 	ldhu	r2,12(r18)
   1187c:	91000417 	ldw	r4,16(r18)
   11880:	90000115 	stw	zero,4(r18)
   11884:	10bdffcc 	andi	r2,r2,63487
   11888:	10ffffcc 	andi	r3,r2,65535
   1188c:	18c4000c 	andi	r3,r3,4096
   11890:	9080030d 	sth	r2,12(r18)
   11894:	91000015 	stw	r4,0(r18)
   11898:	18002b26 	beq	r3,zero,11948 <_fflush_r+0x160>
   1189c:	0007883a 	mov	r3,zero
   118a0:	1805883a 	mov	r2,r3
   118a4:	94001415 	stw	r16,80(r18)
   118a8:	dfc00417 	ldw	ra,16(sp)
   118ac:	dcc00317 	ldw	r19,12(sp)
   118b0:	dc800217 	ldw	r18,8(sp)
   118b4:	dc400117 	ldw	r17,4(sp)
   118b8:	dc000017 	ldw	r16,0(sp)
   118bc:	dec00504 	addi	sp,sp,20
   118c0:	f800283a 	ret
   118c4:	94400417 	ldw	r17,16(r18)
   118c8:	88001f26 	beq	r17,zero,11948 <_fflush_r+0x160>
   118cc:	90800017 	ldw	r2,0(r18)
   118d0:	18c000cc 	andi	r3,r3,3
   118d4:	94400015 	stw	r17,0(r18)
   118d8:	1461c83a 	sub	r16,r2,r17
   118dc:	18002526 	beq	r3,zero,11974 <_fflush_r+0x18c>
   118e0:	0005883a 	mov	r2,zero
   118e4:	90800215 	stw	r2,8(r18)
   118e8:	0400170e 	bge	zero,r16,11948 <_fflush_r+0x160>
   118ec:	90c00917 	ldw	r3,36(r18)
   118f0:	91400717 	ldw	r5,28(r18)
   118f4:	880d883a 	mov	r6,r17
   118f8:	800f883a 	mov	r7,r16
   118fc:	9809883a 	mov	r4,r19
   11900:	183ee83a 	callr	r3
   11904:	88a3883a 	add	r17,r17,r2
   11908:	80a1c83a 	sub	r16,r16,r2
   1190c:	00bff616 	blt	zero,r2,118e8 <_fflush_r+0x100>
   11910:	9080030b 	ldhu	r2,12(r18)
   11914:	00ffffc4 	movi	r3,-1
   11918:	10801014 	ori	r2,r2,64
   1191c:	9080030d 	sth	r2,12(r18)
   11920:	1805883a 	mov	r2,r3
   11924:	dfc00417 	ldw	ra,16(sp)
   11928:	dcc00317 	ldw	r19,12(sp)
   1192c:	dc800217 	ldw	r18,8(sp)
   11930:	dc400117 	ldw	r17,4(sp)
   11934:	dc000017 	ldw	r16,0(sp)
   11938:	dec00504 	addi	sp,sp,20
   1193c:	f800283a 	ret
   11940:	90800f17 	ldw	r2,60(r18)
   11944:	00bfbe16 	blt	zero,r2,11840 <_fflush_r+0x58>
   11948:	0007883a 	mov	r3,zero
   1194c:	1805883a 	mov	r2,r3
   11950:	dfc00417 	ldw	ra,16(sp)
   11954:	dcc00317 	ldw	r19,12(sp)
   11958:	dc800217 	ldw	r18,8(sp)
   1195c:	dc400117 	ldw	r17,4(sp)
   11960:	dc000017 	ldw	r16,0(sp)
   11964:	dec00504 	addi	sp,sp,20
   11968:	f800283a 	ret
   1196c:	0011bec0 	call	11bec <__sinit>
   11970:	003fa806 	br	11814 <_fflush_r+0x2c>
   11974:	90800517 	ldw	r2,20(r18)
   11978:	90800215 	stw	r2,8(r18)
   1197c:	003fda06 	br	118e8 <_fflush_r+0x100>
   11980:	90800117 	ldw	r2,4(r18)
   11984:	90c00c17 	ldw	r3,48(r18)
   11988:	80a1c83a 	sub	r16,r16,r2
   1198c:	183fb426 	beq	r3,zero,11860 <_fflush_r+0x78>
   11990:	90800f17 	ldw	r2,60(r18)
   11994:	80a1c83a 	sub	r16,r16,r2
   11998:	003fb106 	br	11860 <_fflush_r+0x78>
   1199c:	91400717 	ldw	r5,28(r18)
   119a0:	9809883a 	mov	r4,r19
   119a4:	000d883a 	mov	r6,zero
   119a8:	01c00044 	movi	r7,1
   119ac:	403ee83a 	callr	r8
   119b0:	1021883a 	mov	r16,r2
   119b4:	00bfffc4 	movi	r2,-1
   119b8:	80800226 	beq	r16,r2,119c4 <_fflush_r+0x1dc>
   119bc:	92000a17 	ldw	r8,40(r18)
   119c0:	003fa406 	br	11854 <_fflush_r+0x6c>
   119c4:	98c00017 	ldw	r3,0(r19)
   119c8:	00800744 	movi	r2,29
   119cc:	18bfde26 	beq	r3,r2,11948 <_fflush_r+0x160>
   119d0:	9080030b 	ldhu	r2,12(r18)
   119d4:	8007883a 	mov	r3,r16
   119d8:	10801014 	ori	r2,r2,64
   119dc:	9080030d 	sth	r2,12(r18)
   119e0:	003fcf06 	br	11920 <_fflush_r+0x138>

000119e4 <fflush>:
   119e4:	01400074 	movhi	r5,1
   119e8:	2945fa04 	addi	r5,r5,6120
   119ec:	2007883a 	mov	r3,r4
   119f0:	20000526 	beq	r4,zero,11a08 <fflush+0x24>
   119f4:	008000b4 	movhi	r2,2
   119f8:	1083ac04 	addi	r2,r2,3760
   119fc:	11000017 	ldw	r4,0(r2)
   11a00:	180b883a 	mov	r5,r3
   11a04:	00117e81 	jmpi	117e8 <_fflush_r>
   11a08:	008000b4 	movhi	r2,2
   11a0c:	1083ad04 	addi	r2,r2,3764
   11a10:	11000017 	ldw	r4,0(r2)
   11a14:	0012e501 	jmpi	12e50 <_fwalk_reent>

00011a18 <_fgets_r>:
   11a18:	defff804 	addi	sp,sp,-32
   11a1c:	00800044 	movi	r2,1
   11a20:	dd800615 	stw	r22,24(sp)
   11a24:	dd400515 	stw	r21,20(sp)
   11a28:	dc400115 	stw	r17,4(sp)
   11a2c:	dc000015 	stw	r16,0(sp)
   11a30:	dfc00715 	stw	ra,28(sp)
   11a34:	dd000415 	stw	r20,16(sp)
   11a38:	dcc00315 	stw	r19,12(sp)
   11a3c:	dc800215 	stw	r18,8(sp)
   11a40:	3021883a 	mov	r16,r6
   11a44:	282d883a 	mov	r22,r5
   11a48:	3823883a 	mov	r17,r7
   11a4c:	202b883a 	mov	r21,r4
   11a50:	1180410e 	bge	r2,r6,11b58 <_fgets_r+0x140>
   11a54:	20000226 	beq	r4,zero,11a60 <_fgets_r+0x48>
   11a58:	20800e17 	ldw	r2,56(r4)
   11a5c:	10002e26 	beq	r2,zero,11b18 <_fgets_r+0x100>
   11a60:	853fffc4 	addi	r20,r16,-1
   11a64:	b027883a 	mov	r19,r22
   11a68:	88800117 	ldw	r2,4(r17)
   11a6c:	a809883a 	mov	r4,r21
   11a70:	880b883a 	mov	r5,r17
   11a74:	100d883a 	mov	r6,r2
   11a78:	1000031e 	bne	r2,zero,11a88 <_fgets_r+0x70>
   11a7c:	00145c00 	call	145c0 <__srefill_r>
   11a80:	1000341e 	bne	r2,zero,11b54 <_fgets_r+0x13c>
   11a84:	89800117 	ldw	r6,4(r17)
   11a88:	01400284 	movi	r5,10
   11a8c:	3021883a 	mov	r16,r6
   11a90:	8c800017 	ldw	r18,0(r17)
   11a94:	a180012e 	bgeu	r20,r6,11a9c <_fgets_r+0x84>
   11a98:	a021883a 	mov	r16,r20
   11a9c:	9009883a 	mov	r4,r18
   11aa0:	800d883a 	mov	r6,r16
   11aa4:	00138cc0 	call	138cc <memchr>
   11aa8:	1007883a 	mov	r3,r2
   11aac:	900b883a 	mov	r5,r18
   11ab0:	9809883a 	mov	r4,r19
   11ab4:	800d883a 	mov	r6,r16
   11ab8:	1000191e 	bne	r2,zero,11b20 <_fgets_r+0x108>
   11abc:	88800117 	ldw	r2,4(r17)
   11ac0:	88c00017 	ldw	r3,0(r17)
   11ac4:	9c27883a 	add	r19,r19,r16
   11ac8:	1405c83a 	sub	r2,r2,r16
   11acc:	1c07883a 	add	r3,r3,r16
   11ad0:	88c00015 	stw	r3,0(r17)
   11ad4:	88800115 	stw	r2,4(r17)
   11ad8:	0013a240 	call	13a24 <memcpy>
   11adc:	a407c83a 	sub	r3,r20,r16
   11ae0:	1829883a 	mov	r20,r3
   11ae4:	183fe01e 	bne	r3,zero,11a68 <_fgets_r+0x50>
   11ae8:	98000005 	stb	zero,0(r19)
   11aec:	b005883a 	mov	r2,r22
   11af0:	dfc00717 	ldw	ra,28(sp)
   11af4:	dd800617 	ldw	r22,24(sp)
   11af8:	dd400517 	ldw	r21,20(sp)
   11afc:	dd000417 	ldw	r20,16(sp)
   11b00:	dcc00317 	ldw	r19,12(sp)
   11b04:	dc800217 	ldw	r18,8(sp)
   11b08:	dc400117 	ldw	r17,4(sp)
   11b0c:	dc000017 	ldw	r16,0(sp)
   11b10:	dec00804 	addi	sp,sp,32
   11b14:	f800283a 	ret
   11b18:	0011bec0 	call	11bec <__sinit>
   11b1c:	003fd006 	br	11a60 <_fgets_r+0x48>
   11b20:	88800117 	ldw	r2,4(r17)
   11b24:	18c00044 	addi	r3,r3,1
   11b28:	1ca1c83a 	sub	r16,r3,r18
   11b2c:	1405c83a 	sub	r2,r2,r16
   11b30:	800d883a 	mov	r6,r16
   11b34:	88c00015 	stw	r3,0(r17)
   11b38:	88800115 	stw	r2,4(r17)
   11b3c:	900b883a 	mov	r5,r18
   11b40:	9809883a 	mov	r4,r19
   11b44:	0013a240 	call	13a24 <memcpy>
   11b48:	9c21883a 	add	r16,r19,r16
   11b4c:	80000005 	stb	zero,0(r16)
   11b50:	003fe606 	br	11aec <_fgets_r+0xd4>
   11b54:	9dbfe41e 	bne	r19,r22,11ae8 <_fgets_r+0xd0>
   11b58:	002d883a 	mov	r22,zero
   11b5c:	003fe306 	br	11aec <_fgets_r+0xd4>

00011b60 <fgets>:
   11b60:	008000b4 	movhi	r2,2
   11b64:	1083ac04 	addi	r2,r2,3760
   11b68:	2013883a 	mov	r9,r4
   11b6c:	11000017 	ldw	r4,0(r2)
   11b70:	2805883a 	mov	r2,r5
   11b74:	300f883a 	mov	r7,r6
   11b78:	480b883a 	mov	r5,r9
   11b7c:	100d883a 	mov	r6,r2
   11b80:	0011a181 	jmpi	11a18 <_fgets_r>

00011b84 <std>:
   11b84:	00800074 	movhi	r2,1
   11b88:	1092d804 	addi	r2,r2,19296
   11b8c:	20800b15 	stw	r2,44(r4)
   11b90:	00800074 	movhi	r2,1
   11b94:	10931304 	addi	r2,r2,19532
   11b98:	20800815 	stw	r2,32(r4)
   11b9c:	00c00074 	movhi	r3,1
   11ba0:	18d2f404 	addi	r3,r3,19408
   11ba4:	00800074 	movhi	r2,1
   11ba8:	1092da04 	addi	r2,r2,19304
   11bac:	2140030d 	sth	r5,12(r4)
   11bb0:	2180038d 	sth	r6,14(r4)
   11bb4:	20c00915 	stw	r3,36(r4)
   11bb8:	20800a15 	stw	r2,40(r4)
   11bbc:	20000015 	stw	zero,0(r4)
   11bc0:	20000115 	stw	zero,4(r4)
   11bc4:	20000215 	stw	zero,8(r4)
   11bc8:	20000415 	stw	zero,16(r4)
   11bcc:	20000515 	stw	zero,20(r4)
   11bd0:	20000615 	stw	zero,24(r4)
   11bd4:	21000715 	stw	r4,28(r4)
   11bd8:	f800283a 	ret

00011bdc <__sfp_lock_acquire>:
   11bdc:	f800283a 	ret

00011be0 <__sfp_lock_release>:
   11be0:	f800283a 	ret

00011be4 <__sinit_lock_acquire>:
   11be4:	f800283a 	ret

00011be8 <__sinit_lock_release>:
   11be8:	f800283a 	ret

00011bec <__sinit>:
   11bec:	20800e17 	ldw	r2,56(r4)
   11bf0:	defffd04 	addi	sp,sp,-12
   11bf4:	dc400115 	stw	r17,4(sp)
   11bf8:	dc000015 	stw	r16,0(sp)
   11bfc:	dfc00215 	stw	ra,8(sp)
   11c00:	04400044 	movi	r17,1
   11c04:	01400104 	movi	r5,4
   11c08:	000d883a 	mov	r6,zero
   11c0c:	2021883a 	mov	r16,r4
   11c10:	2200bb04 	addi	r8,r4,748
   11c14:	200f883a 	mov	r7,r4
   11c18:	10000526 	beq	r2,zero,11c30 <__sinit+0x44>
   11c1c:	dfc00217 	ldw	ra,8(sp)
   11c20:	dc400117 	ldw	r17,4(sp)
   11c24:	dc000017 	ldw	r16,0(sp)
   11c28:	dec00304 	addi	sp,sp,12
   11c2c:	f800283a 	ret
   11c30:	21000117 	ldw	r4,4(r4)
   11c34:	00800074 	movhi	r2,1
   11c38:	10873404 	addi	r2,r2,7376
   11c3c:	00c000c4 	movi	r3,3
   11c40:	80800f15 	stw	r2,60(r16)
   11c44:	80c0b915 	stw	r3,740(r16)
   11c48:	8200ba15 	stw	r8,744(r16)
   11c4c:	84400e15 	stw	r17,56(r16)
   11c50:	8000b815 	stw	zero,736(r16)
   11c54:	0011b840 	call	11b84 <std>
   11c58:	81000217 	ldw	r4,8(r16)
   11c5c:	880d883a 	mov	r6,r17
   11c60:	800f883a 	mov	r7,r16
   11c64:	01400284 	movi	r5,10
   11c68:	0011b840 	call	11b84 <std>
   11c6c:	81000317 	ldw	r4,12(r16)
   11c70:	800f883a 	mov	r7,r16
   11c74:	01400484 	movi	r5,18
   11c78:	01800084 	movi	r6,2
   11c7c:	dfc00217 	ldw	ra,8(sp)
   11c80:	dc400117 	ldw	r17,4(sp)
   11c84:	dc000017 	ldw	r16,0(sp)
   11c88:	dec00304 	addi	sp,sp,12
   11c8c:	0011b841 	jmpi	11b84 <std>

00011c90 <__fp_lock>:
   11c90:	0005883a 	mov	r2,zero
   11c94:	f800283a 	ret

00011c98 <__fp_unlock>:
   11c98:	0005883a 	mov	r2,zero
   11c9c:	f800283a 	ret

00011ca0 <__fp_unlock_all>:
   11ca0:	008000b4 	movhi	r2,2
   11ca4:	1083ac04 	addi	r2,r2,3760
   11ca8:	11000017 	ldw	r4,0(r2)
   11cac:	01400074 	movhi	r5,1
   11cb0:	29472604 	addi	r5,r5,7320
   11cb4:	0012f181 	jmpi	12f18 <_fwalk>

00011cb8 <__fp_lock_all>:
   11cb8:	008000b4 	movhi	r2,2
   11cbc:	1083ac04 	addi	r2,r2,3760
   11cc0:	11000017 	ldw	r4,0(r2)
   11cc4:	01400074 	movhi	r5,1
   11cc8:	29472404 	addi	r5,r5,7312
   11ccc:	0012f181 	jmpi	12f18 <_fwalk>

00011cd0 <_cleanup_r>:
   11cd0:	01400074 	movhi	r5,1
   11cd4:	2945f504 	addi	r5,r5,6100
   11cd8:	0012f181 	jmpi	12f18 <_fwalk>

00011cdc <_cleanup>:
   11cdc:	008000b4 	movhi	r2,2
   11ce0:	1083ad04 	addi	r2,r2,3764
   11ce4:	11000017 	ldw	r4,0(r2)
   11ce8:	0011cd01 	jmpi	11cd0 <_cleanup_r>

00011cec <__sfmoreglue>:
   11cec:	defffc04 	addi	sp,sp,-16
   11cf0:	dc400115 	stw	r17,4(sp)
   11cf4:	2c401724 	muli	r17,r5,92
   11cf8:	dc800215 	stw	r18,8(sp)
   11cfc:	2825883a 	mov	r18,r5
   11d00:	89400304 	addi	r5,r17,12
   11d04:	dc000015 	stw	r16,0(sp)
   11d08:	dfc00315 	stw	ra,12(sp)
   11d0c:	001318c0 	call	1318c <_malloc_r>
   11d10:	0021883a 	mov	r16,zero
   11d14:	880d883a 	mov	r6,r17
   11d18:	000b883a 	mov	r5,zero
   11d1c:	10000626 	beq	r2,zero,11d38 <__sfmoreglue+0x4c>
   11d20:	11000304 	addi	r4,r2,12
   11d24:	14800115 	stw	r18,4(r2)
   11d28:	10000015 	stw	zero,0(r2)
   11d2c:	11000215 	stw	r4,8(r2)
   11d30:	1021883a 	mov	r16,r2
   11d34:	0013ba40 	call	13ba4 <memset>
   11d38:	8005883a 	mov	r2,r16
   11d3c:	dfc00317 	ldw	ra,12(sp)
   11d40:	dc800217 	ldw	r18,8(sp)
   11d44:	dc400117 	ldw	r17,4(sp)
   11d48:	dc000017 	ldw	r16,0(sp)
   11d4c:	dec00404 	addi	sp,sp,16
   11d50:	f800283a 	ret

00011d54 <__sfp>:
   11d54:	defffd04 	addi	sp,sp,-12
   11d58:	008000b4 	movhi	r2,2
   11d5c:	1083ad04 	addi	r2,r2,3764
   11d60:	dc000015 	stw	r16,0(sp)
   11d64:	14000017 	ldw	r16,0(r2)
   11d68:	dc400115 	stw	r17,4(sp)
   11d6c:	dfc00215 	stw	ra,8(sp)
   11d70:	80800e17 	ldw	r2,56(r16)
   11d74:	2023883a 	mov	r17,r4
   11d78:	10002626 	beq	r2,zero,11e14 <__sfp+0xc0>
   11d7c:	8400b804 	addi	r16,r16,736
   11d80:	80800117 	ldw	r2,4(r16)
   11d84:	81000217 	ldw	r4,8(r16)
   11d88:	10ffffc4 	addi	r3,r2,-1
   11d8c:	18000916 	blt	r3,zero,11db4 <__sfp+0x60>
   11d90:	2080030f 	ldh	r2,12(r4)
   11d94:	10000b26 	beq	r2,zero,11dc4 <__sfp+0x70>
   11d98:	017fffc4 	movi	r5,-1
   11d9c:	00000206 	br	11da8 <__sfp+0x54>
   11da0:	2080030f 	ldh	r2,12(r4)
   11da4:	10000726 	beq	r2,zero,11dc4 <__sfp+0x70>
   11da8:	18ffffc4 	addi	r3,r3,-1
   11dac:	21001704 	addi	r4,r4,92
   11db0:	197ffb1e 	bne	r3,r5,11da0 <__sfp+0x4c>
   11db4:	80800017 	ldw	r2,0(r16)
   11db8:	10001926 	beq	r2,zero,11e20 <__sfp+0xcc>
   11dbc:	1021883a 	mov	r16,r2
   11dc0:	003fef06 	br	11d80 <__sfp+0x2c>
   11dc4:	00bfffc4 	movi	r2,-1
   11dc8:	00c00044 	movi	r3,1
   11dcc:	2080038d 	sth	r2,14(r4)
   11dd0:	20c0030d 	sth	r3,12(r4)
   11dd4:	20000015 	stw	zero,0(r4)
   11dd8:	20000215 	stw	zero,8(r4)
   11ddc:	20000115 	stw	zero,4(r4)
   11de0:	20000415 	stw	zero,16(r4)
   11de4:	20000515 	stw	zero,20(r4)
   11de8:	20000615 	stw	zero,24(r4)
   11dec:	20000c15 	stw	zero,48(r4)
   11df0:	20000d15 	stw	zero,52(r4)
   11df4:	20001115 	stw	zero,68(r4)
   11df8:	20001215 	stw	zero,72(r4)
   11dfc:	2005883a 	mov	r2,r4
   11e00:	dfc00217 	ldw	ra,8(sp)
   11e04:	dc400117 	ldw	r17,4(sp)
   11e08:	dc000017 	ldw	r16,0(sp)
   11e0c:	dec00304 	addi	sp,sp,12
   11e10:	f800283a 	ret
   11e14:	8009883a 	mov	r4,r16
   11e18:	0011bec0 	call	11bec <__sinit>
   11e1c:	003fd706 	br	11d7c <__sfp+0x28>
   11e20:	8809883a 	mov	r4,r17
   11e24:	01400104 	movi	r5,4
   11e28:	0011cec0 	call	11cec <__sfmoreglue>
   11e2c:	80800015 	stw	r2,0(r16)
   11e30:	103fe21e 	bne	r2,zero,11dbc <__sfp+0x68>
   11e34:	00800304 	movi	r2,12
   11e38:	0009883a 	mov	r4,zero
   11e3c:	88800015 	stw	r2,0(r17)
   11e40:	003fee06 	br	11dfc <__sfp+0xa8>

00011e44 <_fopen_r>:
   11e44:	defffa04 	addi	sp,sp,-24
   11e48:	dcc00415 	stw	r19,16(sp)
   11e4c:	2827883a 	mov	r19,r5
   11e50:	300b883a 	mov	r5,r6
   11e54:	d80d883a 	mov	r6,sp
   11e58:	dc800315 	stw	r18,12(sp)
   11e5c:	dc400215 	stw	r17,8(sp)
   11e60:	dc000115 	stw	r16,4(sp)
   11e64:	dfc00515 	stw	ra,20(sp)
   11e68:	2021883a 	mov	r16,r4
   11e6c:	00189ec0 	call	189ec <__sflags>
   11e70:	1025883a 	mov	r18,r2
   11e74:	8009883a 	mov	r4,r16
   11e78:	0023883a 	mov	r17,zero
   11e7c:	1000081e 	bne	r2,zero,11ea0 <_fopen_r+0x5c>
   11e80:	8805883a 	mov	r2,r17
   11e84:	dfc00517 	ldw	ra,20(sp)
   11e88:	dcc00417 	ldw	r19,16(sp)
   11e8c:	dc800317 	ldw	r18,12(sp)
   11e90:	dc400217 	ldw	r17,8(sp)
   11e94:	dc000117 	ldw	r16,4(sp)
   11e98:	dec00604 	addi	sp,sp,24
   11e9c:	f800283a 	ret
   11ea0:	0011d540 	call	11d54 <__sfp>
   11ea4:	1023883a 	mov	r17,r2
   11ea8:	980b883a 	mov	r5,r19
   11eac:	8009883a 	mov	r4,r16
   11eb0:	01c06d84 	movi	r7,438
   11eb4:	103ff226 	beq	r2,zero,11e80 <_fopen_r+0x3c>
   11eb8:	d9800017 	ldw	r6,0(sp)
   11ebc:	0013c3c0 	call	13c3c <_open_r>
   11ec0:	10001816 	blt	r2,zero,11f24 <_fopen_r+0xe0>
   11ec4:	00c00074 	movhi	r3,1
   11ec8:	18d2f404 	addi	r3,r3,19408
   11ecc:	923fffcc 	andi	r8,r18,65535
   11ed0:	8880038d 	sth	r2,14(r17)
   11ed4:	00800074 	movhi	r2,1
   11ed8:	10931304 	addi	r2,r2,19532
   11edc:	88800815 	stw	r2,32(r17)
   11ee0:	88c00915 	stw	r3,36(r17)
   11ee4:	00800074 	movhi	r2,1
   11ee8:	1092da04 	addi	r2,r2,19304
   11eec:	00c00074 	movhi	r3,1
   11ef0:	18d2d804 	addi	r3,r3,19296
   11ef4:	4200400c 	andi	r8,r8,256
   11ef8:	8c80030d 	sth	r18,12(r17)
   11efc:	8009883a 	mov	r4,r16
   11f00:	880b883a 	mov	r5,r17
   11f04:	000d883a 	mov	r6,zero
   11f08:	01c00084 	movi	r7,2
   11f0c:	88800a15 	stw	r2,40(r17)
   11f10:	88c00b15 	stw	r3,44(r17)
   11f14:	8c400715 	stw	r17,28(r17)
   11f18:	403fd926 	beq	r8,zero,11e80 <_fopen_r+0x3c>
   11f1c:	00124e00 	call	124e0 <_fseek_r>
   11f20:	003fd706 	br	11e80 <_fopen_r+0x3c>
   11f24:	0011bdc0 	call	11bdc <__sfp_lock_acquire>
   11f28:	8800030d 	sth	zero,12(r17)
   11f2c:	0011be00 	call	11be0 <__sfp_lock_release>
   11f30:	0023883a 	mov	r17,zero
   11f34:	003fd206 	br	11e80 <_fopen_r+0x3c>

00011f38 <fopen>:
   11f38:	018000b4 	movhi	r6,2
   11f3c:	3183ac04 	addi	r6,r6,3760
   11f40:	2007883a 	mov	r3,r4
   11f44:	31000017 	ldw	r4,0(r6)
   11f48:	280d883a 	mov	r6,r5
   11f4c:	180b883a 	mov	r5,r3
   11f50:	0011e441 	jmpi	11e44 <_fopen_r>

00011f54 <fputc>:
   11f54:	defffc04 	addi	sp,sp,-16
   11f58:	dc800215 	stw	r18,8(sp)
   11f5c:	048000b4 	movhi	r18,2
   11f60:	9483ac04 	addi	r18,r18,3760
   11f64:	90c00017 	ldw	r3,0(r18)
   11f68:	dc400115 	stw	r17,4(sp)
   11f6c:	dc000015 	stw	r16,0(sp)
   11f70:	dfc00315 	stw	ra,12(sp)
   11f74:	2021883a 	mov	r16,r4
   11f78:	2823883a 	mov	r17,r5
   11f7c:	18000326 	beq	r3,zero,11f8c <fputc+0x38>
   11f80:	18800e17 	ldw	r2,56(r3)
   11f84:	1809883a 	mov	r4,r3
   11f88:	10000926 	beq	r2,zero,11fb0 <fputc+0x5c>
   11f8c:	91000017 	ldw	r4,0(r18)
   11f90:	800b883a 	mov	r5,r16
   11f94:	880d883a 	mov	r6,r17
   11f98:	dfc00317 	ldw	ra,12(sp)
   11f9c:	dc800217 	ldw	r18,8(sp)
   11fa0:	dc400117 	ldw	r17,4(sp)
   11fa4:	dc000017 	ldw	r16,0(sp)
   11fa8:	dec00404 	addi	sp,sp,16
   11fac:	0013e301 	jmpi	13e30 <_putc_r>
   11fb0:	0011bec0 	call	11bec <__sinit>
   11fb4:	003ff506 	br	11f8c <fputc+0x38>

00011fb8 <_fputc_r>:
   11fb8:	defffc04 	addi	sp,sp,-16
   11fbc:	dc800215 	stw	r18,8(sp)
   11fc0:	dc400115 	stw	r17,4(sp)
   11fc4:	dc000015 	stw	r16,0(sp)
   11fc8:	dfc00315 	stw	ra,12(sp)
   11fcc:	2021883a 	mov	r16,r4
   11fd0:	2823883a 	mov	r17,r5
   11fd4:	3025883a 	mov	r18,r6
   11fd8:	20000226 	beq	r4,zero,11fe4 <_fputc_r+0x2c>
   11fdc:	20800e17 	ldw	r2,56(r4)
   11fe0:	10000926 	beq	r2,zero,12008 <_fputc_r+0x50>
   11fe4:	8009883a 	mov	r4,r16
   11fe8:	880b883a 	mov	r5,r17
   11fec:	900d883a 	mov	r6,r18
   11ff0:	dfc00317 	ldw	ra,12(sp)
   11ff4:	dc800217 	ldw	r18,8(sp)
   11ff8:	dc400117 	ldw	r17,4(sp)
   11ffc:	dc000017 	ldw	r16,0(sp)
   12000:	dec00404 	addi	sp,sp,16
   12004:	0013e301 	jmpi	13e30 <_putc_r>
   12008:	0011bec0 	call	11bec <__sinit>
   1200c:	003ff506 	br	11fe4 <_fputc_r+0x2c>

00012010 <_fputs_r>:
   12010:	defff804 	addi	sp,sp,-32
   12014:	dc000515 	stw	r16,20(sp)
   12018:	2021883a 	mov	r16,r4
   1201c:	2809883a 	mov	r4,r5
   12020:	dc400615 	stw	r17,24(sp)
   12024:	dfc00715 	stw	ra,28(sp)
   12028:	3023883a 	mov	r17,r6
   1202c:	d9400015 	stw	r5,0(sp)
   12030:	0014cac0 	call	14cac <strlen>
   12034:	00c00044 	movi	r3,1
   12038:	d8800115 	stw	r2,4(sp)
   1203c:	d8c00315 	stw	r3,12(sp)
   12040:	d8800415 	stw	r2,16(sp)
   12044:	dec00215 	stw	sp,8(sp)
   12048:	80000326 	beq	r16,zero,12058 <_fputs_r+0x48>
   1204c:	80800e17 	ldw	r2,56(r16)
   12050:	8009883a 	mov	r4,r16
   12054:	10000926 	beq	r2,zero,1207c <_fputs_r+0x6c>
   12058:	8009883a 	mov	r4,r16
   1205c:	880b883a 	mov	r5,r17
   12060:	d9800204 	addi	r6,sp,8
   12064:	00129b40 	call	129b4 <__sfvwrite_r>
   12068:	dfc00717 	ldw	ra,28(sp)
   1206c:	dc400617 	ldw	r17,24(sp)
   12070:	dc000517 	ldw	r16,20(sp)
   12074:	dec00804 	addi	sp,sp,32
   12078:	f800283a 	ret
   1207c:	0011bec0 	call	11bec <__sinit>
   12080:	003ff506 	br	12058 <_fputs_r+0x48>

00012084 <fputs>:
   12084:	018000b4 	movhi	r6,2
   12088:	3183ac04 	addi	r6,r6,3760
   1208c:	2007883a 	mov	r3,r4
   12090:	31000017 	ldw	r4,0(r6)
   12094:	280d883a 	mov	r6,r5
   12098:	180b883a 	mov	r5,r3
   1209c:	00120101 	jmpi	12010 <_fputs_r>

000120a0 <_malloc_trim_r>:
   120a0:	defffb04 	addi	sp,sp,-20
   120a4:	dcc00315 	stw	r19,12(sp)
   120a8:	04c000b4 	movhi	r19,2
   120ac:	9cfdfc04 	addi	r19,r19,-2064
   120b0:	dc800215 	stw	r18,8(sp)
   120b4:	dc400115 	stw	r17,4(sp)
   120b8:	dc000015 	stw	r16,0(sp)
   120bc:	2823883a 	mov	r17,r5
   120c0:	2025883a 	mov	r18,r4
   120c4:	dfc00415 	stw	ra,16(sp)
   120c8:	001b8c00 	call	1b8c0 <__malloc_lock>
   120cc:	98800217 	ldw	r2,8(r19)
   120d0:	9009883a 	mov	r4,r18
   120d4:	000b883a 	mov	r5,zero
   120d8:	10c00117 	ldw	r3,4(r2)
   120dc:	00bfff04 	movi	r2,-4
   120e0:	18a0703a 	and	r16,r3,r2
   120e4:	8463c83a 	sub	r17,r16,r17
   120e8:	8c43fbc4 	addi	r17,r17,4079
   120ec:	8822d33a 	srli	r17,r17,12
   120f0:	0083ffc4 	movi	r2,4095
   120f4:	8c7fffc4 	addi	r17,r17,-1
   120f8:	8822933a 	slli	r17,r17,12
   120fc:	1440060e 	bge	r2,r17,12118 <_malloc_trim_r+0x78>
   12100:	00147a00 	call	147a0 <_sbrk_r>
   12104:	98c00217 	ldw	r3,8(r19)
   12108:	9009883a 	mov	r4,r18
   1210c:	044bc83a 	sub	r5,zero,r17
   12110:	80c7883a 	add	r3,r16,r3
   12114:	10c00926 	beq	r2,r3,1213c <_malloc_trim_r+0x9c>
   12118:	001b8e00 	call	1b8e0 <__malloc_unlock>
   1211c:	0005883a 	mov	r2,zero
   12120:	dfc00417 	ldw	ra,16(sp)
   12124:	dcc00317 	ldw	r19,12(sp)
   12128:	dc800217 	ldw	r18,8(sp)
   1212c:	dc400117 	ldw	r17,4(sp)
   12130:	dc000017 	ldw	r16,0(sp)
   12134:	dec00504 	addi	sp,sp,20
   12138:	f800283a 	ret
   1213c:	9009883a 	mov	r4,r18
   12140:	00147a00 	call	147a0 <_sbrk_r>
   12144:	844dc83a 	sub	r6,r16,r17
   12148:	00ffffc4 	movi	r3,-1
   1214c:	9009883a 	mov	r4,r18
   12150:	000b883a 	mov	r5,zero
   12154:	01c000b4 	movhi	r7,2
   12158:	39ccc404 	addi	r7,r7,13072
   1215c:	31800054 	ori	r6,r6,1
   12160:	10c00926 	beq	r2,r3,12188 <_malloc_trim_r+0xe8>
   12164:	38800017 	ldw	r2,0(r7)
   12168:	98c00217 	ldw	r3,8(r19)
   1216c:	9009883a 	mov	r4,r18
   12170:	1445c83a 	sub	r2,r2,r17
   12174:	38800015 	stw	r2,0(r7)
   12178:	19800115 	stw	r6,4(r3)
   1217c:	001b8e00 	call	1b8e0 <__malloc_unlock>
   12180:	00800044 	movi	r2,1
   12184:	003fe606 	br	12120 <_malloc_trim_r+0x80>
   12188:	00147a00 	call	147a0 <_sbrk_r>
   1218c:	99800217 	ldw	r6,8(r19)
   12190:	100f883a 	mov	r7,r2
   12194:	9009883a 	mov	r4,r18
   12198:	1187c83a 	sub	r3,r2,r6
   1219c:	008003c4 	movi	r2,15
   121a0:	19400054 	ori	r5,r3,1
   121a4:	10ffdc0e 	bge	r2,r3,12118 <_malloc_trim_r+0x78>
   121a8:	008000b4 	movhi	r2,2
   121ac:	1083af04 	addi	r2,r2,3772
   121b0:	10c00017 	ldw	r3,0(r2)
   121b4:	008000b4 	movhi	r2,2
   121b8:	108cc404 	addi	r2,r2,13072
   121bc:	31400115 	stw	r5,4(r6)
   121c0:	38c7c83a 	sub	r3,r7,r3
   121c4:	10c00015 	stw	r3,0(r2)
   121c8:	003fd306 	br	12118 <_malloc_trim_r+0x78>

000121cc <_free_r>:
   121cc:	defffd04 	addi	sp,sp,-12
   121d0:	dc400115 	stw	r17,4(sp)
   121d4:	dc000015 	stw	r16,0(sp)
   121d8:	dfc00215 	stw	ra,8(sp)
   121dc:	2821883a 	mov	r16,r5
   121e0:	2023883a 	mov	r17,r4
   121e4:	28005a26 	beq	r5,zero,12350 <_free_r+0x184>
   121e8:	001b8c00 	call	1b8c0 <__malloc_lock>
   121ec:	823ffe04 	addi	r8,r16,-8
   121f0:	41400117 	ldw	r5,4(r8)
   121f4:	00bfff84 	movi	r2,-2
   121f8:	028000b4 	movhi	r10,2
   121fc:	52bdfc04 	addi	r10,r10,-2064
   12200:	288e703a 	and	r7,r5,r2
   12204:	41cd883a 	add	r6,r8,r7
   12208:	30c00117 	ldw	r3,4(r6)
   1220c:	51000217 	ldw	r4,8(r10)
   12210:	00bfff04 	movi	r2,-4
   12214:	1892703a 	and	r9,r3,r2
   12218:	5017883a 	mov	r11,r10
   1221c:	31006726 	beq	r6,r4,123bc <_free_r+0x1f0>
   12220:	2880004c 	andi	r2,r5,1
   12224:	1005003a 	cmpeq	r2,r2,zero
   12228:	32400115 	stw	r9,4(r6)
   1222c:	10001a1e 	bne	r2,zero,12298 <_free_r+0xcc>
   12230:	000b883a 	mov	r5,zero
   12234:	3247883a 	add	r3,r6,r9
   12238:	18800117 	ldw	r2,4(r3)
   1223c:	1080004c 	andi	r2,r2,1
   12240:	1000231e 	bne	r2,zero,122d0 <_free_r+0x104>
   12244:	280ac03a 	cmpne	r5,r5,zero
   12248:	3a4f883a 	add	r7,r7,r9
   1224c:	2800451e 	bne	r5,zero,12364 <_free_r+0x198>
   12250:	31000217 	ldw	r4,8(r6)
   12254:	008000b4 	movhi	r2,2
   12258:	10bdfe04 	addi	r2,r2,-2056
   1225c:	20807b26 	beq	r4,r2,1244c <_free_r+0x280>
   12260:	30800317 	ldw	r2,12(r6)
   12264:	3a07883a 	add	r3,r7,r8
   12268:	19c00015 	stw	r7,0(r3)
   1226c:	11000215 	stw	r4,8(r2)
   12270:	20800315 	stw	r2,12(r4)
   12274:	38800054 	ori	r2,r7,1
   12278:	40800115 	stw	r2,4(r8)
   1227c:	28001a26 	beq	r5,zero,122e8 <_free_r+0x11c>
   12280:	8809883a 	mov	r4,r17
   12284:	dfc00217 	ldw	ra,8(sp)
   12288:	dc400117 	ldw	r17,4(sp)
   1228c:	dc000017 	ldw	r16,0(sp)
   12290:	dec00304 	addi	sp,sp,12
   12294:	001b8e01 	jmpi	1b8e0 <__malloc_unlock>
   12298:	80bffe17 	ldw	r2,-8(r16)
   1229c:	50c00204 	addi	r3,r10,8
   122a0:	4091c83a 	sub	r8,r8,r2
   122a4:	41000217 	ldw	r4,8(r8)
   122a8:	388f883a 	add	r7,r7,r2
   122ac:	20c06126 	beq	r4,r3,12434 <_free_r+0x268>
   122b0:	40800317 	ldw	r2,12(r8)
   122b4:	3247883a 	add	r3,r6,r9
   122b8:	000b883a 	mov	r5,zero
   122bc:	11000215 	stw	r4,8(r2)
   122c0:	20800315 	stw	r2,12(r4)
   122c4:	18800117 	ldw	r2,4(r3)
   122c8:	1080004c 	andi	r2,r2,1
   122cc:	103fdd26 	beq	r2,zero,12244 <_free_r+0x78>
   122d0:	38800054 	ori	r2,r7,1
   122d4:	3a07883a 	add	r3,r7,r8
   122d8:	280ac03a 	cmpne	r5,r5,zero
   122dc:	40800115 	stw	r2,4(r8)
   122e0:	19c00015 	stw	r7,0(r3)
   122e4:	283fe61e 	bne	r5,zero,12280 <_free_r+0xb4>
   122e8:	00807fc4 	movi	r2,511
   122ec:	11c01f2e 	bgeu	r2,r7,1236c <_free_r+0x1a0>
   122f0:	3806d27a 	srli	r3,r7,9
   122f4:	1800481e 	bne	r3,zero,12418 <_free_r+0x24c>
   122f8:	3804d0fa 	srli	r2,r7,3
   122fc:	100690fa 	slli	r3,r2,3
   12300:	1acd883a 	add	r6,r3,r11
   12304:	31400217 	ldw	r5,8(r6)
   12308:	31405926 	beq	r6,r5,12470 <_free_r+0x2a4>
   1230c:	28800117 	ldw	r2,4(r5)
   12310:	00ffff04 	movi	r3,-4
   12314:	10c4703a 	and	r2,r2,r3
   12318:	3880022e 	bgeu	r7,r2,12324 <_free_r+0x158>
   1231c:	29400217 	ldw	r5,8(r5)
   12320:	317ffa1e 	bne	r6,r5,1230c <_free_r+0x140>
   12324:	29800317 	ldw	r6,12(r5)
   12328:	41800315 	stw	r6,12(r8)
   1232c:	41400215 	stw	r5,8(r8)
   12330:	8809883a 	mov	r4,r17
   12334:	2a000315 	stw	r8,12(r5)
   12338:	32000215 	stw	r8,8(r6)
   1233c:	dfc00217 	ldw	ra,8(sp)
   12340:	dc400117 	ldw	r17,4(sp)
   12344:	dc000017 	ldw	r16,0(sp)
   12348:	dec00304 	addi	sp,sp,12
   1234c:	001b8e01 	jmpi	1b8e0 <__malloc_unlock>
   12350:	dfc00217 	ldw	ra,8(sp)
   12354:	dc400117 	ldw	r17,4(sp)
   12358:	dc000017 	ldw	r16,0(sp)
   1235c:	dec00304 	addi	sp,sp,12
   12360:	f800283a 	ret
   12364:	31000217 	ldw	r4,8(r6)
   12368:	003fbd06 	br	12260 <_free_r+0x94>
   1236c:	3806d0fa 	srli	r3,r7,3
   12370:	00800044 	movi	r2,1
   12374:	51400117 	ldw	r5,4(r10)
   12378:	180890fa 	slli	r4,r3,3
   1237c:	1807d0ba 	srai	r3,r3,2
   12380:	22c9883a 	add	r4,r4,r11
   12384:	21800217 	ldw	r6,8(r4)
   12388:	10c4983a 	sll	r2,r2,r3
   1238c:	41000315 	stw	r4,12(r8)
   12390:	41800215 	stw	r6,8(r8)
   12394:	288ab03a 	or	r5,r5,r2
   12398:	22000215 	stw	r8,8(r4)
   1239c:	8809883a 	mov	r4,r17
   123a0:	51400115 	stw	r5,4(r10)
   123a4:	32000315 	stw	r8,12(r6)
   123a8:	dfc00217 	ldw	ra,8(sp)
   123ac:	dc400117 	ldw	r17,4(sp)
   123b0:	dc000017 	ldw	r16,0(sp)
   123b4:	dec00304 	addi	sp,sp,12
   123b8:	001b8e01 	jmpi	1b8e0 <__malloc_unlock>
   123bc:	2880004c 	andi	r2,r5,1
   123c0:	3a4d883a 	add	r6,r7,r9
   123c4:	1000071e 	bne	r2,zero,123e4 <_free_r+0x218>
   123c8:	80bffe17 	ldw	r2,-8(r16)
   123cc:	4091c83a 	sub	r8,r8,r2
   123d0:	41000317 	ldw	r4,12(r8)
   123d4:	40c00217 	ldw	r3,8(r8)
   123d8:	308d883a 	add	r6,r6,r2
   123dc:	20c00215 	stw	r3,8(r4)
   123e0:	19000315 	stw	r4,12(r3)
   123e4:	008000b4 	movhi	r2,2
   123e8:	1083ae04 	addi	r2,r2,3768
   123ec:	11000017 	ldw	r4,0(r2)
   123f0:	30c00054 	ori	r3,r6,1
   123f4:	52000215 	stw	r8,8(r10)
   123f8:	40c00115 	stw	r3,4(r8)
   123fc:	313fa036 	bltu	r6,r4,12280 <_free_r+0xb4>
   12400:	008000b4 	movhi	r2,2
   12404:	108ab404 	addi	r2,r2,10960
   12408:	11400017 	ldw	r5,0(r2)
   1240c:	8809883a 	mov	r4,r17
   12410:	00120a00 	call	120a0 <_malloc_trim_r>
   12414:	003f9a06 	br	12280 <_free_r+0xb4>
   12418:	00800104 	movi	r2,4
   1241c:	10c0072e 	bgeu	r2,r3,1243c <_free_r+0x270>
   12420:	00800504 	movi	r2,20
   12424:	10c01936 	bltu	r2,r3,1248c <_free_r+0x2c0>
   12428:	188016c4 	addi	r2,r3,91
   1242c:	100690fa 	slli	r3,r2,3
   12430:	003fb306 	br	12300 <_free_r+0x134>
   12434:	01400044 	movi	r5,1
   12438:	003f7e06 	br	12234 <_free_r+0x68>
   1243c:	3804d1ba 	srli	r2,r7,6
   12440:	10800e04 	addi	r2,r2,56
   12444:	100690fa 	slli	r3,r2,3
   12448:	003fad06 	br	12300 <_free_r+0x134>
   1244c:	22000315 	stw	r8,12(r4)
   12450:	22000215 	stw	r8,8(r4)
   12454:	3a05883a 	add	r2,r7,r8
   12458:	38c00054 	ori	r3,r7,1
   1245c:	11c00015 	stw	r7,0(r2)
   12460:	41000215 	stw	r4,8(r8)
   12464:	40c00115 	stw	r3,4(r8)
   12468:	41000315 	stw	r4,12(r8)
   1246c:	003f8406 	br	12280 <_free_r+0xb4>
   12470:	1005d0ba 	srai	r2,r2,2
   12474:	00c00044 	movi	r3,1
   12478:	51000117 	ldw	r4,4(r10)
   1247c:	1886983a 	sll	r3,r3,r2
   12480:	20c8b03a 	or	r4,r4,r3
   12484:	51000115 	stw	r4,4(r10)
   12488:	003fa706 	br	12328 <_free_r+0x15c>
   1248c:	00801504 	movi	r2,84
   12490:	10c00436 	bltu	r2,r3,124a4 <_free_r+0x2d8>
   12494:	3804d33a 	srli	r2,r7,12
   12498:	10801b84 	addi	r2,r2,110
   1249c:	100690fa 	slli	r3,r2,3
   124a0:	003f9706 	br	12300 <_free_r+0x134>
   124a4:	00805504 	movi	r2,340
   124a8:	10c00436 	bltu	r2,r3,124bc <_free_r+0x2f0>
   124ac:	3804d3fa 	srli	r2,r7,15
   124b0:	10801dc4 	addi	r2,r2,119
   124b4:	100690fa 	slli	r3,r2,3
   124b8:	003f9106 	br	12300 <_free_r+0x134>
   124bc:	00815504 	movi	r2,1364
   124c0:	10c0032e 	bgeu	r2,r3,124d0 <_free_r+0x304>
   124c4:	00801f84 	movi	r2,126
   124c8:	00c0fc04 	movi	r3,1008
   124cc:	003f8c06 	br	12300 <_free_r+0x134>
   124d0:	3804d4ba 	srli	r2,r7,18
   124d4:	10801f04 	addi	r2,r2,124
   124d8:	100690fa 	slli	r3,r2,3
   124dc:	003f8806 	br	12300 <_free_r+0x134>

000124e0 <_fseek_r>:
   124e0:	deffe804 	addi	sp,sp,-96
   124e4:	dd801515 	stw	r22,84(sp)
   124e8:	dcc01215 	stw	r19,72(sp)
   124ec:	dc801115 	stw	r18,68(sp)
   124f0:	dc000f15 	stw	r16,60(sp)
   124f4:	dfc01715 	stw	ra,92(sp)
   124f8:	ddc01615 	stw	r23,88(sp)
   124fc:	dd401415 	stw	r21,80(sp)
   12500:	dd001315 	stw	r20,76(sp)
   12504:	dc401015 	stw	r17,64(sp)
   12508:	2025883a 	mov	r18,r4
   1250c:	2821883a 	mov	r16,r5
   12510:	302d883a 	mov	r22,r6
   12514:	3827883a 	mov	r19,r7
   12518:	20000226 	beq	r4,zero,12524 <_fseek_r+0x44>
   1251c:	20800e17 	ldw	r2,56(r4)
   12520:	10007826 	beq	r2,zero,12704 <_fseek_r+0x224>
   12524:	8080030b 	ldhu	r2,12(r16)
   12528:	00c04204 	movi	r3,264
   1252c:	1080420c 	andi	r2,r2,264
   12530:	10c07926 	beq	r2,r3,12718 <_fseek_r+0x238>
   12534:	85400a17 	ldw	r21,40(r16)
   12538:	a800ea26 	beq	r21,zero,128e4 <_fseek_r+0x404>
   1253c:	00800044 	movi	r2,1
   12540:	98805f26 	beq	r19,r2,126c0 <_fseek_r+0x1e0>
   12544:	00800084 	movi	r2,2
   12548:	98801026 	beq	r19,r2,1258c <_fseek_r+0xac>
   1254c:	98000f26 	beq	r19,zero,1258c <_fseek_r+0xac>
   12550:	00800584 	movi	r2,22
   12554:	013fffc4 	movi	r4,-1
   12558:	90800015 	stw	r2,0(r18)
   1255c:	2005883a 	mov	r2,r4
   12560:	dfc01717 	ldw	ra,92(sp)
   12564:	ddc01617 	ldw	r23,88(sp)
   12568:	dd801517 	ldw	r22,84(sp)
   1256c:	dd401417 	ldw	r21,80(sp)
   12570:	dd001317 	ldw	r20,76(sp)
   12574:	dcc01217 	ldw	r19,72(sp)
   12578:	dc801117 	ldw	r18,68(sp)
   1257c:	dc401017 	ldw	r17,64(sp)
   12580:	dc000f17 	ldw	r16,60(sp)
   12584:	dec01804 	addi	sp,sp,96
   12588:	f800283a 	ret
   1258c:	81800417 	ldw	r6,16(r16)
   12590:	0023883a 	mov	r17,zero
   12594:	002f883a 	mov	r23,zero
   12598:	3000a626 	beq	r6,zero,12834 <_fseek_r+0x354>
   1259c:	8100030b 	ldhu	r4,12(r16)
   125a0:	2082068c 	andi	r2,r4,2074
   125a4:	1000081e 	bne	r2,zero,125c8 <_fseek_r+0xe8>
   125a8:	2081000c 	andi	r2,r4,1024
   125ac:	10001b1e 	bne	r2,zero,1261c <_fseek_r+0x13c>
   125b0:	00800074 	movhi	r2,1
   125b4:	1092da04 	addi	r2,r2,19304
   125b8:	a8800926 	beq	r21,r2,125e0 <_fseek_r+0x100>
   125bc:	8080030b 	ldhu	r2,12(r16)
   125c0:	10820014 	ori	r2,r2,2048
   125c4:	8080030d 	sth	r2,12(r16)
   125c8:	9009883a 	mov	r4,r18
   125cc:	800b883a 	mov	r5,r16
   125d0:	00117e80 	call	117e8 <_fflush_r>
   125d4:	1000a326 	beq	r2,zero,12864 <_fseek_r+0x384>
   125d8:	013fffc4 	movi	r4,-1
   125dc:	003fdf06 	br	1255c <_fseek_r+0x7c>
   125e0:	8140038f 	ldh	r5,14(r16)
   125e4:	283ff516 	blt	r5,zero,125bc <_fseek_r+0xdc>
   125e8:	9009883a 	mov	r4,r18
   125ec:	d80d883a 	mov	r6,sp
   125f0:	00129400 	call	12940 <_fstat_r>
   125f4:	103ff11e 	bne	r2,zero,125bc <_fseek_r+0xdc>
   125f8:	d8800117 	ldw	r2,4(sp)
   125fc:	00e00014 	movui	r3,32768
   12600:	10bc000c 	andi	r2,r2,61440
   12604:	10ffed1e 	bne	r2,r3,125bc <_fseek_r+0xdc>
   12608:	80c0030b 	ldhu	r3,12(r16)
   1260c:	00810004 	movi	r2,1024
   12610:	80801315 	stw	r2,76(r16)
   12614:	1886b03a 	or	r3,r3,r2
   12618:	80c0030d 	sth	r3,12(r16)
   1261c:	9800701e 	bne	r19,zero,127e0 <_fseek_r+0x300>
   12620:	b029883a 	mov	r20,r22
   12624:	b804c03a 	cmpne	r2,r23,zero
   12628:	10003f1e 	bne	r2,zero,12728 <_fseek_r+0x248>
   1262c:	8100030b 	ldhu	r4,12(r16)
   12630:	2084000c 	andi	r2,r4,4096
   12634:	1000a126 	beq	r2,zero,128bc <_fseek_r+0x3dc>
   12638:	81801417 	ldw	r6,80(r16)
   1263c:	80c00117 	ldw	r3,4(r16)
   12640:	81400c17 	ldw	r5,48(r16)
   12644:	30e3c83a 	sub	r17,r6,r3
   12648:	28008026 	beq	r5,zero,1284c <_fseek_r+0x36c>
   1264c:	81c00f17 	ldw	r7,60(r16)
   12650:	89e3c83a 	sub	r17,r17,r7
   12654:	80800e17 	ldw	r2,56(r16)
   12658:	81800417 	ldw	r6,16(r16)
   1265c:	88c7883a 	add	r3,r17,r3
   12660:	1185c83a 	sub	r2,r2,r6
   12664:	11cf883a 	add	r7,r2,r7
   12668:	1887c83a 	sub	r3,r3,r2
   1266c:	2088000c 	andi	r2,r4,8192
   12670:	10003e1e 	bne	r2,zero,1276c <_fseek_r+0x28c>
   12674:	a0c03d16 	blt	r20,r3,1276c <_fseek_r+0x28c>
   12678:	38c5883a 	add	r2,r7,r3
   1267c:	a0803b2e 	bgeu	r20,r2,1276c <_fseek_r+0x28c>
   12680:	a0c5c83a 	sub	r2,r20,r3
   12684:	3887c83a 	sub	r3,r7,r2
   12688:	3085883a 	add	r2,r6,r2
   1268c:	80800015 	stw	r2,0(r16)
   12690:	80c00115 	stw	r3,4(r16)
   12694:	28000526 	beq	r5,zero,126ac <_fseek_r+0x1cc>
   12698:	80801004 	addi	r2,r16,64
   1269c:	28800226 	beq	r5,r2,126a8 <_fseek_r+0x1c8>
   126a0:	9009883a 	mov	r4,r18
   126a4:	00121cc0 	call	121cc <_free_r>
   126a8:	80000c15 	stw	zero,48(r16)
   126ac:	8080030b 	ldhu	r2,12(r16)
   126b0:	0009883a 	mov	r4,zero
   126b4:	10bff7cc 	andi	r2,r2,65503
   126b8:	8080030d 	sth	r2,12(r16)
   126bc:	003fa706 	br	1255c <_fseek_r+0x7c>
   126c0:	9009883a 	mov	r4,r18
   126c4:	800b883a 	mov	r5,r16
   126c8:	00117e80 	call	117e8 <_fflush_r>
   126cc:	8100030b 	ldhu	r4,12(r16)
   126d0:	2084000c 	andi	r2,r4,4096
   126d4:	10008726 	beq	r2,zero,128f4 <_fseek_r+0x414>
   126d8:	84401417 	ldw	r17,80(r16)
   126dc:	2080010c 	andi	r2,r4,4
   126e0:	1000171e 	bne	r2,zero,12740 <_fseek_r+0x260>
   126e4:	2080020c 	andi	r2,r4,8
   126e8:	10003b26 	beq	r2,zero,127d8 <_fseek_r+0x2f8>
   126ec:	80800017 	ldw	r2,0(r16)
   126f0:	10003926 	beq	r2,zero,127d8 <_fseek_r+0x2f8>
   126f4:	81800417 	ldw	r6,16(r16)
   126f8:	1185c83a 	sub	r2,r2,r6
   126fc:	88a3883a 	add	r17,r17,r2
   12700:	00001606 	br	1275c <_fseek_r+0x27c>
   12704:	0011bec0 	call	11bec <__sinit>
   12708:	8080030b 	ldhu	r2,12(r16)
   1270c:	00c04204 	movi	r3,264
   12710:	1080420c 	andi	r2,r2,264
   12714:	10ff871e 	bne	r2,r3,12534 <_fseek_r+0x54>
   12718:	9009883a 	mov	r4,r18
   1271c:	800b883a 	mov	r5,r16
   12720:	00117e80 	call	117e8 <_fflush_r>
   12724:	003f8306 	br	12534 <_fseek_r+0x54>
   12728:	81400c17 	ldw	r5,48(r16)
   1272c:	28004526 	beq	r5,zero,12844 <_fseek_r+0x364>
   12730:	8100030b 	ldhu	r4,12(r16)
   12734:	80c00117 	ldw	r3,4(r16)
   12738:	81c00f17 	ldw	r7,60(r16)
   1273c:	003fc506 	br	12654 <_fseek_r+0x174>
   12740:	80c00117 	ldw	r3,4(r16)
   12744:	80800c17 	ldw	r2,48(r16)
   12748:	88e3c83a 	sub	r17,r17,r3
   1274c:	10002226 	beq	r2,zero,127d8 <_fseek_r+0x2f8>
   12750:	81c00f17 	ldw	r7,60(r16)
   12754:	81800417 	ldw	r6,16(r16)
   12758:	89e3c83a 	sub	r17,r17,r7
   1275c:	b46d883a 	add	r22,r22,r17
   12760:	0027883a 	mov	r19,zero
   12764:	05c00044 	movi	r23,1
   12768:	003f8b06 	br	12598 <_fseek_r+0xb8>
   1276c:	80801317 	ldw	r2,76(r16)
   12770:	81400717 	ldw	r5,28(r16)
   12774:	9009883a 	mov	r4,r18
   12778:	0085c83a 	sub	r2,zero,r2
   1277c:	a0a2703a 	and	r17,r20,r2
   12780:	880d883a 	mov	r6,r17
   12784:	000f883a 	mov	r7,zero
   12788:	a83ee83a 	callr	r21
   1278c:	00ffffc4 	movi	r3,-1
   12790:	10ff8d26 	beq	r2,r3,125c8 <_fseek_r+0xe8>
   12794:	80800417 	ldw	r2,16(r16)
   12798:	81400c17 	ldw	r5,48(r16)
   1279c:	80000115 	stw	zero,4(r16)
   127a0:	80800015 	stw	r2,0(r16)
   127a4:	28000526 	beq	r5,zero,127bc <_fseek_r+0x2dc>
   127a8:	80801004 	addi	r2,r16,64
   127ac:	28800226 	beq	r5,r2,127b8 <_fseek_r+0x2d8>
   127b0:	9009883a 	mov	r4,r18
   127b4:	00121cc0 	call	121cc <_free_r>
   127b8:	80000c15 	stw	zero,48(r16)
   127bc:	8080030b 	ldhu	r2,12(r16)
   127c0:	a463c83a 	sub	r17,r20,r17
   127c4:	10bff7cc 	andi	r2,r2,65503
   127c8:	8080030d 	sth	r2,12(r16)
   127cc:	88000c1e 	bne	r17,zero,12800 <_fseek_r+0x320>
   127d0:	0009883a 	mov	r4,zero
   127d4:	003f6106 	br	1255c <_fseek_r+0x7c>
   127d8:	81800417 	ldw	r6,16(r16)
   127dc:	003fdf06 	br	1275c <_fseek_r+0x27c>
   127e0:	8140038f 	ldh	r5,14(r16)
   127e4:	9009883a 	mov	r4,r18
   127e8:	d80d883a 	mov	r6,sp
   127ec:	00129400 	call	12940 <_fstat_r>
   127f0:	103f751e 	bne	r2,zero,125c8 <_fseek_r+0xe8>
   127f4:	d8800417 	ldw	r2,16(sp)
   127f8:	b0a9883a 	add	r20,r22,r2
   127fc:	003f8906 	br	12624 <_fseek_r+0x144>
   12800:	9009883a 	mov	r4,r18
   12804:	800b883a 	mov	r5,r16
   12808:	00145c00 	call	145c0 <__srefill_r>
   1280c:	103f6e1e 	bne	r2,zero,125c8 <_fseek_r+0xe8>
   12810:	80c00117 	ldw	r3,4(r16)
   12814:	1c7f6c36 	bltu	r3,r17,125c8 <_fseek_r+0xe8>
   12818:	80800017 	ldw	r2,0(r16)
   1281c:	1c47c83a 	sub	r3,r3,r17
   12820:	0009883a 	mov	r4,zero
   12824:	1445883a 	add	r2,r2,r17
   12828:	80c00115 	stw	r3,4(r16)
   1282c:	80800015 	stw	r2,0(r16)
   12830:	003f4a06 	br	1255c <_fseek_r+0x7c>
   12834:	9009883a 	mov	r4,r18
   12838:	800b883a 	mov	r5,r16
   1283c:	0012fd00 	call	12fd0 <__smakebuf_r>
   12840:	003f5606 	br	1259c <_fseek_r+0xbc>
   12844:	8100030b 	ldhu	r4,12(r16)
   12848:	80c00117 	ldw	r3,4(r16)
   1284c:	80800017 	ldw	r2,0(r16)
   12850:	81800417 	ldw	r6,16(r16)
   12854:	1185c83a 	sub	r2,r2,r6
   12858:	10cf883a 	add	r7,r2,r3
   1285c:	8887c83a 	sub	r3,r17,r2
   12860:	003f8206 	br	1266c <_fseek_r+0x18c>
   12864:	81400717 	ldw	r5,28(r16)
   12868:	b00d883a 	mov	r6,r22
   1286c:	980f883a 	mov	r7,r19
   12870:	9009883a 	mov	r4,r18
   12874:	a83ee83a 	callr	r21
   12878:	00ffffc4 	movi	r3,-1
   1287c:	10ff5626 	beq	r2,r3,125d8 <_fseek_r+0xf8>
   12880:	81400c17 	ldw	r5,48(r16)
   12884:	28000526 	beq	r5,zero,1289c <_fseek_r+0x3bc>
   12888:	80801004 	addi	r2,r16,64
   1288c:	28800226 	beq	r5,r2,12898 <_fseek_r+0x3b8>
   12890:	9009883a 	mov	r4,r18
   12894:	00121cc0 	call	121cc <_free_r>
   12898:	80000c15 	stw	zero,48(r16)
   1289c:	8080030b 	ldhu	r2,12(r16)
   128a0:	80c00417 	ldw	r3,16(r16)
   128a4:	0009883a 	mov	r4,zero
   128a8:	10bdf7cc 	andi	r2,r2,63455
   128ac:	8080030d 	sth	r2,12(r16)
   128b0:	80c00015 	stw	r3,0(r16)
   128b4:	80000115 	stw	zero,4(r16)
   128b8:	003f2806 	br	1255c <_fseek_r+0x7c>
   128bc:	81400717 	ldw	r5,28(r16)
   128c0:	000d883a 	mov	r6,zero
   128c4:	9009883a 	mov	r4,r18
   128c8:	01c00044 	movi	r7,1
   128cc:	a83ee83a 	callr	r21
   128d0:	100d883a 	mov	r6,r2
   128d4:	00bfffc4 	movi	r2,-1
   128d8:	30bf3b26 	beq	r6,r2,125c8 <_fseek_r+0xe8>
   128dc:	8100030b 	ldhu	r4,12(r16)
   128e0:	003f5606 	br	1263c <_fseek_r+0x15c>
   128e4:	00800744 	movi	r2,29
   128e8:	013fffc4 	movi	r4,-1
   128ec:	90800015 	stw	r2,0(r18)
   128f0:	003f1a06 	br	1255c <_fseek_r+0x7c>
   128f4:	81400717 	ldw	r5,28(r16)
   128f8:	980f883a 	mov	r7,r19
   128fc:	9009883a 	mov	r4,r18
   12900:	000d883a 	mov	r6,zero
   12904:	a83ee83a 	callr	r21
   12908:	1023883a 	mov	r17,r2
   1290c:	00bfffc4 	movi	r2,-1
   12910:	88bf3126 	beq	r17,r2,125d8 <_fseek_r+0xf8>
   12914:	8100030b 	ldhu	r4,12(r16)
   12918:	003f7006 	br	126dc <_fseek_r+0x1fc>

0001291c <fseek>:
   1291c:	008000b4 	movhi	r2,2
   12920:	1083ac04 	addi	r2,r2,3760
   12924:	2013883a 	mov	r9,r4
   12928:	11000017 	ldw	r4,0(r2)
   1292c:	2805883a 	mov	r2,r5
   12930:	300f883a 	mov	r7,r6
   12934:	480b883a 	mov	r5,r9
   12938:	100d883a 	mov	r6,r2
   1293c:	00124e01 	jmpi	124e0 <_fseek_r>

00012940 <_fstat_r>:
   12940:	defffd04 	addi	sp,sp,-12
   12944:	dc000015 	stw	r16,0(sp)
   12948:	040000b4 	movhi	r16,2
   1294c:	840ab304 	addi	r16,r16,10956
   12950:	dc400115 	stw	r17,4(sp)
   12954:	80000015 	stw	zero,0(r16)
   12958:	2023883a 	mov	r17,r4
   1295c:	2809883a 	mov	r4,r5
   12960:	300b883a 	mov	r5,r6
   12964:	dfc00215 	stw	ra,8(sp)
   12968:	001b2040 	call	1b204 <fstat>
   1296c:	1007883a 	mov	r3,r2
   12970:	00bfffc4 	movi	r2,-1
   12974:	18800626 	beq	r3,r2,12990 <_fstat_r+0x50>
   12978:	1805883a 	mov	r2,r3
   1297c:	dfc00217 	ldw	ra,8(sp)
   12980:	dc400117 	ldw	r17,4(sp)
   12984:	dc000017 	ldw	r16,0(sp)
   12988:	dec00304 	addi	sp,sp,12
   1298c:	f800283a 	ret
   12990:	80800017 	ldw	r2,0(r16)
   12994:	103ff826 	beq	r2,zero,12978 <_fstat_r+0x38>
   12998:	88800015 	stw	r2,0(r17)
   1299c:	1805883a 	mov	r2,r3
   129a0:	dfc00217 	ldw	ra,8(sp)
   129a4:	dc400117 	ldw	r17,4(sp)
   129a8:	dc000017 	ldw	r16,0(sp)
   129ac:	dec00304 	addi	sp,sp,12
   129b0:	f800283a 	ret

000129b4 <__sfvwrite_r>:
   129b4:	30800217 	ldw	r2,8(r6)
   129b8:	defff504 	addi	sp,sp,-44
   129bc:	df000915 	stw	fp,36(sp)
   129c0:	dd800715 	stw	r22,28(sp)
   129c4:	dc800315 	stw	r18,12(sp)
   129c8:	dfc00a15 	stw	ra,40(sp)
   129cc:	ddc00815 	stw	r23,32(sp)
   129d0:	dd400615 	stw	r21,24(sp)
   129d4:	dd000515 	stw	r20,20(sp)
   129d8:	dcc00415 	stw	r19,16(sp)
   129dc:	dc400215 	stw	r17,8(sp)
   129e0:	dc000115 	stw	r16,4(sp)
   129e4:	302d883a 	mov	r22,r6
   129e8:	2039883a 	mov	fp,r4
   129ec:	2825883a 	mov	r18,r5
   129f0:	10001c26 	beq	r2,zero,12a64 <__sfvwrite_r+0xb0>
   129f4:	29c0030b 	ldhu	r7,12(r5)
   129f8:	3880020c 	andi	r2,r7,8
   129fc:	10002726 	beq	r2,zero,12a9c <__sfvwrite_r+0xe8>
   12a00:	28800417 	ldw	r2,16(r5)
   12a04:	10002526 	beq	r2,zero,12a9c <__sfvwrite_r+0xe8>
   12a08:	3880008c 	andi	r2,r7,2
   12a0c:	b5400017 	ldw	r21,0(r22)
   12a10:	10002826 	beq	r2,zero,12ab4 <__sfvwrite_r+0x100>
   12a14:	0021883a 	mov	r16,zero
   12a18:	0023883a 	mov	r17,zero
   12a1c:	880d883a 	mov	r6,r17
   12a20:	e009883a 	mov	r4,fp
   12a24:	00810004 	movi	r2,1024
   12a28:	80006e26 	beq	r16,zero,12be4 <__sfvwrite_r+0x230>
   12a2c:	800f883a 	mov	r7,r16
   12a30:	91400717 	ldw	r5,28(r18)
   12a34:	1400012e 	bgeu	r2,r16,12a3c <__sfvwrite_r+0x88>
   12a38:	100f883a 	mov	r7,r2
   12a3c:	90c00917 	ldw	r3,36(r18)
   12a40:	183ee83a 	callr	r3
   12a44:	1007883a 	mov	r3,r2
   12a48:	80a1c83a 	sub	r16,r16,r2
   12a4c:	88a3883a 	add	r17,r17,r2
   12a50:	00806d0e 	bge	zero,r2,12c08 <__sfvwrite_r+0x254>
   12a54:	b0800217 	ldw	r2,8(r22)
   12a58:	10c5c83a 	sub	r2,r2,r3
   12a5c:	b0800215 	stw	r2,8(r22)
   12a60:	103fee1e 	bne	r2,zero,12a1c <__sfvwrite_r+0x68>
   12a64:	0009883a 	mov	r4,zero
   12a68:	2005883a 	mov	r2,r4
   12a6c:	dfc00a17 	ldw	ra,40(sp)
   12a70:	df000917 	ldw	fp,36(sp)
   12a74:	ddc00817 	ldw	r23,32(sp)
   12a78:	dd800717 	ldw	r22,28(sp)
   12a7c:	dd400617 	ldw	r21,24(sp)
   12a80:	dd000517 	ldw	r20,20(sp)
   12a84:	dcc00417 	ldw	r19,16(sp)
   12a88:	dc800317 	ldw	r18,12(sp)
   12a8c:	dc400217 	ldw	r17,8(sp)
   12a90:	dc000117 	ldw	r16,4(sp)
   12a94:	dec00b04 	addi	sp,sp,44
   12a98:	f800283a 	ret
   12a9c:	00170740 	call	17074 <__swsetup_r>
   12aa0:	1000e41e 	bne	r2,zero,12e34 <__sfvwrite_r+0x480>
   12aa4:	91c0030b 	ldhu	r7,12(r18)
   12aa8:	b5400017 	ldw	r21,0(r22)
   12aac:	3880008c 	andi	r2,r7,2
   12ab0:	103fd81e 	bne	r2,zero,12a14 <__sfvwrite_r+0x60>
   12ab4:	3880004c 	andi	r2,r7,1
   12ab8:	1005003a 	cmpeq	r2,r2,zero
   12abc:	10005726 	beq	r2,zero,12c1c <__sfvwrite_r+0x268>
   12ac0:	0029883a 	mov	r20,zero
   12ac4:	002f883a 	mov	r23,zero
   12ac8:	a0004226 	beq	r20,zero,12bd4 <__sfvwrite_r+0x220>
   12acc:	3880800c 	andi	r2,r7,512
   12ad0:	94000217 	ldw	r16,8(r18)
   12ad4:	10008b26 	beq	r2,zero,12d04 <__sfvwrite_r+0x350>
   12ad8:	800d883a 	mov	r6,r16
   12adc:	a400a536 	bltu	r20,r16,12d74 <__sfvwrite_r+0x3c0>
   12ae0:	3881200c 	andi	r2,r7,1152
   12ae4:	10002726 	beq	r2,zero,12b84 <__sfvwrite_r+0x1d0>
   12ae8:	90800517 	ldw	r2,20(r18)
   12aec:	92000417 	ldw	r8,16(r18)
   12af0:	91400017 	ldw	r5,0(r18)
   12af4:	1087883a 	add	r3,r2,r2
   12af8:	1887883a 	add	r3,r3,r2
   12afc:	1808d7fa 	srli	r4,r3,31
   12b00:	2a21c83a 	sub	r16,r5,r8
   12b04:	80800044 	addi	r2,r16,1
   12b08:	20c9883a 	add	r4,r4,r3
   12b0c:	2027d07a 	srai	r19,r4,1
   12b10:	a085883a 	add	r2,r20,r2
   12b14:	980d883a 	mov	r6,r19
   12b18:	9880022e 	bgeu	r19,r2,12b24 <__sfvwrite_r+0x170>
   12b1c:	1027883a 	mov	r19,r2
   12b20:	100d883a 	mov	r6,r2
   12b24:	3881000c 	andi	r2,r7,1024
   12b28:	1000b826 	beq	r2,zero,12e0c <__sfvwrite_r+0x458>
   12b2c:	300b883a 	mov	r5,r6
   12b30:	e009883a 	mov	r4,fp
   12b34:	001318c0 	call	1318c <_malloc_r>
   12b38:	10003126 	beq	r2,zero,12c00 <__sfvwrite_r+0x24c>
   12b3c:	91400417 	ldw	r5,16(r18)
   12b40:	1009883a 	mov	r4,r2
   12b44:	800d883a 	mov	r6,r16
   12b48:	1023883a 	mov	r17,r2
   12b4c:	0013a240 	call	13a24 <memcpy>
   12b50:	90c0030b 	ldhu	r3,12(r18)
   12b54:	00beffc4 	movi	r2,-1025
   12b58:	1886703a 	and	r3,r3,r2
   12b5c:	18c02014 	ori	r3,r3,128
   12b60:	90c0030d 	sth	r3,12(r18)
   12b64:	9c07c83a 	sub	r3,r19,r16
   12b68:	8c05883a 	add	r2,r17,r16
   12b6c:	a00d883a 	mov	r6,r20
   12b70:	a021883a 	mov	r16,r20
   12b74:	90800015 	stw	r2,0(r18)
   12b78:	90c00215 	stw	r3,8(r18)
   12b7c:	94400415 	stw	r17,16(r18)
   12b80:	94c00515 	stw	r19,20(r18)
   12b84:	91000017 	ldw	r4,0(r18)
   12b88:	b80b883a 	mov	r5,r23
   12b8c:	a023883a 	mov	r17,r20
   12b90:	0013ac40 	call	13ac4 <memmove>
   12b94:	90c00217 	ldw	r3,8(r18)
   12b98:	90800017 	ldw	r2,0(r18)
   12b9c:	a027883a 	mov	r19,r20
   12ba0:	1c07c83a 	sub	r3,r3,r16
   12ba4:	1405883a 	add	r2,r2,r16
   12ba8:	90c00215 	stw	r3,8(r18)
   12bac:	a021883a 	mov	r16,r20
   12bb0:	90800015 	stw	r2,0(r18)
   12bb4:	b0800217 	ldw	r2,8(r22)
   12bb8:	1405c83a 	sub	r2,r2,r16
   12bbc:	b0800215 	stw	r2,8(r22)
   12bc0:	103fa826 	beq	r2,zero,12a64 <__sfvwrite_r+0xb0>
   12bc4:	a469c83a 	sub	r20,r20,r17
   12bc8:	91c0030b 	ldhu	r7,12(r18)
   12bcc:	bcef883a 	add	r23,r23,r19
   12bd0:	a03fbe1e 	bne	r20,zero,12acc <__sfvwrite_r+0x118>
   12bd4:	adc00017 	ldw	r23,0(r21)
   12bd8:	ad000117 	ldw	r20,4(r21)
   12bdc:	ad400204 	addi	r21,r21,8
   12be0:	003fb906 	br	12ac8 <__sfvwrite_r+0x114>
   12be4:	ac400017 	ldw	r17,0(r21)
   12be8:	ac000117 	ldw	r16,4(r21)
   12bec:	ad400204 	addi	r21,r21,8
   12bf0:	003f8a06 	br	12a1c <__sfvwrite_r+0x68>
   12bf4:	91400417 	ldw	r5,16(r18)
   12bf8:	e009883a 	mov	r4,fp
   12bfc:	00121cc0 	call	121cc <_free_r>
   12c00:	00800304 	movi	r2,12
   12c04:	e0800015 	stw	r2,0(fp)
   12c08:	9080030b 	ldhu	r2,12(r18)
   12c0c:	013fffc4 	movi	r4,-1
   12c10:	10801014 	ori	r2,r2,64
   12c14:	9080030d 	sth	r2,12(r18)
   12c18:	003f9306 	br	12a68 <__sfvwrite_r+0xb4>
   12c1c:	0027883a 	mov	r19,zero
   12c20:	002f883a 	mov	r23,zero
   12c24:	d8000015 	stw	zero,0(sp)
   12c28:	0029883a 	mov	r20,zero
   12c2c:	98001e26 	beq	r19,zero,12ca8 <__sfvwrite_r+0x2f4>
   12c30:	d8c00017 	ldw	r3,0(sp)
   12c34:	1804c03a 	cmpne	r2,r3,zero
   12c38:	10005e26 	beq	r2,zero,12db4 <__sfvwrite_r+0x400>
   12c3c:	9821883a 	mov	r16,r19
   12c40:	a4c0012e 	bgeu	r20,r19,12c48 <__sfvwrite_r+0x294>
   12c44:	a021883a 	mov	r16,r20
   12c48:	91000017 	ldw	r4,0(r18)
   12c4c:	90800417 	ldw	r2,16(r18)
   12c50:	91800217 	ldw	r6,8(r18)
   12c54:	91c00517 	ldw	r7,20(r18)
   12c58:	1100022e 	bgeu	r2,r4,12c64 <__sfvwrite_r+0x2b0>
   12c5c:	31e3883a 	add	r17,r6,r7
   12c60:	8c001616 	blt	r17,r16,12cbc <__sfvwrite_r+0x308>
   12c64:	81c03816 	blt	r16,r7,12d48 <__sfvwrite_r+0x394>
   12c68:	90c00917 	ldw	r3,36(r18)
   12c6c:	91400717 	ldw	r5,28(r18)
   12c70:	e009883a 	mov	r4,fp
   12c74:	b80d883a 	mov	r6,r23
   12c78:	183ee83a 	callr	r3
   12c7c:	1023883a 	mov	r17,r2
   12c80:	00bfe10e 	bge	zero,r2,12c08 <__sfvwrite_r+0x254>
   12c84:	a469c83a 	sub	r20,r20,r17
   12c88:	a0001826 	beq	r20,zero,12cec <__sfvwrite_r+0x338>
   12c8c:	b0800217 	ldw	r2,8(r22)
   12c90:	1445c83a 	sub	r2,r2,r17
   12c94:	b0800215 	stw	r2,8(r22)
   12c98:	103f7226 	beq	r2,zero,12a64 <__sfvwrite_r+0xb0>
   12c9c:	9c67c83a 	sub	r19,r19,r17
   12ca0:	bc6f883a 	add	r23,r23,r17
   12ca4:	983fe21e 	bne	r19,zero,12c30 <__sfvwrite_r+0x27c>
   12ca8:	adc00017 	ldw	r23,0(r21)
   12cac:	acc00117 	ldw	r19,4(r21)
   12cb0:	ad400204 	addi	r21,r21,8
   12cb4:	d8000015 	stw	zero,0(sp)
   12cb8:	003fdc06 	br	12c2c <__sfvwrite_r+0x278>
   12cbc:	b80b883a 	mov	r5,r23
   12cc0:	880d883a 	mov	r6,r17
   12cc4:	0013ac40 	call	13ac4 <memmove>
   12cc8:	90c00017 	ldw	r3,0(r18)
   12ccc:	e009883a 	mov	r4,fp
   12cd0:	900b883a 	mov	r5,r18
   12cd4:	1c47883a 	add	r3,r3,r17
   12cd8:	90c00015 	stw	r3,0(r18)
   12cdc:	00117e80 	call	117e8 <_fflush_r>
   12ce0:	103fc91e 	bne	r2,zero,12c08 <__sfvwrite_r+0x254>
   12ce4:	a469c83a 	sub	r20,r20,r17
   12ce8:	a03fe81e 	bne	r20,zero,12c8c <__sfvwrite_r+0x2d8>
   12cec:	e009883a 	mov	r4,fp
   12cf0:	900b883a 	mov	r5,r18
   12cf4:	00117e80 	call	117e8 <_fflush_r>
   12cf8:	103fc31e 	bne	r2,zero,12c08 <__sfvwrite_r+0x254>
   12cfc:	d8000015 	stw	zero,0(sp)
   12d00:	003fe206 	br	12c8c <__sfvwrite_r+0x2d8>
   12d04:	91000017 	ldw	r4,0(r18)
   12d08:	90800417 	ldw	r2,16(r18)
   12d0c:	1100022e 	bgeu	r2,r4,12d18 <__sfvwrite_r+0x364>
   12d10:	8023883a 	mov	r17,r16
   12d14:	85003136 	bltu	r16,r20,12ddc <__sfvwrite_r+0x428>
   12d18:	91c00517 	ldw	r7,20(r18)
   12d1c:	a1c01836 	bltu	r20,r7,12d80 <__sfvwrite_r+0x3cc>
   12d20:	90c00917 	ldw	r3,36(r18)
   12d24:	91400717 	ldw	r5,28(r18)
   12d28:	e009883a 	mov	r4,fp
   12d2c:	b80d883a 	mov	r6,r23
   12d30:	183ee83a 	callr	r3
   12d34:	1021883a 	mov	r16,r2
   12d38:	00bfb30e 	bge	zero,r2,12c08 <__sfvwrite_r+0x254>
   12d3c:	1023883a 	mov	r17,r2
   12d40:	1027883a 	mov	r19,r2
   12d44:	003f9b06 	br	12bb4 <__sfvwrite_r+0x200>
   12d48:	b80b883a 	mov	r5,r23
   12d4c:	800d883a 	mov	r6,r16
   12d50:	0013ac40 	call	13ac4 <memmove>
   12d54:	90c00217 	ldw	r3,8(r18)
   12d58:	90800017 	ldw	r2,0(r18)
   12d5c:	8023883a 	mov	r17,r16
   12d60:	1c07c83a 	sub	r3,r3,r16
   12d64:	1405883a 	add	r2,r2,r16
   12d68:	90c00215 	stw	r3,8(r18)
   12d6c:	90800015 	stw	r2,0(r18)
   12d70:	003fc406 	br	12c84 <__sfvwrite_r+0x2d0>
   12d74:	a00d883a 	mov	r6,r20
   12d78:	a021883a 	mov	r16,r20
   12d7c:	003f8106 	br	12b84 <__sfvwrite_r+0x1d0>
   12d80:	b80b883a 	mov	r5,r23
   12d84:	a00d883a 	mov	r6,r20
   12d88:	0013ac40 	call	13ac4 <memmove>
   12d8c:	90c00217 	ldw	r3,8(r18)
   12d90:	90800017 	ldw	r2,0(r18)
   12d94:	a021883a 	mov	r16,r20
   12d98:	1d07c83a 	sub	r3,r3,r20
   12d9c:	1505883a 	add	r2,r2,r20
   12da0:	a023883a 	mov	r17,r20
   12da4:	a027883a 	mov	r19,r20
   12da8:	90c00215 	stw	r3,8(r18)
   12dac:	90800015 	stw	r2,0(r18)
   12db0:	003f8006 	br	12bb4 <__sfvwrite_r+0x200>
   12db4:	b809883a 	mov	r4,r23
   12db8:	01400284 	movi	r5,10
   12dbc:	980d883a 	mov	r6,r19
   12dc0:	00138cc0 	call	138cc <memchr>
   12dc4:	10001726 	beq	r2,zero,12e24 <__sfvwrite_r+0x470>
   12dc8:	15c5c83a 	sub	r2,r2,r23
   12dcc:	15000044 	addi	r20,r2,1
   12dd0:	00800044 	movi	r2,1
   12dd4:	d8800015 	stw	r2,0(sp)
   12dd8:	003f9806 	br	12c3c <__sfvwrite_r+0x288>
   12ddc:	b80b883a 	mov	r5,r23
   12de0:	800d883a 	mov	r6,r16
   12de4:	0013ac40 	call	13ac4 <memmove>
   12de8:	90c00017 	ldw	r3,0(r18)
   12dec:	e009883a 	mov	r4,fp
   12df0:	900b883a 	mov	r5,r18
   12df4:	1c07883a 	add	r3,r3,r16
   12df8:	90c00015 	stw	r3,0(r18)
   12dfc:	8027883a 	mov	r19,r16
   12e00:	00117e80 	call	117e8 <_fflush_r>
   12e04:	103f6b26 	beq	r2,zero,12bb4 <__sfvwrite_r+0x200>
   12e08:	003f7f06 	br	12c08 <__sfvwrite_r+0x254>
   12e0c:	400b883a 	mov	r5,r8
   12e10:	e009883a 	mov	r4,fp
   12e14:	0013fcc0 	call	13fcc <_realloc_r>
   12e18:	103f7626 	beq	r2,zero,12bf4 <__sfvwrite_r+0x240>
   12e1c:	1023883a 	mov	r17,r2
   12e20:	003f5006 	br	12b64 <__sfvwrite_r+0x1b0>
   12e24:	00c00044 	movi	r3,1
   12e28:	9d000044 	addi	r20,r19,1
   12e2c:	d8c00015 	stw	r3,0(sp)
   12e30:	003f8206 	br	12c3c <__sfvwrite_r+0x288>
   12e34:	9080030b 	ldhu	r2,12(r18)
   12e38:	00c00244 	movi	r3,9
   12e3c:	013fffc4 	movi	r4,-1
   12e40:	10801014 	ori	r2,r2,64
   12e44:	9080030d 	sth	r2,12(r18)
   12e48:	e0c00015 	stw	r3,0(fp)
   12e4c:	003f0606 	br	12a68 <__sfvwrite_r+0xb4>

00012e50 <_fwalk_reent>:
   12e50:	defff704 	addi	sp,sp,-36
   12e54:	dcc00315 	stw	r19,12(sp)
   12e58:	24c0b804 	addi	r19,r4,736
   12e5c:	dd800615 	stw	r22,24(sp)
   12e60:	dd400515 	stw	r21,20(sp)
   12e64:	dfc00815 	stw	ra,32(sp)
   12e68:	ddc00715 	stw	r23,28(sp)
   12e6c:	dd000415 	stw	r20,16(sp)
   12e70:	dc800215 	stw	r18,8(sp)
   12e74:	dc400115 	stw	r17,4(sp)
   12e78:	dc000015 	stw	r16,0(sp)
   12e7c:	202b883a 	mov	r21,r4
   12e80:	282d883a 	mov	r22,r5
   12e84:	0011bdc0 	call	11bdc <__sfp_lock_acquire>
   12e88:	98002126 	beq	r19,zero,12f10 <_fwalk_reent+0xc0>
   12e8c:	002f883a 	mov	r23,zero
   12e90:	9c800117 	ldw	r18,4(r19)
   12e94:	9c000217 	ldw	r16,8(r19)
   12e98:	90bfffc4 	addi	r2,r18,-1
   12e9c:	10000d16 	blt	r2,zero,12ed4 <_fwalk_reent+0x84>
   12ea0:	0023883a 	mov	r17,zero
   12ea4:	053fffc4 	movi	r20,-1
   12ea8:	8080030f 	ldh	r2,12(r16)
   12eac:	8c400044 	addi	r17,r17,1
   12eb0:	10000626 	beq	r2,zero,12ecc <_fwalk_reent+0x7c>
   12eb4:	8080038f 	ldh	r2,14(r16)
   12eb8:	800b883a 	mov	r5,r16
   12ebc:	a809883a 	mov	r4,r21
   12ec0:	15000226 	beq	r2,r20,12ecc <_fwalk_reent+0x7c>
   12ec4:	b03ee83a 	callr	r22
   12ec8:	b8aeb03a 	or	r23,r23,r2
   12ecc:	84001704 	addi	r16,r16,92
   12ed0:	947ff51e 	bne	r18,r17,12ea8 <_fwalk_reent+0x58>
   12ed4:	9cc00017 	ldw	r19,0(r19)
   12ed8:	983fed1e 	bne	r19,zero,12e90 <_fwalk_reent+0x40>
   12edc:	0011be00 	call	11be0 <__sfp_lock_release>
   12ee0:	b805883a 	mov	r2,r23
   12ee4:	dfc00817 	ldw	ra,32(sp)
   12ee8:	ddc00717 	ldw	r23,28(sp)
   12eec:	dd800617 	ldw	r22,24(sp)
   12ef0:	dd400517 	ldw	r21,20(sp)
   12ef4:	dd000417 	ldw	r20,16(sp)
   12ef8:	dcc00317 	ldw	r19,12(sp)
   12efc:	dc800217 	ldw	r18,8(sp)
   12f00:	dc400117 	ldw	r17,4(sp)
   12f04:	dc000017 	ldw	r16,0(sp)
   12f08:	dec00904 	addi	sp,sp,36
   12f0c:	f800283a 	ret
   12f10:	002f883a 	mov	r23,zero
   12f14:	003ff106 	br	12edc <_fwalk_reent+0x8c>

00012f18 <_fwalk>:
   12f18:	defff804 	addi	sp,sp,-32
   12f1c:	dcc00315 	stw	r19,12(sp)
   12f20:	24c0b804 	addi	r19,r4,736
   12f24:	dd400515 	stw	r21,20(sp)
   12f28:	dfc00715 	stw	ra,28(sp)
   12f2c:	dd800615 	stw	r22,24(sp)
   12f30:	dd000415 	stw	r20,16(sp)
   12f34:	dc800215 	stw	r18,8(sp)
   12f38:	dc400115 	stw	r17,4(sp)
   12f3c:	dc000015 	stw	r16,0(sp)
   12f40:	282b883a 	mov	r21,r5
   12f44:	0011bdc0 	call	11bdc <__sfp_lock_acquire>
   12f48:	98001f26 	beq	r19,zero,12fc8 <_fwalk+0xb0>
   12f4c:	002d883a 	mov	r22,zero
   12f50:	9c800117 	ldw	r18,4(r19)
   12f54:	9c000217 	ldw	r16,8(r19)
   12f58:	90bfffc4 	addi	r2,r18,-1
   12f5c:	10000c16 	blt	r2,zero,12f90 <_fwalk+0x78>
   12f60:	0023883a 	mov	r17,zero
   12f64:	053fffc4 	movi	r20,-1
   12f68:	8080030f 	ldh	r2,12(r16)
   12f6c:	8c400044 	addi	r17,r17,1
   12f70:	10000526 	beq	r2,zero,12f88 <_fwalk+0x70>
   12f74:	8080038f 	ldh	r2,14(r16)
   12f78:	8009883a 	mov	r4,r16
   12f7c:	15000226 	beq	r2,r20,12f88 <_fwalk+0x70>
   12f80:	a83ee83a 	callr	r21
   12f84:	b0acb03a 	or	r22,r22,r2
   12f88:	84001704 	addi	r16,r16,92
   12f8c:	947ff61e 	bne	r18,r17,12f68 <_fwalk+0x50>
   12f90:	9cc00017 	ldw	r19,0(r19)
   12f94:	983fee1e 	bne	r19,zero,12f50 <_fwalk+0x38>
   12f98:	0011be00 	call	11be0 <__sfp_lock_release>
   12f9c:	b005883a 	mov	r2,r22
   12fa0:	dfc00717 	ldw	ra,28(sp)
   12fa4:	dd800617 	ldw	r22,24(sp)
   12fa8:	dd400517 	ldw	r21,20(sp)
   12fac:	dd000417 	ldw	r20,16(sp)
   12fb0:	dcc00317 	ldw	r19,12(sp)
   12fb4:	dc800217 	ldw	r18,8(sp)
   12fb8:	dc400117 	ldw	r17,4(sp)
   12fbc:	dc000017 	ldw	r16,0(sp)
   12fc0:	dec00804 	addi	sp,sp,32
   12fc4:	f800283a 	ret
   12fc8:	002d883a 	mov	r22,zero
   12fcc:	003ff206 	br	12f98 <_fwalk+0x80>

00012fd0 <__smakebuf_r>:
   12fd0:	2880030b 	ldhu	r2,12(r5)
   12fd4:	deffed04 	addi	sp,sp,-76
   12fd8:	dc401015 	stw	r17,64(sp)
   12fdc:	1080008c 	andi	r2,r2,2
   12fe0:	dc000f15 	stw	r16,60(sp)
   12fe4:	dfc01215 	stw	ra,72(sp)
   12fe8:	dc801115 	stw	r18,68(sp)
   12fec:	2821883a 	mov	r16,r5
   12ff0:	2023883a 	mov	r17,r4
   12ff4:	10000b26 	beq	r2,zero,13024 <__smakebuf_r+0x54>
   12ff8:	28c010c4 	addi	r3,r5,67
   12ffc:	00800044 	movi	r2,1
   13000:	28800515 	stw	r2,20(r5)
   13004:	28c00415 	stw	r3,16(r5)
   13008:	28c00015 	stw	r3,0(r5)
   1300c:	dfc01217 	ldw	ra,72(sp)
   13010:	dc801117 	ldw	r18,68(sp)
   13014:	dc401017 	ldw	r17,64(sp)
   13018:	dc000f17 	ldw	r16,60(sp)
   1301c:	dec01304 	addi	sp,sp,76
   13020:	f800283a 	ret
   13024:	2940038f 	ldh	r5,14(r5)
   13028:	28002116 	blt	r5,zero,130b0 <__smakebuf_r+0xe0>
   1302c:	d80d883a 	mov	r6,sp
   13030:	00129400 	call	12940 <_fstat_r>
   13034:	10001e16 	blt	r2,zero,130b0 <__smakebuf_r+0xe0>
   13038:	d8800117 	ldw	r2,4(sp)
   1303c:	00e00014 	movui	r3,32768
   13040:	113c000c 	andi	r4,r2,61440
   13044:	20c03126 	beq	r4,r3,1310c <__smakebuf_r+0x13c>
   13048:	8080030b 	ldhu	r2,12(r16)
   1304c:	00c80004 	movi	r3,8192
   13050:	10820014 	ori	r2,r2,2048
   13054:	8080030d 	sth	r2,12(r16)
   13058:	20c01e26 	beq	r4,r3,130d4 <__smakebuf_r+0x104>
   1305c:	04810004 	movi	r18,1024
   13060:	8809883a 	mov	r4,r17
   13064:	900b883a 	mov	r5,r18
   13068:	001318c0 	call	1318c <_malloc_r>
   1306c:	1009883a 	mov	r4,r2
   13070:	10003126 	beq	r2,zero,13138 <__smakebuf_r+0x168>
   13074:	80c0030b 	ldhu	r3,12(r16)
   13078:	00800074 	movhi	r2,1
   1307c:	10873404 	addi	r2,r2,7376
   13080:	88800f15 	stw	r2,60(r17)
   13084:	18c02014 	ori	r3,r3,128
   13088:	84800515 	stw	r18,20(r16)
   1308c:	80c0030d 	sth	r3,12(r16)
   13090:	81000415 	stw	r4,16(r16)
   13094:	81000015 	stw	r4,0(r16)
   13098:	dfc01217 	ldw	ra,72(sp)
   1309c:	dc801117 	ldw	r18,68(sp)
   130a0:	dc401017 	ldw	r17,64(sp)
   130a4:	dc000f17 	ldw	r16,60(sp)
   130a8:	dec01304 	addi	sp,sp,76
   130ac:	f800283a 	ret
   130b0:	80c0030b 	ldhu	r3,12(r16)
   130b4:	1880200c 	andi	r2,r3,128
   130b8:	10000426 	beq	r2,zero,130cc <__smakebuf_r+0xfc>
   130bc:	04801004 	movi	r18,64
   130c0:	18820014 	ori	r2,r3,2048
   130c4:	8080030d 	sth	r2,12(r16)
   130c8:	003fe506 	br	13060 <__smakebuf_r+0x90>
   130cc:	04810004 	movi	r18,1024
   130d0:	003ffb06 	br	130c0 <__smakebuf_r+0xf0>
   130d4:	8140038f 	ldh	r5,14(r16)
   130d8:	8809883a 	mov	r4,r17
   130dc:	0018a8c0 	call	18a8c <_isatty_r>
   130e0:	103fde26 	beq	r2,zero,1305c <__smakebuf_r+0x8c>
   130e4:	8080030b 	ldhu	r2,12(r16)
   130e8:	80c010c4 	addi	r3,r16,67
   130ec:	04810004 	movi	r18,1024
   130f0:	10800054 	ori	r2,r2,1
   130f4:	8080030d 	sth	r2,12(r16)
   130f8:	00800044 	movi	r2,1
   130fc:	80c00415 	stw	r3,16(r16)
   13100:	80800515 	stw	r2,20(r16)
   13104:	80c00015 	stw	r3,0(r16)
   13108:	003fd506 	br	13060 <__smakebuf_r+0x90>
   1310c:	80c00a17 	ldw	r3,40(r16)
   13110:	00800074 	movhi	r2,1
   13114:	1092da04 	addi	r2,r2,19304
   13118:	18bfcb1e 	bne	r3,r2,13048 <__smakebuf_r+0x78>
   1311c:	8080030b 	ldhu	r2,12(r16)
   13120:	00c10004 	movi	r3,1024
   13124:	1825883a 	mov	r18,r3
   13128:	10c4b03a 	or	r2,r2,r3
   1312c:	8080030d 	sth	r2,12(r16)
   13130:	80c01315 	stw	r3,76(r16)
   13134:	003fca06 	br	13060 <__smakebuf_r+0x90>
   13138:	8100030b 	ldhu	r4,12(r16)
   1313c:	2080800c 	andi	r2,r4,512
   13140:	103fb21e 	bne	r2,zero,1300c <__smakebuf_r+0x3c>
   13144:	80c010c4 	addi	r3,r16,67
   13148:	21000094 	ori	r4,r4,2
   1314c:	00800044 	movi	r2,1
   13150:	80800515 	stw	r2,20(r16)
   13154:	8100030d 	sth	r4,12(r16)
   13158:	80c00415 	stw	r3,16(r16)
   1315c:	80c00015 	stw	r3,0(r16)
   13160:	003faa06 	br	1300c <__smakebuf_r+0x3c>

00013164 <free>:
   13164:	008000b4 	movhi	r2,2
   13168:	1083ac04 	addi	r2,r2,3760
   1316c:	200b883a 	mov	r5,r4
   13170:	11000017 	ldw	r4,0(r2)
   13174:	00121cc1 	jmpi	121cc <_free_r>

00013178 <malloc>:
   13178:	008000b4 	movhi	r2,2
   1317c:	1083ac04 	addi	r2,r2,3760
   13180:	200b883a 	mov	r5,r4
   13184:	11000017 	ldw	r4,0(r2)
   13188:	001318c1 	jmpi	1318c <_malloc_r>

0001318c <_malloc_r>:
   1318c:	defff604 	addi	sp,sp,-40
   13190:	28c002c4 	addi	r3,r5,11
   13194:	00800584 	movi	r2,22
   13198:	dc800215 	stw	r18,8(sp)
   1319c:	dfc00915 	stw	ra,36(sp)
   131a0:	df000815 	stw	fp,32(sp)
   131a4:	ddc00715 	stw	r23,28(sp)
   131a8:	dd800615 	stw	r22,24(sp)
   131ac:	dd400515 	stw	r21,20(sp)
   131b0:	dd000415 	stw	r20,16(sp)
   131b4:	dcc00315 	stw	r19,12(sp)
   131b8:	dc400115 	stw	r17,4(sp)
   131bc:	dc000015 	stw	r16,0(sp)
   131c0:	2025883a 	mov	r18,r4
   131c4:	10c01236 	bltu	r2,r3,13210 <_malloc_r+0x84>
   131c8:	04400404 	movi	r17,16
   131cc:	8940142e 	bgeu	r17,r5,13220 <_malloc_r+0x94>
   131d0:	00800304 	movi	r2,12
   131d4:	0007883a 	mov	r3,zero
   131d8:	90800015 	stw	r2,0(r18)
   131dc:	1805883a 	mov	r2,r3
   131e0:	dfc00917 	ldw	ra,36(sp)
   131e4:	df000817 	ldw	fp,32(sp)
   131e8:	ddc00717 	ldw	r23,28(sp)
   131ec:	dd800617 	ldw	r22,24(sp)
   131f0:	dd400517 	ldw	r21,20(sp)
   131f4:	dd000417 	ldw	r20,16(sp)
   131f8:	dcc00317 	ldw	r19,12(sp)
   131fc:	dc800217 	ldw	r18,8(sp)
   13200:	dc400117 	ldw	r17,4(sp)
   13204:	dc000017 	ldw	r16,0(sp)
   13208:	dec00a04 	addi	sp,sp,40
   1320c:	f800283a 	ret
   13210:	00bffe04 	movi	r2,-8
   13214:	18a2703a 	and	r17,r3,r2
   13218:	883fed16 	blt	r17,zero,131d0 <_malloc_r+0x44>
   1321c:	897fec36 	bltu	r17,r5,131d0 <_malloc_r+0x44>
   13220:	9009883a 	mov	r4,r18
   13224:	001b8c00 	call	1b8c0 <__malloc_lock>
   13228:	00807dc4 	movi	r2,503
   1322c:	14402b2e 	bgeu	r2,r17,132dc <_malloc_r+0x150>
   13230:	8806d27a 	srli	r3,r17,9
   13234:	18003f1e 	bne	r3,zero,13334 <_malloc_r+0x1a8>
   13238:	880cd0fa 	srli	r6,r17,3
   1323c:	300490fa 	slli	r2,r6,3
   13240:	02c000b4 	movhi	r11,2
   13244:	5afdfc04 	addi	r11,r11,-2064
   13248:	12cb883a 	add	r5,r2,r11
   1324c:	2c000317 	ldw	r16,12(r5)
   13250:	580f883a 	mov	r7,r11
   13254:	2c00041e 	bne	r5,r16,13268 <_malloc_r+0xdc>
   13258:	00000a06 	br	13284 <_malloc_r+0xf8>
   1325c:	1800860e 	bge	r3,zero,13478 <_malloc_r+0x2ec>
   13260:	84000317 	ldw	r16,12(r16)
   13264:	2c000726 	beq	r5,r16,13284 <_malloc_r+0xf8>
   13268:	80800117 	ldw	r2,4(r16)
   1326c:	00ffff04 	movi	r3,-4
   13270:	10c8703a 	and	r4,r2,r3
   13274:	2447c83a 	sub	r3,r4,r17
   13278:	008003c4 	movi	r2,15
   1327c:	10fff70e 	bge	r2,r3,1325c <_malloc_r+0xd0>
   13280:	31bfffc4 	addi	r6,r6,-1
   13284:	32400044 	addi	r9,r6,1
   13288:	028000b4 	movhi	r10,2
   1328c:	52bdfe04 	addi	r10,r10,-2056
   13290:	54000217 	ldw	r16,8(r10)
   13294:	8280a026 	beq	r16,r10,13518 <_malloc_r+0x38c>
   13298:	80800117 	ldw	r2,4(r16)
   1329c:	00ffff04 	movi	r3,-4
   132a0:	10ca703a 	and	r5,r2,r3
   132a4:	2c4dc83a 	sub	r6,r5,r17
   132a8:	008003c4 	movi	r2,15
   132ac:	11808316 	blt	r2,r6,134bc <_malloc_r+0x330>
   132b0:	52800315 	stw	r10,12(r10)
   132b4:	52800215 	stw	r10,8(r10)
   132b8:	30002916 	blt	r6,zero,13360 <_malloc_r+0x1d4>
   132bc:	8147883a 	add	r3,r16,r5
   132c0:	18800117 	ldw	r2,4(r3)
   132c4:	9009883a 	mov	r4,r18
   132c8:	10800054 	ori	r2,r2,1
   132cc:	18800115 	stw	r2,4(r3)
   132d0:	001b8e00 	call	1b8e0 <__malloc_unlock>
   132d4:	80c00204 	addi	r3,r16,8
   132d8:	003fc006 	br	131dc <_malloc_r+0x50>
   132dc:	02c000b4 	movhi	r11,2
   132e0:	5afdfc04 	addi	r11,r11,-2064
   132e4:	8ac5883a 	add	r2,r17,r11
   132e8:	14000317 	ldw	r16,12(r2)
   132ec:	580f883a 	mov	r7,r11
   132f0:	8806d0fa 	srli	r3,r17,3
   132f4:	14006c26 	beq	r2,r16,134a8 <_malloc_r+0x31c>
   132f8:	80c00117 	ldw	r3,4(r16)
   132fc:	00bfff04 	movi	r2,-4
   13300:	81800317 	ldw	r6,12(r16)
   13304:	1886703a 	and	r3,r3,r2
   13308:	80c7883a 	add	r3,r16,r3
   1330c:	18800117 	ldw	r2,4(r3)
   13310:	81400217 	ldw	r5,8(r16)
   13314:	9009883a 	mov	r4,r18
   13318:	10800054 	ori	r2,r2,1
   1331c:	18800115 	stw	r2,4(r3)
   13320:	31400215 	stw	r5,8(r6)
   13324:	29800315 	stw	r6,12(r5)
   13328:	001b8e00 	call	1b8e0 <__malloc_unlock>
   1332c:	80c00204 	addi	r3,r16,8
   13330:	003faa06 	br	131dc <_malloc_r+0x50>
   13334:	00800104 	movi	r2,4
   13338:	10c0052e 	bgeu	r2,r3,13350 <_malloc_r+0x1c4>
   1333c:	00800504 	movi	r2,20
   13340:	10c07836 	bltu	r2,r3,13524 <_malloc_r+0x398>
   13344:	198016c4 	addi	r6,r3,91
   13348:	300490fa 	slli	r2,r6,3
   1334c:	003fbc06 	br	13240 <_malloc_r+0xb4>
   13350:	8804d1ba 	srli	r2,r17,6
   13354:	11800e04 	addi	r6,r2,56
   13358:	300490fa 	slli	r2,r6,3
   1335c:	003fb806 	br	13240 <_malloc_r+0xb4>
   13360:	00807fc4 	movi	r2,511
   13364:	1140bb36 	bltu	r2,r5,13654 <_malloc_r+0x4c8>
   13368:	2806d0fa 	srli	r3,r5,3
   1336c:	573ffe04 	addi	fp,r10,-8
   13370:	00800044 	movi	r2,1
   13374:	180890fa 	slli	r4,r3,3
   13378:	1807d0ba 	srai	r3,r3,2
   1337c:	e1c00117 	ldw	r7,4(fp)
   13380:	5909883a 	add	r4,r11,r4
   13384:	21400217 	ldw	r5,8(r4)
   13388:	10c4983a 	sll	r2,r2,r3
   1338c:	81000315 	stw	r4,12(r16)
   13390:	81400215 	stw	r5,8(r16)
   13394:	388eb03a 	or	r7,r7,r2
   13398:	2c000315 	stw	r16,12(r5)
   1339c:	24000215 	stw	r16,8(r4)
   133a0:	e1c00115 	stw	r7,4(fp)
   133a4:	4807883a 	mov	r3,r9
   133a8:	4800cd16 	blt	r9,zero,136e0 <_malloc_r+0x554>
   133ac:	1807d0ba 	srai	r3,r3,2
   133b0:	00800044 	movi	r2,1
   133b4:	10c8983a 	sll	r4,r2,r3
   133b8:	39004436 	bltu	r7,r4,134cc <_malloc_r+0x340>
   133bc:	21c4703a 	and	r2,r4,r7
   133c0:	10000a1e 	bne	r2,zero,133ec <_malloc_r+0x260>
   133c4:	2109883a 	add	r4,r4,r4
   133c8:	00bfff04 	movi	r2,-4
   133cc:	4884703a 	and	r2,r9,r2
   133d0:	3906703a 	and	r3,r7,r4
   133d4:	12400104 	addi	r9,r2,4
   133d8:	1800041e 	bne	r3,zero,133ec <_malloc_r+0x260>
   133dc:	2109883a 	add	r4,r4,r4
   133e0:	3904703a 	and	r2,r7,r4
   133e4:	4a400104 	addi	r9,r9,4
   133e8:	103ffc26 	beq	r2,zero,133dc <_malloc_r+0x250>
   133ec:	480490fa 	slli	r2,r9,3
   133f0:	4819883a 	mov	r12,r9
   133f4:	023fff04 	movi	r8,-4
   133f8:	589b883a 	add	r13,r11,r2
   133fc:	6807883a 	mov	r3,r13
   13400:	014003c4 	movi	r5,15
   13404:	1c000317 	ldw	r16,12(r3)
   13408:	1c00041e 	bne	r3,r16,1341c <_malloc_r+0x290>
   1340c:	0000a706 	br	136ac <_malloc_r+0x520>
   13410:	3000ab0e 	bge	r6,zero,136c0 <_malloc_r+0x534>
   13414:	84000317 	ldw	r16,12(r16)
   13418:	1c00a426 	beq	r3,r16,136ac <_malloc_r+0x520>
   1341c:	80800117 	ldw	r2,4(r16)
   13420:	1204703a 	and	r2,r2,r8
   13424:	144dc83a 	sub	r6,r2,r17
   13428:	29bff90e 	bge	r5,r6,13410 <_malloc_r+0x284>
   1342c:	81000317 	ldw	r4,12(r16)
   13430:	80c00217 	ldw	r3,8(r16)
   13434:	89400054 	ori	r5,r17,1
   13438:	8445883a 	add	r2,r16,r17
   1343c:	20c00215 	stw	r3,8(r4)
   13440:	19000315 	stw	r4,12(r3)
   13444:	81400115 	stw	r5,4(r16)
   13448:	1187883a 	add	r3,r2,r6
   1344c:	31000054 	ori	r4,r6,1
   13450:	50800315 	stw	r2,12(r10)
   13454:	50800215 	stw	r2,8(r10)
   13458:	19800015 	stw	r6,0(r3)
   1345c:	11000115 	stw	r4,4(r2)
   13460:	12800215 	stw	r10,8(r2)
   13464:	12800315 	stw	r10,12(r2)
   13468:	9009883a 	mov	r4,r18
   1346c:	001b8e00 	call	1b8e0 <__malloc_unlock>
   13470:	80c00204 	addi	r3,r16,8
   13474:	003f5906 	br	131dc <_malloc_r+0x50>
   13478:	8109883a 	add	r4,r16,r4
   1347c:	20800117 	ldw	r2,4(r4)
   13480:	80c00217 	ldw	r3,8(r16)
   13484:	81400317 	ldw	r5,12(r16)
   13488:	10800054 	ori	r2,r2,1
   1348c:	20800115 	stw	r2,4(r4)
   13490:	28c00215 	stw	r3,8(r5)
   13494:	19400315 	stw	r5,12(r3)
   13498:	9009883a 	mov	r4,r18
   1349c:	001b8e00 	call	1b8e0 <__malloc_unlock>
   134a0:	80c00204 	addi	r3,r16,8
   134a4:	003f4d06 	br	131dc <_malloc_r+0x50>
   134a8:	80800204 	addi	r2,r16,8
   134ac:	14000317 	ldw	r16,12(r2)
   134b0:	143f911e 	bne	r2,r16,132f8 <_malloc_r+0x16c>
   134b4:	1a400084 	addi	r9,r3,2
   134b8:	003f7306 	br	13288 <_malloc_r+0xfc>
   134bc:	88c00054 	ori	r3,r17,1
   134c0:	8445883a 	add	r2,r16,r17
   134c4:	80c00115 	stw	r3,4(r16)
   134c8:	003fdf06 	br	13448 <_malloc_r+0x2bc>
   134cc:	e4000217 	ldw	r16,8(fp)
   134d0:	00bfff04 	movi	r2,-4
   134d4:	80c00117 	ldw	r3,4(r16)
   134d8:	802d883a 	mov	r22,r16
   134dc:	18aa703a 	and	r21,r3,r2
   134e0:	ac401636 	bltu	r21,r17,1353c <_malloc_r+0x3b0>
   134e4:	ac49c83a 	sub	r4,r21,r17
   134e8:	008003c4 	movi	r2,15
   134ec:	1100130e 	bge	r2,r4,1353c <_malloc_r+0x3b0>
   134f0:	88800054 	ori	r2,r17,1
   134f4:	8447883a 	add	r3,r16,r17
   134f8:	80800115 	stw	r2,4(r16)
   134fc:	20800054 	ori	r2,r4,1
   13500:	18800115 	stw	r2,4(r3)
   13504:	e0c00215 	stw	r3,8(fp)
   13508:	9009883a 	mov	r4,r18
   1350c:	001b8e00 	call	1b8e0 <__malloc_unlock>
   13510:	80c00204 	addi	r3,r16,8
   13514:	003f3106 	br	131dc <_malloc_r+0x50>
   13518:	39c00117 	ldw	r7,4(r7)
   1351c:	573ffe04 	addi	fp,r10,-8
   13520:	003fa006 	br	133a4 <_malloc_r+0x218>
   13524:	00801504 	movi	r2,84
   13528:	10c06736 	bltu	r2,r3,136c8 <_malloc_r+0x53c>
   1352c:	8804d33a 	srli	r2,r17,12
   13530:	11801b84 	addi	r6,r2,110
   13534:	300490fa 	slli	r2,r6,3
   13538:	003f4106 	br	13240 <_malloc_r+0xb4>
   1353c:	d0a71217 	ldw	r2,-25528(gp)
   13540:	d0e00d17 	ldw	r3,-32716(gp)
   13544:	053fffc4 	movi	r20,-1
   13548:	10800404 	addi	r2,r2,16
   1354c:	88a7883a 	add	r19,r17,r2
   13550:	1d000326 	beq	r3,r20,13560 <_malloc_r+0x3d4>
   13554:	98c3ffc4 	addi	r3,r19,4095
   13558:	00bc0004 	movi	r2,-4096
   1355c:	18a6703a 	and	r19,r3,r2
   13560:	9009883a 	mov	r4,r18
   13564:	980b883a 	mov	r5,r19
   13568:	00147a00 	call	147a0 <_sbrk_r>
   1356c:	1009883a 	mov	r4,r2
   13570:	15000426 	beq	r2,r20,13584 <_malloc_r+0x3f8>
   13574:	854b883a 	add	r5,r16,r21
   13578:	1029883a 	mov	r20,r2
   1357c:	11405a2e 	bgeu	r2,r5,136e8 <_malloc_r+0x55c>
   13580:	87000c26 	beq	r16,fp,135b4 <_malloc_r+0x428>
   13584:	e4000217 	ldw	r16,8(fp)
   13588:	80c00117 	ldw	r3,4(r16)
   1358c:	00bfff04 	movi	r2,-4
   13590:	1884703a 	and	r2,r3,r2
   13594:	14400336 	bltu	r2,r17,135a4 <_malloc_r+0x418>
   13598:	1449c83a 	sub	r4,r2,r17
   1359c:	008003c4 	movi	r2,15
   135a0:	113fd316 	blt	r2,r4,134f0 <_malloc_r+0x364>
   135a4:	9009883a 	mov	r4,r18
   135a8:	001b8e00 	call	1b8e0 <__malloc_unlock>
   135ac:	0007883a 	mov	r3,zero
   135b0:	003f0a06 	br	131dc <_malloc_r+0x50>
   135b4:	05c000b4 	movhi	r23,2
   135b8:	bdccc404 	addi	r23,r23,13072
   135bc:	b8800017 	ldw	r2,0(r23)
   135c0:	988d883a 	add	r6,r19,r2
   135c4:	b9800015 	stw	r6,0(r23)
   135c8:	d0e00d17 	ldw	r3,-32716(gp)
   135cc:	00bfffc4 	movi	r2,-1
   135d0:	18808e26 	beq	r3,r2,1380c <_malloc_r+0x680>
   135d4:	2145c83a 	sub	r2,r4,r5
   135d8:	3085883a 	add	r2,r6,r2
   135dc:	b8800015 	stw	r2,0(r23)
   135e0:	20c001cc 	andi	r3,r4,7
   135e4:	18005f1e 	bne	r3,zero,13764 <_malloc_r+0x5d8>
   135e8:	000b883a 	mov	r5,zero
   135ec:	a4c5883a 	add	r2,r20,r19
   135f0:	1083ffcc 	andi	r2,r2,4095
   135f4:	00c40004 	movi	r3,4096
   135f8:	1887c83a 	sub	r3,r3,r2
   135fc:	28e7883a 	add	r19,r5,r3
   13600:	9009883a 	mov	r4,r18
   13604:	980b883a 	mov	r5,r19
   13608:	00147a00 	call	147a0 <_sbrk_r>
   1360c:	1007883a 	mov	r3,r2
   13610:	00bfffc4 	movi	r2,-1
   13614:	18807a26 	beq	r3,r2,13800 <_malloc_r+0x674>
   13618:	1d05c83a 	sub	r2,r3,r20
   1361c:	9885883a 	add	r2,r19,r2
   13620:	10c00054 	ori	r3,r2,1
   13624:	b8800017 	ldw	r2,0(r23)
   13628:	a021883a 	mov	r16,r20
   1362c:	a0c00115 	stw	r3,4(r20)
   13630:	9885883a 	add	r2,r19,r2
   13634:	b8800015 	stw	r2,0(r23)
   13638:	e5000215 	stw	r20,8(fp)
   1363c:	b7003626 	beq	r22,fp,13718 <_malloc_r+0x58c>
   13640:	018003c4 	movi	r6,15
   13644:	35404b36 	bltu	r6,r21,13774 <_malloc_r+0x5e8>
   13648:	00800044 	movi	r2,1
   1364c:	a0800115 	stw	r2,4(r20)
   13650:	003fcd06 	br	13588 <_malloc_r+0x3fc>
   13654:	2808d27a 	srli	r4,r5,9
   13658:	2000371e 	bne	r4,zero,13738 <_malloc_r+0x5ac>
   1365c:	2808d0fa 	srli	r4,r5,3
   13660:	200690fa 	slli	r3,r4,3
   13664:	1ad1883a 	add	r8,r3,r11
   13668:	41800217 	ldw	r6,8(r8)
   1366c:	41805b26 	beq	r8,r6,137dc <_malloc_r+0x650>
   13670:	30800117 	ldw	r2,4(r6)
   13674:	00ffff04 	movi	r3,-4
   13678:	10c4703a 	and	r2,r2,r3
   1367c:	2880022e 	bgeu	r5,r2,13688 <_malloc_r+0x4fc>
   13680:	31800217 	ldw	r6,8(r6)
   13684:	41bffa1e 	bne	r8,r6,13670 <_malloc_r+0x4e4>
   13688:	32000317 	ldw	r8,12(r6)
   1368c:	39c00117 	ldw	r7,4(r7)
   13690:	82000315 	stw	r8,12(r16)
   13694:	81800215 	stw	r6,8(r16)
   13698:	070000b4 	movhi	fp,2
   1369c:	e73dfc04 	addi	fp,fp,-2064
   136a0:	34000315 	stw	r16,12(r6)
   136a4:	44000215 	stw	r16,8(r8)
   136a8:	003f3e06 	br	133a4 <_malloc_r+0x218>
   136ac:	63000044 	addi	r12,r12,1
   136b0:	608000cc 	andi	r2,r12,3
   136b4:	10005d26 	beq	r2,zero,1382c <_malloc_r+0x6a0>
   136b8:	18c00204 	addi	r3,r3,8
   136bc:	003f5106 	br	13404 <_malloc_r+0x278>
   136c0:	8089883a 	add	r4,r16,r2
   136c4:	003f6d06 	br	1347c <_malloc_r+0x2f0>
   136c8:	00805504 	movi	r2,340
   136cc:	10c02036 	bltu	r2,r3,13750 <_malloc_r+0x5c4>
   136d0:	8804d3fa 	srli	r2,r17,15
   136d4:	11801dc4 	addi	r6,r2,119
   136d8:	300490fa 	slli	r2,r6,3
   136dc:	003ed806 	br	13240 <_malloc_r+0xb4>
   136e0:	48c000c4 	addi	r3,r9,3
   136e4:	003f3106 	br	133ac <_malloc_r+0x220>
   136e8:	05c000b4 	movhi	r23,2
   136ec:	bdccc404 	addi	r23,r23,13072
   136f0:	b8800017 	ldw	r2,0(r23)
   136f4:	988d883a 	add	r6,r19,r2
   136f8:	b9800015 	stw	r6,0(r23)
   136fc:	293fb21e 	bne	r5,r4,135c8 <_malloc_r+0x43c>
   13700:	2083ffcc 	andi	r2,r4,4095
   13704:	103fb01e 	bne	r2,zero,135c8 <_malloc_r+0x43c>
   13708:	e4000217 	ldw	r16,8(fp)
   1370c:	9d45883a 	add	r2,r19,r21
   13710:	10800054 	ori	r2,r2,1
   13714:	80800115 	stw	r2,4(r16)
   13718:	b8c00017 	ldw	r3,0(r23)
   1371c:	d0a71317 	ldw	r2,-25524(gp)
   13720:	10c0012e 	bgeu	r2,r3,13728 <_malloc_r+0x59c>
   13724:	d0e71315 	stw	r3,-25524(gp)
   13728:	d0a71417 	ldw	r2,-25520(gp)
   1372c:	10ff962e 	bgeu	r2,r3,13588 <_malloc_r+0x3fc>
   13730:	d0e71415 	stw	r3,-25520(gp)
   13734:	003f9406 	br	13588 <_malloc_r+0x3fc>
   13738:	00800104 	movi	r2,4
   1373c:	11001e36 	bltu	r2,r4,137b8 <_malloc_r+0x62c>
   13740:	2804d1ba 	srli	r2,r5,6
   13744:	11000e04 	addi	r4,r2,56
   13748:	200690fa 	slli	r3,r4,3
   1374c:	003fc506 	br	13664 <_malloc_r+0x4d8>
   13750:	00815504 	movi	r2,1364
   13754:	10c01d2e 	bgeu	r2,r3,137cc <_malloc_r+0x640>
   13758:	01801f84 	movi	r6,126
   1375c:	0080fc04 	movi	r2,1008
   13760:	003eb706 	br	13240 <_malloc_r+0xb4>
   13764:	00800204 	movi	r2,8
   13768:	10cbc83a 	sub	r5,r2,r3
   1376c:	2169883a 	add	r20,r4,r5
   13770:	003f9e06 	br	135ec <_malloc_r+0x460>
   13774:	00bffe04 	movi	r2,-8
   13778:	a93ffd04 	addi	r4,r21,-12
   1377c:	2088703a 	and	r4,r4,r2
   13780:	b10b883a 	add	r5,r22,r4
   13784:	00c00144 	movi	r3,5
   13788:	28c00215 	stw	r3,8(r5)
   1378c:	28c00115 	stw	r3,4(r5)
   13790:	b0800117 	ldw	r2,4(r22)
   13794:	1080004c 	andi	r2,r2,1
   13798:	2084b03a 	or	r2,r4,r2
   1379c:	b0800115 	stw	r2,4(r22)
   137a0:	313fdd2e 	bgeu	r6,r4,13718 <_malloc_r+0x58c>
   137a4:	b1400204 	addi	r5,r22,8
   137a8:	9009883a 	mov	r4,r18
   137ac:	00121cc0 	call	121cc <_free_r>
   137b0:	e4000217 	ldw	r16,8(fp)
   137b4:	003fd806 	br	13718 <_malloc_r+0x58c>
   137b8:	00800504 	movi	r2,20
   137bc:	11001536 	bltu	r2,r4,13814 <_malloc_r+0x688>
   137c0:	210016c4 	addi	r4,r4,91
   137c4:	200690fa 	slli	r3,r4,3
   137c8:	003fa606 	br	13664 <_malloc_r+0x4d8>
   137cc:	8804d4ba 	srli	r2,r17,18
   137d0:	11801f04 	addi	r6,r2,124
   137d4:	300490fa 	slli	r2,r6,3
   137d8:	003e9906 	br	13240 <_malloc_r+0xb4>
   137dc:	2009d0ba 	srai	r4,r4,2
   137e0:	014000b4 	movhi	r5,2
   137e4:	297dfc04 	addi	r5,r5,-2064
   137e8:	00c00044 	movi	r3,1
   137ec:	28800117 	ldw	r2,4(r5)
   137f0:	1906983a 	sll	r3,r3,r4
   137f4:	10c4b03a 	or	r2,r2,r3
   137f8:	28800115 	stw	r2,4(r5)
   137fc:	003fa306 	br	1368c <_malloc_r+0x500>
   13800:	0027883a 	mov	r19,zero
   13804:	00c00044 	movi	r3,1
   13808:	003f8606 	br	13624 <_malloc_r+0x498>
   1380c:	d1200d15 	stw	r4,-32716(gp)
   13810:	003f7306 	br	135e0 <_malloc_r+0x454>
   13814:	00801504 	movi	r2,84
   13818:	11001936 	bltu	r2,r4,13880 <_malloc_r+0x6f4>
   1381c:	2804d33a 	srli	r2,r5,12
   13820:	11001b84 	addi	r4,r2,110
   13824:	200690fa 	slli	r3,r4,3
   13828:	003f8e06 	br	13664 <_malloc_r+0x4d8>
   1382c:	480b883a 	mov	r5,r9
   13830:	6807883a 	mov	r3,r13
   13834:	288000cc 	andi	r2,r5,3
   13838:	18fffe04 	addi	r3,r3,-8
   1383c:	297fffc4 	addi	r5,r5,-1
   13840:	10001526 	beq	r2,zero,13898 <_malloc_r+0x70c>
   13844:	18800217 	ldw	r2,8(r3)
   13848:	10fffa26 	beq	r2,r3,13834 <_malloc_r+0x6a8>
   1384c:	2109883a 	add	r4,r4,r4
   13850:	393f1e36 	bltu	r7,r4,134cc <_malloc_r+0x340>
   13854:	203f1d26 	beq	r4,zero,134cc <_malloc_r+0x340>
   13858:	21c4703a 	and	r2,r4,r7
   1385c:	10000226 	beq	r2,zero,13868 <_malloc_r+0x6dc>
   13860:	6013883a 	mov	r9,r12
   13864:	003ee106 	br	133ec <_malloc_r+0x260>
   13868:	2109883a 	add	r4,r4,r4
   1386c:	3904703a 	and	r2,r7,r4
   13870:	63000104 	addi	r12,r12,4
   13874:	103ffc26 	beq	r2,zero,13868 <_malloc_r+0x6dc>
   13878:	6013883a 	mov	r9,r12
   1387c:	003edb06 	br	133ec <_malloc_r+0x260>
   13880:	00805504 	movi	r2,340
   13884:	11000836 	bltu	r2,r4,138a8 <_malloc_r+0x71c>
   13888:	2804d3fa 	srli	r2,r5,15
   1388c:	11001dc4 	addi	r4,r2,119
   13890:	200690fa 	slli	r3,r4,3
   13894:	003f7306 	br	13664 <_malloc_r+0x4d8>
   13898:	0104303a 	nor	r2,zero,r4
   1389c:	388e703a 	and	r7,r7,r2
   138a0:	e1c00115 	stw	r7,4(fp)
   138a4:	003fe906 	br	1384c <_malloc_r+0x6c0>
   138a8:	00815504 	movi	r2,1364
   138ac:	1100032e 	bgeu	r2,r4,138bc <_malloc_r+0x730>
   138b0:	01001f84 	movi	r4,126
   138b4:	00c0fc04 	movi	r3,1008
   138b8:	003f6a06 	br	13664 <_malloc_r+0x4d8>
   138bc:	2804d4ba 	srli	r2,r5,18
   138c0:	11001f04 	addi	r4,r2,124
   138c4:	200690fa 	slli	r3,r4,3
   138c8:	003f6606 	br	13664 <_malloc_r+0x4d8>

000138cc <memchr>:
   138cc:	008000c4 	movi	r2,3
   138d0:	29403fcc 	andi	r5,r5,255
   138d4:	2007883a 	mov	r3,r4
   138d8:	1180022e 	bgeu	r2,r6,138e4 <memchr+0x18>
   138dc:	2084703a 	and	r2,r4,r2
   138e0:	10000b26 	beq	r2,zero,13910 <memchr+0x44>
   138e4:	313fffc4 	addi	r4,r6,-1
   138e8:	3000051e 	bne	r6,zero,13900 <memchr+0x34>
   138ec:	00002c06 	br	139a0 <memchr+0xd4>
   138f0:	213fffc4 	addi	r4,r4,-1
   138f4:	00bfffc4 	movi	r2,-1
   138f8:	18c00044 	addi	r3,r3,1
   138fc:	20802826 	beq	r4,r2,139a0 <memchr+0xd4>
   13900:	18800003 	ldbu	r2,0(r3)
   13904:	28bffa1e 	bne	r5,r2,138f0 <memchr+0x24>
   13908:	1805883a 	mov	r2,r3
   1390c:	f800283a 	ret
   13910:	0011883a 	mov	r8,zero
   13914:	0007883a 	mov	r3,zero
   13918:	01c00104 	movi	r7,4
   1391c:	4004923a 	slli	r2,r8,8
   13920:	18c00044 	addi	r3,r3,1
   13924:	1151883a 	add	r8,r2,r5
   13928:	19fffc1e 	bne	r3,r7,1391c <memchr+0x50>
   1392c:	02bfbff4 	movhi	r10,65279
   13930:	52bfbfc4 	addi	r10,r10,-257
   13934:	02602074 	movhi	r9,32897
   13938:	4a602004 	addi	r9,r9,-32640
   1393c:	02c000c4 	movi	r11,3
   13940:	20800017 	ldw	r2,0(r4)
   13944:	31bfff04 	addi	r6,r6,-4
   13948:	200f883a 	mov	r7,r4
   1394c:	1204f03a 	xor	r2,r2,r8
   13950:	1287883a 	add	r3,r2,r10
   13954:	1a46703a 	and	r3,r3,r9
   13958:	0084303a 	nor	r2,zero,r2
   1395c:	10c4703a 	and	r2,r2,r3
   13960:	10000b26 	beq	r2,zero,13990 <memchr+0xc4>
   13964:	20800003 	ldbu	r2,0(r4)
   13968:	28800f26 	beq	r5,r2,139a8 <memchr+0xdc>
   1396c:	20800043 	ldbu	r2,1(r4)
   13970:	21c00044 	addi	r7,r4,1
   13974:	28800c26 	beq	r5,r2,139a8 <memchr+0xdc>
   13978:	20800083 	ldbu	r2,2(r4)
   1397c:	21c00084 	addi	r7,r4,2
   13980:	28800926 	beq	r5,r2,139a8 <memchr+0xdc>
   13984:	208000c3 	ldbu	r2,3(r4)
   13988:	21c000c4 	addi	r7,r4,3
   1398c:	28800626 	beq	r5,r2,139a8 <memchr+0xdc>
   13990:	21000104 	addi	r4,r4,4
   13994:	59bfea36 	bltu	r11,r6,13940 <memchr+0x74>
   13998:	2007883a 	mov	r3,r4
   1399c:	003fd106 	br	138e4 <memchr+0x18>
   139a0:	0005883a 	mov	r2,zero
   139a4:	f800283a 	ret
   139a8:	3805883a 	mov	r2,r7
   139ac:	f800283a 	ret

000139b0 <memcmp>:
   139b0:	00c000c4 	movi	r3,3
   139b4:	1980032e 	bgeu	r3,r6,139c4 <memcmp+0x14>
   139b8:	2144b03a 	or	r2,r4,r5
   139bc:	10c4703a 	and	r2,r2,r3
   139c0:	10000f26 	beq	r2,zero,13a00 <memcmp+0x50>
   139c4:	31ffffc4 	addi	r7,r6,-1
   139c8:	3000061e 	bne	r6,zero,139e4 <memcmp+0x34>
   139cc:	00000a06 	br	139f8 <memcmp+0x48>
   139d0:	39ffffc4 	addi	r7,r7,-1
   139d4:	00bfffc4 	movi	r2,-1
   139d8:	21000044 	addi	r4,r4,1
   139dc:	29400044 	addi	r5,r5,1
   139e0:	38800526 	beq	r7,r2,139f8 <memcmp+0x48>
   139e4:	20c00003 	ldbu	r3,0(r4)
   139e8:	28800003 	ldbu	r2,0(r5)
   139ec:	18bff826 	beq	r3,r2,139d0 <memcmp+0x20>
   139f0:	1885c83a 	sub	r2,r3,r2
   139f4:	f800283a 	ret
   139f8:	0005883a 	mov	r2,zero
   139fc:	f800283a 	ret
   13a00:	180f883a 	mov	r7,r3
   13a04:	20c00017 	ldw	r3,0(r4)
   13a08:	28800017 	ldw	r2,0(r5)
   13a0c:	18bfed1e 	bne	r3,r2,139c4 <memcmp+0x14>
   13a10:	31bfff04 	addi	r6,r6,-4
   13a14:	21000104 	addi	r4,r4,4
   13a18:	29400104 	addi	r5,r5,4
   13a1c:	39bff936 	bltu	r7,r6,13a04 <memcmp+0x54>
   13a20:	003fe806 	br	139c4 <memcmp+0x14>

00013a24 <memcpy>:
   13a24:	01c003c4 	movi	r7,15
   13a28:	2007883a 	mov	r3,r4
   13a2c:	3980032e 	bgeu	r7,r6,13a3c <memcpy+0x18>
   13a30:	2904b03a 	or	r2,r5,r4
   13a34:	108000cc 	andi	r2,r2,3
   13a38:	10000926 	beq	r2,zero,13a60 <memcpy+0x3c>
   13a3c:	30000626 	beq	r6,zero,13a58 <memcpy+0x34>
   13a40:	30cd883a 	add	r6,r6,r3
   13a44:	28800003 	ldbu	r2,0(r5)
   13a48:	29400044 	addi	r5,r5,1
   13a4c:	18800005 	stb	r2,0(r3)
   13a50:	18c00044 	addi	r3,r3,1
   13a54:	30fffb1e 	bne	r6,r3,13a44 <memcpy+0x20>
   13a58:	2005883a 	mov	r2,r4
   13a5c:	f800283a 	ret
   13a60:	3811883a 	mov	r8,r7
   13a64:	200f883a 	mov	r7,r4
   13a68:	28c00017 	ldw	r3,0(r5)
   13a6c:	31bffc04 	addi	r6,r6,-16
   13a70:	38c00015 	stw	r3,0(r7)
   13a74:	28800117 	ldw	r2,4(r5)
   13a78:	38800115 	stw	r2,4(r7)
   13a7c:	28c00217 	ldw	r3,8(r5)
   13a80:	38c00215 	stw	r3,8(r7)
   13a84:	28800317 	ldw	r2,12(r5)
   13a88:	29400404 	addi	r5,r5,16
   13a8c:	38800315 	stw	r2,12(r7)
   13a90:	39c00404 	addi	r7,r7,16
   13a94:	41bff436 	bltu	r8,r6,13a68 <memcpy+0x44>
   13a98:	008000c4 	movi	r2,3
   13a9c:	1180072e 	bgeu	r2,r6,13abc <memcpy+0x98>
   13aa0:	1007883a 	mov	r3,r2
   13aa4:	28800017 	ldw	r2,0(r5)
   13aa8:	31bfff04 	addi	r6,r6,-4
   13aac:	29400104 	addi	r5,r5,4
   13ab0:	38800015 	stw	r2,0(r7)
   13ab4:	39c00104 	addi	r7,r7,4
   13ab8:	19bffa36 	bltu	r3,r6,13aa4 <memcpy+0x80>
   13abc:	3807883a 	mov	r3,r7
   13ac0:	003fde06 	br	13a3c <memcpy+0x18>

00013ac4 <memmove>:
   13ac4:	2807883a 	mov	r3,r5
   13ac8:	2011883a 	mov	r8,r4
   13acc:	29000c2e 	bgeu	r5,r4,13b00 <memmove+0x3c>
   13ad0:	298f883a 	add	r7,r5,r6
   13ad4:	21c00a2e 	bgeu	r4,r7,13b00 <memmove+0x3c>
   13ad8:	30000726 	beq	r6,zero,13af8 <memmove+0x34>
   13adc:	2187883a 	add	r3,r4,r6
   13ae0:	198dc83a 	sub	r6,r3,r6
   13ae4:	39ffffc4 	addi	r7,r7,-1
   13ae8:	38800003 	ldbu	r2,0(r7)
   13aec:	18ffffc4 	addi	r3,r3,-1
   13af0:	18800005 	stb	r2,0(r3)
   13af4:	19bffb1e 	bne	r3,r6,13ae4 <memmove+0x20>
   13af8:	2005883a 	mov	r2,r4
   13afc:	f800283a 	ret
   13b00:	01c003c4 	movi	r7,15
   13b04:	39800a36 	bltu	r7,r6,13b30 <memmove+0x6c>
   13b08:	303ffb26 	beq	r6,zero,13af8 <memmove+0x34>
   13b0c:	400f883a 	mov	r7,r8
   13b10:	320d883a 	add	r6,r6,r8
   13b14:	28800003 	ldbu	r2,0(r5)
   13b18:	29400044 	addi	r5,r5,1
   13b1c:	38800005 	stb	r2,0(r7)
   13b20:	39c00044 	addi	r7,r7,1
   13b24:	39bffb1e 	bne	r7,r6,13b14 <memmove+0x50>
   13b28:	2005883a 	mov	r2,r4
   13b2c:	f800283a 	ret
   13b30:	1904b03a 	or	r2,r3,r4
   13b34:	108000cc 	andi	r2,r2,3
   13b38:	103ff31e 	bne	r2,zero,13b08 <memmove+0x44>
   13b3c:	3811883a 	mov	r8,r7
   13b40:	180b883a 	mov	r5,r3
   13b44:	200f883a 	mov	r7,r4
   13b48:	28c00017 	ldw	r3,0(r5)
   13b4c:	31bffc04 	addi	r6,r6,-16
   13b50:	38c00015 	stw	r3,0(r7)
   13b54:	28800117 	ldw	r2,4(r5)
   13b58:	38800115 	stw	r2,4(r7)
   13b5c:	28c00217 	ldw	r3,8(r5)
   13b60:	38c00215 	stw	r3,8(r7)
   13b64:	28800317 	ldw	r2,12(r5)
   13b68:	29400404 	addi	r5,r5,16
   13b6c:	38800315 	stw	r2,12(r7)
   13b70:	39c00404 	addi	r7,r7,16
   13b74:	41bff436 	bltu	r8,r6,13b48 <memmove+0x84>
   13b78:	008000c4 	movi	r2,3
   13b7c:	1180072e 	bgeu	r2,r6,13b9c <memmove+0xd8>
   13b80:	1007883a 	mov	r3,r2
   13b84:	28800017 	ldw	r2,0(r5)
   13b88:	31bfff04 	addi	r6,r6,-4
   13b8c:	29400104 	addi	r5,r5,4
   13b90:	38800015 	stw	r2,0(r7)
   13b94:	39c00104 	addi	r7,r7,4
   13b98:	19bffa36 	bltu	r3,r6,13b84 <memmove+0xc0>
   13b9c:	3811883a 	mov	r8,r7
   13ba0:	003fd906 	br	13b08 <memmove+0x44>

00013ba4 <memset>:
   13ba4:	008000c4 	movi	r2,3
   13ba8:	29403fcc 	andi	r5,r5,255
   13bac:	2007883a 	mov	r3,r4
   13bb0:	1180022e 	bgeu	r2,r6,13bbc <memset+0x18>
   13bb4:	2084703a 	and	r2,r4,r2
   13bb8:	10000826 	beq	r2,zero,13bdc <memset+0x38>
   13bbc:	30000526 	beq	r6,zero,13bd4 <memset+0x30>
   13bc0:	2805883a 	mov	r2,r5
   13bc4:	30cd883a 	add	r6,r6,r3
   13bc8:	18800005 	stb	r2,0(r3)
   13bcc:	18c00044 	addi	r3,r3,1
   13bd0:	19bffd1e 	bne	r3,r6,13bc8 <memset+0x24>
   13bd4:	2005883a 	mov	r2,r4
   13bd8:	f800283a 	ret
   13bdc:	2804923a 	slli	r2,r5,8
   13be0:	020003c4 	movi	r8,15
   13be4:	200f883a 	mov	r7,r4
   13be8:	2884b03a 	or	r2,r5,r2
   13bec:	1006943a 	slli	r3,r2,16
   13bf0:	10c6b03a 	or	r3,r2,r3
   13bf4:	41800a2e 	bgeu	r8,r6,13c20 <memset+0x7c>
   13bf8:	4005883a 	mov	r2,r8
   13bfc:	31bffc04 	addi	r6,r6,-16
   13c00:	38c00015 	stw	r3,0(r7)
   13c04:	38c00115 	stw	r3,4(r7)
   13c08:	38c00215 	stw	r3,8(r7)
   13c0c:	38c00315 	stw	r3,12(r7)
   13c10:	39c00404 	addi	r7,r7,16
   13c14:	11bff936 	bltu	r2,r6,13bfc <memset+0x58>
   13c18:	008000c4 	movi	r2,3
   13c1c:	1180052e 	bgeu	r2,r6,13c34 <memset+0x90>
   13c20:	31bfff04 	addi	r6,r6,-4
   13c24:	008000c4 	movi	r2,3
   13c28:	38c00015 	stw	r3,0(r7)
   13c2c:	39c00104 	addi	r7,r7,4
   13c30:	11bffb36 	bltu	r2,r6,13c20 <memset+0x7c>
   13c34:	3807883a 	mov	r3,r7
   13c38:	003fe006 	br	13bbc <memset+0x18>

00013c3c <_open_r>:
   13c3c:	defffd04 	addi	sp,sp,-12
   13c40:	dc000015 	stw	r16,0(sp)
   13c44:	040000b4 	movhi	r16,2
   13c48:	840ab304 	addi	r16,r16,10956
   13c4c:	dc400115 	stw	r17,4(sp)
   13c50:	80000015 	stw	zero,0(r16)
   13c54:	2023883a 	mov	r17,r4
   13c58:	2809883a 	mov	r4,r5
   13c5c:	300b883a 	mov	r5,r6
   13c60:	380d883a 	mov	r6,r7
   13c64:	dfc00215 	stw	ra,8(sp)
   13c68:	001b9dc0 	call	1b9dc <open>
   13c6c:	1007883a 	mov	r3,r2
   13c70:	00bfffc4 	movi	r2,-1
   13c74:	18800626 	beq	r3,r2,13c90 <_open_r+0x54>
   13c78:	1805883a 	mov	r2,r3
   13c7c:	dfc00217 	ldw	ra,8(sp)
   13c80:	dc400117 	ldw	r17,4(sp)
   13c84:	dc000017 	ldw	r16,0(sp)
   13c88:	dec00304 	addi	sp,sp,12
   13c8c:	f800283a 	ret
   13c90:	80800017 	ldw	r2,0(r16)
   13c94:	103ff826 	beq	r2,zero,13c78 <_open_r+0x3c>
   13c98:	88800015 	stw	r2,0(r17)
   13c9c:	1805883a 	mov	r2,r3
   13ca0:	dfc00217 	ldw	ra,8(sp)
   13ca4:	dc400117 	ldw	r17,4(sp)
   13ca8:	dc000017 	ldw	r16,0(sp)
   13cac:	dec00304 	addi	sp,sp,12
   13cb0:	f800283a 	ret

00013cb4 <printf>:
   13cb4:	defffb04 	addi	sp,sp,-20
   13cb8:	dfc00115 	stw	ra,4(sp)
   13cbc:	d9400215 	stw	r5,8(sp)
   13cc0:	d9800315 	stw	r6,12(sp)
   13cc4:	d9c00415 	stw	r7,16(sp)
   13cc8:	008000b4 	movhi	r2,2
   13ccc:	1083ac04 	addi	r2,r2,3760
   13cd0:	10c00017 	ldw	r3,0(r2)
   13cd4:	200b883a 	mov	r5,r4
   13cd8:	d8800204 	addi	r2,sp,8
   13cdc:	19000217 	ldw	r4,8(r3)
   13ce0:	100d883a 	mov	r6,r2
   13ce4:	d8800015 	stw	r2,0(sp)
   13ce8:	0016e8c0 	call	16e8c <__vfprintf_internal>
   13cec:	dfc00117 	ldw	ra,4(sp)
   13cf0:	dec00504 	addi	sp,sp,20
   13cf4:	f800283a 	ret

00013cf8 <_printf_r>:
   13cf8:	defffc04 	addi	sp,sp,-16
   13cfc:	dfc00115 	stw	ra,4(sp)
   13d00:	d9800215 	stw	r6,8(sp)
   13d04:	d9c00315 	stw	r7,12(sp)
   13d08:	280d883a 	mov	r6,r5
   13d0c:	21400217 	ldw	r5,8(r4)
   13d10:	d8c00204 	addi	r3,sp,8
   13d14:	180f883a 	mov	r7,r3
   13d18:	d8c00015 	stw	r3,0(sp)
   13d1c:	0014fe00 	call	14fe0 <___vfprintf_internal_r>
   13d20:	dfc00117 	ldw	ra,4(sp)
   13d24:	dec00404 	addi	sp,sp,16
   13d28:	f800283a 	ret

00013d2c <putc>:
   13d2c:	defffc04 	addi	sp,sp,-16
   13d30:	dc800215 	stw	r18,8(sp)
   13d34:	048000b4 	movhi	r18,2
   13d38:	9483ac04 	addi	r18,r18,3760
   13d3c:	90c00017 	ldw	r3,0(r18)
   13d40:	dc400115 	stw	r17,4(sp)
   13d44:	dc000015 	stw	r16,0(sp)
   13d48:	dfc00315 	stw	ra,12(sp)
   13d4c:	2023883a 	mov	r17,r4
   13d50:	2821883a 	mov	r16,r5
   13d54:	18000226 	beq	r3,zero,13d60 <putc+0x34>
   13d58:	18800e17 	ldw	r2,56(r3)
   13d5c:	10001126 	beq	r2,zero,13da4 <putc+0x78>
   13d60:	80800217 	ldw	r2,8(r16)
   13d64:	10ffffc4 	addi	r3,r2,-1
   13d68:	80c00215 	stw	r3,8(r16)
   13d6c:	18001316 	blt	r3,zero,13dbc <putc+0x90>
   13d70:	80800017 	ldw	r2,0(r16)
   13d74:	14400005 	stb	r17,0(r2)
   13d78:	80c00017 	ldw	r3,0(r16)
   13d7c:	18800044 	addi	r2,r3,1
   13d80:	18c00003 	ldbu	r3,0(r3)
   13d84:	80800015 	stw	r2,0(r16)
   13d88:	1805883a 	mov	r2,r3
   13d8c:	dfc00317 	ldw	ra,12(sp)
   13d90:	dc800217 	ldw	r18,8(sp)
   13d94:	dc400117 	ldw	r17,4(sp)
   13d98:	dc000017 	ldw	r16,0(sp)
   13d9c:	dec00404 	addi	sp,sp,16
   13da0:	f800283a 	ret
   13da4:	1809883a 	mov	r4,r3
   13da8:	0011bec0 	call	11bec <__sinit>
   13dac:	80800217 	ldw	r2,8(r16)
   13db0:	10ffffc4 	addi	r3,r2,-1
   13db4:	80c00215 	stw	r3,8(r16)
   13db8:	183fed0e 	bge	r3,zero,13d70 <putc+0x44>
   13dbc:	80800617 	ldw	r2,24(r16)
   13dc0:	18800f16 	blt	r3,r2,13e00 <putc+0xd4>
   13dc4:	80800017 	ldw	r2,0(r16)
   13dc8:	14400005 	stb	r17,0(r2)
   13dcc:	81000017 	ldw	r4,0(r16)
   13dd0:	00800284 	movi	r2,10
   13dd4:	20c00003 	ldbu	r3,0(r4)
   13dd8:	18801226 	beq	r3,r2,13e24 <putc+0xf8>
   13ddc:	20800044 	addi	r2,r4,1
   13de0:	80800015 	stw	r2,0(r16)
   13de4:	1805883a 	mov	r2,r3
   13de8:	dfc00317 	ldw	ra,12(sp)
   13dec:	dc800217 	ldw	r18,8(sp)
   13df0:	dc400117 	ldw	r17,4(sp)
   13df4:	dc000017 	ldw	r16,0(sp)
   13df8:	dec00404 	addi	sp,sp,16
   13dfc:	f800283a 	ret
   13e00:	91000017 	ldw	r4,0(r18)
   13e04:	880b883a 	mov	r5,r17
   13e08:	800d883a 	mov	r6,r16
   13e0c:	dfc00317 	ldw	ra,12(sp)
   13e10:	dc800217 	ldw	r18,8(sp)
   13e14:	dc400117 	ldw	r17,4(sp)
   13e18:	dc000017 	ldw	r16,0(sp)
   13e1c:	dec00404 	addi	sp,sp,16
   13e20:	0016eb01 	jmpi	16eb0 <__swbuf_r>
   13e24:	91000017 	ldw	r4,0(r18)
   13e28:	180b883a 	mov	r5,r3
   13e2c:	003ff606 	br	13e08 <putc+0xdc>

00013e30 <_putc_r>:
   13e30:	defffc04 	addi	sp,sp,-16
   13e34:	dc400215 	stw	r17,8(sp)
   13e38:	dc000115 	stw	r16,4(sp)
   13e3c:	dfc00315 	stw	ra,12(sp)
   13e40:	2021883a 	mov	r16,r4
   13e44:	2823883a 	mov	r17,r5
   13e48:	20000226 	beq	r4,zero,13e54 <_putc_r+0x24>
   13e4c:	20800e17 	ldw	r2,56(r4)
   13e50:	10001026 	beq	r2,zero,13e94 <_putc_r+0x64>
   13e54:	30800217 	ldw	r2,8(r6)
   13e58:	10ffffc4 	addi	r3,r2,-1
   13e5c:	30c00215 	stw	r3,8(r6)
   13e60:	18001316 	blt	r3,zero,13eb0 <_putc_r+0x80>
   13e64:	30800017 	ldw	r2,0(r6)
   13e68:	14400005 	stb	r17,0(r2)
   13e6c:	30c00017 	ldw	r3,0(r6)
   13e70:	18800044 	addi	r2,r3,1
   13e74:	18c00003 	ldbu	r3,0(r3)
   13e78:	30800015 	stw	r2,0(r6)
   13e7c:	1805883a 	mov	r2,r3
   13e80:	dfc00317 	ldw	ra,12(sp)
   13e84:	dc400217 	ldw	r17,8(sp)
   13e88:	dc000117 	ldw	r16,4(sp)
   13e8c:	dec00404 	addi	sp,sp,16
   13e90:	f800283a 	ret
   13e94:	d9800015 	stw	r6,0(sp)
   13e98:	0011bec0 	call	11bec <__sinit>
   13e9c:	d9800017 	ldw	r6,0(sp)
   13ea0:	30800217 	ldw	r2,8(r6)
   13ea4:	10ffffc4 	addi	r3,r2,-1
   13ea8:	30c00215 	stw	r3,8(r6)
   13eac:	183fed0e 	bge	r3,zero,13e64 <_putc_r+0x34>
   13eb0:	30800617 	ldw	r2,24(r6)
   13eb4:	18800e16 	blt	r3,r2,13ef0 <_putc_r+0xc0>
   13eb8:	30800017 	ldw	r2,0(r6)
   13ebc:	14400005 	stb	r17,0(r2)
   13ec0:	31000017 	ldw	r4,0(r6)
   13ec4:	00800284 	movi	r2,10
   13ec8:	20c00003 	ldbu	r3,0(r4)
   13ecc:	18800f26 	beq	r3,r2,13f0c <_putc_r+0xdc>
   13ed0:	20800044 	addi	r2,r4,1
   13ed4:	30800015 	stw	r2,0(r6)
   13ed8:	1805883a 	mov	r2,r3
   13edc:	dfc00317 	ldw	ra,12(sp)
   13ee0:	dc400217 	ldw	r17,8(sp)
   13ee4:	dc000117 	ldw	r16,4(sp)
   13ee8:	dec00404 	addi	sp,sp,16
   13eec:	f800283a 	ret
   13ef0:	8009883a 	mov	r4,r16
   13ef4:	880b883a 	mov	r5,r17
   13ef8:	dfc00317 	ldw	ra,12(sp)
   13efc:	dc400217 	ldw	r17,8(sp)
   13f00:	dc000117 	ldw	r16,4(sp)
   13f04:	dec00404 	addi	sp,sp,16
   13f08:	0016eb01 	jmpi	16eb0 <__swbuf_r>
   13f0c:	8009883a 	mov	r4,r16
   13f10:	180b883a 	mov	r5,r3
   13f14:	003ff806 	br	13ef8 <_putc_r+0xc8>

00013f18 <_puts_r>:
   13f18:	defff604 	addi	sp,sp,-40
   13f1c:	dc400715 	stw	r17,28(sp)
   13f20:	2023883a 	mov	r17,r4
   13f24:	2809883a 	mov	r4,r5
   13f28:	dfc00915 	stw	ra,36(sp)
   13f2c:	dcc00815 	stw	r19,32(sp)
   13f30:	2827883a 	mov	r19,r5
   13f34:	0014cac0 	call	14cac <strlen>
   13f38:	89400217 	ldw	r5,8(r17)
   13f3c:	00c000b4 	movhi	r3,2
   13f40:	18fbca04 	addi	r3,r3,-4312
   13f44:	01c00044 	movi	r7,1
   13f48:	12000044 	addi	r8,r2,1
   13f4c:	d8c00515 	stw	r3,20(sp)
   13f50:	d9c00615 	stw	r7,24(sp)
   13f54:	d8c00304 	addi	r3,sp,12
   13f58:	01c00084 	movi	r7,2
   13f5c:	8809883a 	mov	r4,r17
   13f60:	d80d883a 	mov	r6,sp
   13f64:	d8c00015 	stw	r3,0(sp)
   13f68:	dcc00315 	stw	r19,12(sp)
   13f6c:	da000215 	stw	r8,8(sp)
   13f70:	d9c00115 	stw	r7,4(sp)
   13f74:	d8800415 	stw	r2,16(sp)
   13f78:	00129b40 	call	129b4 <__sfvwrite_r>
   13f7c:	00ffffc4 	movi	r3,-1
   13f80:	10000626 	beq	r2,zero,13f9c <_puts_r+0x84>
   13f84:	1805883a 	mov	r2,r3
   13f88:	dfc00917 	ldw	ra,36(sp)
   13f8c:	dcc00817 	ldw	r19,32(sp)
   13f90:	dc400717 	ldw	r17,28(sp)
   13f94:	dec00a04 	addi	sp,sp,40
   13f98:	f800283a 	ret
   13f9c:	00c00284 	movi	r3,10
   13fa0:	1805883a 	mov	r2,r3
   13fa4:	dfc00917 	ldw	ra,36(sp)
   13fa8:	dcc00817 	ldw	r19,32(sp)
   13fac:	dc400717 	ldw	r17,28(sp)
   13fb0:	dec00a04 	addi	sp,sp,40
   13fb4:	f800283a 	ret

00013fb8 <puts>:
   13fb8:	008000b4 	movhi	r2,2
   13fbc:	1083ac04 	addi	r2,r2,3760
   13fc0:	200b883a 	mov	r5,r4
   13fc4:	11000017 	ldw	r4,0(r2)
   13fc8:	0013f181 	jmpi	13f18 <_puts_r>

00013fcc <_realloc_r>:
   13fcc:	defff404 	addi	sp,sp,-48
   13fd0:	dd800815 	stw	r22,32(sp)
   13fd4:	dc800415 	stw	r18,16(sp)
   13fd8:	dc400315 	stw	r17,12(sp)
   13fdc:	dfc00b15 	stw	ra,44(sp)
   13fe0:	df000a15 	stw	fp,40(sp)
   13fe4:	ddc00915 	stw	r23,36(sp)
   13fe8:	dd400715 	stw	r21,28(sp)
   13fec:	dd000615 	stw	r20,24(sp)
   13ff0:	dcc00515 	stw	r19,20(sp)
   13ff4:	dc000215 	stw	r16,8(sp)
   13ff8:	2825883a 	mov	r18,r5
   13ffc:	3023883a 	mov	r17,r6
   14000:	202d883a 	mov	r22,r4
   14004:	2800c926 	beq	r5,zero,1432c <_realloc_r+0x360>
   14008:	001b8c00 	call	1b8c0 <__malloc_lock>
   1400c:	943ffe04 	addi	r16,r18,-8
   14010:	88c002c4 	addi	r3,r17,11
   14014:	00800584 	movi	r2,22
   14018:	82000117 	ldw	r8,4(r16)
   1401c:	10c01b2e 	bgeu	r2,r3,1408c <_realloc_r+0xc0>
   14020:	00bffe04 	movi	r2,-8
   14024:	188e703a 	and	r7,r3,r2
   14028:	3839883a 	mov	fp,r7
   1402c:	38001a16 	blt	r7,zero,14098 <_realloc_r+0xcc>
   14030:	e4401936 	bltu	fp,r17,14098 <_realloc_r+0xcc>
   14034:	013fff04 	movi	r4,-4
   14038:	4126703a 	and	r19,r8,r4
   1403c:	99c02616 	blt	r19,r7,140d8 <_realloc_r+0x10c>
   14040:	802b883a 	mov	r21,r16
   14044:	9829883a 	mov	r20,r19
   14048:	84000204 	addi	r16,r16,8
   1404c:	a80f883a 	mov	r7,r21
   14050:	a70dc83a 	sub	r6,r20,fp
   14054:	008003c4 	movi	r2,15
   14058:	1180c136 	bltu	r2,r6,14360 <_realloc_r+0x394>
   1405c:	38800117 	ldw	r2,4(r7)
   14060:	a549883a 	add	r4,r20,r21
   14064:	1080004c 	andi	r2,r2,1
   14068:	a084b03a 	or	r2,r20,r2
   1406c:	38800115 	stw	r2,4(r7)
   14070:	20c00117 	ldw	r3,4(r4)
   14074:	18c00054 	ori	r3,r3,1
   14078:	20c00115 	stw	r3,4(r4)
   1407c:	b009883a 	mov	r4,r22
   14080:	001b8e00 	call	1b8e0 <__malloc_unlock>
   14084:	8023883a 	mov	r17,r16
   14088:	00000606 	br	140a4 <_realloc_r+0xd8>
   1408c:	01c00404 	movi	r7,16
   14090:	3839883a 	mov	fp,r7
   14094:	e47fe72e 	bgeu	fp,r17,14034 <_realloc_r+0x68>
   14098:	00800304 	movi	r2,12
   1409c:	0023883a 	mov	r17,zero
   140a0:	b0800015 	stw	r2,0(r22)
   140a4:	8805883a 	mov	r2,r17
   140a8:	dfc00b17 	ldw	ra,44(sp)
   140ac:	df000a17 	ldw	fp,40(sp)
   140b0:	ddc00917 	ldw	r23,36(sp)
   140b4:	dd800817 	ldw	r22,32(sp)
   140b8:	dd400717 	ldw	r21,28(sp)
   140bc:	dd000617 	ldw	r20,24(sp)
   140c0:	dcc00517 	ldw	r19,20(sp)
   140c4:	dc800417 	ldw	r18,16(sp)
   140c8:	dc400317 	ldw	r17,12(sp)
   140cc:	dc000217 	ldw	r16,8(sp)
   140d0:	dec00c04 	addi	sp,sp,48
   140d4:	f800283a 	ret
   140d8:	008000b4 	movhi	r2,2
   140dc:	10bdfc04 	addi	r2,r2,-2064
   140e0:	12400217 	ldw	r9,8(r2)
   140e4:	84cd883a 	add	r6,r16,r19
   140e8:	802b883a 	mov	r21,r16
   140ec:	3240b926 	beq	r6,r9,143d4 <_realloc_r+0x408>
   140f0:	31400117 	ldw	r5,4(r6)
   140f4:	00bfff84 	movi	r2,-2
   140f8:	2884703a 	and	r2,r5,r2
   140fc:	1185883a 	add	r2,r2,r6
   14100:	10c00117 	ldw	r3,4(r2)
   14104:	18c0004c 	andi	r3,r3,1
   14108:	1807003a 	cmpeq	r3,r3,zero
   1410c:	1800a326 	beq	r3,zero,1439c <_realloc_r+0x3d0>
   14110:	2908703a 	and	r4,r5,r4
   14114:	9929883a 	add	r20,r19,r4
   14118:	a1c0a30e 	bge	r20,r7,143a8 <_realloc_r+0x3dc>
   1411c:	4080004c 	andi	r2,r8,1
   14120:	1000551e 	bne	r2,zero,14278 <_realloc_r+0x2ac>
   14124:	80800017 	ldw	r2,0(r16)
   14128:	80afc83a 	sub	r23,r16,r2
   1412c:	b8c00117 	ldw	r3,4(r23)
   14130:	00bfff04 	movi	r2,-4
   14134:	1884703a 	and	r2,r3,r2
   14138:	30002e26 	beq	r6,zero,141f4 <_realloc_r+0x228>
   1413c:	3240b926 	beq	r6,r9,14424 <_realloc_r+0x458>
   14140:	98a9883a 	add	r20,r19,r2
   14144:	2509883a 	add	r4,r4,r20
   14148:	d9000015 	stw	r4,0(sp)
   1414c:	21c02a16 	blt	r4,r7,141f8 <_realloc_r+0x22c>
   14150:	30800317 	ldw	r2,12(r6)
   14154:	30c00217 	ldw	r3,8(r6)
   14158:	01400904 	movi	r5,36
   1415c:	99bfff04 	addi	r6,r19,-4
   14160:	18800315 	stw	r2,12(r3)
   14164:	10c00215 	stw	r3,8(r2)
   14168:	b9000317 	ldw	r4,12(r23)
   1416c:	b8800217 	ldw	r2,8(r23)
   14170:	b82b883a 	mov	r21,r23
   14174:	bc000204 	addi	r16,r23,8
   14178:	20800215 	stw	r2,8(r4)
   1417c:	11000315 	stw	r4,12(r2)
   14180:	2980e436 	bltu	r5,r6,14514 <_realloc_r+0x548>
   14184:	008004c4 	movi	r2,19
   14188:	9009883a 	mov	r4,r18
   1418c:	8011883a 	mov	r8,r16
   14190:	11800f2e 	bgeu	r2,r6,141d0 <_realloc_r+0x204>
   14194:	90800017 	ldw	r2,0(r18)
   14198:	ba000404 	addi	r8,r23,16
   1419c:	91000204 	addi	r4,r18,8
   141a0:	b8800215 	stw	r2,8(r23)
   141a4:	90c00117 	ldw	r3,4(r18)
   141a8:	008006c4 	movi	r2,27
   141ac:	b8c00315 	stw	r3,12(r23)
   141b0:	1180072e 	bgeu	r2,r6,141d0 <_realloc_r+0x204>
   141b4:	90c00217 	ldw	r3,8(r18)
   141b8:	ba000604 	addi	r8,r23,24
   141bc:	91000404 	addi	r4,r18,16
   141c0:	b8c00415 	stw	r3,16(r23)
   141c4:	90800317 	ldw	r2,12(r18)
   141c8:	b8800515 	stw	r2,20(r23)
   141cc:	3140e726 	beq	r6,r5,1456c <_realloc_r+0x5a0>
   141d0:	20800017 	ldw	r2,0(r4)
   141d4:	dd000017 	ldw	r20,0(sp)
   141d8:	b80f883a 	mov	r7,r23
   141dc:	40800015 	stw	r2,0(r8)
   141e0:	20c00117 	ldw	r3,4(r4)
   141e4:	40c00115 	stw	r3,4(r8)
   141e8:	20800217 	ldw	r2,8(r4)
   141ec:	40800215 	stw	r2,8(r8)
   141f0:	003f9706 	br	14050 <_realloc_r+0x84>
   141f4:	98a9883a 	add	r20,r19,r2
   141f8:	a1c01f16 	blt	r20,r7,14278 <_realloc_r+0x2ac>
   141fc:	b8c00317 	ldw	r3,12(r23)
   14200:	b8800217 	ldw	r2,8(r23)
   14204:	99bfff04 	addi	r6,r19,-4
   14208:	01400904 	movi	r5,36
   1420c:	b82b883a 	mov	r21,r23
   14210:	18800215 	stw	r2,8(r3)
   14214:	10c00315 	stw	r3,12(r2)
   14218:	bc000204 	addi	r16,r23,8
   1421c:	2980c336 	bltu	r5,r6,1452c <_realloc_r+0x560>
   14220:	008004c4 	movi	r2,19
   14224:	9009883a 	mov	r4,r18
   14228:	8011883a 	mov	r8,r16
   1422c:	11800f2e 	bgeu	r2,r6,1426c <_realloc_r+0x2a0>
   14230:	90800017 	ldw	r2,0(r18)
   14234:	ba000404 	addi	r8,r23,16
   14238:	91000204 	addi	r4,r18,8
   1423c:	b8800215 	stw	r2,8(r23)
   14240:	90c00117 	ldw	r3,4(r18)
   14244:	008006c4 	movi	r2,27
   14248:	b8c00315 	stw	r3,12(r23)
   1424c:	1180072e 	bgeu	r2,r6,1426c <_realloc_r+0x2a0>
   14250:	90c00217 	ldw	r3,8(r18)
   14254:	ba000604 	addi	r8,r23,24
   14258:	91000404 	addi	r4,r18,16
   1425c:	b8c00415 	stw	r3,16(r23)
   14260:	90800317 	ldw	r2,12(r18)
   14264:	b8800515 	stw	r2,20(r23)
   14268:	3140c726 	beq	r6,r5,14588 <_realloc_r+0x5bc>
   1426c:	20800017 	ldw	r2,0(r4)
   14270:	b80f883a 	mov	r7,r23
   14274:	003fd906 	br	141dc <_realloc_r+0x210>
   14278:	880b883a 	mov	r5,r17
   1427c:	b009883a 	mov	r4,r22
   14280:	001318c0 	call	1318c <_malloc_r>
   14284:	1023883a 	mov	r17,r2
   14288:	10002526 	beq	r2,zero,14320 <_realloc_r+0x354>
   1428c:	80800117 	ldw	r2,4(r16)
   14290:	00ffff84 	movi	r3,-2
   14294:	893ffe04 	addi	r4,r17,-8
   14298:	10c4703a 	and	r2,r2,r3
   1429c:	8085883a 	add	r2,r16,r2
   142a0:	20809526 	beq	r4,r2,144f8 <_realloc_r+0x52c>
   142a4:	99bfff04 	addi	r6,r19,-4
   142a8:	01c00904 	movi	r7,36
   142ac:	39804536 	bltu	r7,r6,143c4 <_realloc_r+0x3f8>
   142b0:	008004c4 	movi	r2,19
   142b4:	9009883a 	mov	r4,r18
   142b8:	880b883a 	mov	r5,r17
   142bc:	11800f2e 	bgeu	r2,r6,142fc <_realloc_r+0x330>
   142c0:	90800017 	ldw	r2,0(r18)
   142c4:	89400204 	addi	r5,r17,8
   142c8:	91000204 	addi	r4,r18,8
   142cc:	88800015 	stw	r2,0(r17)
   142d0:	90c00117 	ldw	r3,4(r18)
   142d4:	008006c4 	movi	r2,27
   142d8:	88c00115 	stw	r3,4(r17)
   142dc:	1180072e 	bgeu	r2,r6,142fc <_realloc_r+0x330>
   142e0:	90c00217 	ldw	r3,8(r18)
   142e4:	89400404 	addi	r5,r17,16
   142e8:	91000404 	addi	r4,r18,16
   142ec:	88c00215 	stw	r3,8(r17)
   142f0:	90800317 	ldw	r2,12(r18)
   142f4:	88800315 	stw	r2,12(r17)
   142f8:	31c09126 	beq	r6,r7,14540 <_realloc_r+0x574>
   142fc:	20800017 	ldw	r2,0(r4)
   14300:	28800015 	stw	r2,0(r5)
   14304:	20c00117 	ldw	r3,4(r4)
   14308:	28c00115 	stw	r3,4(r5)
   1430c:	20800217 	ldw	r2,8(r4)
   14310:	28800215 	stw	r2,8(r5)
   14314:	900b883a 	mov	r5,r18
   14318:	b009883a 	mov	r4,r22
   1431c:	00121cc0 	call	121cc <_free_r>
   14320:	b009883a 	mov	r4,r22
   14324:	001b8e00 	call	1b8e0 <__malloc_unlock>
   14328:	003f5e06 	br	140a4 <_realloc_r+0xd8>
   1432c:	300b883a 	mov	r5,r6
   14330:	dfc00b17 	ldw	ra,44(sp)
   14334:	df000a17 	ldw	fp,40(sp)
   14338:	ddc00917 	ldw	r23,36(sp)
   1433c:	dd800817 	ldw	r22,32(sp)
   14340:	dd400717 	ldw	r21,28(sp)
   14344:	dd000617 	ldw	r20,24(sp)
   14348:	dcc00517 	ldw	r19,20(sp)
   1434c:	dc800417 	ldw	r18,16(sp)
   14350:	dc400317 	ldw	r17,12(sp)
   14354:	dc000217 	ldw	r16,8(sp)
   14358:	dec00c04 	addi	sp,sp,48
   1435c:	001318c1 	jmpi	1318c <_malloc_r>
   14360:	38800117 	ldw	r2,4(r7)
   14364:	e54b883a 	add	r5,fp,r21
   14368:	31000054 	ori	r4,r6,1
   1436c:	1080004c 	andi	r2,r2,1
   14370:	1704b03a 	or	r2,r2,fp
   14374:	38800115 	stw	r2,4(r7)
   14378:	29000115 	stw	r4,4(r5)
   1437c:	2987883a 	add	r3,r5,r6
   14380:	18800117 	ldw	r2,4(r3)
   14384:	29400204 	addi	r5,r5,8
   14388:	b009883a 	mov	r4,r22
   1438c:	10800054 	ori	r2,r2,1
   14390:	18800115 	stw	r2,4(r3)
   14394:	00121cc0 	call	121cc <_free_r>
   14398:	003f3806 	br	1407c <_realloc_r+0xb0>
   1439c:	000d883a 	mov	r6,zero
   143a0:	0009883a 	mov	r4,zero
   143a4:	003f5d06 	br	1411c <_realloc_r+0x150>
   143a8:	30c00217 	ldw	r3,8(r6)
   143ac:	30800317 	ldw	r2,12(r6)
   143b0:	800f883a 	mov	r7,r16
   143b4:	84000204 	addi	r16,r16,8
   143b8:	10c00215 	stw	r3,8(r2)
   143bc:	18800315 	stw	r2,12(r3)
   143c0:	003f2306 	br	14050 <_realloc_r+0x84>
   143c4:	8809883a 	mov	r4,r17
   143c8:	900b883a 	mov	r5,r18
   143cc:	0013ac40 	call	13ac4 <memmove>
   143d0:	003fd006 	br	14314 <_realloc_r+0x348>
   143d4:	30800117 	ldw	r2,4(r6)
   143d8:	e0c00404 	addi	r3,fp,16
   143dc:	1108703a 	and	r4,r2,r4
   143e0:	9905883a 	add	r2,r19,r4
   143e4:	10ff4d16 	blt	r2,r3,1411c <_realloc_r+0x150>
   143e8:	1705c83a 	sub	r2,r2,fp
   143ec:	870b883a 	add	r5,r16,fp
   143f0:	10800054 	ori	r2,r2,1
   143f4:	28800115 	stw	r2,4(r5)
   143f8:	80c00117 	ldw	r3,4(r16)
   143fc:	008000b4 	movhi	r2,2
   14400:	10bdfc04 	addi	r2,r2,-2064
   14404:	b009883a 	mov	r4,r22
   14408:	18c0004c 	andi	r3,r3,1
   1440c:	e0c6b03a 	or	r3,fp,r3
   14410:	11400215 	stw	r5,8(r2)
   14414:	80c00115 	stw	r3,4(r16)
   14418:	001b8e00 	call	1b8e0 <__malloc_unlock>
   1441c:	84400204 	addi	r17,r16,8
   14420:	003f2006 	br	140a4 <_realloc_r+0xd8>
   14424:	98a9883a 	add	r20,r19,r2
   14428:	2509883a 	add	r4,r4,r20
   1442c:	e0800404 	addi	r2,fp,16
   14430:	d9000115 	stw	r4,4(sp)
   14434:	20bf7016 	blt	r4,r2,141f8 <_realloc_r+0x22c>
   14438:	b8c00317 	ldw	r3,12(r23)
   1443c:	b8800217 	ldw	r2,8(r23)
   14440:	99bfff04 	addi	r6,r19,-4
   14444:	01400904 	movi	r5,36
   14448:	18800215 	stw	r2,8(r3)
   1444c:	10c00315 	stw	r3,12(r2)
   14450:	bc400204 	addi	r17,r23,8
   14454:	29804136 	bltu	r5,r6,1455c <_realloc_r+0x590>
   14458:	008004c4 	movi	r2,19
   1445c:	9009883a 	mov	r4,r18
   14460:	880f883a 	mov	r7,r17
   14464:	11800f2e 	bgeu	r2,r6,144a4 <_realloc_r+0x4d8>
   14468:	90800017 	ldw	r2,0(r18)
   1446c:	b9c00404 	addi	r7,r23,16
   14470:	91000204 	addi	r4,r18,8
   14474:	b8800215 	stw	r2,8(r23)
   14478:	90c00117 	ldw	r3,4(r18)
   1447c:	008006c4 	movi	r2,27
   14480:	b8c00315 	stw	r3,12(r23)
   14484:	1180072e 	bgeu	r2,r6,144a4 <_realloc_r+0x4d8>
   14488:	90c00217 	ldw	r3,8(r18)
   1448c:	b9c00604 	addi	r7,r23,24
   14490:	91000404 	addi	r4,r18,16
   14494:	b8c00415 	stw	r3,16(r23)
   14498:	90800317 	ldw	r2,12(r18)
   1449c:	b8800515 	stw	r2,20(r23)
   144a0:	31404026 	beq	r6,r5,145a4 <_realloc_r+0x5d8>
   144a4:	20800017 	ldw	r2,0(r4)
   144a8:	38800015 	stw	r2,0(r7)
   144ac:	20c00117 	ldw	r3,4(r4)
   144b0:	38c00115 	stw	r3,4(r7)
   144b4:	20800217 	ldw	r2,8(r4)
   144b8:	38800215 	stw	r2,8(r7)
   144bc:	d8c00117 	ldw	r3,4(sp)
   144c0:	bf0b883a 	add	r5,r23,fp
   144c4:	b009883a 	mov	r4,r22
   144c8:	1f05c83a 	sub	r2,r3,fp
   144cc:	10800054 	ori	r2,r2,1
   144d0:	28800115 	stw	r2,4(r5)
   144d4:	b8c00117 	ldw	r3,4(r23)
   144d8:	008000b4 	movhi	r2,2
   144dc:	10bdfc04 	addi	r2,r2,-2064
   144e0:	11400215 	stw	r5,8(r2)
   144e4:	18c0004c 	andi	r3,r3,1
   144e8:	e0c6b03a 	or	r3,fp,r3
   144ec:	b8c00115 	stw	r3,4(r23)
   144f0:	001b8e00 	call	1b8e0 <__malloc_unlock>
   144f4:	003eeb06 	br	140a4 <_realloc_r+0xd8>
   144f8:	20800117 	ldw	r2,4(r4)
   144fc:	00ffff04 	movi	r3,-4
   14500:	800f883a 	mov	r7,r16
   14504:	10c4703a 	and	r2,r2,r3
   14508:	98a9883a 	add	r20,r19,r2
   1450c:	84000204 	addi	r16,r16,8
   14510:	003ecf06 	br	14050 <_realloc_r+0x84>
   14514:	900b883a 	mov	r5,r18
   14518:	8009883a 	mov	r4,r16
   1451c:	0013ac40 	call	13ac4 <memmove>
   14520:	dd000017 	ldw	r20,0(sp)
   14524:	b80f883a 	mov	r7,r23
   14528:	003ec906 	br	14050 <_realloc_r+0x84>
   1452c:	900b883a 	mov	r5,r18
   14530:	8009883a 	mov	r4,r16
   14534:	0013ac40 	call	13ac4 <memmove>
   14538:	b80f883a 	mov	r7,r23
   1453c:	003ec406 	br	14050 <_realloc_r+0x84>
   14540:	90c00417 	ldw	r3,16(r18)
   14544:	89400604 	addi	r5,r17,24
   14548:	91000604 	addi	r4,r18,24
   1454c:	88c00415 	stw	r3,16(r17)
   14550:	90800517 	ldw	r2,20(r18)
   14554:	88800515 	stw	r2,20(r17)
   14558:	003f6806 	br	142fc <_realloc_r+0x330>
   1455c:	900b883a 	mov	r5,r18
   14560:	8809883a 	mov	r4,r17
   14564:	0013ac40 	call	13ac4 <memmove>
   14568:	003fd406 	br	144bc <_realloc_r+0x4f0>
   1456c:	90c00417 	ldw	r3,16(r18)
   14570:	91000604 	addi	r4,r18,24
   14574:	ba000804 	addi	r8,r23,32
   14578:	b8c00615 	stw	r3,24(r23)
   1457c:	90800517 	ldw	r2,20(r18)
   14580:	b8800715 	stw	r2,28(r23)
   14584:	003f1206 	br	141d0 <_realloc_r+0x204>
   14588:	90c00417 	ldw	r3,16(r18)
   1458c:	91000604 	addi	r4,r18,24
   14590:	ba000804 	addi	r8,r23,32
   14594:	b8c00615 	stw	r3,24(r23)
   14598:	90800517 	ldw	r2,20(r18)
   1459c:	b8800715 	stw	r2,28(r23)
   145a0:	003f3206 	br	1426c <_realloc_r+0x2a0>
   145a4:	90c00417 	ldw	r3,16(r18)
   145a8:	91000604 	addi	r4,r18,24
   145ac:	b9c00804 	addi	r7,r23,32
   145b0:	b8c00615 	stw	r3,24(r23)
   145b4:	90800517 	ldw	r2,20(r18)
   145b8:	b8800715 	stw	r2,28(r23)
   145bc:	003fb906 	br	144a4 <_realloc_r+0x4d8>

000145c0 <__srefill_r>:
   145c0:	defffd04 	addi	sp,sp,-12
   145c4:	dc400115 	stw	r17,4(sp)
   145c8:	dc000015 	stw	r16,0(sp)
   145cc:	dfc00215 	stw	ra,8(sp)
   145d0:	2023883a 	mov	r17,r4
   145d4:	2821883a 	mov	r16,r5
   145d8:	20000226 	beq	r4,zero,145e4 <__srefill_r+0x24>
   145dc:	20800e17 	ldw	r2,56(r4)
   145e0:	10004126 	beq	r2,zero,146e8 <__srefill_r+0x128>
   145e4:	80c0030b 	ldhu	r3,12(r16)
   145e8:	80000115 	stw	zero,4(r16)
   145ec:	1880080c 	andi	r2,r3,32
   145f0:	1000361e 	bne	r2,zero,146cc <__srefill_r+0x10c>
   145f4:	1880010c 	andi	r2,r3,4
   145f8:	1000211e 	bne	r2,zero,14680 <__srefill_r+0xc0>
   145fc:	1880040c 	andi	r2,r3,16
   14600:	10005026 	beq	r2,zero,14744 <__srefill_r+0x184>
   14604:	1880020c 	andi	r2,r3,8
   14608:	1000541e 	bne	r2,zero,1475c <__srefill_r+0x19c>
   1460c:	8080030b 	ldhu	r2,12(r16)
   14610:	10800114 	ori	r2,r2,4
   14614:	8080030d 	sth	r2,12(r16)
   14618:	80800417 	ldw	r2,16(r16)
   1461c:	10004526 	beq	r2,zero,14734 <__srefill_r+0x174>
   14620:	8080030b 	ldhu	r2,12(r16)
   14624:	108000cc 	andi	r2,r2,3
   14628:	1000361e 	bne	r2,zero,14704 <__srefill_r+0x144>
   1462c:	81800417 	ldw	r6,16(r16)
   14630:	80c00817 	ldw	r3,32(r16)
   14634:	81400717 	ldw	r5,28(r16)
   14638:	81c00517 	ldw	r7,20(r16)
   1463c:	8809883a 	mov	r4,r17
   14640:	81800015 	stw	r6,0(r16)
   14644:	183ee83a 	callr	r3
   14648:	80c0030b 	ldhu	r3,12(r16)
   1464c:	1009883a 	mov	r4,r2
   14650:	80800115 	stw	r2,4(r16)
   14654:	00b7ffc4 	movi	r2,-8193
   14658:	1884703a 	and	r2,r3,r2
   1465c:	8080030d 	sth	r2,12(r16)
   14660:	0100230e 	bge	zero,r4,146f0 <__srefill_r+0x130>
   14664:	0009883a 	mov	r4,zero
   14668:	2005883a 	mov	r2,r4
   1466c:	dfc00217 	ldw	ra,8(sp)
   14670:	dc400117 	ldw	r17,4(sp)
   14674:	dc000017 	ldw	r16,0(sp)
   14678:	dec00304 	addi	sp,sp,12
   1467c:	f800283a 	ret
   14680:	81400c17 	ldw	r5,48(r16)
   14684:	283fe426 	beq	r5,zero,14618 <__srefill_r+0x58>
   14688:	80801004 	addi	r2,r16,64
   1468c:	28800226 	beq	r5,r2,14698 <__srefill_r+0xd8>
   14690:	8809883a 	mov	r4,r17
   14694:	00121cc0 	call	121cc <_free_r>
   14698:	80800f17 	ldw	r2,60(r16)
   1469c:	80000c15 	stw	zero,48(r16)
   146a0:	80800115 	stw	r2,4(r16)
   146a4:	103fdc26 	beq	r2,zero,14618 <__srefill_r+0x58>
   146a8:	80800e17 	ldw	r2,56(r16)
   146ac:	0009883a 	mov	r4,zero
   146b0:	80800015 	stw	r2,0(r16)
   146b4:	2005883a 	mov	r2,r4
   146b8:	dfc00217 	ldw	ra,8(sp)
   146bc:	dc400117 	ldw	r17,4(sp)
   146c0:	dc000017 	ldw	r16,0(sp)
   146c4:	dec00304 	addi	sp,sp,12
   146c8:	f800283a 	ret
   146cc:	013fffc4 	movi	r4,-1
   146d0:	2005883a 	mov	r2,r4
   146d4:	dfc00217 	ldw	ra,8(sp)
   146d8:	dc400117 	ldw	r17,4(sp)
   146dc:	dc000017 	ldw	r16,0(sp)
   146e0:	dec00304 	addi	sp,sp,12
   146e4:	f800283a 	ret
   146e8:	0011bec0 	call	11bec <__sinit>
   146ec:	003fbd06 	br	145e4 <__srefill_r+0x24>
   146f0:	20000b1e 	bne	r4,zero,14720 <__srefill_r+0x160>
   146f4:	10800814 	ori	r2,r2,32
   146f8:	013fffc4 	movi	r4,-1
   146fc:	8080030d 	sth	r2,12(r16)
   14700:	003fd906 	br	14668 <__srefill_r+0xa8>
   14704:	008000b4 	movhi	r2,2
   14708:	1083ad04 	addi	r2,r2,3764
   1470c:	11000017 	ldw	r4,0(r2)
   14710:	01400074 	movhi	r5,1
   14714:	2951e104 	addi	r5,r5,18308
   14718:	0012f180 	call	12f18 <_fwalk>
   1471c:	003fc306 	br	1462c <__srefill_r+0x6c>
   14720:	10801014 	ori	r2,r2,64
   14724:	013fffc4 	movi	r4,-1
   14728:	8080030d 	sth	r2,12(r16)
   1472c:	80000115 	stw	zero,4(r16)
   14730:	003fcd06 	br	14668 <__srefill_r+0xa8>
   14734:	8809883a 	mov	r4,r17
   14738:	800b883a 	mov	r5,r16
   1473c:	0012fd00 	call	12fd0 <__smakebuf_r>
   14740:	003fb706 	br	14620 <__srefill_r+0x60>
   14744:	18c01014 	ori	r3,r3,64
   14748:	00800244 	movi	r2,9
   1474c:	013fffc4 	movi	r4,-1
   14750:	88800015 	stw	r2,0(r17)
   14754:	80c0030d 	sth	r3,12(r16)
   14758:	003fc306 	br	14668 <__srefill_r+0xa8>
   1475c:	8809883a 	mov	r4,r17
   14760:	800b883a 	mov	r5,r16
   14764:	00117e80 	call	117e8 <_fflush_r>
   14768:	103fd81e 	bne	r2,zero,146cc <__srefill_r+0x10c>
   1476c:	8080030b 	ldhu	r2,12(r16)
   14770:	80000215 	stw	zero,8(r16)
   14774:	80000615 	stw	zero,24(r16)
   14778:	10bffdcc 	andi	r2,r2,65527
   1477c:	8080030d 	sth	r2,12(r16)
   14780:	003fa206 	br	1460c <__srefill_r+0x4c>

00014784 <lflush>:
   14784:	20c0030b 	ldhu	r3,12(r4)
   14788:	01400244 	movi	r5,9
   1478c:	0005883a 	mov	r2,zero
   14790:	18c0024c 	andi	r3,r3,9
   14794:	19400126 	beq	r3,r5,1479c <lflush+0x18>
   14798:	f800283a 	ret
   1479c:	00119e41 	jmpi	119e4 <fflush>

000147a0 <_sbrk_r>:
   147a0:	defffd04 	addi	sp,sp,-12
   147a4:	dc000015 	stw	r16,0(sp)
   147a8:	040000b4 	movhi	r16,2
   147ac:	840ab304 	addi	r16,r16,10956
   147b0:	dc400115 	stw	r17,4(sp)
   147b4:	80000015 	stw	zero,0(r16)
   147b8:	2023883a 	mov	r17,r4
   147bc:	2809883a 	mov	r4,r5
   147c0:	dfc00215 	stw	ra,8(sp)
   147c4:	001bda40 	call	1bda4 <sbrk>
   147c8:	1007883a 	mov	r3,r2
   147cc:	00bfffc4 	movi	r2,-1
   147d0:	18800626 	beq	r3,r2,147ec <_sbrk_r+0x4c>
   147d4:	1805883a 	mov	r2,r3
   147d8:	dfc00217 	ldw	ra,8(sp)
   147dc:	dc400117 	ldw	r17,4(sp)
   147e0:	dc000017 	ldw	r16,0(sp)
   147e4:	dec00304 	addi	sp,sp,12
   147e8:	f800283a 	ret
   147ec:	80800017 	ldw	r2,0(r16)
   147f0:	103ff826 	beq	r2,zero,147d4 <_sbrk_r+0x34>
   147f4:	88800015 	stw	r2,0(r17)
   147f8:	1805883a 	mov	r2,r3
   147fc:	dfc00217 	ldw	ra,8(sp)
   14800:	dc400117 	ldw	r17,4(sp)
   14804:	dc000017 	ldw	r16,0(sp)
   14808:	dec00304 	addi	sp,sp,12
   1480c:	f800283a 	ret

00014810 <_raise_r>:
   14810:	defffd04 	addi	sp,sp,-12
   14814:	008007c4 	movi	r2,31
   14818:	dc400115 	stw	r17,4(sp)
   1481c:	dc000015 	stw	r16,0(sp)
   14820:	dfc00215 	stw	ra,8(sp)
   14824:	2821883a 	mov	r16,r5
   14828:	2023883a 	mov	r17,r4
   1482c:	11402736 	bltu	r2,r5,148cc <_raise_r+0xbc>
   14830:	20c0b717 	ldw	r3,732(r4)
   14834:	18001326 	beq	r3,zero,14884 <_raise_r+0x74>
   14838:	2945883a 	add	r2,r5,r5
   1483c:	1085883a 	add	r2,r2,r2
   14840:	188b883a 	add	r5,r3,r2
   14844:	28c00017 	ldw	r3,0(r5)
   14848:	18000e26 	beq	r3,zero,14884 <_raise_r+0x74>
   1484c:	01000044 	movi	r4,1
   14850:	19000526 	beq	r3,r4,14868 <_raise_r+0x58>
   14854:	00bfffc4 	movi	r2,-1
   14858:	18801326 	beq	r3,r2,148a8 <_raise_r+0x98>
   1485c:	28000015 	stw	zero,0(r5)
   14860:	8009883a 	mov	r4,r16
   14864:	183ee83a 	callr	r3
   14868:	0007883a 	mov	r3,zero
   1486c:	1805883a 	mov	r2,r3
   14870:	dfc00217 	ldw	ra,8(sp)
   14874:	dc400117 	ldw	r17,4(sp)
   14878:	dc000017 	ldw	r16,0(sp)
   1487c:	dec00304 	addi	sp,sp,12
   14880:	f800283a 	ret
   14884:	0014ae80 	call	14ae8 <_getpid_r>
   14888:	100b883a 	mov	r5,r2
   1488c:	8809883a 	mov	r4,r17
   14890:	800d883a 	mov	r6,r16
   14894:	dfc00217 	ldw	ra,8(sp)
   14898:	dc400117 	ldw	r17,4(sp)
   1489c:	dc000017 	ldw	r16,0(sp)
   148a0:	dec00304 	addi	sp,sp,12
   148a4:	0014aec1 	jmpi	14aec <_kill_r>
   148a8:	2007883a 	mov	r3,r4
   148ac:	00800584 	movi	r2,22
   148b0:	88800015 	stw	r2,0(r17)
   148b4:	1805883a 	mov	r2,r3
   148b8:	dfc00217 	ldw	ra,8(sp)
   148bc:	dc400117 	ldw	r17,4(sp)
   148c0:	dc000017 	ldw	r16,0(sp)
   148c4:	dec00304 	addi	sp,sp,12
   148c8:	f800283a 	ret
   148cc:	00800584 	movi	r2,22
   148d0:	00ffffc4 	movi	r3,-1
   148d4:	20800015 	stw	r2,0(r4)
   148d8:	003fe406 	br	1486c <_raise_r+0x5c>

000148dc <raise>:
   148dc:	008000b4 	movhi	r2,2
   148e0:	1083ac04 	addi	r2,r2,3760
   148e4:	200b883a 	mov	r5,r4
   148e8:	11000017 	ldw	r4,0(r2)
   148ec:	00148101 	jmpi	14810 <_raise_r>

000148f0 <_init_signal_r>:
   148f0:	2080b717 	ldw	r2,732(r4)
   148f4:	defffe04 	addi	sp,sp,-8
   148f8:	dc000015 	stw	r16,0(sp)
   148fc:	dfc00115 	stw	ra,4(sp)
   14900:	2021883a 	mov	r16,r4
   14904:	10000526 	beq	r2,zero,1491c <_init_signal_r+0x2c>
   14908:	0005883a 	mov	r2,zero
   1490c:	dfc00117 	ldw	ra,4(sp)
   14910:	dc000017 	ldw	r16,0(sp)
   14914:	dec00204 	addi	sp,sp,8
   14918:	f800283a 	ret
   1491c:	01402004 	movi	r5,128
   14920:	001318c0 	call	1318c <_malloc_r>
   14924:	1009883a 	mov	r4,r2
   14928:	8080b715 	stw	r2,732(r16)
   1492c:	10000726 	beq	r2,zero,1494c <_init_signal_r+0x5c>
   14930:	0007883a 	mov	r3,zero
   14934:	01402004 	movi	r5,128
   14938:	20c5883a 	add	r2,r4,r3
   1493c:	18c00104 	addi	r3,r3,4
   14940:	10000015 	stw	zero,0(r2)
   14944:	197ffc1e 	bne	r3,r5,14938 <_init_signal_r+0x48>
   14948:	003fef06 	br	14908 <_init_signal_r+0x18>
   1494c:	00bfffc4 	movi	r2,-1
   14950:	003fee06 	br	1490c <_init_signal_r+0x1c>

00014954 <_init_signal>:
   14954:	008000b4 	movhi	r2,2
   14958:	1083ac04 	addi	r2,r2,3760
   1495c:	11000017 	ldw	r4,0(r2)
   14960:	00148f01 	jmpi	148f0 <_init_signal_r>

00014964 <__sigtramp_r>:
   14964:	defffd04 	addi	sp,sp,-12
   14968:	008007c4 	movi	r2,31
   1496c:	dc000115 	stw	r16,4(sp)
   14970:	dfc00215 	stw	ra,8(sp)
   14974:	2021883a 	mov	r16,r4
   14978:	11401336 	bltu	r2,r5,149c8 <__sigtramp_r+0x64>
   1497c:	20c0b717 	ldw	r3,732(r4)
   14980:	18001f26 	beq	r3,zero,14a00 <__sigtramp_r+0x9c>
   14984:	2945883a 	add	r2,r5,r5
   14988:	1085883a 	add	r2,r2,r2
   1498c:	10c9883a 	add	r4,r2,r3
   14990:	20c00017 	ldw	r3,0(r4)
   14994:	18001626 	beq	r3,zero,149f0 <__sigtramp_r+0x8c>
   14998:	00bfffc4 	movi	r2,-1
   1499c:	18801626 	beq	r3,r2,149f8 <__sigtramp_r+0x94>
   149a0:	00800044 	movi	r2,1
   149a4:	18800d26 	beq	r3,r2,149dc <__sigtramp_r+0x78>
   149a8:	20000015 	stw	zero,0(r4)
   149ac:	2809883a 	mov	r4,r5
   149b0:	183ee83a 	callr	r3
   149b4:	0005883a 	mov	r2,zero
   149b8:	dfc00217 	ldw	ra,8(sp)
   149bc:	dc000117 	ldw	r16,4(sp)
   149c0:	dec00304 	addi	sp,sp,12
   149c4:	f800283a 	ret
   149c8:	00bfffc4 	movi	r2,-1
   149cc:	dfc00217 	ldw	ra,8(sp)
   149d0:	dc000117 	ldw	r16,4(sp)
   149d4:	dec00304 	addi	sp,sp,12
   149d8:	f800283a 	ret
   149dc:	008000c4 	movi	r2,3
   149e0:	dfc00217 	ldw	ra,8(sp)
   149e4:	dc000117 	ldw	r16,4(sp)
   149e8:	dec00304 	addi	sp,sp,12
   149ec:	f800283a 	ret
   149f0:	00800044 	movi	r2,1
   149f4:	003ff006 	br	149b8 <__sigtramp_r+0x54>
   149f8:	00800084 	movi	r2,2
   149fc:	003fee06 	br	149b8 <__sigtramp_r+0x54>
   14a00:	d9400015 	stw	r5,0(sp)
   14a04:	00148f00 	call	148f0 <_init_signal_r>
   14a08:	d9400017 	ldw	r5,0(sp)
   14a0c:	103fee1e 	bne	r2,zero,149c8 <__sigtramp_r+0x64>
   14a10:	80c0b717 	ldw	r3,732(r16)
   14a14:	003fdb06 	br	14984 <__sigtramp_r+0x20>

00014a18 <__sigtramp>:
   14a18:	008000b4 	movhi	r2,2
   14a1c:	1083ac04 	addi	r2,r2,3760
   14a20:	200b883a 	mov	r5,r4
   14a24:	11000017 	ldw	r4,0(r2)
   14a28:	00149641 	jmpi	14964 <__sigtramp_r>

00014a2c <_signal_r>:
   14a2c:	defffc04 	addi	sp,sp,-16
   14a30:	008007c4 	movi	r2,31
   14a34:	dc800215 	stw	r18,8(sp)
   14a38:	dc400115 	stw	r17,4(sp)
   14a3c:	dc000015 	stw	r16,0(sp)
   14a40:	dfc00315 	stw	ra,12(sp)
   14a44:	2823883a 	mov	r17,r5
   14a48:	00ffffc4 	movi	r3,-1
   14a4c:	3025883a 	mov	r18,r6
   14a50:	2021883a 	mov	r16,r4
   14a54:	1140092e 	bgeu	r2,r5,14a7c <_signal_r+0x50>
   14a58:	00800584 	movi	r2,22
   14a5c:	20800015 	stw	r2,0(r4)
   14a60:	1805883a 	mov	r2,r3
   14a64:	dfc00317 	ldw	ra,12(sp)
   14a68:	dc800217 	ldw	r18,8(sp)
   14a6c:	dc400117 	ldw	r17,4(sp)
   14a70:	dc000017 	ldw	r16,0(sp)
   14a74:	dec00404 	addi	sp,sp,16
   14a78:	f800283a 	ret
   14a7c:	2140b717 	ldw	r5,732(r4)
   14a80:	28000c26 	beq	r5,zero,14ab4 <_signal_r+0x88>
   14a84:	8c45883a 	add	r2,r17,r17
   14a88:	1085883a 	add	r2,r2,r2
   14a8c:	1145883a 	add	r2,r2,r5
   14a90:	10c00017 	ldw	r3,0(r2)
   14a94:	14800015 	stw	r18,0(r2)
   14a98:	1805883a 	mov	r2,r3
   14a9c:	dfc00317 	ldw	ra,12(sp)
   14aa0:	dc800217 	ldw	r18,8(sp)
   14aa4:	dc400117 	ldw	r17,4(sp)
   14aa8:	dc000017 	ldw	r16,0(sp)
   14aac:	dec00404 	addi	sp,sp,16
   14ab0:	f800283a 	ret
   14ab4:	00148f00 	call	148f0 <_init_signal_r>
   14ab8:	1000021e 	bne	r2,zero,14ac4 <_signal_r+0x98>
   14abc:	8140b717 	ldw	r5,732(r16)
   14ac0:	003ff006 	br	14a84 <_signal_r+0x58>
   14ac4:	00ffffc4 	movi	r3,-1
   14ac8:	003fe506 	br	14a60 <_signal_r+0x34>

00014acc <signal>:
   14acc:	018000b4 	movhi	r6,2
   14ad0:	3183ac04 	addi	r6,r6,3760
   14ad4:	2007883a 	mov	r3,r4
   14ad8:	31000017 	ldw	r4,0(r6)
   14adc:	280d883a 	mov	r6,r5
   14ae0:	180b883a 	mov	r5,r3
   14ae4:	0014a2c1 	jmpi	14a2c <_signal_r>

00014ae8 <_getpid_r>:
   14ae8:	001b3381 	jmpi	1b338 <getpid>

00014aec <_kill_r>:
   14aec:	defffd04 	addi	sp,sp,-12
   14af0:	dc000015 	stw	r16,0(sp)
   14af4:	040000b4 	movhi	r16,2
   14af8:	840ab304 	addi	r16,r16,10956
   14afc:	dc400115 	stw	r17,4(sp)
   14b00:	80000015 	stw	zero,0(r16)
   14b04:	2023883a 	mov	r17,r4
   14b08:	2809883a 	mov	r4,r5
   14b0c:	300b883a 	mov	r5,r6
   14b10:	dfc00215 	stw	ra,8(sp)
   14b14:	001b4780 	call	1b478 <kill>
   14b18:	1007883a 	mov	r3,r2
   14b1c:	00bfffc4 	movi	r2,-1
   14b20:	18800626 	beq	r3,r2,14b3c <_kill_r+0x50>
   14b24:	1805883a 	mov	r2,r3
   14b28:	dfc00217 	ldw	ra,8(sp)
   14b2c:	dc400117 	ldw	r17,4(sp)
   14b30:	dc000017 	ldw	r16,0(sp)
   14b34:	dec00304 	addi	sp,sp,12
   14b38:	f800283a 	ret
   14b3c:	80800017 	ldw	r2,0(r16)
   14b40:	103ff826 	beq	r2,zero,14b24 <_kill_r+0x38>
   14b44:	88800015 	stw	r2,0(r17)
   14b48:	1805883a 	mov	r2,r3
   14b4c:	dfc00217 	ldw	ra,8(sp)
   14b50:	dc400117 	ldw	r17,4(sp)
   14b54:	dc000017 	ldw	r16,0(sp)
   14b58:	dec00304 	addi	sp,sp,12
   14b5c:	f800283a 	ret

00014b60 <__sclose>:
   14b60:	2940038f 	ldh	r5,14(r5)
   14b64:	00171b01 	jmpi	171b0 <_close_r>

00014b68 <__sseek>:
   14b68:	defffe04 	addi	sp,sp,-8
   14b6c:	dc000015 	stw	r16,0(sp)
   14b70:	2821883a 	mov	r16,r5
   14b74:	2940038f 	ldh	r5,14(r5)
   14b78:	dfc00115 	stw	ra,4(sp)
   14b7c:	0018bc00 	call	18bc0 <_lseek_r>
   14b80:	1007883a 	mov	r3,r2
   14b84:	00bfffc4 	movi	r2,-1
   14b88:	18800926 	beq	r3,r2,14bb0 <__sseek+0x48>
   14b8c:	8080030b 	ldhu	r2,12(r16)
   14b90:	80c01415 	stw	r3,80(r16)
   14b94:	10840014 	ori	r2,r2,4096
   14b98:	8080030d 	sth	r2,12(r16)
   14b9c:	1805883a 	mov	r2,r3
   14ba0:	dfc00117 	ldw	ra,4(sp)
   14ba4:	dc000017 	ldw	r16,0(sp)
   14ba8:	dec00204 	addi	sp,sp,8
   14bac:	f800283a 	ret
   14bb0:	8080030b 	ldhu	r2,12(r16)
   14bb4:	10bbffcc 	andi	r2,r2,61439
   14bb8:	8080030d 	sth	r2,12(r16)
   14bbc:	1805883a 	mov	r2,r3
   14bc0:	dfc00117 	ldw	ra,4(sp)
   14bc4:	dc000017 	ldw	r16,0(sp)
   14bc8:	dec00204 	addi	sp,sp,8
   14bcc:	f800283a 	ret

00014bd0 <__swrite>:
   14bd0:	2880030b 	ldhu	r2,12(r5)
   14bd4:	defffb04 	addi	sp,sp,-20
   14bd8:	dcc00315 	stw	r19,12(sp)
   14bdc:	1080400c 	andi	r2,r2,256
   14be0:	dc800215 	stw	r18,8(sp)
   14be4:	dc400115 	stw	r17,4(sp)
   14be8:	dc000015 	stw	r16,0(sp)
   14bec:	3027883a 	mov	r19,r6
   14bf0:	3825883a 	mov	r18,r7
   14bf4:	dfc00415 	stw	ra,16(sp)
   14bf8:	2821883a 	mov	r16,r5
   14bfc:	000d883a 	mov	r6,zero
   14c00:	01c00084 	movi	r7,2
   14c04:	2023883a 	mov	r17,r4
   14c08:	10000226 	beq	r2,zero,14c14 <__swrite+0x44>
   14c0c:	2940038f 	ldh	r5,14(r5)
   14c10:	0018bc00 	call	18bc0 <_lseek_r>
   14c14:	8080030b 	ldhu	r2,12(r16)
   14c18:	8140038f 	ldh	r5,14(r16)
   14c1c:	8809883a 	mov	r4,r17
   14c20:	10bbffcc 	andi	r2,r2,61439
   14c24:	980d883a 	mov	r6,r19
   14c28:	900f883a 	mov	r7,r18
   14c2c:	8080030d 	sth	r2,12(r16)
   14c30:	dfc00417 	ldw	ra,16(sp)
   14c34:	dcc00317 	ldw	r19,12(sp)
   14c38:	dc800217 	ldw	r18,8(sp)
   14c3c:	dc400117 	ldw	r17,4(sp)
   14c40:	dc000017 	ldw	r16,0(sp)
   14c44:	dec00504 	addi	sp,sp,20
   14c48:	0016ffc1 	jmpi	16ffc <_write_r>

00014c4c <__sread>:
   14c4c:	defffe04 	addi	sp,sp,-8
   14c50:	dc000015 	stw	r16,0(sp)
   14c54:	2821883a 	mov	r16,r5
   14c58:	2940038f 	ldh	r5,14(r5)
   14c5c:	dfc00115 	stw	ra,4(sp)
   14c60:	0019c2c0 	call	19c2c <_read_r>
   14c64:	1007883a 	mov	r3,r2
   14c68:	10000816 	blt	r2,zero,14c8c <__sread+0x40>
   14c6c:	80801417 	ldw	r2,80(r16)
   14c70:	10c5883a 	add	r2,r2,r3
   14c74:	80801415 	stw	r2,80(r16)
   14c78:	1805883a 	mov	r2,r3
   14c7c:	dfc00117 	ldw	ra,4(sp)
   14c80:	dc000017 	ldw	r16,0(sp)
   14c84:	dec00204 	addi	sp,sp,8
   14c88:	f800283a 	ret
   14c8c:	8080030b 	ldhu	r2,12(r16)
   14c90:	10bbffcc 	andi	r2,r2,61439
   14c94:	8080030d 	sth	r2,12(r16)
   14c98:	1805883a 	mov	r2,r3
   14c9c:	dfc00117 	ldw	ra,4(sp)
   14ca0:	dc000017 	ldw	r16,0(sp)
   14ca4:	dec00204 	addi	sp,sp,8
   14ca8:	f800283a 	ret

00014cac <strlen>:
   14cac:	208000cc 	andi	r2,r4,3
   14cb0:	2011883a 	mov	r8,r4
   14cb4:	1000161e 	bne	r2,zero,14d10 <strlen+0x64>
   14cb8:	20c00017 	ldw	r3,0(r4)
   14cbc:	017fbff4 	movhi	r5,65279
   14cc0:	297fbfc4 	addi	r5,r5,-257
   14cc4:	01e02074 	movhi	r7,32897
   14cc8:	39e02004 	addi	r7,r7,-32640
   14ccc:	1945883a 	add	r2,r3,r5
   14cd0:	11c4703a 	and	r2,r2,r7
   14cd4:	00c6303a 	nor	r3,zero,r3
   14cd8:	1886703a 	and	r3,r3,r2
   14cdc:	18000c1e 	bne	r3,zero,14d10 <strlen+0x64>
   14ce0:	280d883a 	mov	r6,r5
   14ce4:	380b883a 	mov	r5,r7
   14ce8:	21000104 	addi	r4,r4,4
   14cec:	20800017 	ldw	r2,0(r4)
   14cf0:	1187883a 	add	r3,r2,r6
   14cf4:	1946703a 	and	r3,r3,r5
   14cf8:	0084303a 	nor	r2,zero,r2
   14cfc:	10c4703a 	and	r2,r2,r3
   14d00:	103ff926 	beq	r2,zero,14ce8 <strlen+0x3c>
   14d04:	20800007 	ldb	r2,0(r4)
   14d08:	10000326 	beq	r2,zero,14d18 <strlen+0x6c>
   14d0c:	21000044 	addi	r4,r4,1
   14d10:	20800007 	ldb	r2,0(r4)
   14d14:	103ffd1e 	bne	r2,zero,14d0c <strlen+0x60>
   14d18:	2205c83a 	sub	r2,r4,r8
   14d1c:	f800283a 	ret

00014d20 <_strtol_r>:
   14d20:	defff304 	addi	sp,sp,-52
   14d24:	008000b4 	movhi	r2,2
   14d28:	1083b004 	addi	r2,r2,3776
   14d2c:	dcc00615 	stw	r19,24(sp)
   14d30:	14c00017 	ldw	r19,0(r2)
   14d34:	ddc00a15 	stw	r23,40(sp)
   14d38:	dc000315 	stw	r16,12(sp)
   14d3c:	dfc00c15 	stw	ra,48(sp)
   14d40:	df000b15 	stw	fp,44(sp)
   14d44:	dd800915 	stw	r22,36(sp)
   14d48:	dd400815 	stw	r21,32(sp)
   14d4c:	dd000715 	stw	r20,28(sp)
   14d50:	dc800515 	stw	r18,20(sp)
   14d54:	dc400415 	stw	r17,16(sp)
   14d58:	282f883a 	mov	r23,r5
   14d5c:	d9000015 	stw	r4,0(sp)
   14d60:	d9800115 	stw	r6,4(sp)
   14d64:	2821883a 	mov	r16,r5
   14d68:	84400007 	ldb	r17,0(r16)
   14d6c:	84000044 	addi	r16,r16,1
   14d70:	9c47883a 	add	r3,r19,r17
   14d74:	18800003 	ldbu	r2,0(r3)
   14d78:	1080020c 	andi	r2,r2,8
   14d7c:	103ffa1e 	bne	r2,zero,14d68 <_strtol_r+0x48>
   14d80:	00800b44 	movi	r2,45
   14d84:	88805c26 	beq	r17,r2,14ef8 <_strtol_r+0x1d8>
   14d88:	00800ac4 	movi	r2,43
   14d8c:	88805726 	beq	r17,r2,14eec <_strtol_r+0x1cc>
   14d90:	0039883a 	mov	fp,zero
   14d94:	3807003a 	cmpeq	r3,r7,zero
   14d98:	1800431e 	bne	r3,zero,14ea8 <_strtol_r+0x188>
   14d9c:	00800404 	movi	r2,16
   14da0:	38804126 	beq	r7,r2,14ea8 <_strtol_r+0x188>
   14da4:	3829883a 	mov	r20,r7
   14da8:	e02cc03a 	cmpne	r22,fp,zero
   14dac:	b0004b1e 	bne	r22,zero,14edc <_strtol_r+0x1bc>
   14db0:	04a00034 	movhi	r18,32768
   14db4:	94bfffc4 	addi	r18,r18,-1
   14db8:	9009883a 	mov	r4,r18
   14dbc:	a00b883a 	mov	r5,r20
   14dc0:	d9c00215 	stw	r7,8(sp)
   14dc4:	00108480 	call	10848 <__umodsi3>
   14dc8:	9009883a 	mov	r4,r18
   14dcc:	a00b883a 	mov	r5,r20
   14dd0:	102b883a 	mov	r21,r2
   14dd4:	00108400 	call	10840 <__udivsi3>
   14dd8:	1011883a 	mov	r8,r2
   14ddc:	9c45883a 	add	r2,r19,r17
   14de0:	11000003 	ldbu	r4,0(r2)
   14de4:	000b883a 	mov	r5,zero
   14de8:	000d883a 	mov	r6,zero
   14dec:	20c0010c 	andi	r3,r4,4
   14df0:	d9c00217 	ldw	r7,8(sp)
   14df4:	18000e26 	beq	r3,zero,14e30 <_strtol_r+0x110>
   14df8:	88fff404 	addi	r3,r17,-48
   14dfc:	19c0140e 	bge	r3,r7,14e50 <_strtol_r+0x130>
   14e00:	30003116 	blt	r6,zero,14ec8 <_strtol_r+0x1a8>
   14e04:	41403036 	bltu	r8,r5,14ec8 <_strtol_r+0x1a8>
   14e08:	2a002e26 	beq	r5,r8,14ec4 <_strtol_r+0x1a4>
   14e0c:	2d05383a 	mul	r2,r5,r20
   14e10:	01800044 	movi	r6,1
   14e14:	10cb883a 	add	r5,r2,r3
   14e18:	84400007 	ldb	r17,0(r16)
   14e1c:	84000044 	addi	r16,r16,1
   14e20:	9c45883a 	add	r2,r19,r17
   14e24:	11000003 	ldbu	r4,0(r2)
   14e28:	20c0010c 	andi	r3,r4,4
   14e2c:	183ff21e 	bne	r3,zero,14df8 <_strtol_r+0xd8>
   14e30:	208000cc 	andi	r2,r4,3
   14e34:	10000626 	beq	r2,zero,14e50 <_strtol_r+0x130>
   14e38:	2080004c 	andi	r2,r4,1
   14e3c:	1005003a 	cmpeq	r2,r2,zero
   14e40:	1000231e 	bne	r2,zero,14ed0 <_strtol_r+0x1b0>
   14e44:	00800dc4 	movi	r2,55
   14e48:	8887c83a 	sub	r3,r17,r2
   14e4c:	19ffec16 	blt	r3,r7,14e00 <_strtol_r+0xe0>
   14e50:	30002d16 	blt	r6,zero,14f08 <_strtol_r+0x1e8>
   14e54:	b000231e 	bne	r22,zero,14ee4 <_strtol_r+0x1c4>
   14e58:	2807883a 	mov	r3,r5
   14e5c:	d8800117 	ldw	r2,4(sp)
   14e60:	10000426 	beq	r2,zero,14e74 <_strtol_r+0x154>
   14e64:	30000126 	beq	r6,zero,14e6c <_strtol_r+0x14c>
   14e68:	85ffffc4 	addi	r23,r16,-1
   14e6c:	d9000117 	ldw	r4,4(sp)
   14e70:	25c00015 	stw	r23,0(r4)
   14e74:	1805883a 	mov	r2,r3
   14e78:	dfc00c17 	ldw	ra,48(sp)
   14e7c:	df000b17 	ldw	fp,44(sp)
   14e80:	ddc00a17 	ldw	r23,40(sp)
   14e84:	dd800917 	ldw	r22,36(sp)
   14e88:	dd400817 	ldw	r21,32(sp)
   14e8c:	dd000717 	ldw	r20,28(sp)
   14e90:	dcc00617 	ldw	r19,24(sp)
   14e94:	dc800517 	ldw	r18,20(sp)
   14e98:	dc400417 	ldw	r17,16(sp)
   14e9c:	dc000317 	ldw	r16,12(sp)
   14ea0:	dec00d04 	addi	sp,sp,52
   14ea4:	f800283a 	ret
   14ea8:	00800c04 	movi	r2,48
   14eac:	88801d26 	beq	r17,r2,14f24 <_strtol_r+0x204>
   14eb0:	183fbc26 	beq	r3,zero,14da4 <_strtol_r+0x84>
   14eb4:	00800c04 	movi	r2,48
   14eb8:	88802726 	beq	r17,r2,14f58 <_strtol_r+0x238>
   14ebc:	01c00284 	movi	r7,10
   14ec0:	003fb806 	br	14da4 <_strtol_r+0x84>
   14ec4:	a8ffd10e 	bge	r21,r3,14e0c <_strtol_r+0xec>
   14ec8:	01bfffc4 	movi	r6,-1
   14ecc:	003fd206 	br	14e18 <_strtol_r+0xf8>
   14ed0:	008015c4 	movi	r2,87
   14ed4:	8887c83a 	sub	r3,r17,r2
   14ed8:	003fdc06 	br	14e4c <_strtol_r+0x12c>
   14edc:	04a00034 	movhi	r18,32768
   14ee0:	003fb506 	br	14db8 <_strtol_r+0x98>
   14ee4:	0147c83a 	sub	r3,zero,r5
   14ee8:	003fdc06 	br	14e5c <_strtol_r+0x13c>
   14eec:	84400007 	ldb	r17,0(r16)
   14ef0:	84000044 	addi	r16,r16,1
   14ef4:	003fa606 	br	14d90 <_strtol_r+0x70>
   14ef8:	84400007 	ldb	r17,0(r16)
   14efc:	07000044 	movi	fp,1
   14f00:	84000044 	addi	r16,r16,1
   14f04:	003fa306 	br	14d94 <_strtol_r+0x74>
   14f08:	e005003a 	cmpeq	r2,fp,zero
   14f0c:	10000f1e 	bne	r2,zero,14f4c <_strtol_r+0x22c>
   14f10:	00e00034 	movhi	r3,32768
   14f14:	d9000017 	ldw	r4,0(sp)
   14f18:	00800884 	movi	r2,34
   14f1c:	20800015 	stw	r2,0(r4)
   14f20:	003fce06 	br	14e5c <_strtol_r+0x13c>
   14f24:	81000007 	ldb	r4,0(r16)
   14f28:	00801e04 	movi	r2,120
   14f2c:	20800226 	beq	r4,r2,14f38 <_strtol_r+0x218>
   14f30:	00801604 	movi	r2,88
   14f34:	20bfde1e 	bne	r4,r2,14eb0 <_strtol_r+0x190>
   14f38:	84400047 	ldb	r17,1(r16)
   14f3c:	01c00404 	movi	r7,16
   14f40:	84000084 	addi	r16,r16,2
   14f44:	3829883a 	mov	r20,r7
   14f48:	003f9706 	br	14da8 <_strtol_r+0x88>
   14f4c:	00e00034 	movhi	r3,32768
   14f50:	18ffffc4 	addi	r3,r3,-1
   14f54:	003fef06 	br	14f14 <_strtol_r+0x1f4>
   14f58:	01c00204 	movi	r7,8
   14f5c:	3829883a 	mov	r20,r7
   14f60:	003f9106 	br	14da8 <_strtol_r+0x88>

00014f64 <strtol>:
   14f64:	008000b4 	movhi	r2,2
   14f68:	1083ac04 	addi	r2,r2,3760
   14f6c:	2013883a 	mov	r9,r4
   14f70:	11000017 	ldw	r4,0(r2)
   14f74:	2805883a 	mov	r2,r5
   14f78:	300f883a 	mov	r7,r6
   14f7c:	480b883a 	mov	r5,r9
   14f80:	100d883a 	mov	r6,r2
   14f84:	0014d201 	jmpi	14d20 <_strtol_r>

00014f88 <__sprint_r>:
   14f88:	30800217 	ldw	r2,8(r6)
   14f8c:	defffe04 	addi	sp,sp,-8
   14f90:	dc000015 	stw	r16,0(sp)
   14f94:	dfc00115 	stw	ra,4(sp)
   14f98:	3021883a 	mov	r16,r6
   14f9c:	0007883a 	mov	r3,zero
   14fa0:	1000061e 	bne	r2,zero,14fbc <__sprint_r+0x34>
   14fa4:	1805883a 	mov	r2,r3
   14fa8:	30000115 	stw	zero,4(r6)
   14fac:	dfc00117 	ldw	ra,4(sp)
   14fb0:	dc000017 	ldw	r16,0(sp)
   14fb4:	dec00204 	addi	sp,sp,8
   14fb8:	f800283a 	ret
   14fbc:	00129b40 	call	129b4 <__sfvwrite_r>
   14fc0:	1007883a 	mov	r3,r2
   14fc4:	1805883a 	mov	r2,r3
   14fc8:	80000115 	stw	zero,4(r16)
   14fcc:	80000215 	stw	zero,8(r16)
   14fd0:	dfc00117 	ldw	ra,4(sp)
   14fd4:	dc000017 	ldw	r16,0(sp)
   14fd8:	dec00204 	addi	sp,sp,8
   14fdc:	f800283a 	ret

00014fe0 <___vfprintf_internal_r>:
   14fe0:	defea404 	addi	sp,sp,-1392
   14fe4:	dd815815 	stw	r22,1376(sp)
   14fe8:	dc015215 	stw	r16,1352(sp)
   14fec:	d9c15115 	stw	r7,1348(sp)
   14ff0:	dfc15b15 	stw	ra,1388(sp)
   14ff4:	df015a15 	stw	fp,1384(sp)
   14ff8:	ddc15915 	stw	r23,1380(sp)
   14ffc:	dd415715 	stw	r21,1372(sp)
   15000:	dd015615 	stw	r20,1368(sp)
   15004:	dcc15515 	stw	r19,1364(sp)
   15008:	dc815415 	stw	r18,1360(sp)
   1500c:	dc415315 	stw	r17,1356(sp)
   15010:	282d883a 	mov	r22,r5
   15014:	3021883a 	mov	r16,r6
   15018:	d9014f15 	stw	r4,1340(sp)
   1501c:	0018b040 	call	18b04 <_localeconv_r>
   15020:	10800017 	ldw	r2,0(r2)
   15024:	d9c15117 	ldw	r7,1348(sp)
   15028:	d8814915 	stw	r2,1316(sp)
   1502c:	d8814f17 	ldw	r2,1340(sp)
   15030:	10000226 	beq	r2,zero,1503c <___vfprintf_internal_r+0x5c>
   15034:	10800e17 	ldw	r2,56(r2)
   15038:	10020d26 	beq	r2,zero,15870 <___vfprintf_internal_r+0x890>
   1503c:	b080030b 	ldhu	r2,12(r22)
   15040:	1080020c 	andi	r2,r2,8
   15044:	10020e26 	beq	r2,zero,15880 <___vfprintf_internal_r+0x8a0>
   15048:	b0800417 	ldw	r2,16(r22)
   1504c:	10020c26 	beq	r2,zero,15880 <___vfprintf_internal_r+0x8a0>
   15050:	b200030b 	ldhu	r8,12(r22)
   15054:	00800284 	movi	r2,10
   15058:	40c0068c 	andi	r3,r8,26
   1505c:	18802f1e 	bne	r3,r2,1511c <___vfprintf_internal_r+0x13c>
   15060:	b080038f 	ldh	r2,14(r22)
   15064:	10002d16 	blt	r2,zero,1511c <___vfprintf_internal_r+0x13c>
   15068:	b240038b 	ldhu	r9,14(r22)
   1506c:	b2800717 	ldw	r10,28(r22)
   15070:	b2c00917 	ldw	r11,36(r22)
   15074:	d9014f17 	ldw	r4,1340(sp)
   15078:	dc402904 	addi	r17,sp,164
   1507c:	d8804004 	addi	r2,sp,256
   15080:	00c10004 	movi	r3,1024
   15084:	423fff4c 	andi	r8,r8,65533
   15088:	800d883a 	mov	r6,r16
   1508c:	880b883a 	mov	r5,r17
   15090:	da002c0d 	sth	r8,176(sp)
   15094:	da402c8d 	sth	r9,178(sp)
   15098:	da803015 	stw	r10,192(sp)
   1509c:	dac03215 	stw	r11,200(sp)
   150a0:	d8802d15 	stw	r2,180(sp)
   150a4:	d8c02e15 	stw	r3,184(sp)
   150a8:	d8802915 	stw	r2,164(sp)
   150ac:	d8c02b15 	stw	r3,172(sp)
   150b0:	d8002f15 	stw	zero,188(sp)
   150b4:	0014fe00 	call	14fe0 <___vfprintf_internal_r>
   150b8:	d8814b15 	stw	r2,1324(sp)
   150bc:	10000416 	blt	r2,zero,150d0 <___vfprintf_internal_r+0xf0>
   150c0:	d9014f17 	ldw	r4,1340(sp)
   150c4:	880b883a 	mov	r5,r17
   150c8:	00117e80 	call	117e8 <_fflush_r>
   150cc:	1002321e 	bne	r2,zero,15998 <___vfprintf_internal_r+0x9b8>
   150d0:	d8802c0b 	ldhu	r2,176(sp)
   150d4:	1080100c 	andi	r2,r2,64
   150d8:	10000326 	beq	r2,zero,150e8 <___vfprintf_internal_r+0x108>
   150dc:	b080030b 	ldhu	r2,12(r22)
   150e0:	10801014 	ori	r2,r2,64
   150e4:	b080030d 	sth	r2,12(r22)
   150e8:	d8814b17 	ldw	r2,1324(sp)
   150ec:	dfc15b17 	ldw	ra,1388(sp)
   150f0:	df015a17 	ldw	fp,1384(sp)
   150f4:	ddc15917 	ldw	r23,1380(sp)
   150f8:	dd815817 	ldw	r22,1376(sp)
   150fc:	dd415717 	ldw	r21,1372(sp)
   15100:	dd015617 	ldw	r20,1368(sp)
   15104:	dcc15517 	ldw	r19,1364(sp)
   15108:	dc815417 	ldw	r18,1360(sp)
   1510c:	dc415317 	ldw	r17,1356(sp)
   15110:	dc015217 	ldw	r16,1352(sp)
   15114:	dec15c04 	addi	sp,sp,1392
   15118:	f800283a 	ret
   1511c:	0005883a 	mov	r2,zero
   15120:	0007883a 	mov	r3,zero
   15124:	dd401904 	addi	r21,sp,100
   15128:	d8814215 	stw	r2,1288(sp)
   1512c:	802f883a 	mov	r23,r16
   15130:	d8c14315 	stw	r3,1292(sp)
   15134:	d8014b15 	stw	zero,1324(sp)
   15138:	d8014815 	stw	zero,1312(sp)
   1513c:	d8014415 	stw	zero,1296(sp)
   15140:	d8014715 	stw	zero,1308(sp)
   15144:	dd400c15 	stw	r21,48(sp)
   15148:	d8000e15 	stw	zero,56(sp)
   1514c:	d8000d15 	stw	zero,52(sp)
   15150:	b8800007 	ldb	r2,0(r23)
   15154:	10001926 	beq	r2,zero,151bc <___vfprintf_internal_r+0x1dc>
   15158:	00c00944 	movi	r3,37
   1515c:	10c01726 	beq	r2,r3,151bc <___vfprintf_internal_r+0x1dc>
   15160:	b821883a 	mov	r16,r23
   15164:	00000106 	br	1516c <___vfprintf_internal_r+0x18c>
   15168:	10c00326 	beq	r2,r3,15178 <___vfprintf_internal_r+0x198>
   1516c:	84000044 	addi	r16,r16,1
   15170:	80800007 	ldb	r2,0(r16)
   15174:	103ffc1e 	bne	r2,zero,15168 <___vfprintf_internal_r+0x188>
   15178:	85e7c83a 	sub	r19,r16,r23
   1517c:	98000e26 	beq	r19,zero,151b8 <___vfprintf_internal_r+0x1d8>
   15180:	dc800e17 	ldw	r18,56(sp)
   15184:	dc400d17 	ldw	r17,52(sp)
   15188:	008001c4 	movi	r2,7
   1518c:	94e5883a 	add	r18,r18,r19
   15190:	8c400044 	addi	r17,r17,1
   15194:	adc00015 	stw	r23,0(r21)
   15198:	dc800e15 	stw	r18,56(sp)
   1519c:	acc00115 	stw	r19,4(r21)
   151a0:	dc400d15 	stw	r17,52(sp)
   151a4:	14428b16 	blt	r2,r17,15bd4 <___vfprintf_internal_r+0xbf4>
   151a8:	ad400204 	addi	r21,r21,8
   151ac:	d9014b17 	ldw	r4,1324(sp)
   151b0:	24c9883a 	add	r4,r4,r19
   151b4:	d9014b15 	stw	r4,1324(sp)
   151b8:	802f883a 	mov	r23,r16
   151bc:	b8800007 	ldb	r2,0(r23)
   151c0:	10013c26 	beq	r2,zero,156b4 <___vfprintf_internal_r+0x6d4>
   151c4:	bdc00044 	addi	r23,r23,1
   151c8:	d8000405 	stb	zero,16(sp)
   151cc:	b8c00007 	ldb	r3,0(r23)
   151d0:	04ffffc4 	movi	r19,-1
   151d4:	d8014c15 	stw	zero,1328(sp)
   151d8:	d8014a15 	stw	zero,1320(sp)
   151dc:	d8c14d15 	stw	r3,1332(sp)
   151e0:	bdc00044 	addi	r23,r23,1
   151e4:	d9414d17 	ldw	r5,1332(sp)
   151e8:	00801604 	movi	r2,88
   151ec:	28fff804 	addi	r3,r5,-32
   151f0:	10c06036 	bltu	r2,r3,15374 <___vfprintf_internal_r+0x394>
   151f4:	18c5883a 	add	r2,r3,r3
   151f8:	1085883a 	add	r2,r2,r2
   151fc:	00c00074 	movhi	r3,1
   15200:	18d48404 	addi	r3,r3,21008
   15204:	10c5883a 	add	r2,r2,r3
   15208:	11000017 	ldw	r4,0(r2)
   1520c:	2000683a 	jmp	r4
   15210:	00016184 	movi	zero,1414
   15214:	00015374 	movhi	zero,1357
   15218:	00015374 	movhi	zero,1357
   1521c:	00016170 	cmpltui	zero,zero,1413
   15220:	00015374 	movhi	zero,1357
   15224:	00015374 	movhi	zero,1357
   15228:	00015374 	movhi	zero,1357
   1522c:	00015374 	movhi	zero,1357
   15230:	00015374 	movhi	zero,1357
   15234:	00015374 	movhi	zero,1357
   15238:	00015f50 	cmplti	zero,zero,1405
   1523c:	00016160 	cmpeqi	zero,zero,1413
   15240:	00015374 	movhi	zero,1357
   15244:	00015f68 	cmpgeui	zero,zero,1405
   15248:	000161fc 	xorhi	zero,zero,1415
   1524c:	00015374 	movhi	zero,1357
   15250:	000161e8 	cmpgeui	zero,zero,1415
   15254:	000161b0 	cmpltui	zero,zero,1414
   15258:	000161b0 	cmpltui	zero,zero,1414
   1525c:	000161b0 	cmpltui	zero,zero,1414
   15260:	000161b0 	cmpltui	zero,zero,1414
   15264:	000161b0 	cmpltui	zero,zero,1414
   15268:	000161b0 	cmpltui	zero,zero,1414
   1526c:	000161b0 	cmpltui	zero,zero,1414
   15270:	000161b0 	cmpltui	zero,zero,1414
   15274:	000161b0 	cmpltui	zero,zero,1414
   15278:	00015374 	movhi	zero,1357
   1527c:	00015374 	movhi	zero,1357
   15280:	00015374 	movhi	zero,1357
   15284:	00015374 	movhi	zero,1357
   15288:	00015374 	movhi	zero,1357
   1528c:	00015374 	movhi	zero,1357
   15290:	00015374 	movhi	zero,1357
   15294:	00015374 	movhi	zero,1357
   15298:	00015374 	movhi	zero,1357
   1529c:	00015374 	movhi	zero,1357
   152a0:	000159cc 	andi	zero,zero,1383
   152a4:	00016038 	rdprs	zero,zero,1408
   152a8:	00015374 	movhi	zero,1357
   152ac:	00016038 	rdprs	zero,zero,1408
   152b0:	00015374 	movhi	zero,1357
   152b4:	00015374 	movhi	zero,1357
   152b8:	00015374 	movhi	zero,1357
   152bc:	00015374 	movhi	zero,1357
   152c0:	0001619c 	xori	zero,zero,1414
   152c4:	00015374 	movhi	zero,1357
   152c8:	00015374 	movhi	zero,1357
   152cc:	00015a80 	call	15a8 <runCascadeClassifier+0x218>
   152d0:	00015374 	movhi	zero,1357
   152d4:	00015374 	movhi	zero,1357
   152d8:	00015374 	movhi	zero,1357
   152dc:	00015374 	movhi	zero,1357
   152e0:	00015374 	movhi	zero,1357
   152e4:	00015acc 	andi	zero,zero,1387
   152e8:	00015374 	movhi	zero,1357
   152ec:	00015374 	movhi	zero,1357
   152f0:	000160ec 	andhi	zero,zero,1411
   152f4:	00015374 	movhi	zero,1357
   152f8:	00015374 	movhi	zero,1357
   152fc:	00015374 	movhi	zero,1357
   15300:	00015374 	movhi	zero,1357
   15304:	00015374 	movhi	zero,1357
   15308:	00015374 	movhi	zero,1357
   1530c:	00015374 	movhi	zero,1357
   15310:	00015374 	movhi	zero,1357
   15314:	00015374 	movhi	zero,1357
   15318:	00015374 	movhi	zero,1357
   1531c:	000160c0 	call	160c <runCascadeClassifier+0x27c>
   15320:	000159d8 	cmpnei	zero,zero,1383
   15324:	00016038 	rdprs	zero,zero,1408
   15328:	00016038 	rdprs	zero,zero,1408
   1532c:	00016038 	rdprs	zero,zero,1408
   15330:	00016024 	muli	zero,zero,1408
   15334:	000159d8 	cmpnei	zero,zero,1383
   15338:	00015374 	movhi	zero,1357
   1533c:	00015374 	movhi	zero,1357
   15340:	00015fac 	andhi	zero,zero,1406
   15344:	00015374 	movhi	zero,1357
   15348:	00015f7c 	xorhi	zero,zero,1405
   1534c:	00015a8c 	andi	zero,zero,1386
   15350:	00015fdc 	xori	zero,zero,1407
   15354:	00015fc8 	cmpgei	zero,zero,1407
   15358:	00015374 	movhi	zero,1357
   1535c:	00016258 	cmpnei	zero,zero,1417
   15360:	00015374 	movhi	zero,1357
   15364:	00015ad8 	cmpnei	zero,zero,1387
   15368:	00015374 	movhi	zero,1357
   1536c:	00015374 	movhi	zero,1357
   15370:	00016150 	cmplti	zero,zero,1413
   15374:	d9014d17 	ldw	r4,1332(sp)
   15378:	2000ce26 	beq	r4,zero,156b4 <___vfprintf_internal_r+0x6d4>
   1537c:	01400044 	movi	r5,1
   15380:	d9800f04 	addi	r6,sp,60
   15384:	d9c14015 	stw	r7,1280(sp)
   15388:	d9414515 	stw	r5,1300(sp)
   1538c:	d9814115 	stw	r6,1284(sp)
   15390:	280f883a 	mov	r7,r5
   15394:	d9000f05 	stb	r4,60(sp)
   15398:	d8000405 	stb	zero,16(sp)
   1539c:	d8014615 	stw	zero,1304(sp)
   153a0:	d8c14c17 	ldw	r3,1328(sp)
   153a4:	1880008c 	andi	r2,r3,2
   153a8:	1005003a 	cmpeq	r2,r2,zero
   153ac:	d8815015 	stw	r2,1344(sp)
   153b0:	1000031e 	bne	r2,zero,153c0 <___vfprintf_internal_r+0x3e0>
   153b4:	d9014517 	ldw	r4,1300(sp)
   153b8:	21000084 	addi	r4,r4,2
   153bc:	d9014515 	stw	r4,1300(sp)
   153c0:	d9414c17 	ldw	r5,1328(sp)
   153c4:	2940210c 	andi	r5,r5,132
   153c8:	d9414e15 	stw	r5,1336(sp)
   153cc:	28002d1e 	bne	r5,zero,15484 <___vfprintf_internal_r+0x4a4>
   153d0:	d9814a17 	ldw	r6,1320(sp)
   153d4:	d8814517 	ldw	r2,1300(sp)
   153d8:	30a1c83a 	sub	r16,r6,r2
   153dc:	0400290e 	bge	zero,r16,15484 <___vfprintf_internal_r+0x4a4>
   153e0:	00800404 	movi	r2,16
   153e4:	1404580e 	bge	r2,r16,16548 <___vfprintf_internal_r+0x1568>
   153e8:	dc800e17 	ldw	r18,56(sp)
   153ec:	dc400d17 	ldw	r17,52(sp)
   153f0:	1027883a 	mov	r19,r2
   153f4:	070000b4 	movhi	fp,2
   153f8:	e73be684 	addi	fp,fp,-4198
   153fc:	050001c4 	movi	r20,7
   15400:	00000306 	br	15410 <___vfprintf_internal_r+0x430>
   15404:	843ffc04 	addi	r16,r16,-16
   15408:	ad400204 	addi	r21,r21,8
   1540c:	9c00130e 	bge	r19,r16,1545c <___vfprintf_internal_r+0x47c>
   15410:	94800404 	addi	r18,r18,16
   15414:	8c400044 	addi	r17,r17,1
   15418:	af000015 	stw	fp,0(r21)
   1541c:	acc00115 	stw	r19,4(r21)
   15420:	dc800e15 	stw	r18,56(sp)
   15424:	dc400d15 	stw	r17,52(sp)
   15428:	a47ff60e 	bge	r20,r17,15404 <___vfprintf_internal_r+0x424>
   1542c:	d9014f17 	ldw	r4,1340(sp)
   15430:	b00b883a 	mov	r5,r22
   15434:	d9800c04 	addi	r6,sp,48
   15438:	d9c15115 	stw	r7,1348(sp)
   1543c:	0014f880 	call	14f88 <__sprint_r>
   15440:	d9c15117 	ldw	r7,1348(sp)
   15444:	10009e1e 	bne	r2,zero,156c0 <___vfprintf_internal_r+0x6e0>
   15448:	843ffc04 	addi	r16,r16,-16
   1544c:	dc800e17 	ldw	r18,56(sp)
   15450:	dc400d17 	ldw	r17,52(sp)
   15454:	dd401904 	addi	r21,sp,100
   15458:	9c3fed16 	blt	r19,r16,15410 <___vfprintf_internal_r+0x430>
   1545c:	9425883a 	add	r18,r18,r16
   15460:	8c400044 	addi	r17,r17,1
   15464:	008001c4 	movi	r2,7
   15468:	af000015 	stw	fp,0(r21)
   1546c:	ac000115 	stw	r16,4(r21)
   15470:	dc800e15 	stw	r18,56(sp)
   15474:	dc400d15 	stw	r17,52(sp)
   15478:	1441f516 	blt	r2,r17,15c50 <___vfprintf_internal_r+0xc70>
   1547c:	ad400204 	addi	r21,r21,8
   15480:	00000206 	br	1548c <___vfprintf_internal_r+0x4ac>
   15484:	dc800e17 	ldw	r18,56(sp)
   15488:	dc400d17 	ldw	r17,52(sp)
   1548c:	d8800407 	ldb	r2,16(sp)
   15490:	10000b26 	beq	r2,zero,154c0 <___vfprintf_internal_r+0x4e0>
   15494:	00800044 	movi	r2,1
   15498:	94800044 	addi	r18,r18,1
   1549c:	8c400044 	addi	r17,r17,1
   154a0:	a8800115 	stw	r2,4(r21)
   154a4:	d8c00404 	addi	r3,sp,16
   154a8:	008001c4 	movi	r2,7
   154ac:	a8c00015 	stw	r3,0(r21)
   154b0:	dc800e15 	stw	r18,56(sp)
   154b4:	dc400d15 	stw	r17,52(sp)
   154b8:	1441da16 	blt	r2,r17,15c24 <___vfprintf_internal_r+0xc44>
   154bc:	ad400204 	addi	r21,r21,8
   154c0:	d9015017 	ldw	r4,1344(sp)
   154c4:	20000b1e 	bne	r4,zero,154f4 <___vfprintf_internal_r+0x514>
   154c8:	d8800444 	addi	r2,sp,17
   154cc:	94800084 	addi	r18,r18,2
   154d0:	8c400044 	addi	r17,r17,1
   154d4:	a8800015 	stw	r2,0(r21)
   154d8:	00c00084 	movi	r3,2
   154dc:	008001c4 	movi	r2,7
   154e0:	a8c00115 	stw	r3,4(r21)
   154e4:	dc800e15 	stw	r18,56(sp)
   154e8:	dc400d15 	stw	r17,52(sp)
   154ec:	1441c216 	blt	r2,r17,15bf8 <___vfprintf_internal_r+0xc18>
   154f0:	ad400204 	addi	r21,r21,8
   154f4:	d9414e17 	ldw	r5,1336(sp)
   154f8:	00802004 	movi	r2,128
   154fc:	2880b126 	beq	r5,r2,157c4 <___vfprintf_internal_r+0x7e4>
   15500:	d8c14617 	ldw	r3,1304(sp)
   15504:	19e1c83a 	sub	r16,r3,r7
   15508:	0400260e 	bge	zero,r16,155a4 <___vfprintf_internal_r+0x5c4>
   1550c:	00800404 	movi	r2,16
   15510:	1403c90e 	bge	r2,r16,16438 <___vfprintf_internal_r+0x1458>
   15514:	1027883a 	mov	r19,r2
   15518:	070000b4 	movhi	fp,2
   1551c:	e73be284 	addi	fp,fp,-4214
   15520:	050001c4 	movi	r20,7
   15524:	00000306 	br	15534 <___vfprintf_internal_r+0x554>
   15528:	843ffc04 	addi	r16,r16,-16
   1552c:	ad400204 	addi	r21,r21,8
   15530:	9c00130e 	bge	r19,r16,15580 <___vfprintf_internal_r+0x5a0>
   15534:	94800404 	addi	r18,r18,16
   15538:	8c400044 	addi	r17,r17,1
   1553c:	af000015 	stw	fp,0(r21)
   15540:	acc00115 	stw	r19,4(r21)
   15544:	dc800e15 	stw	r18,56(sp)
   15548:	dc400d15 	stw	r17,52(sp)
   1554c:	a47ff60e 	bge	r20,r17,15528 <___vfprintf_internal_r+0x548>
   15550:	d9014f17 	ldw	r4,1340(sp)
   15554:	b00b883a 	mov	r5,r22
   15558:	d9800c04 	addi	r6,sp,48
   1555c:	d9c15115 	stw	r7,1348(sp)
   15560:	0014f880 	call	14f88 <__sprint_r>
   15564:	d9c15117 	ldw	r7,1348(sp)
   15568:	1000551e 	bne	r2,zero,156c0 <___vfprintf_internal_r+0x6e0>
   1556c:	843ffc04 	addi	r16,r16,-16
   15570:	dc800e17 	ldw	r18,56(sp)
   15574:	dc400d17 	ldw	r17,52(sp)
   15578:	dd401904 	addi	r21,sp,100
   1557c:	9c3fed16 	blt	r19,r16,15534 <___vfprintf_internal_r+0x554>
   15580:	9425883a 	add	r18,r18,r16
   15584:	8c400044 	addi	r17,r17,1
   15588:	008001c4 	movi	r2,7
   1558c:	af000015 	stw	fp,0(r21)
   15590:	ac000115 	stw	r16,4(r21)
   15594:	dc800e15 	stw	r18,56(sp)
   15598:	dc400d15 	stw	r17,52(sp)
   1559c:	14418216 	blt	r2,r17,15ba8 <___vfprintf_internal_r+0xbc8>
   155a0:	ad400204 	addi	r21,r21,8
   155a4:	d9014c17 	ldw	r4,1328(sp)
   155a8:	2080400c 	andi	r2,r4,256
   155ac:	10004a1e 	bne	r2,zero,156d8 <___vfprintf_internal_r+0x6f8>
   155b0:	d9414117 	ldw	r5,1284(sp)
   155b4:	91e5883a 	add	r18,r18,r7
   155b8:	8c400044 	addi	r17,r17,1
   155bc:	008001c4 	movi	r2,7
   155c0:	a9400015 	stw	r5,0(r21)
   155c4:	a9c00115 	stw	r7,4(r21)
   155c8:	dc800e15 	stw	r18,56(sp)
   155cc:	dc400d15 	stw	r17,52(sp)
   155d0:	14416716 	blt	r2,r17,15b70 <___vfprintf_internal_r+0xb90>
   155d4:	a8c00204 	addi	r3,r21,8
   155d8:	d9814c17 	ldw	r6,1328(sp)
   155dc:	3080010c 	andi	r2,r6,4
   155e0:	10002826 	beq	r2,zero,15684 <___vfprintf_internal_r+0x6a4>
   155e4:	d8814a17 	ldw	r2,1320(sp)
   155e8:	d9014517 	ldw	r4,1300(sp)
   155ec:	1121c83a 	sub	r16,r2,r4
   155f0:	0400240e 	bge	zero,r16,15684 <___vfprintf_internal_r+0x6a4>
   155f4:	00800404 	movi	r2,16
   155f8:	14044f0e 	bge	r2,r16,16738 <___vfprintf_internal_r+0x1758>
   155fc:	dc400d17 	ldw	r17,52(sp)
   15600:	1027883a 	mov	r19,r2
   15604:	070000b4 	movhi	fp,2
   15608:	e73be684 	addi	fp,fp,-4198
   1560c:	050001c4 	movi	r20,7
   15610:	00000306 	br	15620 <___vfprintf_internal_r+0x640>
   15614:	843ffc04 	addi	r16,r16,-16
   15618:	18c00204 	addi	r3,r3,8
   1561c:	9c00110e 	bge	r19,r16,15664 <___vfprintf_internal_r+0x684>
   15620:	94800404 	addi	r18,r18,16
   15624:	8c400044 	addi	r17,r17,1
   15628:	1f000015 	stw	fp,0(r3)
   1562c:	1cc00115 	stw	r19,4(r3)
   15630:	dc800e15 	stw	r18,56(sp)
   15634:	dc400d15 	stw	r17,52(sp)
   15638:	a47ff60e 	bge	r20,r17,15614 <___vfprintf_internal_r+0x634>
   1563c:	d9014f17 	ldw	r4,1340(sp)
   15640:	b00b883a 	mov	r5,r22
   15644:	d9800c04 	addi	r6,sp,48
   15648:	0014f880 	call	14f88 <__sprint_r>
   1564c:	10001c1e 	bne	r2,zero,156c0 <___vfprintf_internal_r+0x6e0>
   15650:	843ffc04 	addi	r16,r16,-16
   15654:	dc800e17 	ldw	r18,56(sp)
   15658:	dc400d17 	ldw	r17,52(sp)
   1565c:	d8c01904 	addi	r3,sp,100
   15660:	9c3fef16 	blt	r19,r16,15620 <___vfprintf_internal_r+0x640>
   15664:	9425883a 	add	r18,r18,r16
   15668:	8c400044 	addi	r17,r17,1
   1566c:	008001c4 	movi	r2,7
   15670:	1f000015 	stw	fp,0(r3)
   15674:	1c000115 	stw	r16,4(r3)
   15678:	dc800e15 	stw	r18,56(sp)
   1567c:	dc400d15 	stw	r17,52(sp)
   15680:	1440cb16 	blt	r2,r17,159b0 <___vfprintf_internal_r+0x9d0>
   15684:	d8814a17 	ldw	r2,1320(sp)
   15688:	d9414517 	ldw	r5,1300(sp)
   1568c:	1140010e 	bge	r2,r5,15694 <___vfprintf_internal_r+0x6b4>
   15690:	2805883a 	mov	r2,r5
   15694:	d9814b17 	ldw	r6,1324(sp)
   15698:	308d883a 	add	r6,r6,r2
   1569c:	d9814b15 	stw	r6,1324(sp)
   156a0:	90013b1e 	bne	r18,zero,15b90 <___vfprintf_internal_r+0xbb0>
   156a4:	d9c14017 	ldw	r7,1280(sp)
   156a8:	dd401904 	addi	r21,sp,100
   156ac:	d8000d15 	stw	zero,52(sp)
   156b0:	003ea706 	br	15150 <___vfprintf_internal_r+0x170>
   156b4:	d8800e17 	ldw	r2,56(sp)
   156b8:	10053f1e 	bne	r2,zero,16bb8 <___vfprintf_internal_r+0x1bd8>
   156bc:	d8000d15 	stw	zero,52(sp)
   156c0:	b080030b 	ldhu	r2,12(r22)
   156c4:	1080100c 	andi	r2,r2,64
   156c8:	103e8726 	beq	r2,zero,150e8 <___vfprintf_internal_r+0x108>
   156cc:	00bfffc4 	movi	r2,-1
   156d0:	d8814b15 	stw	r2,1324(sp)
   156d4:	003e8406 	br	150e8 <___vfprintf_internal_r+0x108>
   156d8:	d9814d17 	ldw	r6,1332(sp)
   156dc:	00801944 	movi	r2,101
   156e0:	11806e16 	blt	r2,r6,1589c <___vfprintf_internal_r+0x8bc>
   156e4:	d9414717 	ldw	r5,1308(sp)
   156e8:	00c00044 	movi	r3,1
   156ec:	1943430e 	bge	r3,r5,163fc <___vfprintf_internal_r+0x141c>
   156f0:	d8814117 	ldw	r2,1284(sp)
   156f4:	94800044 	addi	r18,r18,1
   156f8:	8c400044 	addi	r17,r17,1
   156fc:	a8800015 	stw	r2,0(r21)
   15700:	008001c4 	movi	r2,7
   15704:	a8c00115 	stw	r3,4(r21)
   15708:	dc800e15 	stw	r18,56(sp)
   1570c:	dc400d15 	stw	r17,52(sp)
   15710:	1441ca16 	blt	r2,r17,15e3c <___vfprintf_internal_r+0xe5c>
   15714:	a8c00204 	addi	r3,r21,8
   15718:	d9014917 	ldw	r4,1316(sp)
   1571c:	00800044 	movi	r2,1
   15720:	94800044 	addi	r18,r18,1
   15724:	8c400044 	addi	r17,r17,1
   15728:	18800115 	stw	r2,4(r3)
   1572c:	008001c4 	movi	r2,7
   15730:	19000015 	stw	r4,0(r3)
   15734:	dc800e15 	stw	r18,56(sp)
   15738:	dc400d15 	stw	r17,52(sp)
   1573c:	1441b616 	blt	r2,r17,15e18 <___vfprintf_internal_r+0xe38>
   15740:	1cc00204 	addi	r19,r3,8
   15744:	d9014217 	ldw	r4,1288(sp)
   15748:	d9414317 	ldw	r5,1292(sp)
   1574c:	000d883a 	mov	r6,zero
   15750:	000f883a 	mov	r7,zero
   15754:	001acf00 	call	1acf0 <__nedf2>
   15758:	10017426 	beq	r2,zero,15d2c <___vfprintf_internal_r+0xd4c>
   1575c:	d9414717 	ldw	r5,1308(sp)
   15760:	d9814117 	ldw	r6,1284(sp)
   15764:	8c400044 	addi	r17,r17,1
   15768:	2c85883a 	add	r2,r5,r18
   1576c:	14bfffc4 	addi	r18,r2,-1
   15770:	28bfffc4 	addi	r2,r5,-1
   15774:	30c00044 	addi	r3,r6,1
   15778:	98800115 	stw	r2,4(r19)
   1577c:	008001c4 	movi	r2,7
   15780:	98c00015 	stw	r3,0(r19)
   15784:	dc800e15 	stw	r18,56(sp)
   15788:	dc400d15 	stw	r17,52(sp)
   1578c:	14418e16 	blt	r2,r17,15dc8 <___vfprintf_internal_r+0xde8>
   15790:	9cc00204 	addi	r19,r19,8
   15794:	d9414817 	ldw	r5,1312(sp)
   15798:	d8800804 	addi	r2,sp,32
   1579c:	8c400044 	addi	r17,r17,1
   157a0:	9165883a 	add	r18,r18,r5
   157a4:	98800015 	stw	r2,0(r19)
   157a8:	008001c4 	movi	r2,7
   157ac:	99400115 	stw	r5,4(r19)
   157b0:	dc800e15 	stw	r18,56(sp)
   157b4:	dc400d15 	stw	r17,52(sp)
   157b8:	1440ed16 	blt	r2,r17,15b70 <___vfprintf_internal_r+0xb90>
   157bc:	98c00204 	addi	r3,r19,8
   157c0:	003f8506 	br	155d8 <___vfprintf_internal_r+0x5f8>
   157c4:	d9814a17 	ldw	r6,1320(sp)
   157c8:	d8814517 	ldw	r2,1300(sp)
   157cc:	30a1c83a 	sub	r16,r6,r2
   157d0:	043f4b0e 	bge	zero,r16,15500 <___vfprintf_internal_r+0x520>
   157d4:	00800404 	movi	r2,16
   157d8:	1404340e 	bge	r2,r16,168ac <___vfprintf_internal_r+0x18cc>
   157dc:	1027883a 	mov	r19,r2
   157e0:	070000b4 	movhi	fp,2
   157e4:	e73be284 	addi	fp,fp,-4214
   157e8:	050001c4 	movi	r20,7
   157ec:	00000306 	br	157fc <___vfprintf_internal_r+0x81c>
   157f0:	843ffc04 	addi	r16,r16,-16
   157f4:	ad400204 	addi	r21,r21,8
   157f8:	9c00130e 	bge	r19,r16,15848 <___vfprintf_internal_r+0x868>
   157fc:	94800404 	addi	r18,r18,16
   15800:	8c400044 	addi	r17,r17,1
   15804:	af000015 	stw	fp,0(r21)
   15808:	acc00115 	stw	r19,4(r21)
   1580c:	dc800e15 	stw	r18,56(sp)
   15810:	dc400d15 	stw	r17,52(sp)
   15814:	a47ff60e 	bge	r20,r17,157f0 <___vfprintf_internal_r+0x810>
   15818:	d9014f17 	ldw	r4,1340(sp)
   1581c:	b00b883a 	mov	r5,r22
   15820:	d9800c04 	addi	r6,sp,48
   15824:	d9c15115 	stw	r7,1348(sp)
   15828:	0014f880 	call	14f88 <__sprint_r>
   1582c:	d9c15117 	ldw	r7,1348(sp)
   15830:	103fa31e 	bne	r2,zero,156c0 <___vfprintf_internal_r+0x6e0>
   15834:	843ffc04 	addi	r16,r16,-16
   15838:	dc800e17 	ldw	r18,56(sp)
   1583c:	dc400d17 	ldw	r17,52(sp)
   15840:	dd401904 	addi	r21,sp,100
   15844:	9c3fed16 	blt	r19,r16,157fc <___vfprintf_internal_r+0x81c>
   15848:	9425883a 	add	r18,r18,r16
   1584c:	8c400044 	addi	r17,r17,1
   15850:	008001c4 	movi	r2,7
   15854:	af000015 	stw	fp,0(r21)
   15858:	ac000115 	stw	r16,4(r21)
   1585c:	dc800e15 	stw	r18,56(sp)
   15860:	dc400d15 	stw	r17,52(sp)
   15864:	14416116 	blt	r2,r17,15dec <___vfprintf_internal_r+0xe0c>
   15868:	ad400204 	addi	r21,r21,8
   1586c:	003f2406 	br	15500 <___vfprintf_internal_r+0x520>
   15870:	d9014f17 	ldw	r4,1340(sp)
   15874:	0011bec0 	call	11bec <__sinit>
   15878:	d9c15117 	ldw	r7,1348(sp)
   1587c:	003def06 	br	1503c <___vfprintf_internal_r+0x5c>
   15880:	d9014f17 	ldw	r4,1340(sp)
   15884:	b00b883a 	mov	r5,r22
   15888:	d9c15115 	stw	r7,1348(sp)
   1588c:	00170740 	call	17074 <__swsetup_r>
   15890:	d9c15117 	ldw	r7,1348(sp)
   15894:	103dee26 	beq	r2,zero,15050 <___vfprintf_internal_r+0x70>
   15898:	003f8c06 	br	156cc <___vfprintf_internal_r+0x6ec>
   1589c:	d9014217 	ldw	r4,1288(sp)
   158a0:	d9414317 	ldw	r5,1292(sp)
   158a4:	000d883a 	mov	r6,zero
   158a8:	000f883a 	mov	r7,zero
   158ac:	001ac680 	call	1ac68 <__eqdf2>
   158b0:	1000f21e 	bne	r2,zero,15c7c <___vfprintf_internal_r+0xc9c>
   158b4:	008000b4 	movhi	r2,2
   158b8:	10bbe204 	addi	r2,r2,-4216
   158bc:	94800044 	addi	r18,r18,1
   158c0:	8c400044 	addi	r17,r17,1
   158c4:	a8800015 	stw	r2,0(r21)
   158c8:	00c00044 	movi	r3,1
   158cc:	008001c4 	movi	r2,7
   158d0:	a8c00115 	stw	r3,4(r21)
   158d4:	dc800e15 	stw	r18,56(sp)
   158d8:	dc400d15 	stw	r17,52(sp)
   158dc:	1442fa16 	blt	r2,r17,164c8 <___vfprintf_internal_r+0x14e8>
   158e0:	a8c00204 	addi	r3,r21,8
   158e4:	d8800517 	ldw	r2,20(sp)
   158e8:	d9014717 	ldw	r4,1308(sp)
   158ec:	11015c0e 	bge	r2,r4,15e60 <___vfprintf_internal_r+0xe80>
   158f0:	dc400d17 	ldw	r17,52(sp)
   158f4:	d9814917 	ldw	r6,1316(sp)
   158f8:	00800044 	movi	r2,1
   158fc:	94800044 	addi	r18,r18,1
   15900:	8c400044 	addi	r17,r17,1
   15904:	18800115 	stw	r2,4(r3)
   15908:	008001c4 	movi	r2,7
   1590c:	19800015 	stw	r6,0(r3)
   15910:	dc800e15 	stw	r18,56(sp)
   15914:	dc400d15 	stw	r17,52(sp)
   15918:	14431016 	blt	r2,r17,1655c <___vfprintf_internal_r+0x157c>
   1591c:	18c00204 	addi	r3,r3,8
   15920:	d8814717 	ldw	r2,1308(sp)
   15924:	143fffc4 	addi	r16,r2,-1
   15928:	043f2b0e 	bge	zero,r16,155d8 <___vfprintf_internal_r+0x5f8>
   1592c:	00800404 	movi	r2,16
   15930:	1402a20e 	bge	r2,r16,163bc <___vfprintf_internal_r+0x13dc>
   15934:	dc400d17 	ldw	r17,52(sp)
   15938:	1027883a 	mov	r19,r2
   1593c:	070000b4 	movhi	fp,2
   15940:	e73be284 	addi	fp,fp,-4214
   15944:	050001c4 	movi	r20,7
   15948:	00000306 	br	15958 <___vfprintf_internal_r+0x978>
   1594c:	18c00204 	addi	r3,r3,8
   15950:	843ffc04 	addi	r16,r16,-16
   15954:	9c029c0e 	bge	r19,r16,163c8 <___vfprintf_internal_r+0x13e8>
   15958:	94800404 	addi	r18,r18,16
   1595c:	8c400044 	addi	r17,r17,1
   15960:	1f000015 	stw	fp,0(r3)
   15964:	1cc00115 	stw	r19,4(r3)
   15968:	dc800e15 	stw	r18,56(sp)
   1596c:	dc400d15 	stw	r17,52(sp)
   15970:	a47ff60e 	bge	r20,r17,1594c <___vfprintf_internal_r+0x96c>
   15974:	d9014f17 	ldw	r4,1340(sp)
   15978:	b00b883a 	mov	r5,r22
   1597c:	d9800c04 	addi	r6,sp,48
   15980:	0014f880 	call	14f88 <__sprint_r>
   15984:	103f4e1e 	bne	r2,zero,156c0 <___vfprintf_internal_r+0x6e0>
   15988:	dc800e17 	ldw	r18,56(sp)
   1598c:	dc400d17 	ldw	r17,52(sp)
   15990:	d8c01904 	addi	r3,sp,100
   15994:	003fee06 	br	15950 <___vfprintf_internal_r+0x970>
   15998:	d8802c0b 	ldhu	r2,176(sp)
   1599c:	00ffffc4 	movi	r3,-1
   159a0:	d8c14b15 	stw	r3,1324(sp)
   159a4:	1080100c 	andi	r2,r2,64
   159a8:	103dcc1e 	bne	r2,zero,150dc <___vfprintf_internal_r+0xfc>
   159ac:	003dce06 	br	150e8 <___vfprintf_internal_r+0x108>
   159b0:	d9014f17 	ldw	r4,1340(sp)
   159b4:	b00b883a 	mov	r5,r22
   159b8:	d9800c04 	addi	r6,sp,48
   159bc:	0014f880 	call	14f88 <__sprint_r>
   159c0:	103f3f1e 	bne	r2,zero,156c0 <___vfprintf_internal_r+0x6e0>
   159c4:	dc800e17 	ldw	r18,56(sp)
   159c8:	003f2e06 	br	15684 <___vfprintf_internal_r+0x6a4>
   159cc:	d9414c17 	ldw	r5,1328(sp)
   159d0:	29400414 	ori	r5,r5,16
   159d4:	d9414c15 	stw	r5,1328(sp)
   159d8:	d9814c17 	ldw	r6,1328(sp)
   159dc:	3080080c 	andi	r2,r6,32
   159e0:	10014f1e 	bne	r2,zero,15f20 <___vfprintf_internal_r+0xf40>
   159e4:	d8c14c17 	ldw	r3,1328(sp)
   159e8:	1880040c 	andi	r2,r3,16
   159ec:	1002ea1e 	bne	r2,zero,16598 <___vfprintf_internal_r+0x15b8>
   159f0:	d9014c17 	ldw	r4,1328(sp)
   159f4:	2080100c 	andi	r2,r4,64
   159f8:	1002e726 	beq	r2,zero,16598 <___vfprintf_internal_r+0x15b8>
   159fc:	3880000f 	ldh	r2,0(r7)
   15a00:	39c00104 	addi	r7,r7,4
   15a04:	d9c14015 	stw	r7,1280(sp)
   15a08:	1023d7fa 	srai	r17,r2,31
   15a0c:	1021883a 	mov	r16,r2
   15a10:	88037216 	blt	r17,zero,167dc <___vfprintf_internal_r+0x17fc>
   15a14:	01000044 	movi	r4,1
   15a18:	98000416 	blt	r19,zero,15a2c <___vfprintf_internal_r+0xa4c>
   15a1c:	d8c14c17 	ldw	r3,1328(sp)
   15a20:	00bfdfc4 	movi	r2,-129
   15a24:	1886703a 	and	r3,r3,r2
   15a28:	d8c14c15 	stw	r3,1328(sp)
   15a2c:	8444b03a 	or	r2,r16,r17
   15a30:	1002261e 	bne	r2,zero,162cc <___vfprintf_internal_r+0x12ec>
   15a34:	9802251e 	bne	r19,zero,162cc <___vfprintf_internal_r+0x12ec>
   15a38:	20803fcc 	andi	r2,r4,255
   15a3c:	10029b26 	beq	r2,zero,164ac <___vfprintf_internal_r+0x14cc>
   15a40:	d8c01904 	addi	r3,sp,100
   15a44:	dd000f04 	addi	r20,sp,60
   15a48:	d8c14115 	stw	r3,1284(sp)
   15a4c:	d8c14117 	ldw	r3,1284(sp)
   15a50:	dcc14515 	stw	r19,1300(sp)
   15a54:	a0c5c83a 	sub	r2,r20,r3
   15a58:	11c00a04 	addi	r7,r2,40
   15a5c:	99c0010e 	bge	r19,r7,15a64 <___vfprintf_internal_r+0xa84>
   15a60:	d9c14515 	stw	r7,1300(sp)
   15a64:	dcc14615 	stw	r19,1304(sp)
   15a68:	d8800407 	ldb	r2,16(sp)
   15a6c:	103e4c26 	beq	r2,zero,153a0 <___vfprintf_internal_r+0x3c0>
   15a70:	d8814517 	ldw	r2,1300(sp)
   15a74:	10800044 	addi	r2,r2,1
   15a78:	d8814515 	stw	r2,1300(sp)
   15a7c:	003e4806 	br	153a0 <___vfprintf_internal_r+0x3c0>
   15a80:	d9814c17 	ldw	r6,1328(sp)
   15a84:	31800414 	ori	r6,r6,16
   15a88:	d9814c15 	stw	r6,1328(sp)
   15a8c:	d8c14c17 	ldw	r3,1328(sp)
   15a90:	1880080c 	andi	r2,r3,32
   15a94:	1001271e 	bne	r2,zero,15f34 <___vfprintf_internal_r+0xf54>
   15a98:	d9414c17 	ldw	r5,1328(sp)
   15a9c:	2880040c 	andi	r2,r5,16
   15aa0:	1002b61e 	bne	r2,zero,1657c <___vfprintf_internal_r+0x159c>
   15aa4:	d9814c17 	ldw	r6,1328(sp)
   15aa8:	3080100c 	andi	r2,r6,64
   15aac:	1002b326 	beq	r2,zero,1657c <___vfprintf_internal_r+0x159c>
   15ab0:	3c00000b 	ldhu	r16,0(r7)
   15ab4:	0009883a 	mov	r4,zero
   15ab8:	39c00104 	addi	r7,r7,4
   15abc:	0023883a 	mov	r17,zero
   15ac0:	d9c14015 	stw	r7,1280(sp)
   15ac4:	d8000405 	stb	zero,16(sp)
   15ac8:	003fd306 	br	15a18 <___vfprintf_internal_r+0xa38>
   15acc:	d9014c17 	ldw	r4,1328(sp)
   15ad0:	21000414 	ori	r4,r4,16
   15ad4:	d9014c15 	stw	r4,1328(sp)
   15ad8:	d9414c17 	ldw	r5,1328(sp)
   15adc:	2880080c 	andi	r2,r5,32
   15ae0:	1001081e 	bne	r2,zero,15f04 <___vfprintf_internal_r+0xf24>
   15ae4:	d8c14c17 	ldw	r3,1328(sp)
   15ae8:	1880040c 	andi	r2,r3,16
   15aec:	1002b01e 	bne	r2,zero,165b0 <___vfprintf_internal_r+0x15d0>
   15af0:	d9014c17 	ldw	r4,1328(sp)
   15af4:	2080100c 	andi	r2,r4,64
   15af8:	1002ad26 	beq	r2,zero,165b0 <___vfprintf_internal_r+0x15d0>
   15afc:	3c00000b 	ldhu	r16,0(r7)
   15b00:	01000044 	movi	r4,1
   15b04:	39c00104 	addi	r7,r7,4
   15b08:	0023883a 	mov	r17,zero
   15b0c:	d9c14015 	stw	r7,1280(sp)
   15b10:	d8000405 	stb	zero,16(sp)
   15b14:	003fc006 	br	15a18 <___vfprintf_internal_r+0xa38>
   15b18:	d9014f17 	ldw	r4,1340(sp)
   15b1c:	b00b883a 	mov	r5,r22
   15b20:	d9800c04 	addi	r6,sp,48
   15b24:	0014f880 	call	14f88 <__sprint_r>
   15b28:	103ee51e 	bne	r2,zero,156c0 <___vfprintf_internal_r+0x6e0>
   15b2c:	dc800e17 	ldw	r18,56(sp)
   15b30:	d8c01904 	addi	r3,sp,100
   15b34:	d9814c17 	ldw	r6,1328(sp)
   15b38:	3080004c 	andi	r2,r6,1
   15b3c:	1005003a 	cmpeq	r2,r2,zero
   15b40:	103ea51e 	bne	r2,zero,155d8 <___vfprintf_internal_r+0x5f8>
   15b44:	00800044 	movi	r2,1
   15b48:	dc400d17 	ldw	r17,52(sp)
   15b4c:	18800115 	stw	r2,4(r3)
   15b50:	d8814917 	ldw	r2,1316(sp)
   15b54:	94800044 	addi	r18,r18,1
   15b58:	8c400044 	addi	r17,r17,1
   15b5c:	18800015 	stw	r2,0(r3)
   15b60:	008001c4 	movi	r2,7
   15b64:	dc800e15 	stw	r18,56(sp)
   15b68:	dc400d15 	stw	r17,52(sp)
   15b6c:	14421e0e 	bge	r2,r17,163e8 <___vfprintf_internal_r+0x1408>
   15b70:	d9014f17 	ldw	r4,1340(sp)
   15b74:	b00b883a 	mov	r5,r22
   15b78:	d9800c04 	addi	r6,sp,48
   15b7c:	0014f880 	call	14f88 <__sprint_r>
   15b80:	103ecf1e 	bne	r2,zero,156c0 <___vfprintf_internal_r+0x6e0>
   15b84:	dc800e17 	ldw	r18,56(sp)
   15b88:	d8c01904 	addi	r3,sp,100
   15b8c:	003e9206 	br	155d8 <___vfprintf_internal_r+0x5f8>
   15b90:	d9014f17 	ldw	r4,1340(sp)
   15b94:	b00b883a 	mov	r5,r22
   15b98:	d9800c04 	addi	r6,sp,48
   15b9c:	0014f880 	call	14f88 <__sprint_r>
   15ba0:	103ec026 	beq	r2,zero,156a4 <___vfprintf_internal_r+0x6c4>
   15ba4:	003ec606 	br	156c0 <___vfprintf_internal_r+0x6e0>
   15ba8:	d9014f17 	ldw	r4,1340(sp)
   15bac:	b00b883a 	mov	r5,r22
   15bb0:	d9800c04 	addi	r6,sp,48
   15bb4:	d9c15115 	stw	r7,1348(sp)
   15bb8:	0014f880 	call	14f88 <__sprint_r>
   15bbc:	d9c15117 	ldw	r7,1348(sp)
   15bc0:	103ebf1e 	bne	r2,zero,156c0 <___vfprintf_internal_r+0x6e0>
   15bc4:	dc800e17 	ldw	r18,56(sp)
   15bc8:	dc400d17 	ldw	r17,52(sp)
   15bcc:	dd401904 	addi	r21,sp,100
   15bd0:	003e7406 	br	155a4 <___vfprintf_internal_r+0x5c4>
   15bd4:	d9014f17 	ldw	r4,1340(sp)
   15bd8:	b00b883a 	mov	r5,r22
   15bdc:	d9800c04 	addi	r6,sp,48
   15be0:	d9c15115 	stw	r7,1348(sp)
   15be4:	0014f880 	call	14f88 <__sprint_r>
   15be8:	d9c15117 	ldw	r7,1348(sp)
   15bec:	103eb41e 	bne	r2,zero,156c0 <___vfprintf_internal_r+0x6e0>
   15bf0:	dd401904 	addi	r21,sp,100
   15bf4:	003d6d06 	br	151ac <___vfprintf_internal_r+0x1cc>
   15bf8:	d9014f17 	ldw	r4,1340(sp)
   15bfc:	b00b883a 	mov	r5,r22
   15c00:	d9800c04 	addi	r6,sp,48
   15c04:	d9c15115 	stw	r7,1348(sp)
   15c08:	0014f880 	call	14f88 <__sprint_r>
   15c0c:	d9c15117 	ldw	r7,1348(sp)
   15c10:	103eab1e 	bne	r2,zero,156c0 <___vfprintf_internal_r+0x6e0>
   15c14:	dc800e17 	ldw	r18,56(sp)
   15c18:	dc400d17 	ldw	r17,52(sp)
   15c1c:	dd401904 	addi	r21,sp,100
   15c20:	003e3406 	br	154f4 <___vfprintf_internal_r+0x514>
   15c24:	d9014f17 	ldw	r4,1340(sp)
   15c28:	b00b883a 	mov	r5,r22
   15c2c:	d9800c04 	addi	r6,sp,48
   15c30:	d9c15115 	stw	r7,1348(sp)
   15c34:	0014f880 	call	14f88 <__sprint_r>
   15c38:	d9c15117 	ldw	r7,1348(sp)
   15c3c:	103ea01e 	bne	r2,zero,156c0 <___vfprintf_internal_r+0x6e0>
   15c40:	dc800e17 	ldw	r18,56(sp)
   15c44:	dc400d17 	ldw	r17,52(sp)
   15c48:	dd401904 	addi	r21,sp,100
   15c4c:	003e1c06 	br	154c0 <___vfprintf_internal_r+0x4e0>
   15c50:	d9014f17 	ldw	r4,1340(sp)
   15c54:	b00b883a 	mov	r5,r22
   15c58:	d9800c04 	addi	r6,sp,48
   15c5c:	d9c15115 	stw	r7,1348(sp)
   15c60:	0014f880 	call	14f88 <__sprint_r>
   15c64:	d9c15117 	ldw	r7,1348(sp)
   15c68:	103e951e 	bne	r2,zero,156c0 <___vfprintf_internal_r+0x6e0>
   15c6c:	dc800e17 	ldw	r18,56(sp)
   15c70:	dc400d17 	ldw	r17,52(sp)
   15c74:	dd401904 	addi	r21,sp,100
   15c78:	003e0406 	br	1548c <___vfprintf_internal_r+0x4ac>
   15c7c:	d9000517 	ldw	r4,20(sp)
   15c80:	0102520e 	bge	zero,r4,165cc <___vfprintf_internal_r+0x15ec>
   15c84:	d9814717 	ldw	r6,1308(sp)
   15c88:	21807a16 	blt	r4,r6,15e74 <___vfprintf_internal_r+0xe94>
   15c8c:	d8814117 	ldw	r2,1284(sp)
   15c90:	91a5883a 	add	r18,r18,r6
   15c94:	8c400044 	addi	r17,r17,1
   15c98:	a8800015 	stw	r2,0(r21)
   15c9c:	008001c4 	movi	r2,7
   15ca0:	a9800115 	stw	r6,4(r21)
   15ca4:	dc800e15 	stw	r18,56(sp)
   15ca8:	dc400d15 	stw	r17,52(sp)
   15cac:	1442f616 	blt	r2,r17,16888 <___vfprintf_internal_r+0x18a8>
   15cb0:	a8c00204 	addi	r3,r21,8
   15cb4:	d9414717 	ldw	r5,1308(sp)
   15cb8:	2161c83a 	sub	r16,r4,r5
   15cbc:	043f9d0e 	bge	zero,r16,15b34 <___vfprintf_internal_r+0xb54>
   15cc0:	00800404 	movi	r2,16
   15cc4:	1402130e 	bge	r2,r16,16514 <___vfprintf_internal_r+0x1534>
   15cc8:	dc400d17 	ldw	r17,52(sp)
   15ccc:	1027883a 	mov	r19,r2
   15cd0:	070000b4 	movhi	fp,2
   15cd4:	e73be284 	addi	fp,fp,-4214
   15cd8:	050001c4 	movi	r20,7
   15cdc:	00000306 	br	15cec <___vfprintf_internal_r+0xd0c>
   15ce0:	18c00204 	addi	r3,r3,8
   15ce4:	843ffc04 	addi	r16,r16,-16
   15ce8:	9c020d0e 	bge	r19,r16,16520 <___vfprintf_internal_r+0x1540>
   15cec:	94800404 	addi	r18,r18,16
   15cf0:	8c400044 	addi	r17,r17,1
   15cf4:	1f000015 	stw	fp,0(r3)
   15cf8:	1cc00115 	stw	r19,4(r3)
   15cfc:	dc800e15 	stw	r18,56(sp)
   15d00:	dc400d15 	stw	r17,52(sp)
   15d04:	a47ff60e 	bge	r20,r17,15ce0 <___vfprintf_internal_r+0xd00>
   15d08:	d9014f17 	ldw	r4,1340(sp)
   15d0c:	b00b883a 	mov	r5,r22
   15d10:	d9800c04 	addi	r6,sp,48
   15d14:	0014f880 	call	14f88 <__sprint_r>
   15d18:	103e691e 	bne	r2,zero,156c0 <___vfprintf_internal_r+0x6e0>
   15d1c:	dc800e17 	ldw	r18,56(sp)
   15d20:	dc400d17 	ldw	r17,52(sp)
   15d24:	d8c01904 	addi	r3,sp,100
   15d28:	003fee06 	br	15ce4 <___vfprintf_internal_r+0xd04>
   15d2c:	d8814717 	ldw	r2,1308(sp)
   15d30:	143fffc4 	addi	r16,r2,-1
   15d34:	043e970e 	bge	zero,r16,15794 <___vfprintf_internal_r+0x7b4>
   15d38:	00800404 	movi	r2,16
   15d3c:	1400180e 	bge	r2,r16,15da0 <___vfprintf_internal_r+0xdc0>
   15d40:	1029883a 	mov	r20,r2
   15d44:	070000b4 	movhi	fp,2
   15d48:	e73be284 	addi	fp,fp,-4214
   15d4c:	054001c4 	movi	r21,7
   15d50:	00000306 	br	15d60 <___vfprintf_internal_r+0xd80>
   15d54:	9cc00204 	addi	r19,r19,8
   15d58:	843ffc04 	addi	r16,r16,-16
   15d5c:	a400120e 	bge	r20,r16,15da8 <___vfprintf_internal_r+0xdc8>
   15d60:	94800404 	addi	r18,r18,16
   15d64:	8c400044 	addi	r17,r17,1
   15d68:	9f000015 	stw	fp,0(r19)
   15d6c:	9d000115 	stw	r20,4(r19)
   15d70:	dc800e15 	stw	r18,56(sp)
   15d74:	dc400d15 	stw	r17,52(sp)
   15d78:	ac7ff60e 	bge	r21,r17,15d54 <___vfprintf_internal_r+0xd74>
   15d7c:	d9014f17 	ldw	r4,1340(sp)
   15d80:	b00b883a 	mov	r5,r22
   15d84:	d9800c04 	addi	r6,sp,48
   15d88:	0014f880 	call	14f88 <__sprint_r>
   15d8c:	103e4c1e 	bne	r2,zero,156c0 <___vfprintf_internal_r+0x6e0>
   15d90:	dc800e17 	ldw	r18,56(sp)
   15d94:	dc400d17 	ldw	r17,52(sp)
   15d98:	dcc01904 	addi	r19,sp,100
   15d9c:	003fee06 	br	15d58 <___vfprintf_internal_r+0xd78>
   15da0:	070000b4 	movhi	fp,2
   15da4:	e73be284 	addi	fp,fp,-4214
   15da8:	9425883a 	add	r18,r18,r16
   15dac:	8c400044 	addi	r17,r17,1
   15db0:	008001c4 	movi	r2,7
   15db4:	9f000015 	stw	fp,0(r19)
   15db8:	9c000115 	stw	r16,4(r19)
   15dbc:	dc800e15 	stw	r18,56(sp)
   15dc0:	dc400d15 	stw	r17,52(sp)
   15dc4:	147e720e 	bge	r2,r17,15790 <___vfprintf_internal_r+0x7b0>
   15dc8:	d9014f17 	ldw	r4,1340(sp)
   15dcc:	b00b883a 	mov	r5,r22
   15dd0:	d9800c04 	addi	r6,sp,48
   15dd4:	0014f880 	call	14f88 <__sprint_r>
   15dd8:	103e391e 	bne	r2,zero,156c0 <___vfprintf_internal_r+0x6e0>
   15ddc:	dc800e17 	ldw	r18,56(sp)
   15de0:	dc400d17 	ldw	r17,52(sp)
   15de4:	dcc01904 	addi	r19,sp,100
   15de8:	003e6a06 	br	15794 <___vfprintf_internal_r+0x7b4>
   15dec:	d9014f17 	ldw	r4,1340(sp)
   15df0:	b00b883a 	mov	r5,r22
   15df4:	d9800c04 	addi	r6,sp,48
   15df8:	d9c15115 	stw	r7,1348(sp)
   15dfc:	0014f880 	call	14f88 <__sprint_r>
   15e00:	d9c15117 	ldw	r7,1348(sp)
   15e04:	103e2e1e 	bne	r2,zero,156c0 <___vfprintf_internal_r+0x6e0>
   15e08:	dc800e17 	ldw	r18,56(sp)
   15e0c:	dc400d17 	ldw	r17,52(sp)
   15e10:	dd401904 	addi	r21,sp,100
   15e14:	003dba06 	br	15500 <___vfprintf_internal_r+0x520>
   15e18:	d9014f17 	ldw	r4,1340(sp)
   15e1c:	b00b883a 	mov	r5,r22
   15e20:	d9800c04 	addi	r6,sp,48
   15e24:	0014f880 	call	14f88 <__sprint_r>
   15e28:	103e251e 	bne	r2,zero,156c0 <___vfprintf_internal_r+0x6e0>
   15e2c:	dc800e17 	ldw	r18,56(sp)
   15e30:	dc400d17 	ldw	r17,52(sp)
   15e34:	dcc01904 	addi	r19,sp,100
   15e38:	003e4206 	br	15744 <___vfprintf_internal_r+0x764>
   15e3c:	d9014f17 	ldw	r4,1340(sp)
   15e40:	b00b883a 	mov	r5,r22
   15e44:	d9800c04 	addi	r6,sp,48
   15e48:	0014f880 	call	14f88 <__sprint_r>
   15e4c:	103e1c1e 	bne	r2,zero,156c0 <___vfprintf_internal_r+0x6e0>
   15e50:	dc800e17 	ldw	r18,56(sp)
   15e54:	dc400d17 	ldw	r17,52(sp)
   15e58:	d8c01904 	addi	r3,sp,100
   15e5c:	003e2e06 	br	15718 <___vfprintf_internal_r+0x738>
   15e60:	d9414c17 	ldw	r5,1328(sp)
   15e64:	2880004c 	andi	r2,r5,1
   15e68:	1005003a 	cmpeq	r2,r2,zero
   15e6c:	103dda1e 	bne	r2,zero,155d8 <___vfprintf_internal_r+0x5f8>
   15e70:	003e9f06 	br	158f0 <___vfprintf_internal_r+0x910>
   15e74:	d8c14117 	ldw	r3,1284(sp)
   15e78:	9125883a 	add	r18,r18,r4
   15e7c:	8c400044 	addi	r17,r17,1
   15e80:	008001c4 	movi	r2,7
   15e84:	a8c00015 	stw	r3,0(r21)
   15e88:	a9000115 	stw	r4,4(r21)
   15e8c:	dc800e15 	stw	r18,56(sp)
   15e90:	dc400d15 	stw	r17,52(sp)
   15e94:	14426616 	blt	r2,r17,16830 <___vfprintf_internal_r+0x1850>
   15e98:	a8c00204 	addi	r3,r21,8
   15e9c:	d9414917 	ldw	r5,1316(sp)
   15ea0:	00800044 	movi	r2,1
   15ea4:	94800044 	addi	r18,r18,1
   15ea8:	8c400044 	addi	r17,r17,1
   15eac:	18800115 	stw	r2,4(r3)
   15eb0:	008001c4 	movi	r2,7
   15eb4:	19400015 	stw	r5,0(r3)
   15eb8:	dc800e15 	stw	r18,56(sp)
   15ebc:	dc400d15 	stw	r17,52(sp)
   15ec0:	2021883a 	mov	r16,r4
   15ec4:	14425016 	blt	r2,r17,16808 <___vfprintf_internal_r+0x1828>
   15ec8:	19400204 	addi	r5,r3,8
   15ecc:	d9814717 	ldw	r6,1308(sp)
   15ed0:	8c400044 	addi	r17,r17,1
   15ed4:	dc400d15 	stw	r17,52(sp)
   15ed8:	3107c83a 	sub	r3,r6,r4
   15edc:	d9014117 	ldw	r4,1284(sp)
   15ee0:	90e5883a 	add	r18,r18,r3
   15ee4:	28c00115 	stw	r3,4(r5)
   15ee8:	8105883a 	add	r2,r16,r4
   15eec:	28800015 	stw	r2,0(r5)
   15ef0:	008001c4 	movi	r2,7
   15ef4:	dc800e15 	stw	r18,56(sp)
   15ef8:	147f1d16 	blt	r2,r17,15b70 <___vfprintf_internal_r+0xb90>
   15efc:	28c00204 	addi	r3,r5,8
   15f00:	003db506 	br	155d8 <___vfprintf_internal_r+0x5f8>
   15f04:	3c000017 	ldw	r16,0(r7)
   15f08:	3c400117 	ldw	r17,4(r7)
   15f0c:	39800204 	addi	r6,r7,8
   15f10:	01000044 	movi	r4,1
   15f14:	d9814015 	stw	r6,1280(sp)
   15f18:	d8000405 	stb	zero,16(sp)
   15f1c:	003ebe06 	br	15a18 <___vfprintf_internal_r+0xa38>
   15f20:	3c000017 	ldw	r16,0(r7)
   15f24:	3c400117 	ldw	r17,4(r7)
   15f28:	38800204 	addi	r2,r7,8
   15f2c:	d8814015 	stw	r2,1280(sp)
   15f30:	003eb706 	br	15a10 <___vfprintf_internal_r+0xa30>
   15f34:	3c000017 	ldw	r16,0(r7)
   15f38:	3c400117 	ldw	r17,4(r7)
   15f3c:	39000204 	addi	r4,r7,8
   15f40:	d9014015 	stw	r4,1280(sp)
   15f44:	0009883a 	mov	r4,zero
   15f48:	d8000405 	stb	zero,16(sp)
   15f4c:	003eb206 	br	15a18 <___vfprintf_internal_r+0xa38>
   15f50:	38c00017 	ldw	r3,0(r7)
   15f54:	39c00104 	addi	r7,r7,4
   15f58:	d8c14a15 	stw	r3,1320(sp)
   15f5c:	1800d10e 	bge	r3,zero,162a4 <___vfprintf_internal_r+0x12c4>
   15f60:	00c7c83a 	sub	r3,zero,r3
   15f64:	d8c14a15 	stw	r3,1320(sp)
   15f68:	d9014c17 	ldw	r4,1328(sp)
   15f6c:	b8c00007 	ldb	r3,0(r23)
   15f70:	21000114 	ori	r4,r4,4
   15f74:	d9014c15 	stw	r4,1328(sp)
   15f78:	003c9806 	br	151dc <___vfprintf_internal_r+0x1fc>
   15f7c:	d9814c17 	ldw	r6,1328(sp)
   15f80:	3080080c 	andi	r2,r6,32
   15f84:	1001f026 	beq	r2,zero,16748 <___vfprintf_internal_r+0x1768>
   15f88:	d9014b17 	ldw	r4,1324(sp)
   15f8c:	38800017 	ldw	r2,0(r7)
   15f90:	39c00104 	addi	r7,r7,4
   15f94:	d9c14015 	stw	r7,1280(sp)
   15f98:	2007d7fa 	srai	r3,r4,31
   15f9c:	d9c14017 	ldw	r7,1280(sp)
   15fa0:	11000015 	stw	r4,0(r2)
   15fa4:	10c00115 	stw	r3,4(r2)
   15fa8:	003c6906 	br	15150 <___vfprintf_internal_r+0x170>
   15fac:	b8c00007 	ldb	r3,0(r23)
   15fb0:	00801b04 	movi	r2,108
   15fb4:	18824f26 	beq	r3,r2,168f4 <___vfprintf_internal_r+0x1914>
   15fb8:	d9414c17 	ldw	r5,1328(sp)
   15fbc:	29400414 	ori	r5,r5,16
   15fc0:	d9414c15 	stw	r5,1328(sp)
   15fc4:	003c8506 	br	151dc <___vfprintf_internal_r+0x1fc>
   15fc8:	d9814c17 	ldw	r6,1328(sp)
   15fcc:	b8c00007 	ldb	r3,0(r23)
   15fd0:	31800814 	ori	r6,r6,32
   15fd4:	d9814c15 	stw	r6,1328(sp)
   15fd8:	003c8006 	br	151dc <___vfprintf_internal_r+0x1fc>
   15fdc:	d8814c17 	ldw	r2,1328(sp)
   15fe0:	3c000017 	ldw	r16,0(r7)
   15fe4:	00c01e04 	movi	r3,120
   15fe8:	10800094 	ori	r2,r2,2
   15fec:	d8814c15 	stw	r2,1328(sp)
   15ff0:	39c00104 	addi	r7,r7,4
   15ff4:	014000b4 	movhi	r5,2
   15ff8:	297bcb04 	addi	r5,r5,-4308
   15ffc:	00800c04 	movi	r2,48
   16000:	0023883a 	mov	r17,zero
   16004:	01000084 	movi	r4,2
   16008:	d9c14015 	stw	r7,1280(sp)
   1600c:	d8c14d15 	stw	r3,1332(sp)
   16010:	d9414415 	stw	r5,1296(sp)
   16014:	d8800445 	stb	r2,17(sp)
   16018:	d8c00485 	stb	r3,18(sp)
   1601c:	d8000405 	stb	zero,16(sp)
   16020:	003e7d06 	br	15a18 <___vfprintf_internal_r+0xa38>
   16024:	d8814c17 	ldw	r2,1328(sp)
   16028:	b8c00007 	ldb	r3,0(r23)
   1602c:	10801014 	ori	r2,r2,64
   16030:	d8814c15 	stw	r2,1328(sp)
   16034:	003c6906 	br	151dc <___vfprintf_internal_r+0x1fc>
   16038:	d9414c17 	ldw	r5,1328(sp)
   1603c:	2880020c 	andi	r2,r5,8
   16040:	1001df26 	beq	r2,zero,167c0 <___vfprintf_internal_r+0x17e0>
   16044:	39800017 	ldw	r6,0(r7)
   16048:	38800204 	addi	r2,r7,8
   1604c:	d8814015 	stw	r2,1280(sp)
   16050:	d9814215 	stw	r6,1288(sp)
   16054:	39c00117 	ldw	r7,4(r7)
   16058:	d9c14315 	stw	r7,1292(sp)
   1605c:	d9014217 	ldw	r4,1288(sp)
   16060:	d9414317 	ldw	r5,1292(sp)
   16064:	0019ca40 	call	19ca4 <__isinfd>
   16068:	10021726 	beq	r2,zero,168c8 <___vfprintf_internal_r+0x18e8>
   1606c:	d9014217 	ldw	r4,1288(sp)
   16070:	d9414317 	ldw	r5,1292(sp)
   16074:	000d883a 	mov	r6,zero
   16078:	000f883a 	mov	r7,zero
   1607c:	00104740 	call	10474 <__ltdf2>
   16080:	1002ca16 	blt	r2,zero,16bac <___vfprintf_internal_r+0x1bcc>
   16084:	d9414d17 	ldw	r5,1332(sp)
   16088:	008011c4 	movi	r2,71
   1608c:	11420a16 	blt	r2,r5,168b8 <___vfprintf_internal_r+0x18d8>
   16090:	018000b4 	movhi	r6,2
   16094:	31bbd004 	addi	r6,r6,-4288
   16098:	d9814115 	stw	r6,1284(sp)
   1609c:	d9014c17 	ldw	r4,1328(sp)
   160a0:	00c000c4 	movi	r3,3
   160a4:	00bfdfc4 	movi	r2,-129
   160a8:	2088703a 	and	r4,r4,r2
   160ac:	180f883a 	mov	r7,r3
   160b0:	d8c14515 	stw	r3,1300(sp)
   160b4:	d9014c15 	stw	r4,1328(sp)
   160b8:	d8014615 	stw	zero,1304(sp)
   160bc:	003e6a06 	br	15a68 <___vfprintf_internal_r+0xa88>
   160c0:	38800017 	ldw	r2,0(r7)
   160c4:	00c00044 	movi	r3,1
   160c8:	39c00104 	addi	r7,r7,4
   160cc:	d9c14015 	stw	r7,1280(sp)
   160d0:	d9000f04 	addi	r4,sp,60
   160d4:	180f883a 	mov	r7,r3
   160d8:	d8c14515 	stw	r3,1300(sp)
   160dc:	d9014115 	stw	r4,1284(sp)
   160e0:	d8800f05 	stb	r2,60(sp)
   160e4:	d8000405 	stb	zero,16(sp)
   160e8:	003cac06 	br	1539c <___vfprintf_internal_r+0x3bc>
   160ec:	014000b4 	movhi	r5,2
   160f0:	297bd604 	addi	r5,r5,-4264
   160f4:	d9414415 	stw	r5,1296(sp)
   160f8:	d9814c17 	ldw	r6,1328(sp)
   160fc:	3080080c 	andi	r2,r6,32
   16100:	1000f926 	beq	r2,zero,164e8 <___vfprintf_internal_r+0x1508>
   16104:	3c000017 	ldw	r16,0(r7)
   16108:	3c400117 	ldw	r17,4(r7)
   1610c:	38800204 	addi	r2,r7,8
   16110:	d8814015 	stw	r2,1280(sp)
   16114:	d9414c17 	ldw	r5,1328(sp)
   16118:	2880004c 	andi	r2,r5,1
   1611c:	1005003a 	cmpeq	r2,r2,zero
   16120:	1000b31e 	bne	r2,zero,163f0 <___vfprintf_internal_r+0x1410>
   16124:	8444b03a 	or	r2,r16,r17
   16128:	1000b126 	beq	r2,zero,163f0 <___vfprintf_internal_r+0x1410>
   1612c:	d9814d17 	ldw	r6,1332(sp)
   16130:	29400094 	ori	r5,r5,2
   16134:	00800c04 	movi	r2,48
   16138:	01000084 	movi	r4,2
   1613c:	d9414c15 	stw	r5,1328(sp)
   16140:	d8800445 	stb	r2,17(sp)
   16144:	d9800485 	stb	r6,18(sp)
   16148:	d8000405 	stb	zero,16(sp)
   1614c:	003e3206 	br	15a18 <___vfprintf_internal_r+0xa38>
   16150:	018000b4 	movhi	r6,2
   16154:	31bbcb04 	addi	r6,r6,-4308
   16158:	d9814415 	stw	r6,1296(sp)
   1615c:	003fe606 	br	160f8 <___vfprintf_internal_r+0x1118>
   16160:	00800ac4 	movi	r2,43
   16164:	d8800405 	stb	r2,16(sp)
   16168:	b8c00007 	ldb	r3,0(r23)
   1616c:	003c1b06 	br	151dc <___vfprintf_internal_r+0x1fc>
   16170:	d8814c17 	ldw	r2,1328(sp)
   16174:	b8c00007 	ldb	r3,0(r23)
   16178:	10800054 	ori	r2,r2,1
   1617c:	d8814c15 	stw	r2,1328(sp)
   16180:	003c1606 	br	151dc <___vfprintf_internal_r+0x1fc>
   16184:	d8800407 	ldb	r2,16(sp)
   16188:	1000461e 	bne	r2,zero,162a4 <___vfprintf_internal_r+0x12c4>
   1618c:	00800804 	movi	r2,32
   16190:	d8800405 	stb	r2,16(sp)
   16194:	b8c00007 	ldb	r3,0(r23)
   16198:	003c1006 	br	151dc <___vfprintf_internal_r+0x1fc>
   1619c:	d9814c17 	ldw	r6,1328(sp)
   161a0:	b8c00007 	ldb	r3,0(r23)
   161a4:	31800214 	ori	r6,r6,8
   161a8:	d9814c15 	stw	r6,1328(sp)
   161ac:	003c0b06 	br	151dc <___vfprintf_internal_r+0x1fc>
   161b0:	0007883a 	mov	r3,zero
   161b4:	01000244 	movi	r4,9
   161b8:	188002a4 	muli	r2,r3,10
   161bc:	b8c00007 	ldb	r3,0(r23)
   161c0:	d9814d17 	ldw	r6,1332(sp)
   161c4:	bdc00044 	addi	r23,r23,1
   161c8:	d8c14d15 	stw	r3,1332(sp)
   161cc:	d9414d17 	ldw	r5,1332(sp)
   161d0:	3085883a 	add	r2,r6,r2
   161d4:	10fff404 	addi	r3,r2,-48
   161d8:	28bff404 	addi	r2,r5,-48
   161dc:	20bff62e 	bgeu	r4,r2,161b8 <___vfprintf_internal_r+0x11d8>
   161e0:	d8c14a15 	stw	r3,1320(sp)
   161e4:	003bff06 	br	151e4 <___vfprintf_internal_r+0x204>
   161e8:	d9414c17 	ldw	r5,1328(sp)
   161ec:	b8c00007 	ldb	r3,0(r23)
   161f0:	29402014 	ori	r5,r5,128
   161f4:	d9414c15 	stw	r5,1328(sp)
   161f8:	003bf806 	br	151dc <___vfprintf_internal_r+0x1fc>
   161fc:	b8c00007 	ldb	r3,0(r23)
   16200:	00800a84 	movi	r2,42
   16204:	bdc00044 	addi	r23,r23,1
   16208:	18831526 	beq	r3,r2,16e60 <___vfprintf_internal_r+0x1e80>
   1620c:	d8c14d15 	stw	r3,1332(sp)
   16210:	18bff404 	addi	r2,r3,-48
   16214:	00c00244 	movi	r3,9
   16218:	18827836 	bltu	r3,r2,16bfc <___vfprintf_internal_r+0x1c1c>
   1621c:	000d883a 	mov	r6,zero
   16220:	308002a4 	muli	r2,r6,10
   16224:	b9800007 	ldb	r6,0(r23)
   16228:	d9414d17 	ldw	r5,1332(sp)
   1622c:	bdc00044 	addi	r23,r23,1
   16230:	d9814d15 	stw	r6,1332(sp)
   16234:	d9014d17 	ldw	r4,1332(sp)
   16238:	1145883a 	add	r2,r2,r5
   1623c:	11bff404 	addi	r6,r2,-48
   16240:	20bff404 	addi	r2,r4,-48
   16244:	18bff62e 	bgeu	r3,r2,16220 <___vfprintf_internal_r+0x1240>
   16248:	3027883a 	mov	r19,r6
   1624c:	303be50e 	bge	r6,zero,151e4 <___vfprintf_internal_r+0x204>
   16250:	04ffffc4 	movi	r19,-1
   16254:	003be306 	br	151e4 <___vfprintf_internal_r+0x204>
   16258:	d8000405 	stb	zero,16(sp)
   1625c:	39800017 	ldw	r6,0(r7)
   16260:	39c00104 	addi	r7,r7,4
   16264:	d9c14015 	stw	r7,1280(sp)
   16268:	d9814115 	stw	r6,1284(sp)
   1626c:	3001c926 	beq	r6,zero,16994 <___vfprintf_internal_r+0x19b4>
   16270:	98000e16 	blt	r19,zero,162ac <___vfprintf_internal_r+0x12cc>
   16274:	d9014117 	ldw	r4,1284(sp)
   16278:	000b883a 	mov	r5,zero
   1627c:	980d883a 	mov	r6,r19
   16280:	00138cc0 	call	138cc <memchr>
   16284:	10025926 	beq	r2,zero,16bec <___vfprintf_internal_r+0x1c0c>
   16288:	d8c14117 	ldw	r3,1284(sp)
   1628c:	10cfc83a 	sub	r7,r2,r3
   16290:	99c19e16 	blt	r19,r7,1690c <___vfprintf_internal_r+0x192c>
   16294:	d9c14515 	stw	r7,1300(sp)
   16298:	38000916 	blt	r7,zero,162c0 <___vfprintf_internal_r+0x12e0>
   1629c:	d8014615 	stw	zero,1304(sp)
   162a0:	003df106 	br	15a68 <___vfprintf_internal_r+0xa88>
   162a4:	b8c00007 	ldb	r3,0(r23)
   162a8:	003bcc06 	br	151dc <___vfprintf_internal_r+0x1fc>
   162ac:	d9014117 	ldw	r4,1284(sp)
   162b0:	0014cac0 	call	14cac <strlen>
   162b4:	d8814515 	stw	r2,1300(sp)
   162b8:	100f883a 	mov	r7,r2
   162bc:	103ff70e 	bge	r2,zero,1629c <___vfprintf_internal_r+0x12bc>
   162c0:	d8014515 	stw	zero,1300(sp)
   162c4:	d8014615 	stw	zero,1304(sp)
   162c8:	003de706 	br	15a68 <___vfprintf_internal_r+0xa88>
   162cc:	20c03fcc 	andi	r3,r4,255
   162d0:	00800044 	movi	r2,1
   162d4:	18802d26 	beq	r3,r2,1638c <___vfprintf_internal_r+0x13ac>
   162d8:	18800e36 	bltu	r3,r2,16314 <___vfprintf_internal_r+0x1334>
   162dc:	00800084 	movi	r2,2
   162e0:	1880fa26 	beq	r3,r2,166cc <___vfprintf_internal_r+0x16ec>
   162e4:	010000b4 	movhi	r4,2
   162e8:	213bdb04 	addi	r4,r4,-4244
   162ec:	0014cac0 	call	14cac <strlen>
   162f0:	100f883a 	mov	r7,r2
   162f4:	dcc14515 	stw	r19,1300(sp)
   162f8:	9880010e 	bge	r19,r2,16300 <___vfprintf_internal_r+0x1320>
   162fc:	d8814515 	stw	r2,1300(sp)
   16300:	008000b4 	movhi	r2,2
   16304:	10bbdb04 	addi	r2,r2,-4244
   16308:	dcc14615 	stw	r19,1304(sp)
   1630c:	d8814115 	stw	r2,1284(sp)
   16310:	003dd506 	br	15a68 <___vfprintf_internal_r+0xa88>
   16314:	d9401904 	addi	r5,sp,100
   16318:	dd000f04 	addi	r20,sp,60
   1631c:	d9414115 	stw	r5,1284(sp)
   16320:	880a977a 	slli	r5,r17,29
   16324:	d9814117 	ldw	r6,1284(sp)
   16328:	8004d0fa 	srli	r2,r16,3
   1632c:	8806d0fa 	srli	r3,r17,3
   16330:	810001cc 	andi	r4,r16,7
   16334:	2884b03a 	or	r2,r5,r2
   16338:	31bfffc4 	addi	r6,r6,-1
   1633c:	21000c04 	addi	r4,r4,48
   16340:	d9814115 	stw	r6,1284(sp)
   16344:	10cab03a 	or	r5,r2,r3
   16348:	31000005 	stb	r4,0(r6)
   1634c:	1021883a 	mov	r16,r2
   16350:	1823883a 	mov	r17,r3
   16354:	283ff21e 	bne	r5,zero,16320 <___vfprintf_internal_r+0x1340>
   16358:	d8c14c17 	ldw	r3,1328(sp)
   1635c:	1880004c 	andi	r2,r3,1
   16360:	1005003a 	cmpeq	r2,r2,zero
   16364:	103db91e 	bne	r2,zero,15a4c <___vfprintf_internal_r+0xa6c>
   16368:	20803fcc 	andi	r2,r4,255
   1636c:	1080201c 	xori	r2,r2,128
   16370:	10bfe004 	addi	r2,r2,-128
   16374:	00c00c04 	movi	r3,48
   16378:	10fdb426 	beq	r2,r3,15a4c <___vfprintf_internal_r+0xa6c>
   1637c:	31bfffc4 	addi	r6,r6,-1
   16380:	d9814115 	stw	r6,1284(sp)
   16384:	30c00005 	stb	r3,0(r6)
   16388:	003db006 	br	15a4c <___vfprintf_internal_r+0xa6c>
   1638c:	88800068 	cmpgeui	r2,r17,1
   16390:	10002c1e 	bne	r2,zero,16444 <___vfprintf_internal_r+0x1464>
   16394:	8800021e 	bne	r17,zero,163a0 <___vfprintf_internal_r+0x13c0>
   16398:	00800244 	movi	r2,9
   1639c:	14002936 	bltu	r2,r16,16444 <___vfprintf_internal_r+0x1464>
   163a0:	d90018c4 	addi	r4,sp,99
   163a4:	dd000f04 	addi	r20,sp,60
   163a8:	d9014115 	stw	r4,1284(sp)
   163ac:	d9014117 	ldw	r4,1284(sp)
   163b0:	80800c04 	addi	r2,r16,48
   163b4:	20800005 	stb	r2,0(r4)
   163b8:	003da406 	br	15a4c <___vfprintf_internal_r+0xa6c>
   163bc:	dc400d17 	ldw	r17,52(sp)
   163c0:	070000b4 	movhi	fp,2
   163c4:	e73be284 	addi	fp,fp,-4214
   163c8:	9425883a 	add	r18,r18,r16
   163cc:	8c400044 	addi	r17,r17,1
   163d0:	008001c4 	movi	r2,7
   163d4:	1f000015 	stw	fp,0(r3)
   163d8:	1c000115 	stw	r16,4(r3)
   163dc:	dc800e15 	stw	r18,56(sp)
   163e0:	dc400d15 	stw	r17,52(sp)
   163e4:	147de216 	blt	r2,r17,15b70 <___vfprintf_internal_r+0xb90>
   163e8:	18c00204 	addi	r3,r3,8
   163ec:	003c7a06 	br	155d8 <___vfprintf_internal_r+0x5f8>
   163f0:	01000084 	movi	r4,2
   163f4:	d8000405 	stb	zero,16(sp)
   163f8:	003d8706 	br	15a18 <___vfprintf_internal_r+0xa38>
   163fc:	d9814c17 	ldw	r6,1328(sp)
   16400:	30c4703a 	and	r2,r6,r3
   16404:	1005003a 	cmpeq	r2,r2,zero
   16408:	103cb926 	beq	r2,zero,156f0 <___vfprintf_internal_r+0x710>
   1640c:	d9014117 	ldw	r4,1284(sp)
   16410:	94800044 	addi	r18,r18,1
   16414:	8c400044 	addi	r17,r17,1
   16418:	008001c4 	movi	r2,7
   1641c:	a9000015 	stw	r4,0(r21)
   16420:	a8c00115 	stw	r3,4(r21)
   16424:	dc800e15 	stw	r18,56(sp)
   16428:	dc400d15 	stw	r17,52(sp)
   1642c:	147e6616 	blt	r2,r17,15dc8 <___vfprintf_internal_r+0xde8>
   16430:	acc00204 	addi	r19,r21,8
   16434:	003cd706 	br	15794 <___vfprintf_internal_r+0x7b4>
   16438:	070000b4 	movhi	fp,2
   1643c:	e73be284 	addi	fp,fp,-4214
   16440:	003c4f06 	br	15580 <___vfprintf_internal_r+0x5a0>
   16444:	dd000f04 	addi	r20,sp,60
   16448:	dc801904 	addi	r18,sp,100
   1644c:	8009883a 	mov	r4,r16
   16450:	880b883a 	mov	r5,r17
   16454:	01800284 	movi	r6,10
   16458:	000f883a 	mov	r7,zero
   1645c:	001a4600 	call	1a460 <__umoddi3>
   16460:	12000c04 	addi	r8,r2,48
   16464:	94bfffc4 	addi	r18,r18,-1
   16468:	8009883a 	mov	r4,r16
   1646c:	880b883a 	mov	r5,r17
   16470:	01800284 	movi	r6,10
   16474:	000f883a 	mov	r7,zero
   16478:	92000005 	stb	r8,0(r18)
   1647c:	0019e840 	call	19e84 <__udivdi3>
   16480:	1009883a 	mov	r4,r2
   16484:	1021883a 	mov	r16,r2
   16488:	18800068 	cmpgeui	r2,r3,1
   1648c:	1823883a 	mov	r17,r3
   16490:	103fee1e 	bne	r2,zero,1644c <___vfprintf_internal_r+0x146c>
   16494:	1800021e 	bne	r3,zero,164a0 <___vfprintf_internal_r+0x14c0>
   16498:	00800244 	movi	r2,9
   1649c:	113feb36 	bltu	r2,r4,1644c <___vfprintf_internal_r+0x146c>
   164a0:	94bfffc4 	addi	r18,r18,-1
   164a4:	dc814115 	stw	r18,1284(sp)
   164a8:	003fc006 	br	163ac <___vfprintf_internal_r+0x13cc>
   164ac:	d9014c17 	ldw	r4,1328(sp)
   164b0:	2080004c 	andi	r2,r4,1
   164b4:	10009a1e 	bne	r2,zero,16720 <___vfprintf_internal_r+0x1740>
   164b8:	d9401904 	addi	r5,sp,100
   164bc:	dd000f04 	addi	r20,sp,60
   164c0:	d9414115 	stw	r5,1284(sp)
   164c4:	003d6106 	br	15a4c <___vfprintf_internal_r+0xa6c>
   164c8:	d9014f17 	ldw	r4,1340(sp)
   164cc:	b00b883a 	mov	r5,r22
   164d0:	d9800c04 	addi	r6,sp,48
   164d4:	0014f880 	call	14f88 <__sprint_r>
   164d8:	103c791e 	bne	r2,zero,156c0 <___vfprintf_internal_r+0x6e0>
   164dc:	dc800e17 	ldw	r18,56(sp)
   164e0:	d8c01904 	addi	r3,sp,100
   164e4:	003cff06 	br	158e4 <___vfprintf_internal_r+0x904>
   164e8:	d8c14c17 	ldw	r3,1328(sp)
   164ec:	1880040c 	andi	r2,r3,16
   164f0:	1000711e 	bne	r2,zero,166b8 <___vfprintf_internal_r+0x16d8>
   164f4:	d9014c17 	ldw	r4,1328(sp)
   164f8:	2080100c 	andi	r2,r4,64
   164fc:	10006e26 	beq	r2,zero,166b8 <___vfprintf_internal_r+0x16d8>
   16500:	3c00000b 	ldhu	r16,0(r7)
   16504:	0023883a 	mov	r17,zero
   16508:	39c00104 	addi	r7,r7,4
   1650c:	d9c14015 	stw	r7,1280(sp)
   16510:	003f0006 	br	16114 <___vfprintf_internal_r+0x1134>
   16514:	dc400d17 	ldw	r17,52(sp)
   16518:	070000b4 	movhi	fp,2
   1651c:	e73be284 	addi	fp,fp,-4214
   16520:	9425883a 	add	r18,r18,r16
   16524:	8c400044 	addi	r17,r17,1
   16528:	008001c4 	movi	r2,7
   1652c:	1f000015 	stw	fp,0(r3)
   16530:	1c000115 	stw	r16,4(r3)
   16534:	dc800e15 	stw	r18,56(sp)
   16538:	dc400d15 	stw	r17,52(sp)
   1653c:	147d7616 	blt	r2,r17,15b18 <___vfprintf_internal_r+0xb38>
   16540:	18c00204 	addi	r3,r3,8
   16544:	003d7b06 	br	15b34 <___vfprintf_internal_r+0xb54>
   16548:	dc800e17 	ldw	r18,56(sp)
   1654c:	dc400d17 	ldw	r17,52(sp)
   16550:	070000b4 	movhi	fp,2
   16554:	e73be684 	addi	fp,fp,-4198
   16558:	003bc006 	br	1545c <___vfprintf_internal_r+0x47c>
   1655c:	d9014f17 	ldw	r4,1340(sp)
   16560:	b00b883a 	mov	r5,r22
   16564:	d9800c04 	addi	r6,sp,48
   16568:	0014f880 	call	14f88 <__sprint_r>
   1656c:	103c541e 	bne	r2,zero,156c0 <___vfprintf_internal_r+0x6e0>
   16570:	dc800e17 	ldw	r18,56(sp)
   16574:	d8c01904 	addi	r3,sp,100
   16578:	003ce906 	br	15920 <___vfprintf_internal_r+0x940>
   1657c:	3c000017 	ldw	r16,0(r7)
   16580:	0009883a 	mov	r4,zero
   16584:	39c00104 	addi	r7,r7,4
   16588:	0023883a 	mov	r17,zero
   1658c:	d9c14015 	stw	r7,1280(sp)
   16590:	d8000405 	stb	zero,16(sp)
   16594:	003d2006 	br	15a18 <___vfprintf_internal_r+0xa38>
   16598:	38800017 	ldw	r2,0(r7)
   1659c:	39c00104 	addi	r7,r7,4
   165a0:	d9c14015 	stw	r7,1280(sp)
   165a4:	1023d7fa 	srai	r17,r2,31
   165a8:	1021883a 	mov	r16,r2
   165ac:	003d1806 	br	15a10 <___vfprintf_internal_r+0xa30>
   165b0:	3c000017 	ldw	r16,0(r7)
   165b4:	01000044 	movi	r4,1
   165b8:	39c00104 	addi	r7,r7,4
   165bc:	0023883a 	mov	r17,zero
   165c0:	d9c14015 	stw	r7,1280(sp)
   165c4:	d8000405 	stb	zero,16(sp)
   165c8:	003d1306 	br	15a18 <___vfprintf_internal_r+0xa38>
   165cc:	008000b4 	movhi	r2,2
   165d0:	10bbe204 	addi	r2,r2,-4216
   165d4:	94800044 	addi	r18,r18,1
   165d8:	8c400044 	addi	r17,r17,1
   165dc:	a8800015 	stw	r2,0(r21)
   165e0:	00c00044 	movi	r3,1
   165e4:	008001c4 	movi	r2,7
   165e8:	a8c00115 	stw	r3,4(r21)
   165ec:	dc800e15 	stw	r18,56(sp)
   165f0:	dc400d15 	stw	r17,52(sp)
   165f4:	1440ca16 	blt	r2,r17,16920 <___vfprintf_internal_r+0x1940>
   165f8:	a8c00204 	addi	r3,r21,8
   165fc:	2000061e 	bne	r4,zero,16618 <___vfprintf_internal_r+0x1638>
   16600:	d9414717 	ldw	r5,1308(sp)
   16604:	2800041e 	bne	r5,zero,16618 <___vfprintf_internal_r+0x1638>
   16608:	d9814c17 	ldw	r6,1328(sp)
   1660c:	3080004c 	andi	r2,r6,1
   16610:	1005003a 	cmpeq	r2,r2,zero
   16614:	103bf01e 	bne	r2,zero,155d8 <___vfprintf_internal_r+0x5f8>
   16618:	00800044 	movi	r2,1
   1661c:	dc400d17 	ldw	r17,52(sp)
   16620:	18800115 	stw	r2,4(r3)
   16624:	d8814917 	ldw	r2,1316(sp)
   16628:	94800044 	addi	r18,r18,1
   1662c:	8c400044 	addi	r17,r17,1
   16630:	18800015 	stw	r2,0(r3)
   16634:	008001c4 	movi	r2,7
   16638:	dc800e15 	stw	r18,56(sp)
   1663c:	dc400d15 	stw	r17,52(sp)
   16640:	1440ca16 	blt	r2,r17,1696c <___vfprintf_internal_r+0x198c>
   16644:	18c00204 	addi	r3,r3,8
   16648:	0121c83a 	sub	r16,zero,r4
   1664c:	0400500e 	bge	zero,r16,16790 <___vfprintf_internal_r+0x17b0>
   16650:	00800404 	movi	r2,16
   16654:	1400800e 	bge	r2,r16,16858 <___vfprintf_internal_r+0x1878>
   16658:	1027883a 	mov	r19,r2
   1665c:	070000b4 	movhi	fp,2
   16660:	e73be284 	addi	fp,fp,-4214
   16664:	050001c4 	movi	r20,7
   16668:	00000306 	br	16678 <___vfprintf_internal_r+0x1698>
   1666c:	18c00204 	addi	r3,r3,8
   16670:	843ffc04 	addi	r16,r16,-16
   16674:	9c007a0e 	bge	r19,r16,16860 <___vfprintf_internal_r+0x1880>
   16678:	94800404 	addi	r18,r18,16
   1667c:	8c400044 	addi	r17,r17,1
   16680:	1f000015 	stw	fp,0(r3)
   16684:	1cc00115 	stw	r19,4(r3)
   16688:	dc800e15 	stw	r18,56(sp)
   1668c:	dc400d15 	stw	r17,52(sp)
   16690:	a47ff60e 	bge	r20,r17,1666c <___vfprintf_internal_r+0x168c>
   16694:	d9014f17 	ldw	r4,1340(sp)
   16698:	b00b883a 	mov	r5,r22
   1669c:	d9800c04 	addi	r6,sp,48
   166a0:	0014f880 	call	14f88 <__sprint_r>
   166a4:	103c061e 	bne	r2,zero,156c0 <___vfprintf_internal_r+0x6e0>
   166a8:	dc800e17 	ldw	r18,56(sp)
   166ac:	dc400d17 	ldw	r17,52(sp)
   166b0:	d8c01904 	addi	r3,sp,100
   166b4:	003fee06 	br	16670 <___vfprintf_internal_r+0x1690>
   166b8:	3c000017 	ldw	r16,0(r7)
   166bc:	0023883a 	mov	r17,zero
   166c0:	39c00104 	addi	r7,r7,4
   166c4:	d9c14015 	stw	r7,1280(sp)
   166c8:	003e9206 	br	16114 <___vfprintf_internal_r+0x1134>
   166cc:	d9401904 	addi	r5,sp,100
   166d0:	dd000f04 	addi	r20,sp,60
   166d4:	d9414115 	stw	r5,1284(sp)
   166d8:	d9814417 	ldw	r6,1296(sp)
   166dc:	880a973a 	slli	r5,r17,28
   166e0:	8004d13a 	srli	r2,r16,4
   166e4:	810003cc 	andi	r4,r16,15
   166e8:	3109883a 	add	r4,r6,r4
   166ec:	2884b03a 	or	r2,r5,r2
   166f0:	21400003 	ldbu	r5,0(r4)
   166f4:	d9014117 	ldw	r4,1284(sp)
   166f8:	8806d13a 	srli	r3,r17,4
   166fc:	1021883a 	mov	r16,r2
   16700:	213fffc4 	addi	r4,r4,-1
   16704:	d9014115 	stw	r4,1284(sp)
   16708:	d9814117 	ldw	r6,1284(sp)
   1670c:	10c8b03a 	or	r4,r2,r3
   16710:	1823883a 	mov	r17,r3
   16714:	31400005 	stb	r5,0(r6)
   16718:	203fef1e 	bne	r4,zero,166d8 <___vfprintf_internal_r+0x16f8>
   1671c:	003ccb06 	br	15a4c <___vfprintf_internal_r+0xa6c>
   16720:	00800c04 	movi	r2,48
   16724:	d98018c4 	addi	r6,sp,99
   16728:	dd000f04 	addi	r20,sp,60
   1672c:	d88018c5 	stb	r2,99(sp)
   16730:	d9814115 	stw	r6,1284(sp)
   16734:	003cc506 	br	15a4c <___vfprintf_internal_r+0xa6c>
   16738:	dc400d17 	ldw	r17,52(sp)
   1673c:	070000b4 	movhi	fp,2
   16740:	e73be684 	addi	fp,fp,-4198
   16744:	003bc706 	br	15664 <___vfprintf_internal_r+0x684>
   16748:	d9414c17 	ldw	r5,1328(sp)
   1674c:	2880040c 	andi	r2,r5,16
   16750:	10007c26 	beq	r2,zero,16944 <___vfprintf_internal_r+0x1964>
   16754:	38800017 	ldw	r2,0(r7)
   16758:	39c00104 	addi	r7,r7,4
   1675c:	d9c14015 	stw	r7,1280(sp)
   16760:	d9814b17 	ldw	r6,1324(sp)
   16764:	d9c14017 	ldw	r7,1280(sp)
   16768:	11800015 	stw	r6,0(r2)
   1676c:	003a7806 	br	15150 <___vfprintf_internal_r+0x170>
   16770:	d9014f17 	ldw	r4,1340(sp)
   16774:	b00b883a 	mov	r5,r22
   16778:	d9800c04 	addi	r6,sp,48
   1677c:	0014f880 	call	14f88 <__sprint_r>
   16780:	103bcf1e 	bne	r2,zero,156c0 <___vfprintf_internal_r+0x6e0>
   16784:	dc800e17 	ldw	r18,56(sp)
   16788:	dc400d17 	ldw	r17,52(sp)
   1678c:	d8c01904 	addi	r3,sp,100
   16790:	d9014717 	ldw	r4,1308(sp)
   16794:	d9414117 	ldw	r5,1284(sp)
   16798:	8c400044 	addi	r17,r17,1
   1679c:	9125883a 	add	r18,r18,r4
   167a0:	008001c4 	movi	r2,7
   167a4:	19400015 	stw	r5,0(r3)
   167a8:	19000115 	stw	r4,4(r3)
   167ac:	dc800e15 	stw	r18,56(sp)
   167b0:	dc400d15 	stw	r17,52(sp)
   167b4:	147cee16 	blt	r2,r17,15b70 <___vfprintf_internal_r+0xb90>
   167b8:	18c00204 	addi	r3,r3,8
   167bc:	003b8606 	br	155d8 <___vfprintf_internal_r+0x5f8>
   167c0:	38c00017 	ldw	r3,0(r7)
   167c4:	39000204 	addi	r4,r7,8
   167c8:	d9014015 	stw	r4,1280(sp)
   167cc:	d8c14215 	stw	r3,1288(sp)
   167d0:	39c00117 	ldw	r7,4(r7)
   167d4:	d9c14315 	stw	r7,1292(sp)
   167d8:	003e2006 	br	1605c <___vfprintf_internal_r+0x107c>
   167dc:	0005883a 	mov	r2,zero
   167e0:	1409c83a 	sub	r4,r2,r16
   167e4:	1105803a 	cmpltu	r2,r2,r4
   167e8:	044bc83a 	sub	r5,zero,r17
   167ec:	2885c83a 	sub	r2,r5,r2
   167f0:	2021883a 	mov	r16,r4
   167f4:	1023883a 	mov	r17,r2
   167f8:	01000044 	movi	r4,1
   167fc:	00800b44 	movi	r2,45
   16800:	d8800405 	stb	r2,16(sp)
   16804:	003c8406 	br	15a18 <___vfprintf_internal_r+0xa38>
   16808:	d9014f17 	ldw	r4,1340(sp)
   1680c:	b00b883a 	mov	r5,r22
   16810:	d9800c04 	addi	r6,sp,48
   16814:	0014f880 	call	14f88 <__sprint_r>
   16818:	103ba91e 	bne	r2,zero,156c0 <___vfprintf_internal_r+0x6e0>
   1681c:	dc800e17 	ldw	r18,56(sp)
   16820:	dc400d17 	ldw	r17,52(sp)
   16824:	d9000517 	ldw	r4,20(sp)
   16828:	d9401904 	addi	r5,sp,100
   1682c:	003da706 	br	15ecc <___vfprintf_internal_r+0xeec>
   16830:	d9014f17 	ldw	r4,1340(sp)
   16834:	b00b883a 	mov	r5,r22
   16838:	d9800c04 	addi	r6,sp,48
   1683c:	0014f880 	call	14f88 <__sprint_r>
   16840:	103b9f1e 	bne	r2,zero,156c0 <___vfprintf_internal_r+0x6e0>
   16844:	dc800e17 	ldw	r18,56(sp)
   16848:	dc400d17 	ldw	r17,52(sp)
   1684c:	d9000517 	ldw	r4,20(sp)
   16850:	d8c01904 	addi	r3,sp,100
   16854:	003d9106 	br	15e9c <___vfprintf_internal_r+0xebc>
   16858:	070000b4 	movhi	fp,2
   1685c:	e73be284 	addi	fp,fp,-4214
   16860:	9425883a 	add	r18,r18,r16
   16864:	8c400044 	addi	r17,r17,1
   16868:	008001c4 	movi	r2,7
   1686c:	1f000015 	stw	fp,0(r3)
   16870:	1c000115 	stw	r16,4(r3)
   16874:	dc800e15 	stw	r18,56(sp)
   16878:	dc400d15 	stw	r17,52(sp)
   1687c:	147fbc16 	blt	r2,r17,16770 <___vfprintf_internal_r+0x1790>
   16880:	18c00204 	addi	r3,r3,8
   16884:	003fc206 	br	16790 <___vfprintf_internal_r+0x17b0>
   16888:	d9014f17 	ldw	r4,1340(sp)
   1688c:	b00b883a 	mov	r5,r22
   16890:	d9800c04 	addi	r6,sp,48
   16894:	0014f880 	call	14f88 <__sprint_r>
   16898:	103b891e 	bne	r2,zero,156c0 <___vfprintf_internal_r+0x6e0>
   1689c:	dc800e17 	ldw	r18,56(sp)
   168a0:	d9000517 	ldw	r4,20(sp)
   168a4:	d8c01904 	addi	r3,sp,100
   168a8:	003d0206 	br	15cb4 <___vfprintf_internal_r+0xcd4>
   168ac:	070000b4 	movhi	fp,2
   168b0:	e73be284 	addi	fp,fp,-4214
   168b4:	003be406 	br	15848 <___vfprintf_internal_r+0x868>
   168b8:	008000b4 	movhi	r2,2
   168bc:	10bbd104 	addi	r2,r2,-4284
   168c0:	d8814115 	stw	r2,1284(sp)
   168c4:	003df506 	br	1609c <___vfprintf_internal_r+0x10bc>
   168c8:	d9014217 	ldw	r4,1288(sp)
   168cc:	d9414317 	ldw	r5,1292(sp)
   168d0:	0019ce40 	call	19ce4 <__isnand>
   168d4:	10003926 	beq	r2,zero,169bc <___vfprintf_internal_r+0x19dc>
   168d8:	d9414d17 	ldw	r5,1332(sp)
   168dc:	008011c4 	movi	r2,71
   168e0:	1140ce16 	blt	r2,r5,16c1c <___vfprintf_internal_r+0x1c3c>
   168e4:	018000b4 	movhi	r6,2
   168e8:	31bbd204 	addi	r6,r6,-4280
   168ec:	d9814115 	stw	r6,1284(sp)
   168f0:	003dea06 	br	1609c <___vfprintf_internal_r+0x10bc>
   168f4:	d9014c17 	ldw	r4,1328(sp)
   168f8:	bdc00044 	addi	r23,r23,1
   168fc:	b8c00007 	ldb	r3,0(r23)
   16900:	21000814 	ori	r4,r4,32
   16904:	d9014c15 	stw	r4,1328(sp)
   16908:	003a3406 	br	151dc <___vfprintf_internal_r+0x1fc>
   1690c:	dcc14515 	stw	r19,1300(sp)
   16910:	98011016 	blt	r19,zero,16d54 <___vfprintf_internal_r+0x1d74>
   16914:	980f883a 	mov	r7,r19
   16918:	d8014615 	stw	zero,1304(sp)
   1691c:	003c5206 	br	15a68 <___vfprintf_internal_r+0xa88>
   16920:	d9014f17 	ldw	r4,1340(sp)
   16924:	b00b883a 	mov	r5,r22
   16928:	d9800c04 	addi	r6,sp,48
   1692c:	0014f880 	call	14f88 <__sprint_r>
   16930:	103b631e 	bne	r2,zero,156c0 <___vfprintf_internal_r+0x6e0>
   16934:	dc800e17 	ldw	r18,56(sp)
   16938:	d9000517 	ldw	r4,20(sp)
   1693c:	d8c01904 	addi	r3,sp,100
   16940:	003f2e06 	br	165fc <___vfprintf_internal_r+0x161c>
   16944:	d8c14c17 	ldw	r3,1328(sp)
   16948:	1880100c 	andi	r2,r3,64
   1694c:	1000a026 	beq	r2,zero,16bd0 <___vfprintf_internal_r+0x1bf0>
   16950:	38800017 	ldw	r2,0(r7)
   16954:	39c00104 	addi	r7,r7,4
   16958:	d9c14015 	stw	r7,1280(sp)
   1695c:	d9014b17 	ldw	r4,1324(sp)
   16960:	d9c14017 	ldw	r7,1280(sp)
   16964:	1100000d 	sth	r4,0(r2)
   16968:	0039f906 	br	15150 <___vfprintf_internal_r+0x170>
   1696c:	d9014f17 	ldw	r4,1340(sp)
   16970:	b00b883a 	mov	r5,r22
   16974:	d9800c04 	addi	r6,sp,48
   16978:	0014f880 	call	14f88 <__sprint_r>
   1697c:	103b501e 	bne	r2,zero,156c0 <___vfprintf_internal_r+0x6e0>
   16980:	dc800e17 	ldw	r18,56(sp)
   16984:	dc400d17 	ldw	r17,52(sp)
   16988:	d9000517 	ldw	r4,20(sp)
   1698c:	d8c01904 	addi	r3,sp,100
   16990:	003f2d06 	br	16648 <___vfprintf_internal_r+0x1668>
   16994:	00800184 	movi	r2,6
   16998:	14c09a36 	bltu	r2,r19,16c04 <___vfprintf_internal_r+0x1c24>
   1699c:	dcc14515 	stw	r19,1300(sp)
   169a0:	9800010e 	bge	r19,zero,169a8 <___vfprintf_internal_r+0x19c8>
   169a4:	d8014515 	stw	zero,1300(sp)
   169a8:	008000b4 	movhi	r2,2
   169ac:	10bbd404 	addi	r2,r2,-4272
   169b0:	980f883a 	mov	r7,r19
   169b4:	d8814115 	stw	r2,1284(sp)
   169b8:	003a7806 	br	1539c <___vfprintf_internal_r+0x3bc>
   169bc:	00bfffc4 	movi	r2,-1
   169c0:	9880e226 	beq	r19,r2,16d4c <___vfprintf_internal_r+0x1d6c>
   169c4:	d9414d17 	ldw	r5,1332(sp)
   169c8:	008019c4 	movi	r2,103
   169cc:	2880dc26 	beq	r5,r2,16d40 <___vfprintf_internal_r+0x1d60>
   169d0:	008011c4 	movi	r2,71
   169d4:	2880da26 	beq	r5,r2,16d40 <___vfprintf_internal_r+0x1d60>
   169d8:	d9414c17 	ldw	r5,1328(sp)
   169dc:	d9014317 	ldw	r4,1292(sp)
   169e0:	d9814217 	ldw	r6,1288(sp)
   169e4:	29404014 	ori	r5,r5,256
   169e8:	d9414c15 	stw	r5,1328(sp)
   169ec:	2000cc16 	blt	r4,zero,16d20 <___vfprintf_internal_r+0x1d40>
   169f0:	3021883a 	mov	r16,r6
   169f4:	2023883a 	mov	r17,r4
   169f8:	0039883a 	mov	fp,zero
   169fc:	d9414d17 	ldw	r5,1332(sp)
   16a00:	00801984 	movi	r2,102
   16a04:	2880b726 	beq	r5,r2,16ce4 <___vfprintf_internal_r+0x1d04>
   16a08:	00801184 	movi	r2,70
   16a0c:	2880b526 	beq	r5,r2,16ce4 <___vfprintf_internal_r+0x1d04>
   16a10:	00801944 	movi	r2,101
   16a14:	2880c826 	beq	r5,r2,16d38 <___vfprintf_internal_r+0x1d58>
   16a18:	00801144 	movi	r2,69
   16a1c:	2880c626 	beq	r5,r2,16d38 <___vfprintf_internal_r+0x1d58>
   16a20:	9829883a 	mov	r20,r19
   16a24:	d9014f17 	ldw	r4,1340(sp)
   16a28:	d8800504 	addi	r2,sp,20
   16a2c:	880d883a 	mov	r6,r17
   16a30:	d8800115 	stw	r2,4(sp)
   16a34:	d8c00604 	addi	r3,sp,24
   16a38:	d8800704 	addi	r2,sp,28
   16a3c:	800b883a 	mov	r5,r16
   16a40:	01c00084 	movi	r7,2
   16a44:	d8c00215 	stw	r3,8(sp)
   16a48:	d8800315 	stw	r2,12(sp)
   16a4c:	dd000015 	stw	r20,0(sp)
   16a50:	00174380 	call	17438 <_dtoa_r>
   16a54:	d9814d17 	ldw	r6,1332(sp)
   16a58:	d8814115 	stw	r2,1284(sp)
   16a5c:	008019c4 	movi	r2,103
   16a60:	30809526 	beq	r6,r2,16cb8 <___vfprintf_internal_r+0x1cd8>
   16a64:	d8c14d17 	ldw	r3,1332(sp)
   16a68:	008011c4 	movi	r2,71
   16a6c:	18809226 	beq	r3,r2,16cb8 <___vfprintf_internal_r+0x1cd8>
   16a70:	d9414117 	ldw	r5,1284(sp)
   16a74:	d9814d17 	ldw	r6,1332(sp)
   16a78:	00801984 	movi	r2,102
   16a7c:	2d25883a 	add	r18,r5,r20
   16a80:	30808626 	beq	r6,r2,16c9c <___vfprintf_internal_r+0x1cbc>
   16a84:	00801184 	movi	r2,70
   16a88:	30808426 	beq	r6,r2,16c9c <___vfprintf_internal_r+0x1cbc>
   16a8c:	000d883a 	mov	r6,zero
   16a90:	000f883a 	mov	r7,zero
   16a94:	880b883a 	mov	r5,r17
   16a98:	8009883a 	mov	r4,r16
   16a9c:	001ac680 	call	1ac68 <__eqdf2>
   16aa0:	1000751e 	bne	r2,zero,16c78 <___vfprintf_internal_r+0x1c98>
   16aa4:	9005883a 	mov	r2,r18
   16aa8:	dc800715 	stw	r18,28(sp)
   16aac:	d9014117 	ldw	r4,1284(sp)
   16ab0:	d9414d17 	ldw	r5,1332(sp)
   16ab4:	00c019c4 	movi	r3,103
   16ab8:	1125c83a 	sub	r18,r2,r4
   16abc:	28c06826 	beq	r5,r3,16c60 <___vfprintf_internal_r+0x1c80>
   16ac0:	008011c4 	movi	r2,71
   16ac4:	28806626 	beq	r5,r2,16c60 <___vfprintf_internal_r+0x1c80>
   16ac8:	d9000517 	ldw	r4,20(sp)
   16acc:	d8c14d17 	ldw	r3,1332(sp)
   16ad0:	00801944 	movi	r2,101
   16ad4:	10c05516 	blt	r2,r3,16c2c <___vfprintf_internal_r+0x1c4c>
   16ad8:	213fffc4 	addi	r4,r4,-1
   16adc:	d9000515 	stw	r4,20(sp)
   16ae0:	d8c00805 	stb	r3,32(sp)
   16ae4:	2021883a 	mov	r16,r4
   16ae8:	2000c116 	blt	r4,zero,16df0 <___vfprintf_internal_r+0x1e10>
   16aec:	00800ac4 	movi	r2,43
   16af0:	d8800845 	stb	r2,33(sp)
   16af4:	00800244 	movi	r2,9
   16af8:	1400af0e 	bge	r2,r16,16db8 <___vfprintf_internal_r+0x1dd8>
   16afc:	1027883a 	mov	r19,r2
   16b00:	dc400b84 	addi	r17,sp,46
   16b04:	8009883a 	mov	r4,r16
   16b08:	01400284 	movi	r5,10
   16b0c:	00107e00 	call	107e0 <__modsi3>
   16b10:	10800c04 	addi	r2,r2,48
   16b14:	8c7fffc4 	addi	r17,r17,-1
   16b18:	8009883a 	mov	r4,r16
   16b1c:	01400284 	movi	r5,10
   16b20:	88800005 	stb	r2,0(r17)
   16b24:	00107800 	call	10780 <__divsi3>
   16b28:	1021883a 	mov	r16,r2
   16b2c:	98bff516 	blt	r19,r2,16b04 <___vfprintf_internal_r+0x1b24>
   16b30:	10c00c04 	addi	r3,r2,48
   16b34:	d88009c4 	addi	r2,sp,39
   16b38:	108001c4 	addi	r2,r2,7
   16b3c:	897fffc4 	addi	r5,r17,-1
   16b40:	88ffffc5 	stb	r3,-1(r17)
   16b44:	2880a72e 	bgeu	r5,r2,16de4 <___vfprintf_internal_r+0x1e04>
   16b48:	1009883a 	mov	r4,r2
   16b4c:	d9800804 	addi	r6,sp,32
   16b50:	d8c00884 	addi	r3,sp,34
   16b54:	28800003 	ldbu	r2,0(r5)
   16b58:	29400044 	addi	r5,r5,1
   16b5c:	18800005 	stb	r2,0(r3)
   16b60:	18c00044 	addi	r3,r3,1
   16b64:	293ffb36 	bltu	r5,r4,16b54 <___vfprintf_internal_r+0x1b74>
   16b68:	1987c83a 	sub	r3,r3,r6
   16b6c:	00800044 	movi	r2,1
   16b70:	d8c14815 	stw	r3,1312(sp)
   16b74:	90cf883a 	add	r7,r18,r3
   16b78:	1480960e 	bge	r2,r18,16dd4 <___vfprintf_internal_r+0x1df4>
   16b7c:	39c00044 	addi	r7,r7,1
   16b80:	d9c14515 	stw	r7,1300(sp)
   16b84:	38003416 	blt	r7,zero,16c58 <___vfprintf_internal_r+0x1c78>
   16b88:	e0803fcc 	andi	r2,fp,255
   16b8c:	1080201c 	xori	r2,r2,128
   16b90:	10bfe004 	addi	r2,r2,-128
   16b94:	10004e26 	beq	r2,zero,16cd0 <___vfprintf_internal_r+0x1cf0>
   16b98:	00800b44 	movi	r2,45
   16b9c:	dc814715 	stw	r18,1308(sp)
   16ba0:	d8014615 	stw	zero,1304(sp)
   16ba4:	d8800405 	stb	r2,16(sp)
   16ba8:	003bb106 	br	15a70 <___vfprintf_internal_r+0xa90>
   16bac:	00800b44 	movi	r2,45
   16bb0:	d8800405 	stb	r2,16(sp)
   16bb4:	003d3306 	br	16084 <___vfprintf_internal_r+0x10a4>
   16bb8:	d9014f17 	ldw	r4,1340(sp)
   16bbc:	b00b883a 	mov	r5,r22
   16bc0:	d9800c04 	addi	r6,sp,48
   16bc4:	0014f880 	call	14f88 <__sprint_r>
   16bc8:	103abd1e 	bne	r2,zero,156c0 <___vfprintf_internal_r+0x6e0>
   16bcc:	003abb06 	br	156bc <___vfprintf_internal_r+0x6dc>
   16bd0:	38800017 	ldw	r2,0(r7)
   16bd4:	39c00104 	addi	r7,r7,4
   16bd8:	d9c14015 	stw	r7,1280(sp)
   16bdc:	d9414b17 	ldw	r5,1324(sp)
   16be0:	d9c14017 	ldw	r7,1280(sp)
   16be4:	11400015 	stw	r5,0(r2)
   16be8:	00395906 	br	15150 <___vfprintf_internal_r+0x170>
   16bec:	980f883a 	mov	r7,r19
   16bf0:	dcc14515 	stw	r19,1300(sp)
   16bf4:	d8014615 	stw	zero,1304(sp)
   16bf8:	003b9b06 	br	15a68 <___vfprintf_internal_r+0xa88>
   16bfc:	0027883a 	mov	r19,zero
   16c00:	00397806 	br	151e4 <___vfprintf_internal_r+0x204>
   16c04:	00c000b4 	movhi	r3,2
   16c08:	18fbd404 	addi	r3,r3,-4272
   16c0c:	100f883a 	mov	r7,r2
   16c10:	d8814515 	stw	r2,1300(sp)
   16c14:	d8c14115 	stw	r3,1284(sp)
   16c18:	0039e006 	br	1539c <___vfprintf_internal_r+0x3bc>
   16c1c:	008000b4 	movhi	r2,2
   16c20:	10bbd304 	addi	r2,r2,-4276
   16c24:	d8814115 	stw	r2,1284(sp)
   16c28:	003d1c06 	br	1609c <___vfprintf_internal_r+0x10bc>
   16c2c:	d9414d17 	ldw	r5,1332(sp)
   16c30:	00801984 	movi	r2,102
   16c34:	28804926 	beq	r5,r2,16d5c <___vfprintf_internal_r+0x1d7c>
   16c38:	200f883a 	mov	r7,r4
   16c3c:	24805716 	blt	r4,r18,16d9c <___vfprintf_internal_r+0x1dbc>
   16c40:	d9414c17 	ldw	r5,1328(sp)
   16c44:	2880004c 	andi	r2,r5,1
   16c48:	10000126 	beq	r2,zero,16c50 <___vfprintf_internal_r+0x1c70>
   16c4c:	21c00044 	addi	r7,r4,1
   16c50:	d9c14515 	stw	r7,1300(sp)
   16c54:	383fcc0e 	bge	r7,zero,16b88 <___vfprintf_internal_r+0x1ba8>
   16c58:	d8014515 	stw	zero,1300(sp)
   16c5c:	003fca06 	br	16b88 <___vfprintf_internal_r+0x1ba8>
   16c60:	d9000517 	ldw	r4,20(sp)
   16c64:	00bfff04 	movi	r2,-4
   16c68:	1100480e 	bge	r2,r4,16d8c <___vfprintf_internal_r+0x1dac>
   16c6c:	99004716 	blt	r19,r4,16d8c <___vfprintf_internal_r+0x1dac>
   16c70:	d8c14d15 	stw	r3,1332(sp)
   16c74:	003ff006 	br	16c38 <___vfprintf_internal_r+0x1c58>
   16c78:	d8800717 	ldw	r2,28(sp)
   16c7c:	14bf8b2e 	bgeu	r2,r18,16aac <___vfprintf_internal_r+0x1acc>
   16c80:	9007883a 	mov	r3,r18
   16c84:	01000c04 	movi	r4,48
   16c88:	11000005 	stb	r4,0(r2)
   16c8c:	10800044 	addi	r2,r2,1
   16c90:	d8800715 	stw	r2,28(sp)
   16c94:	18bffc1e 	bne	r3,r2,16c88 <___vfprintf_internal_r+0x1ca8>
   16c98:	003f8406 	br	16aac <___vfprintf_internal_r+0x1acc>
   16c9c:	d8814117 	ldw	r2,1284(sp)
   16ca0:	10c00007 	ldb	r3,0(r2)
   16ca4:	00800c04 	movi	r2,48
   16ca8:	18805b26 	beq	r3,r2,16e18 <___vfprintf_internal_r+0x1e38>
   16cac:	d9000517 	ldw	r4,20(sp)
   16cb0:	9125883a 	add	r18,r18,r4
   16cb4:	003f7506 	br	16a8c <___vfprintf_internal_r+0x1aac>
   16cb8:	d9014c17 	ldw	r4,1328(sp)
   16cbc:	2080004c 	andi	r2,r4,1
   16cc0:	1005003a 	cmpeq	r2,r2,zero
   16cc4:	103f6a26 	beq	r2,zero,16a70 <___vfprintf_internal_r+0x1a90>
   16cc8:	d8800717 	ldw	r2,28(sp)
   16ccc:	003f7706 	br	16aac <___vfprintf_internal_r+0x1acc>
   16cd0:	d9c14515 	stw	r7,1300(sp)
   16cd4:	38004d16 	blt	r7,zero,16e0c <___vfprintf_internal_r+0x1e2c>
   16cd8:	dc814715 	stw	r18,1308(sp)
   16cdc:	d8014615 	stw	zero,1304(sp)
   16ce0:	003b6106 	br	15a68 <___vfprintf_internal_r+0xa88>
   16ce4:	d9014f17 	ldw	r4,1340(sp)
   16ce8:	d8800504 	addi	r2,sp,20
   16cec:	d8800115 	stw	r2,4(sp)
   16cf0:	d8c00604 	addi	r3,sp,24
   16cf4:	d8800704 	addi	r2,sp,28
   16cf8:	800b883a 	mov	r5,r16
   16cfc:	880d883a 	mov	r6,r17
   16d00:	01c000c4 	movi	r7,3
   16d04:	d8c00215 	stw	r3,8(sp)
   16d08:	d8800315 	stw	r2,12(sp)
   16d0c:	dcc00015 	stw	r19,0(sp)
   16d10:	9829883a 	mov	r20,r19
   16d14:	00174380 	call	17438 <_dtoa_r>
   16d18:	d8814115 	stw	r2,1284(sp)
   16d1c:	003f5106 	br	16a64 <___vfprintf_internal_r+0x1a84>
   16d20:	d8c14217 	ldw	r3,1288(sp)
   16d24:	d9014317 	ldw	r4,1292(sp)
   16d28:	07000b44 	movi	fp,45
   16d2c:	1821883a 	mov	r16,r3
   16d30:	2460003c 	xorhi	r17,r4,32768
   16d34:	003f3106 	br	169fc <___vfprintf_internal_r+0x1a1c>
   16d38:	9d000044 	addi	r20,r19,1
   16d3c:	003f3906 	br	16a24 <___vfprintf_internal_r+0x1a44>
   16d40:	983f251e 	bne	r19,zero,169d8 <___vfprintf_internal_r+0x19f8>
   16d44:	04c00044 	movi	r19,1
   16d48:	003f2306 	br	169d8 <___vfprintf_internal_r+0x19f8>
   16d4c:	04c00184 	movi	r19,6
   16d50:	003f2106 	br	169d8 <___vfprintf_internal_r+0x19f8>
   16d54:	d8014515 	stw	zero,1300(sp)
   16d58:	003eee06 	br	16914 <___vfprintf_internal_r+0x1934>
   16d5c:	200f883a 	mov	r7,r4
   16d60:	0100370e 	bge	zero,r4,16e40 <___vfprintf_internal_r+0x1e60>
   16d64:	9800031e 	bne	r19,zero,16d74 <___vfprintf_internal_r+0x1d94>
   16d68:	d9814c17 	ldw	r6,1328(sp)
   16d6c:	3080004c 	andi	r2,r6,1
   16d70:	103fb726 	beq	r2,zero,16c50 <___vfprintf_internal_r+0x1c70>
   16d74:	20800044 	addi	r2,r4,1
   16d78:	98a7883a 	add	r19,r19,r2
   16d7c:	dcc14515 	stw	r19,1300(sp)
   16d80:	980f883a 	mov	r7,r19
   16d84:	983f800e 	bge	r19,zero,16b88 <___vfprintf_internal_r+0x1ba8>
   16d88:	003fb306 	br	16c58 <___vfprintf_internal_r+0x1c78>
   16d8c:	d9814d17 	ldw	r6,1332(sp)
   16d90:	31bfff84 	addi	r6,r6,-2
   16d94:	d9814d15 	stw	r6,1332(sp)
   16d98:	003f4c06 	br	16acc <___vfprintf_internal_r+0x1aec>
   16d9c:	0100180e 	bge	zero,r4,16e00 <___vfprintf_internal_r+0x1e20>
   16da0:	00800044 	movi	r2,1
   16da4:	1485883a 	add	r2,r2,r18
   16da8:	d8814515 	stw	r2,1300(sp)
   16dac:	100f883a 	mov	r7,r2
   16db0:	103f750e 	bge	r2,zero,16b88 <___vfprintf_internal_r+0x1ba8>
   16db4:	003fa806 	br	16c58 <___vfprintf_internal_r+0x1c78>
   16db8:	80c00c04 	addi	r3,r16,48
   16dbc:	00800c04 	movi	r2,48
   16dc0:	d8c008c5 	stb	r3,35(sp)
   16dc4:	d9800804 	addi	r6,sp,32
   16dc8:	d8c00904 	addi	r3,sp,36
   16dcc:	d8800885 	stb	r2,34(sp)
   16dd0:	003f6506 	br	16b68 <___vfprintf_internal_r+0x1b88>
   16dd4:	d9014c17 	ldw	r4,1328(sp)
   16dd8:	2084703a 	and	r2,r4,r2
   16ddc:	103f9c26 	beq	r2,zero,16c50 <___vfprintf_internal_r+0x1c70>
   16de0:	003f6606 	br	16b7c <___vfprintf_internal_r+0x1b9c>
   16de4:	d9800804 	addi	r6,sp,32
   16de8:	d8c00884 	addi	r3,sp,34
   16dec:	003f5e06 	br	16b68 <___vfprintf_internal_r+0x1b88>
   16df0:	00800b44 	movi	r2,45
   16df4:	0121c83a 	sub	r16,zero,r4
   16df8:	d8800845 	stb	r2,33(sp)
   16dfc:	003f3d06 	br	16af4 <___vfprintf_internal_r+0x1b14>
   16e00:	00800084 	movi	r2,2
   16e04:	1105c83a 	sub	r2,r2,r4
   16e08:	003fe606 	br	16da4 <___vfprintf_internal_r+0x1dc4>
   16e0c:	d8014515 	stw	zero,1300(sp)
   16e10:	dc814715 	stw	r18,1308(sp)
   16e14:	003fb106 	br	16cdc <___vfprintf_internal_r+0x1cfc>
   16e18:	000d883a 	mov	r6,zero
   16e1c:	000f883a 	mov	r7,zero
   16e20:	8009883a 	mov	r4,r16
   16e24:	880b883a 	mov	r5,r17
   16e28:	001acf00 	call	1acf0 <__nedf2>
   16e2c:	103f9f26 	beq	r2,zero,16cac <___vfprintf_internal_r+0x1ccc>
   16e30:	00800044 	movi	r2,1
   16e34:	1509c83a 	sub	r4,r2,r20
   16e38:	d9000515 	stw	r4,20(sp)
   16e3c:	003f9b06 	br	16cac <___vfprintf_internal_r+0x1ccc>
   16e40:	98000d1e 	bne	r19,zero,16e78 <___vfprintf_internal_r+0x1e98>
   16e44:	d8c14c17 	ldw	r3,1328(sp)
   16e48:	1880004c 	andi	r2,r3,1
   16e4c:	10000a1e 	bne	r2,zero,16e78 <___vfprintf_internal_r+0x1e98>
   16e50:	01000044 	movi	r4,1
   16e54:	200f883a 	mov	r7,r4
   16e58:	d9014515 	stw	r4,1300(sp)
   16e5c:	003f4a06 	br	16b88 <___vfprintf_internal_r+0x1ba8>
   16e60:	3cc00017 	ldw	r19,0(r7)
   16e64:	39c00104 	addi	r7,r7,4
   16e68:	983d0e0e 	bge	r19,zero,162a4 <___vfprintf_internal_r+0x12c4>
   16e6c:	b8c00007 	ldb	r3,0(r23)
   16e70:	04ffffc4 	movi	r19,-1
   16e74:	0038d906 	br	151dc <___vfprintf_internal_r+0x1fc>
   16e78:	9cc00084 	addi	r19,r19,2
   16e7c:	dcc14515 	stw	r19,1300(sp)
   16e80:	980f883a 	mov	r7,r19
   16e84:	983f400e 	bge	r19,zero,16b88 <___vfprintf_internal_r+0x1ba8>
   16e88:	003f7306 	br	16c58 <___vfprintf_internal_r+0x1c78>

00016e8c <__vfprintf_internal>:
   16e8c:	008000b4 	movhi	r2,2
   16e90:	1083ac04 	addi	r2,r2,3760
   16e94:	2013883a 	mov	r9,r4
   16e98:	11000017 	ldw	r4,0(r2)
   16e9c:	2805883a 	mov	r2,r5
   16ea0:	300f883a 	mov	r7,r6
   16ea4:	480b883a 	mov	r5,r9
   16ea8:	100d883a 	mov	r6,r2
   16eac:	0014fe01 	jmpi	14fe0 <___vfprintf_internal_r>

00016eb0 <__swbuf_r>:
   16eb0:	defffc04 	addi	sp,sp,-16
   16eb4:	dc400215 	stw	r17,8(sp)
   16eb8:	dc000115 	stw	r16,4(sp)
   16ebc:	dfc00315 	stw	ra,12(sp)
   16ec0:	2023883a 	mov	r17,r4
   16ec4:	2821883a 	mov	r16,r5
   16ec8:	20000226 	beq	r4,zero,16ed4 <__swbuf_r+0x24>
   16ecc:	20800e17 	ldw	r2,56(r4)
   16ed0:	10002f26 	beq	r2,zero,16f90 <__swbuf_r+0xe0>
   16ed4:	3080030b 	ldhu	r2,12(r6)
   16ed8:	30c00617 	ldw	r3,24(r6)
   16edc:	1080020c 	andi	r2,r2,8
   16ee0:	30c00215 	stw	r3,8(r6)
   16ee4:	10002226 	beq	r2,zero,16f70 <__swbuf_r+0xc0>
   16ee8:	30c00417 	ldw	r3,16(r6)
   16eec:	18002026 	beq	r3,zero,16f70 <__swbuf_r+0xc0>
   16ef0:	31000017 	ldw	r4,0(r6)
   16ef4:	30800517 	ldw	r2,20(r6)
   16ef8:	20c7c83a 	sub	r3,r4,r3
   16efc:	18802f0e 	bge	r3,r2,16fbc <__swbuf_r+0x10c>
   16f00:	19400044 	addi	r5,r3,1
   16f04:	30800217 	ldw	r2,8(r6)
   16f08:	84003fcc 	andi	r16,r16,255
   16f0c:	20c00044 	addi	r3,r4,1
   16f10:	10bfffc4 	addi	r2,r2,-1
   16f14:	30800215 	stw	r2,8(r6)
   16f18:	24000005 	stb	r16,0(r4)
   16f1c:	30800517 	ldw	r2,20(r6)
   16f20:	30c00015 	stw	r3,0(r6)
   16f24:	11400c26 	beq	r2,r5,16f58 <__swbuf_r+0xa8>
   16f28:	3080030b 	ldhu	r2,12(r6)
   16f2c:	1080004c 	andi	r2,r2,1
   16f30:	1005003a 	cmpeq	r2,r2,zero
   16f34:	10000626 	beq	r2,zero,16f50 <__swbuf_r+0xa0>
   16f38:	8005883a 	mov	r2,r16
   16f3c:	dfc00317 	ldw	ra,12(sp)
   16f40:	dc400217 	ldw	r17,8(sp)
   16f44:	dc000117 	ldw	r16,4(sp)
   16f48:	dec00404 	addi	sp,sp,16
   16f4c:	f800283a 	ret
   16f50:	00800284 	movi	r2,10
   16f54:	80bff81e 	bne	r16,r2,16f38 <__swbuf_r+0x88>
   16f58:	8809883a 	mov	r4,r17
   16f5c:	300b883a 	mov	r5,r6
   16f60:	00117e80 	call	117e8 <_fflush_r>
   16f64:	103ff426 	beq	r2,zero,16f38 <__swbuf_r+0x88>
   16f68:	043fffc4 	movi	r16,-1
   16f6c:	003ff206 	br	16f38 <__swbuf_r+0x88>
   16f70:	300b883a 	mov	r5,r6
   16f74:	8809883a 	mov	r4,r17
   16f78:	d9800015 	stw	r6,0(sp)
   16f7c:	00170740 	call	17074 <__swsetup_r>
   16f80:	d9800017 	ldw	r6,0(sp)
   16f84:	1000061e 	bne	r2,zero,16fa0 <__swbuf_r+0xf0>
   16f88:	30c00417 	ldw	r3,16(r6)
   16f8c:	003fd806 	br	16ef0 <__swbuf_r+0x40>
   16f90:	d9800015 	stw	r6,0(sp)
   16f94:	0011bec0 	call	11bec <__sinit>
   16f98:	d9800017 	ldw	r6,0(sp)
   16f9c:	003fcd06 	br	16ed4 <__swbuf_r+0x24>
   16fa0:	3080030b 	ldhu	r2,12(r6)
   16fa4:	00c00244 	movi	r3,9
   16fa8:	043fffc4 	movi	r16,-1
   16fac:	10801014 	ori	r2,r2,64
   16fb0:	3080030d 	sth	r2,12(r6)
   16fb4:	88c00015 	stw	r3,0(r17)
   16fb8:	003fdf06 	br	16f38 <__swbuf_r+0x88>
   16fbc:	300b883a 	mov	r5,r6
   16fc0:	8809883a 	mov	r4,r17
   16fc4:	d9800015 	stw	r6,0(sp)
   16fc8:	00117e80 	call	117e8 <_fflush_r>
   16fcc:	d9800017 	ldw	r6,0(sp)
   16fd0:	103fe51e 	bne	r2,zero,16f68 <__swbuf_r+0xb8>
   16fd4:	31000017 	ldw	r4,0(r6)
   16fd8:	01400044 	movi	r5,1
   16fdc:	003fc906 	br	16f04 <__swbuf_r+0x54>

00016fe0 <__swbuf>:
   16fe0:	018000b4 	movhi	r6,2
   16fe4:	3183ac04 	addi	r6,r6,3760
   16fe8:	2007883a 	mov	r3,r4
   16fec:	31000017 	ldw	r4,0(r6)
   16ff0:	280d883a 	mov	r6,r5
   16ff4:	180b883a 	mov	r5,r3
   16ff8:	0016eb01 	jmpi	16eb0 <__swbuf_r>

00016ffc <_write_r>:
   16ffc:	defffd04 	addi	sp,sp,-12
   17000:	dc000015 	stw	r16,0(sp)
   17004:	040000b4 	movhi	r16,2
   17008:	840ab304 	addi	r16,r16,10956
   1700c:	dc400115 	stw	r17,4(sp)
   17010:	80000015 	stw	zero,0(r16)
   17014:	2023883a 	mov	r17,r4
   17018:	2809883a 	mov	r4,r5
   1701c:	300b883a 	mov	r5,r6
   17020:	380d883a 	mov	r6,r7
   17024:	dfc00215 	stw	ra,8(sp)
   17028:	001be600 	call	1be60 <write>
   1702c:	1007883a 	mov	r3,r2
   17030:	00bfffc4 	movi	r2,-1
   17034:	18800626 	beq	r3,r2,17050 <_write_r+0x54>
   17038:	1805883a 	mov	r2,r3
   1703c:	dfc00217 	ldw	ra,8(sp)
   17040:	dc400117 	ldw	r17,4(sp)
   17044:	dc000017 	ldw	r16,0(sp)
   17048:	dec00304 	addi	sp,sp,12
   1704c:	f800283a 	ret
   17050:	80800017 	ldw	r2,0(r16)
   17054:	103ff826 	beq	r2,zero,17038 <_write_r+0x3c>
   17058:	88800015 	stw	r2,0(r17)
   1705c:	1805883a 	mov	r2,r3
   17060:	dfc00217 	ldw	ra,8(sp)
   17064:	dc400117 	ldw	r17,4(sp)
   17068:	dc000017 	ldw	r16,0(sp)
   1706c:	dec00304 	addi	sp,sp,12
   17070:	f800283a 	ret

00017074 <__swsetup_r>:
   17074:	008000b4 	movhi	r2,2
   17078:	1083ac04 	addi	r2,r2,3760
   1707c:	10c00017 	ldw	r3,0(r2)
   17080:	defffd04 	addi	sp,sp,-12
   17084:	dc400115 	stw	r17,4(sp)
   17088:	dc000015 	stw	r16,0(sp)
   1708c:	dfc00215 	stw	ra,8(sp)
   17090:	2023883a 	mov	r17,r4
   17094:	2821883a 	mov	r16,r5
   17098:	18000226 	beq	r3,zero,170a4 <__swsetup_r+0x30>
   1709c:	18800e17 	ldw	r2,56(r3)
   170a0:	10001f26 	beq	r2,zero,17120 <__swsetup_r+0xac>
   170a4:	8100030b 	ldhu	r4,12(r16)
   170a8:	2080020c 	andi	r2,r4,8
   170ac:	10002826 	beq	r2,zero,17150 <__swsetup_r+0xdc>
   170b0:	81400417 	ldw	r5,16(r16)
   170b4:	28001d26 	beq	r5,zero,1712c <__swsetup_r+0xb8>
   170b8:	2080004c 	andi	r2,r4,1
   170bc:	1005003a 	cmpeq	r2,r2,zero
   170c0:	10000b26 	beq	r2,zero,170f0 <__swsetup_r+0x7c>
   170c4:	2080008c 	andi	r2,r4,2
   170c8:	10001226 	beq	r2,zero,17114 <__swsetup_r+0xa0>
   170cc:	0005883a 	mov	r2,zero
   170d0:	80800215 	stw	r2,8(r16)
   170d4:	28000b26 	beq	r5,zero,17104 <__swsetup_r+0x90>
   170d8:	0005883a 	mov	r2,zero
   170dc:	dfc00217 	ldw	ra,8(sp)
   170e0:	dc400117 	ldw	r17,4(sp)
   170e4:	dc000017 	ldw	r16,0(sp)
   170e8:	dec00304 	addi	sp,sp,12
   170ec:	f800283a 	ret
   170f0:	80800517 	ldw	r2,20(r16)
   170f4:	80000215 	stw	zero,8(r16)
   170f8:	0085c83a 	sub	r2,zero,r2
   170fc:	80800615 	stw	r2,24(r16)
   17100:	283ff51e 	bne	r5,zero,170d8 <__swsetup_r+0x64>
   17104:	2080200c 	andi	r2,r4,128
   17108:	103ff326 	beq	r2,zero,170d8 <__swsetup_r+0x64>
   1710c:	00bfffc4 	movi	r2,-1
   17110:	003ff206 	br	170dc <__swsetup_r+0x68>
   17114:	80800517 	ldw	r2,20(r16)
   17118:	80800215 	stw	r2,8(r16)
   1711c:	003fed06 	br	170d4 <__swsetup_r+0x60>
   17120:	1809883a 	mov	r4,r3
   17124:	0011bec0 	call	11bec <__sinit>
   17128:	003fde06 	br	170a4 <__swsetup_r+0x30>
   1712c:	20c0a00c 	andi	r3,r4,640
   17130:	00808004 	movi	r2,512
   17134:	18bfe026 	beq	r3,r2,170b8 <__swsetup_r+0x44>
   17138:	8809883a 	mov	r4,r17
   1713c:	800b883a 	mov	r5,r16
   17140:	0012fd00 	call	12fd0 <__smakebuf_r>
   17144:	8100030b 	ldhu	r4,12(r16)
   17148:	81400417 	ldw	r5,16(r16)
   1714c:	003fda06 	br	170b8 <__swsetup_r+0x44>
   17150:	2080040c 	andi	r2,r4,16
   17154:	103fed26 	beq	r2,zero,1710c <__swsetup_r+0x98>
   17158:	2080010c 	andi	r2,r4,4
   1715c:	10001226 	beq	r2,zero,171a8 <__swsetup_r+0x134>
   17160:	81400c17 	ldw	r5,48(r16)
   17164:	28000526 	beq	r5,zero,1717c <__swsetup_r+0x108>
   17168:	80801004 	addi	r2,r16,64
   1716c:	28800226 	beq	r5,r2,17178 <__swsetup_r+0x104>
   17170:	8809883a 	mov	r4,r17
   17174:	00121cc0 	call	121cc <_free_r>
   17178:	80000c15 	stw	zero,48(r16)
   1717c:	8080030b 	ldhu	r2,12(r16)
   17180:	81400417 	ldw	r5,16(r16)
   17184:	80000115 	stw	zero,4(r16)
   17188:	10bff6cc 	andi	r2,r2,65499
   1718c:	8080030d 	sth	r2,12(r16)
   17190:	81400015 	stw	r5,0(r16)
   17194:	8080030b 	ldhu	r2,12(r16)
   17198:	10800214 	ori	r2,r2,8
   1719c:	113fffcc 	andi	r4,r2,65535
   171a0:	8080030d 	sth	r2,12(r16)
   171a4:	003fc306 	br	170b4 <__swsetup_r+0x40>
   171a8:	81400417 	ldw	r5,16(r16)
   171ac:	003ff906 	br	17194 <__swsetup_r+0x120>

000171b0 <_close_r>:
   171b0:	defffd04 	addi	sp,sp,-12
   171b4:	dc000015 	stw	r16,0(sp)
   171b8:	040000b4 	movhi	r16,2
   171bc:	840ab304 	addi	r16,r16,10956
   171c0:	dc400115 	stw	r17,4(sp)
   171c4:	80000015 	stw	zero,0(r16)
   171c8:	2023883a 	mov	r17,r4
   171cc:	2809883a 	mov	r4,r5
   171d0:	dfc00215 	stw	ra,8(sp)
   171d4:	001b01c0 	call	1b01c <close>
   171d8:	1007883a 	mov	r3,r2
   171dc:	00bfffc4 	movi	r2,-1
   171e0:	18800626 	beq	r3,r2,171fc <_close_r+0x4c>
   171e4:	1805883a 	mov	r2,r3
   171e8:	dfc00217 	ldw	ra,8(sp)
   171ec:	dc400117 	ldw	r17,4(sp)
   171f0:	dc000017 	ldw	r16,0(sp)
   171f4:	dec00304 	addi	sp,sp,12
   171f8:	f800283a 	ret
   171fc:	80800017 	ldw	r2,0(r16)
   17200:	103ff826 	beq	r2,zero,171e4 <_close_r+0x34>
   17204:	88800015 	stw	r2,0(r17)
   17208:	1805883a 	mov	r2,r3
   1720c:	dfc00217 	ldw	ra,8(sp)
   17210:	dc400117 	ldw	r17,4(sp)
   17214:	dc000017 	ldw	r16,0(sp)
   17218:	dec00304 	addi	sp,sp,12
   1721c:	f800283a 	ret

00017220 <quorem>:
   17220:	28c00417 	ldw	r3,16(r5)
   17224:	20800417 	ldw	r2,16(r4)
   17228:	defff604 	addi	sp,sp,-40
   1722c:	ddc00715 	stw	r23,28(sp)
   17230:	dd400515 	stw	r21,20(sp)
   17234:	dfc00915 	stw	ra,36(sp)
   17238:	df000815 	stw	fp,32(sp)
   1723c:	dd800615 	stw	r22,24(sp)
   17240:	dd000415 	stw	r20,16(sp)
   17244:	dcc00315 	stw	r19,12(sp)
   17248:	dc800215 	stw	r18,8(sp)
   1724c:	dc400115 	stw	r17,4(sp)
   17250:	dc000015 	stw	r16,0(sp)
   17254:	202f883a 	mov	r23,r4
   17258:	282b883a 	mov	r21,r5
   1725c:	10c07416 	blt	r2,r3,17430 <quorem+0x210>
   17260:	1c7fffc4 	addi	r17,r3,-1
   17264:	8c45883a 	add	r2,r17,r17
   17268:	1085883a 	add	r2,r2,r2
   1726c:	2c000504 	addi	r16,r5,20
   17270:	24c00504 	addi	r19,r4,20
   17274:	14ed883a 	add	r22,r2,r19
   17278:	80a5883a 	add	r18,r16,r2
   1727c:	b7000017 	ldw	fp,0(r22)
   17280:	91400017 	ldw	r5,0(r18)
   17284:	e009883a 	mov	r4,fp
   17288:	29400044 	addi	r5,r5,1
   1728c:	00108400 	call	10840 <__udivsi3>
   17290:	1029883a 	mov	r20,r2
   17294:	10003c1e 	bne	r2,zero,17388 <quorem+0x168>
   17298:	a80b883a 	mov	r5,r21
   1729c:	b809883a 	mov	r4,r23
   172a0:	0018d940 	call	18d94 <__mcmp>
   172a4:	10002b16 	blt	r2,zero,17354 <quorem+0x134>
   172a8:	a5000044 	addi	r20,r20,1
   172ac:	980f883a 	mov	r7,r19
   172b0:	0011883a 	mov	r8,zero
   172b4:	0009883a 	mov	r4,zero
   172b8:	81400017 	ldw	r5,0(r16)
   172bc:	38c00017 	ldw	r3,0(r7)
   172c0:	84000104 	addi	r16,r16,4
   172c4:	28bfffcc 	andi	r2,r5,65535
   172c8:	2085883a 	add	r2,r4,r2
   172cc:	11bfffcc 	andi	r6,r2,65535
   172d0:	193fffcc 	andi	r4,r3,65535
   172d4:	1004d43a 	srli	r2,r2,16
   172d8:	280ad43a 	srli	r5,r5,16
   172dc:	2189c83a 	sub	r4,r4,r6
   172e0:	2209883a 	add	r4,r4,r8
   172e4:	1806d43a 	srli	r3,r3,16
   172e8:	288b883a 	add	r5,r5,r2
   172ec:	200dd43a 	srai	r6,r4,16
   172f0:	28bfffcc 	andi	r2,r5,65535
   172f4:	1887c83a 	sub	r3,r3,r2
   172f8:	1987883a 	add	r3,r3,r6
   172fc:	3900000d 	sth	r4,0(r7)
   17300:	38c0008d 	sth	r3,2(r7)
   17304:	2808d43a 	srli	r4,r5,16
   17308:	39c00104 	addi	r7,r7,4
   1730c:	1811d43a 	srai	r8,r3,16
   17310:	943fe92e 	bgeu	r18,r16,172b8 <quorem+0x98>
   17314:	8c45883a 	add	r2,r17,r17
   17318:	1085883a 	add	r2,r2,r2
   1731c:	9885883a 	add	r2,r19,r2
   17320:	10c00017 	ldw	r3,0(r2)
   17324:	18000b1e 	bne	r3,zero,17354 <quorem+0x134>
   17328:	113fff04 	addi	r4,r2,-4
   1732c:	9900082e 	bgeu	r19,r4,17350 <quorem+0x130>
   17330:	10bfff17 	ldw	r2,-4(r2)
   17334:	10000326 	beq	r2,zero,17344 <quorem+0x124>
   17338:	00000506 	br	17350 <quorem+0x130>
   1733c:	20800017 	ldw	r2,0(r4)
   17340:	1000031e 	bne	r2,zero,17350 <quorem+0x130>
   17344:	213fff04 	addi	r4,r4,-4
   17348:	8c7fffc4 	addi	r17,r17,-1
   1734c:	993ffb36 	bltu	r19,r4,1733c <quorem+0x11c>
   17350:	bc400415 	stw	r17,16(r23)
   17354:	a005883a 	mov	r2,r20
   17358:	dfc00917 	ldw	ra,36(sp)
   1735c:	df000817 	ldw	fp,32(sp)
   17360:	ddc00717 	ldw	r23,28(sp)
   17364:	dd800617 	ldw	r22,24(sp)
   17368:	dd400517 	ldw	r21,20(sp)
   1736c:	dd000417 	ldw	r20,16(sp)
   17370:	dcc00317 	ldw	r19,12(sp)
   17374:	dc800217 	ldw	r18,8(sp)
   17378:	dc400117 	ldw	r17,4(sp)
   1737c:	dc000017 	ldw	r16,0(sp)
   17380:	dec00a04 	addi	sp,sp,40
   17384:	f800283a 	ret
   17388:	980f883a 	mov	r7,r19
   1738c:	8011883a 	mov	r8,r16
   17390:	0013883a 	mov	r9,zero
   17394:	000d883a 	mov	r6,zero
   17398:	40c00017 	ldw	r3,0(r8)
   1739c:	39000017 	ldw	r4,0(r7)
   173a0:	42000104 	addi	r8,r8,4
   173a4:	18bfffcc 	andi	r2,r3,65535
   173a8:	a085383a 	mul	r2,r20,r2
   173ac:	1806d43a 	srli	r3,r3,16
   173b0:	217fffcc 	andi	r5,r4,65535
   173b4:	3085883a 	add	r2,r6,r2
   173b8:	11bfffcc 	andi	r6,r2,65535
   173bc:	a0c7383a 	mul	r3,r20,r3
   173c0:	1004d43a 	srli	r2,r2,16
   173c4:	298bc83a 	sub	r5,r5,r6
   173c8:	2a4b883a 	add	r5,r5,r9
   173cc:	2008d43a 	srli	r4,r4,16
   173d0:	1887883a 	add	r3,r3,r2
   173d4:	280dd43a 	srai	r6,r5,16
   173d8:	18bfffcc 	andi	r2,r3,65535
   173dc:	2089c83a 	sub	r4,r4,r2
   173e0:	2189883a 	add	r4,r4,r6
   173e4:	3900008d 	sth	r4,2(r7)
   173e8:	3940000d 	sth	r5,0(r7)
   173ec:	180cd43a 	srli	r6,r3,16
   173f0:	39c00104 	addi	r7,r7,4
   173f4:	2013d43a 	srai	r9,r4,16
   173f8:	923fe72e 	bgeu	r18,r8,17398 <quorem+0x178>
   173fc:	e03fa61e 	bne	fp,zero,17298 <quorem+0x78>
   17400:	b0ffff04 	addi	r3,r22,-4
   17404:	98c0082e 	bgeu	r19,r3,17428 <quorem+0x208>
   17408:	b0bfff17 	ldw	r2,-4(r22)
   1740c:	10000326 	beq	r2,zero,1741c <quorem+0x1fc>
   17410:	00000506 	br	17428 <quorem+0x208>
   17414:	18800017 	ldw	r2,0(r3)
   17418:	1000031e 	bne	r2,zero,17428 <quorem+0x208>
   1741c:	18ffff04 	addi	r3,r3,-4
   17420:	8c7fffc4 	addi	r17,r17,-1
   17424:	98fffb36 	bltu	r19,r3,17414 <quorem+0x1f4>
   17428:	bc400415 	stw	r17,16(r23)
   1742c:	003f9a06 	br	17298 <quorem+0x78>
   17430:	0005883a 	mov	r2,zero
   17434:	003fc806 	br	17358 <quorem+0x138>

00017438 <_dtoa_r>:
   17438:	22001017 	ldw	r8,64(r4)
   1743c:	deffda04 	addi	sp,sp,-152
   17440:	dd402115 	stw	r21,132(sp)
   17444:	dd002015 	stw	r20,128(sp)
   17448:	dc801e15 	stw	r18,120(sp)
   1744c:	dc401d15 	stw	r17,116(sp)
   17450:	dfc02515 	stw	ra,148(sp)
   17454:	df002415 	stw	fp,144(sp)
   17458:	ddc02315 	stw	r23,140(sp)
   1745c:	dd802215 	stw	r22,136(sp)
   17460:	dcc01f15 	stw	r19,124(sp)
   17464:	dc001c15 	stw	r16,112(sp)
   17468:	d9001615 	stw	r4,88(sp)
   1746c:	3023883a 	mov	r17,r6
   17470:	2829883a 	mov	r20,r5
   17474:	d9c01715 	stw	r7,92(sp)
   17478:	dc802817 	ldw	r18,160(sp)
   1747c:	302b883a 	mov	r21,r6
   17480:	40000a26 	beq	r8,zero,174ac <_dtoa_r+0x74>
   17484:	20801117 	ldw	r2,68(r4)
   17488:	400b883a 	mov	r5,r8
   1748c:	40800115 	stw	r2,4(r8)
   17490:	20c01117 	ldw	r3,68(r4)
   17494:	00800044 	movi	r2,1
   17498:	10c4983a 	sll	r2,r2,r3
   1749c:	40800215 	stw	r2,8(r8)
   174a0:	0018c380 	call	18c38 <_Bfree>
   174a4:	d8c01617 	ldw	r3,88(sp)
   174a8:	18001015 	stw	zero,64(r3)
   174ac:	8800a316 	blt	r17,zero,1773c <_dtoa_r+0x304>
   174b0:	90000015 	stw	zero,0(r18)
   174b4:	a8dffc2c 	andhi	r3,r21,32752
   174b8:	009ffc34 	movhi	r2,32752
   174bc:	18809126 	beq	r3,r2,17704 <_dtoa_r+0x2cc>
   174c0:	000d883a 	mov	r6,zero
   174c4:	000f883a 	mov	r7,zero
   174c8:	a009883a 	mov	r4,r20
   174cc:	a80b883a 	mov	r5,r21
   174d0:	dd001215 	stw	r20,72(sp)
   174d4:	dd401315 	stw	r21,76(sp)
   174d8:	001acf00 	call	1acf0 <__nedf2>
   174dc:	1000171e 	bne	r2,zero,1753c <_dtoa_r+0x104>
   174e0:	d9802717 	ldw	r6,156(sp)
   174e4:	00800044 	movi	r2,1
   174e8:	30800015 	stw	r2,0(r6)
   174ec:	d8802917 	ldw	r2,164(sp)
   174f0:	10029b26 	beq	r2,zero,17f60 <_dtoa_r+0xb28>
   174f4:	d9002917 	ldw	r4,164(sp)
   174f8:	008000b4 	movhi	r2,2
   174fc:	10bbe244 	addi	r2,r2,-4215
   17500:	10ffffc4 	addi	r3,r2,-1
   17504:	20800015 	stw	r2,0(r4)
   17508:	1805883a 	mov	r2,r3
   1750c:	dfc02517 	ldw	ra,148(sp)
   17510:	df002417 	ldw	fp,144(sp)
   17514:	ddc02317 	ldw	r23,140(sp)
   17518:	dd802217 	ldw	r22,136(sp)
   1751c:	dd402117 	ldw	r21,132(sp)
   17520:	dd002017 	ldw	r20,128(sp)
   17524:	dcc01f17 	ldw	r19,124(sp)
   17528:	dc801e17 	ldw	r18,120(sp)
   1752c:	dc401d17 	ldw	r17,116(sp)
   17530:	dc001c17 	ldw	r16,112(sp)
   17534:	dec02604 	addi	sp,sp,152
   17538:	f800283a 	ret
   1753c:	d9001617 	ldw	r4,88(sp)
   17540:	d9401217 	ldw	r5,72(sp)
   17544:	d8800104 	addi	r2,sp,4
   17548:	a80d883a 	mov	r6,r21
   1754c:	d9c00204 	addi	r7,sp,8
   17550:	d8800015 	stw	r2,0(sp)
   17554:	00192740 	call	19274 <__d2b>
   17558:	d8800715 	stw	r2,28(sp)
   1755c:	a804d53a 	srli	r2,r21,20
   17560:	1101ffcc 	andi	r4,r2,2047
   17564:	20008626 	beq	r4,zero,17780 <_dtoa_r+0x348>
   17568:	d8c01217 	ldw	r3,72(sp)
   1756c:	00800434 	movhi	r2,16
   17570:	10bfffc4 	addi	r2,r2,-1
   17574:	ddc00117 	ldw	r23,4(sp)
   17578:	a884703a 	and	r2,r21,r2
   1757c:	1811883a 	mov	r8,r3
   17580:	124ffc34 	orhi	r9,r2,16368
   17584:	25bf0044 	addi	r22,r4,-1023
   17588:	d8000815 	stw	zero,32(sp)
   1758c:	0005883a 	mov	r2,zero
   17590:	00cffe34 	movhi	r3,16376
   17594:	480b883a 	mov	r5,r9
   17598:	4009883a 	mov	r4,r8
   1759c:	180f883a 	mov	r7,r3
   175a0:	100d883a 	mov	r6,r2
   175a4:	000ffbc0 	call	ffbc <__subdf3>
   175a8:	0218dbf4 	movhi	r8,25455
   175ac:	4210d844 	addi	r8,r8,17249
   175b0:	024ff4f4 	movhi	r9,16339
   175b4:	4a61e9c4 	addi	r9,r9,-30809
   175b8:	480f883a 	mov	r7,r9
   175bc:	400d883a 	mov	r6,r8
   175c0:	180b883a 	mov	r5,r3
   175c4:	1009883a 	mov	r4,r2
   175c8:	00100b00 	call	100b0 <__muldf3>
   175cc:	0222d874 	movhi	r8,35681
   175d0:	42322cc4 	addi	r8,r8,-14157
   175d4:	024ff1f4 	movhi	r9,16327
   175d8:	4a628a04 	addi	r9,r9,-30168
   175dc:	480f883a 	mov	r7,r9
   175e0:	400d883a 	mov	r6,r8
   175e4:	180b883a 	mov	r5,r3
   175e8:	1009883a 	mov	r4,r2
   175ec:	001003c0 	call	1003c <__adddf3>
   175f0:	b009883a 	mov	r4,r22
   175f4:	1021883a 	mov	r16,r2
   175f8:	1823883a 	mov	r17,r3
   175fc:	00104fc0 	call	104fc <__floatsidf>
   17600:	021427f4 	movhi	r8,20639
   17604:	421e7ec4 	addi	r8,r8,31227
   17608:	024ff4f4 	movhi	r9,16339
   1760c:	4a5104c4 	addi	r9,r9,17427
   17610:	480f883a 	mov	r7,r9
   17614:	400d883a 	mov	r6,r8
   17618:	180b883a 	mov	r5,r3
   1761c:	1009883a 	mov	r4,r2
   17620:	00100b00 	call	100b0 <__muldf3>
   17624:	180f883a 	mov	r7,r3
   17628:	880b883a 	mov	r5,r17
   1762c:	100d883a 	mov	r6,r2
   17630:	8009883a 	mov	r4,r16
   17634:	001003c0 	call	1003c <__adddf3>
   17638:	1009883a 	mov	r4,r2
   1763c:	180b883a 	mov	r5,r3
   17640:	1021883a 	mov	r16,r2
   17644:	1823883a 	mov	r17,r3
   17648:	00105f40 	call	105f4 <__fixdfsi>
   1764c:	000d883a 	mov	r6,zero
   17650:	000f883a 	mov	r7,zero
   17654:	8009883a 	mov	r4,r16
   17658:	880b883a 	mov	r5,r17
   1765c:	d8800d15 	stw	r2,52(sp)
   17660:	00104740 	call	10474 <__ltdf2>
   17664:	10031716 	blt	r2,zero,182c4 <_dtoa_r+0xe8c>
   17668:	d8c00d17 	ldw	r3,52(sp)
   1766c:	00800584 	movi	r2,22
   17670:	10c1482e 	bgeu	r2,r3,17b94 <_dtoa_r+0x75c>
   17674:	01000044 	movi	r4,1
   17678:	d9000c15 	stw	r4,48(sp)
   1767c:	bd85c83a 	sub	r2,r23,r22
   17680:	11bfffc4 	addi	r6,r2,-1
   17684:	30030b16 	blt	r6,zero,182b4 <_dtoa_r+0xe7c>
   17688:	d9800a15 	stw	r6,40(sp)
   1768c:	d8001115 	stw	zero,68(sp)
   17690:	d8c00d17 	ldw	r3,52(sp)
   17694:	1802ff16 	blt	r3,zero,18294 <_dtoa_r+0xe5c>
   17698:	d9000a17 	ldw	r4,40(sp)
   1769c:	d8c00915 	stw	r3,36(sp)
   176a0:	d8001015 	stw	zero,64(sp)
   176a4:	20c9883a 	add	r4,r4,r3
   176a8:	d9000a15 	stw	r4,40(sp)
   176ac:	d9001717 	ldw	r4,92(sp)
   176b0:	00800244 	movi	r2,9
   176b4:	11004636 	bltu	r2,r4,177d0 <_dtoa_r+0x398>
   176b8:	00800144 	movi	r2,5
   176bc:	11020416 	blt	r2,r4,17ed0 <_dtoa_r+0xa98>
   176c0:	04400044 	movi	r17,1
   176c4:	d8c01717 	ldw	r3,92(sp)
   176c8:	00800144 	movi	r2,5
   176cc:	10c1ed36 	bltu	r2,r3,17e84 <_dtoa_r+0xa4c>
   176d0:	18c5883a 	add	r2,r3,r3
   176d4:	1085883a 	add	r2,r2,r2
   176d8:	00c00074 	movhi	r3,1
   176dc:	18ddbb04 	addi	r3,r3,30444
   176e0:	10c5883a 	add	r2,r2,r3
   176e4:	11000017 	ldw	r4,0(r2)
   176e8:	2000683a 	jmp	r4
   176ec:	000177d8 	cmpnei	zero,zero,1503
   176f0:	000177d8 	cmpnei	zero,zero,1503
   176f4:	000181d8 	cmpnei	zero,zero,1543
   176f8:	000181b0 	cmpltui	zero,zero,1542
   176fc:	000181f4 	movhi	zero,1543
   17700:	00018200 	call	1820 <_Z14integralImagesP7MyImageP10MyIntImageS2_+0x144>
   17704:	d9002717 	ldw	r4,156(sp)
   17708:	0089c3c4 	movi	r2,9999
   1770c:	20800015 	stw	r2,0(r4)
   17710:	a0001026 	beq	r20,zero,17754 <_dtoa_r+0x31c>
   17714:	00c000b4 	movhi	r3,2
   17718:	18fc8e04 	addi	r3,r3,-3528
   1771c:	d9802917 	ldw	r6,164(sp)
   17720:	303f7926 	beq	r6,zero,17508 <_dtoa_r+0xd0>
   17724:	188000c7 	ldb	r2,3(r3)
   17728:	190000c4 	addi	r4,r3,3
   1772c:	1000101e 	bne	r2,zero,17770 <_dtoa_r+0x338>
   17730:	d8802917 	ldw	r2,164(sp)
   17734:	11000015 	stw	r4,0(r2)
   17738:	003f7306 	br	17508 <_dtoa_r+0xd0>
   1773c:	00a00034 	movhi	r2,32768
   17740:	10bfffc4 	addi	r2,r2,-1
   17744:	00c00044 	movi	r3,1
   17748:	88aa703a 	and	r21,r17,r2
   1774c:	90c00015 	stw	r3,0(r18)
   17750:	003f5806 	br	174b4 <_dtoa_r+0x7c>
   17754:	00800434 	movhi	r2,16
   17758:	10bfffc4 	addi	r2,r2,-1
   1775c:	a884703a 	and	r2,r21,r2
   17760:	103fec1e 	bne	r2,zero,17714 <_dtoa_r+0x2dc>
   17764:	00c000b4 	movhi	r3,2
   17768:	18fc8b04 	addi	r3,r3,-3540
   1776c:	003feb06 	br	1771c <_dtoa_r+0x2e4>
   17770:	d8802917 	ldw	r2,164(sp)
   17774:	19000204 	addi	r4,r3,8
   17778:	11000015 	stw	r4,0(r2)
   1777c:	003f6206 	br	17508 <_dtoa_r+0xd0>
   17780:	ddc00117 	ldw	r23,4(sp)
   17784:	d8800217 	ldw	r2,8(sp)
   17788:	01000804 	movi	r4,32
   1778c:	b8c10c84 	addi	r3,r23,1074
   17790:	18a3883a 	add	r17,r3,r2
   17794:	2441b80e 	bge	r4,r17,17e78 <_dtoa_r+0xa40>
   17798:	00c01004 	movi	r3,64
   1779c:	1c47c83a 	sub	r3,r3,r17
   177a0:	88bff804 	addi	r2,r17,-32
   177a4:	a8c6983a 	sll	r3,r21,r3
   177a8:	a084d83a 	srl	r2,r20,r2
   177ac:	1888b03a 	or	r4,r3,r2
   177b0:	001ae880 	call	1ae88 <__floatunsidf>
   177b4:	1011883a 	mov	r8,r2
   177b8:	00bf8434 	movhi	r2,65040
   177bc:	01000044 	movi	r4,1
   177c0:	10d3883a 	add	r9,r2,r3
   177c4:	8dbef344 	addi	r22,r17,-1075
   177c8:	d9000815 	stw	r4,32(sp)
   177cc:	003f6f06 	br	1758c <_dtoa_r+0x154>
   177d0:	d8001715 	stw	zero,92(sp)
   177d4:	04400044 	movi	r17,1
   177d8:	00bfffc4 	movi	r2,-1
   177dc:	00c00044 	movi	r3,1
   177e0:	d8800e15 	stw	r2,56(sp)
   177e4:	d8002615 	stw	zero,152(sp)
   177e8:	d8800f15 	stw	r2,60(sp)
   177ec:	d8c00b15 	stw	r3,44(sp)
   177f0:	1021883a 	mov	r16,r2
   177f4:	d8801617 	ldw	r2,88(sp)
   177f8:	10001115 	stw	zero,68(r2)
   177fc:	d8801617 	ldw	r2,88(sp)
   17800:	11401117 	ldw	r5,68(r2)
   17804:	1009883a 	mov	r4,r2
   17808:	00191b80 	call	191b8 <_Balloc>
   1780c:	d8c01617 	ldw	r3,88(sp)
   17810:	d8800515 	stw	r2,20(sp)
   17814:	18801015 	stw	r2,64(r3)
   17818:	00800384 	movi	r2,14
   1781c:	14006836 	bltu	r2,r16,179c0 <_dtoa_r+0x588>
   17820:	8805003a 	cmpeq	r2,r17,zero
   17824:	1000661e 	bne	r2,zero,179c0 <_dtoa_r+0x588>
   17828:	d9000d17 	ldw	r4,52(sp)
   1782c:	0102300e 	bge	zero,r4,180f0 <_dtoa_r+0xcb8>
   17830:	208003cc 	andi	r2,r4,15
   17834:	100490fa 	slli	r2,r2,3
   17838:	2025d13a 	srai	r18,r4,4
   1783c:	00c000b4 	movhi	r3,2
   17840:	18fc9f04 	addi	r3,r3,-3460
   17844:	10c5883a 	add	r2,r2,r3
   17848:	90c0040c 	andi	r3,r18,16
   1784c:	14000017 	ldw	r16,0(r2)
   17850:	14400117 	ldw	r17,4(r2)
   17854:	18036a1e 	bne	r3,zero,18600 <_dtoa_r+0x11c8>
   17858:	05800084 	movi	r22,2
   1785c:	90001026 	beq	r18,zero,178a0 <_dtoa_r+0x468>
   17860:	04c000b4 	movhi	r19,2
   17864:	9cfcd104 	addi	r19,r19,-3260
   17868:	9080004c 	andi	r2,r18,1
   1786c:	1005003a 	cmpeq	r2,r2,zero
   17870:	1000081e 	bne	r2,zero,17894 <_dtoa_r+0x45c>
   17874:	99800017 	ldw	r6,0(r19)
   17878:	99c00117 	ldw	r7,4(r19)
   1787c:	880b883a 	mov	r5,r17
   17880:	8009883a 	mov	r4,r16
   17884:	00100b00 	call	100b0 <__muldf3>
   17888:	1021883a 	mov	r16,r2
   1788c:	b5800044 	addi	r22,r22,1
   17890:	1823883a 	mov	r17,r3
   17894:	9025d07a 	srai	r18,r18,1
   17898:	9cc00204 	addi	r19,r19,8
   1789c:	903ff21e 	bne	r18,zero,17868 <_dtoa_r+0x430>
   178a0:	a80b883a 	mov	r5,r21
   178a4:	a009883a 	mov	r4,r20
   178a8:	880f883a 	mov	r7,r17
   178ac:	800d883a 	mov	r6,r16
   178b0:	001aa100 	call	1aa10 <__divdf3>
   178b4:	1029883a 	mov	r20,r2
   178b8:	182b883a 	mov	r21,r3
   178bc:	d8c00c17 	ldw	r3,48(sp)
   178c0:	1805003a 	cmpeq	r2,r3,zero
   178c4:	1000081e 	bne	r2,zero,178e8 <_dtoa_r+0x4b0>
   178c8:	0005883a 	mov	r2,zero
   178cc:	00cffc34 	movhi	r3,16368
   178d0:	180f883a 	mov	r7,r3
   178d4:	a009883a 	mov	r4,r20
   178d8:	a80b883a 	mov	r5,r21
   178dc:	100d883a 	mov	r6,r2
   178e0:	00104740 	call	10474 <__ltdf2>
   178e4:	1003fe16 	blt	r2,zero,188e0 <_dtoa_r+0x14a8>
   178e8:	b009883a 	mov	r4,r22
   178ec:	00104fc0 	call	104fc <__floatsidf>
   178f0:	180b883a 	mov	r5,r3
   178f4:	1009883a 	mov	r4,r2
   178f8:	a00d883a 	mov	r6,r20
   178fc:	a80f883a 	mov	r7,r21
   17900:	00100b00 	call	100b0 <__muldf3>
   17904:	0011883a 	mov	r8,zero
   17908:	02500734 	movhi	r9,16412
   1790c:	1009883a 	mov	r4,r2
   17910:	180b883a 	mov	r5,r3
   17914:	480f883a 	mov	r7,r9
   17918:	400d883a 	mov	r6,r8
   1791c:	001003c0 	call	1003c <__adddf3>
   17920:	d9000f17 	ldw	r4,60(sp)
   17924:	102d883a 	mov	r22,r2
   17928:	00bf3034 	movhi	r2,64704
   1792c:	18b9883a 	add	fp,r3,r2
   17930:	e02f883a 	mov	r23,fp
   17934:	20028f1e 	bne	r4,zero,18374 <_dtoa_r+0xf3c>
   17938:	0005883a 	mov	r2,zero
   1793c:	00d00534 	movhi	r3,16404
   17940:	a009883a 	mov	r4,r20
   17944:	a80b883a 	mov	r5,r21
   17948:	180f883a 	mov	r7,r3
   1794c:	100d883a 	mov	r6,r2
   17950:	000ffbc0 	call	ffbc <__subdf3>
   17954:	1009883a 	mov	r4,r2
   17958:	e00f883a 	mov	r7,fp
   1795c:	180b883a 	mov	r5,r3
   17960:	b00d883a 	mov	r6,r22
   17964:	1025883a 	mov	r18,r2
   17968:	1827883a 	mov	r19,r3
   1796c:	001ad780 	call	1ad78 <__gtdf2>
   17970:	00834f16 	blt	zero,r2,186b0 <_dtoa_r+0x1278>
   17974:	e0e0003c 	xorhi	r3,fp,32768
   17978:	9009883a 	mov	r4,r18
   1797c:	980b883a 	mov	r5,r19
   17980:	180f883a 	mov	r7,r3
   17984:	b00d883a 	mov	r6,r22
   17988:	00104740 	call	10474 <__ltdf2>
   1798c:	1000080e 	bge	r2,zero,179b0 <_dtoa_r+0x578>
   17990:	0027883a 	mov	r19,zero
   17994:	0025883a 	mov	r18,zero
   17998:	d8802617 	ldw	r2,152(sp)
   1799c:	df000517 	ldw	fp,20(sp)
   179a0:	d8000615 	stw	zero,24(sp)
   179a4:	0084303a 	nor	r2,zero,r2
   179a8:	d8800d15 	stw	r2,52(sp)
   179ac:	00019b06 	br	1801c <_dtoa_r+0xbe4>
   179b0:	d9801217 	ldw	r6,72(sp)
   179b4:	d8801317 	ldw	r2,76(sp)
   179b8:	3029883a 	mov	r20,r6
   179bc:	102b883a 	mov	r21,r2
   179c0:	d8c00217 	ldw	r3,8(sp)
   179c4:	18008516 	blt	r3,zero,17bdc <_dtoa_r+0x7a4>
   179c8:	d9000d17 	ldw	r4,52(sp)
   179cc:	00800384 	movi	r2,14
   179d0:	11008216 	blt	r2,r4,17bdc <_dtoa_r+0x7a4>
   179d4:	200490fa 	slli	r2,r4,3
   179d8:	d9802617 	ldw	r6,152(sp)
   179dc:	00c000b4 	movhi	r3,2
   179e0:	18fc9f04 	addi	r3,r3,-3460
   179e4:	10c5883a 	add	r2,r2,r3
   179e8:	14800017 	ldw	r18,0(r2)
   179ec:	14c00117 	ldw	r19,4(r2)
   179f0:	30031e16 	blt	r6,zero,1866c <_dtoa_r+0x1234>
   179f4:	d9000517 	ldw	r4,20(sp)
   179f8:	d8c00f17 	ldw	r3,60(sp)
   179fc:	a823883a 	mov	r17,r21
   17a00:	a021883a 	mov	r16,r20
   17a04:	192b883a 	add	r21,r3,r4
   17a08:	2039883a 	mov	fp,r4
   17a0c:	00000f06 	br	17a4c <_dtoa_r+0x614>
   17a10:	0005883a 	mov	r2,zero
   17a14:	00d00934 	movhi	r3,16420
   17a18:	5009883a 	mov	r4,r10
   17a1c:	580b883a 	mov	r5,r11
   17a20:	180f883a 	mov	r7,r3
   17a24:	100d883a 	mov	r6,r2
   17a28:	00100b00 	call	100b0 <__muldf3>
   17a2c:	180b883a 	mov	r5,r3
   17a30:	000d883a 	mov	r6,zero
   17a34:	000f883a 	mov	r7,zero
   17a38:	1009883a 	mov	r4,r2
   17a3c:	1021883a 	mov	r16,r2
   17a40:	1823883a 	mov	r17,r3
   17a44:	001acf00 	call	1acf0 <__nedf2>
   17a48:	10004526 	beq	r2,zero,17b60 <_dtoa_r+0x728>
   17a4c:	900d883a 	mov	r6,r18
   17a50:	980f883a 	mov	r7,r19
   17a54:	8009883a 	mov	r4,r16
   17a58:	880b883a 	mov	r5,r17
   17a5c:	001aa100 	call	1aa10 <__divdf3>
   17a60:	180b883a 	mov	r5,r3
   17a64:	1009883a 	mov	r4,r2
   17a68:	00105f40 	call	105f4 <__fixdfsi>
   17a6c:	1009883a 	mov	r4,r2
   17a70:	1029883a 	mov	r20,r2
   17a74:	00104fc0 	call	104fc <__floatsidf>
   17a78:	180f883a 	mov	r7,r3
   17a7c:	9009883a 	mov	r4,r18
   17a80:	980b883a 	mov	r5,r19
   17a84:	100d883a 	mov	r6,r2
   17a88:	00100b00 	call	100b0 <__muldf3>
   17a8c:	180f883a 	mov	r7,r3
   17a90:	880b883a 	mov	r5,r17
   17a94:	8009883a 	mov	r4,r16
   17a98:	100d883a 	mov	r6,r2
   17a9c:	000ffbc0 	call	ffbc <__subdf3>
   17aa0:	1015883a 	mov	r10,r2
   17aa4:	a0800c04 	addi	r2,r20,48
   17aa8:	e0800005 	stb	r2,0(fp)
   17aac:	e7000044 	addi	fp,fp,1
   17ab0:	1817883a 	mov	r11,r3
   17ab4:	e57fd61e 	bne	fp,r21,17a10 <_dtoa_r+0x5d8>
   17ab8:	500d883a 	mov	r6,r10
   17abc:	180f883a 	mov	r7,r3
   17ac0:	5009883a 	mov	r4,r10
   17ac4:	180b883a 	mov	r5,r3
   17ac8:	001003c0 	call	1003c <__adddf3>
   17acc:	100d883a 	mov	r6,r2
   17ad0:	9009883a 	mov	r4,r18
   17ad4:	980b883a 	mov	r5,r19
   17ad8:	180f883a 	mov	r7,r3
   17adc:	1021883a 	mov	r16,r2
   17ae0:	1823883a 	mov	r17,r3
   17ae4:	00104740 	call	10474 <__ltdf2>
   17ae8:	10000816 	blt	r2,zero,17b0c <_dtoa_r+0x6d4>
   17aec:	980b883a 	mov	r5,r19
   17af0:	800d883a 	mov	r6,r16
   17af4:	880f883a 	mov	r7,r17
   17af8:	9009883a 	mov	r4,r18
   17afc:	001ac680 	call	1ac68 <__eqdf2>
   17b00:	1000171e 	bne	r2,zero,17b60 <_dtoa_r+0x728>
   17b04:	a080004c 	andi	r2,r20,1
   17b08:	10001526 	beq	r2,zero,17b60 <_dtoa_r+0x728>
   17b0c:	d8800d17 	ldw	r2,52(sp)
   17b10:	d8800415 	stw	r2,16(sp)
   17b14:	e009883a 	mov	r4,fp
   17b18:	213fffc4 	addi	r4,r4,-1
   17b1c:	20c00007 	ldb	r3,0(r4)
   17b20:	00800e44 	movi	r2,57
   17b24:	1880081e 	bne	r3,r2,17b48 <_dtoa_r+0x710>
   17b28:	d8800517 	ldw	r2,20(sp)
   17b2c:	113ffa1e 	bne	r2,r4,17b18 <_dtoa_r+0x6e0>
   17b30:	d8c00417 	ldw	r3,16(sp)
   17b34:	d9800517 	ldw	r6,20(sp)
   17b38:	00800c04 	movi	r2,48
   17b3c:	18c00044 	addi	r3,r3,1
   17b40:	d8c00415 	stw	r3,16(sp)
   17b44:	30800005 	stb	r2,0(r6)
   17b48:	20800003 	ldbu	r2,0(r4)
   17b4c:	d8c00417 	ldw	r3,16(sp)
   17b50:	27000044 	addi	fp,r4,1
   17b54:	10800044 	addi	r2,r2,1
   17b58:	d8c00d15 	stw	r3,52(sp)
   17b5c:	20800005 	stb	r2,0(r4)
   17b60:	d9001617 	ldw	r4,88(sp)
   17b64:	d9400717 	ldw	r5,28(sp)
   17b68:	0018c380 	call	18c38 <_Bfree>
   17b6c:	e0000005 	stb	zero,0(fp)
   17b70:	d9800d17 	ldw	r6,52(sp)
   17b74:	d8c02717 	ldw	r3,156(sp)
   17b78:	d9002917 	ldw	r4,164(sp)
   17b7c:	30800044 	addi	r2,r6,1
   17b80:	18800015 	stw	r2,0(r3)
   17b84:	20029c26 	beq	r4,zero,185f8 <_dtoa_r+0x11c0>
   17b88:	d8c00517 	ldw	r3,20(sp)
   17b8c:	27000015 	stw	fp,0(r4)
   17b90:	003e5d06 	br	17508 <_dtoa_r+0xd0>
   17b94:	d9800d17 	ldw	r6,52(sp)
   17b98:	00c000b4 	movhi	r3,2
   17b9c:	18fc9f04 	addi	r3,r3,-3460
   17ba0:	d9001217 	ldw	r4,72(sp)
   17ba4:	300490fa 	slli	r2,r6,3
   17ba8:	d9401317 	ldw	r5,76(sp)
   17bac:	10c5883a 	add	r2,r2,r3
   17bb0:	12000017 	ldw	r8,0(r2)
   17bb4:	12400117 	ldw	r9,4(r2)
   17bb8:	400d883a 	mov	r6,r8
   17bbc:	480f883a 	mov	r7,r9
   17bc0:	00104740 	call	10474 <__ltdf2>
   17bc4:	1000030e 	bge	r2,zero,17bd4 <_dtoa_r+0x79c>
   17bc8:	d8800d17 	ldw	r2,52(sp)
   17bcc:	10bfffc4 	addi	r2,r2,-1
   17bd0:	d8800d15 	stw	r2,52(sp)
   17bd4:	d8000c15 	stw	zero,48(sp)
   17bd8:	003ea806 	br	1767c <_dtoa_r+0x244>
   17bdc:	d9000b17 	ldw	r4,44(sp)
   17be0:	202cc03a 	cmpne	r22,r4,zero
   17be4:	b000c71e 	bne	r22,zero,17f04 <_dtoa_r+0xacc>
   17be8:	dc001117 	ldw	r16,68(sp)
   17bec:	dc801017 	ldw	r18,64(sp)
   17bf0:	0027883a 	mov	r19,zero
   17bf4:	04000b0e 	bge	zero,r16,17c24 <_dtoa_r+0x7ec>
   17bf8:	d8c00a17 	ldw	r3,40(sp)
   17bfc:	00c0090e 	bge	zero,r3,17c24 <_dtoa_r+0x7ec>
   17c00:	8005883a 	mov	r2,r16
   17c04:	1c011316 	blt	r3,r16,18054 <_dtoa_r+0xc1c>
   17c08:	d9000a17 	ldw	r4,40(sp)
   17c0c:	d9801117 	ldw	r6,68(sp)
   17c10:	80a1c83a 	sub	r16,r16,r2
   17c14:	2089c83a 	sub	r4,r4,r2
   17c18:	308dc83a 	sub	r6,r6,r2
   17c1c:	d9000a15 	stw	r4,40(sp)
   17c20:	d9801115 	stw	r6,68(sp)
   17c24:	d8801017 	ldw	r2,64(sp)
   17c28:	0080150e 	bge	zero,r2,17c80 <_dtoa_r+0x848>
   17c2c:	d8c00b17 	ldw	r3,44(sp)
   17c30:	1805003a 	cmpeq	r2,r3,zero
   17c34:	1001c91e 	bne	r2,zero,1835c <_dtoa_r+0xf24>
   17c38:	04800e0e 	bge	zero,r18,17c74 <_dtoa_r+0x83c>
   17c3c:	d9001617 	ldw	r4,88(sp)
   17c40:	980b883a 	mov	r5,r19
   17c44:	900d883a 	mov	r6,r18
   17c48:	00199ec0 	call	199ec <__pow5mult>
   17c4c:	d9001617 	ldw	r4,88(sp)
   17c50:	d9800717 	ldw	r6,28(sp)
   17c54:	100b883a 	mov	r5,r2
   17c58:	1027883a 	mov	r19,r2
   17c5c:	00196c80 	call	196c8 <__multiply>
   17c60:	d9001617 	ldw	r4,88(sp)
   17c64:	d9400717 	ldw	r5,28(sp)
   17c68:	1023883a 	mov	r17,r2
   17c6c:	0018c380 	call	18c38 <_Bfree>
   17c70:	dc400715 	stw	r17,28(sp)
   17c74:	d9001017 	ldw	r4,64(sp)
   17c78:	248dc83a 	sub	r6,r4,r18
   17c7c:	30010e1e 	bne	r6,zero,180b8 <_dtoa_r+0xc80>
   17c80:	d9001617 	ldw	r4,88(sp)
   17c84:	04400044 	movi	r17,1
   17c88:	880b883a 	mov	r5,r17
   17c8c:	00198b00 	call	198b0 <__i2b>
   17c90:	d9800917 	ldw	r6,36(sp)
   17c94:	1025883a 	mov	r18,r2
   17c98:	0180040e 	bge	zero,r6,17cac <_dtoa_r+0x874>
   17c9c:	d9001617 	ldw	r4,88(sp)
   17ca0:	100b883a 	mov	r5,r2
   17ca4:	00199ec0 	call	199ec <__pow5mult>
   17ca8:	1025883a 	mov	r18,r2
   17cac:	d8801717 	ldw	r2,92(sp)
   17cb0:	8880f30e 	bge	r17,r2,18080 <_dtoa_r+0xc48>
   17cb4:	0023883a 	mov	r17,zero
   17cb8:	d9800917 	ldw	r6,36(sp)
   17cbc:	30019e1e 	bne	r6,zero,18338 <_dtoa_r+0xf00>
   17cc0:	00c00044 	movi	r3,1
   17cc4:	d9000a17 	ldw	r4,40(sp)
   17cc8:	20c5883a 	add	r2,r4,r3
   17ccc:	10c007cc 	andi	r3,r2,31
   17cd0:	1800841e 	bne	r3,zero,17ee4 <_dtoa_r+0xaac>
   17cd4:	00800704 	movi	r2,28
   17cd8:	d9000a17 	ldw	r4,40(sp)
   17cdc:	d9801117 	ldw	r6,68(sp)
   17ce0:	80a1883a 	add	r16,r16,r2
   17ce4:	2089883a 	add	r4,r4,r2
   17ce8:	308d883a 	add	r6,r6,r2
   17cec:	d9000a15 	stw	r4,40(sp)
   17cf0:	d9801115 	stw	r6,68(sp)
   17cf4:	d8801117 	ldw	r2,68(sp)
   17cf8:	0080050e 	bge	zero,r2,17d10 <_dtoa_r+0x8d8>
   17cfc:	d9400717 	ldw	r5,28(sp)
   17d00:	d9001617 	ldw	r4,88(sp)
   17d04:	100d883a 	mov	r6,r2
   17d08:	001957c0 	call	1957c <__lshift>
   17d0c:	d8800715 	stw	r2,28(sp)
   17d10:	d8c00a17 	ldw	r3,40(sp)
   17d14:	00c0050e 	bge	zero,r3,17d2c <_dtoa_r+0x8f4>
   17d18:	d9001617 	ldw	r4,88(sp)
   17d1c:	900b883a 	mov	r5,r18
   17d20:	180d883a 	mov	r6,r3
   17d24:	001957c0 	call	1957c <__lshift>
   17d28:	1025883a 	mov	r18,r2
   17d2c:	d9000c17 	ldw	r4,48(sp)
   17d30:	2005003a 	cmpeq	r2,r4,zero
   17d34:	10016f26 	beq	r2,zero,182f4 <_dtoa_r+0xebc>
   17d38:	d9000f17 	ldw	r4,60(sp)
   17d3c:	0102170e 	bge	zero,r4,1859c <_dtoa_r+0x1164>
   17d40:	d9800b17 	ldw	r6,44(sp)
   17d44:	3005003a 	cmpeq	r2,r6,zero
   17d48:	1000881e 	bne	r2,zero,17f6c <_dtoa_r+0xb34>
   17d4c:	0400050e 	bge	zero,r16,17d64 <_dtoa_r+0x92c>
   17d50:	d9001617 	ldw	r4,88(sp)
   17d54:	980b883a 	mov	r5,r19
   17d58:	800d883a 	mov	r6,r16
   17d5c:	001957c0 	call	1957c <__lshift>
   17d60:	1027883a 	mov	r19,r2
   17d64:	8804c03a 	cmpne	r2,r17,zero
   17d68:	1002541e 	bne	r2,zero,186bc <_dtoa_r+0x1284>
   17d6c:	980b883a 	mov	r5,r19
   17d70:	dd800517 	ldw	r22,20(sp)
   17d74:	dcc00615 	stw	r19,24(sp)
   17d78:	a700004c 	andi	fp,r20,1
   17d7c:	2827883a 	mov	r19,r5
   17d80:	d9000717 	ldw	r4,28(sp)
   17d84:	900b883a 	mov	r5,r18
   17d88:	00172200 	call	17220 <quorem>
   17d8c:	d9000717 	ldw	r4,28(sp)
   17d90:	d9400617 	ldw	r5,24(sp)
   17d94:	1023883a 	mov	r17,r2
   17d98:	8dc00c04 	addi	r23,r17,48
   17d9c:	0018d940 	call	18d94 <__mcmp>
   17da0:	d9001617 	ldw	r4,88(sp)
   17da4:	900b883a 	mov	r5,r18
   17da8:	980d883a 	mov	r6,r19
   17dac:	1029883a 	mov	r20,r2
   17db0:	00193f00 	call	193f0 <__mdiff>
   17db4:	102b883a 	mov	r21,r2
   17db8:	10800317 	ldw	r2,12(r2)
   17dbc:	1001281e 	bne	r2,zero,18260 <_dtoa_r+0xe28>
   17dc0:	d9000717 	ldw	r4,28(sp)
   17dc4:	a80b883a 	mov	r5,r21
   17dc8:	0018d940 	call	18d94 <__mcmp>
   17dcc:	d9001617 	ldw	r4,88(sp)
   17dd0:	1021883a 	mov	r16,r2
   17dd4:	a80b883a 	mov	r5,r21
   17dd8:	0018c380 	call	18c38 <_Bfree>
   17ddc:	8000041e 	bne	r16,zero,17df0 <_dtoa_r+0x9b8>
   17de0:	d8801717 	ldw	r2,92(sp)
   17de4:	1000021e 	bne	r2,zero,17df0 <_dtoa_r+0x9b8>
   17de8:	e004c03a 	cmpne	r2,fp,zero
   17dec:	10011726 	beq	r2,zero,1824c <_dtoa_r+0xe14>
   17df0:	a0010616 	blt	r20,zero,1820c <_dtoa_r+0xdd4>
   17df4:	a000041e 	bne	r20,zero,17e08 <_dtoa_r+0x9d0>
   17df8:	d8c01717 	ldw	r3,92(sp)
   17dfc:	1800021e 	bne	r3,zero,17e08 <_dtoa_r+0x9d0>
   17e00:	e004c03a 	cmpne	r2,fp,zero
   17e04:	10010126 	beq	r2,zero,1820c <_dtoa_r+0xdd4>
   17e08:	04023d16 	blt	zero,r16,18700 <_dtoa_r+0x12c8>
   17e0c:	b5c00005 	stb	r23,0(r22)
   17e10:	d9800517 	ldw	r6,20(sp)
   17e14:	d9000f17 	ldw	r4,60(sp)
   17e18:	b5800044 	addi	r22,r22,1
   17e1c:	3105883a 	add	r2,r6,r4
   17e20:	b0806526 	beq	r22,r2,17fb8 <_dtoa_r+0xb80>
   17e24:	d9400717 	ldw	r5,28(sp)
   17e28:	d9001617 	ldw	r4,88(sp)
   17e2c:	01800284 	movi	r6,10
   17e30:	000f883a 	mov	r7,zero
   17e34:	00198ec0 	call	198ec <__multadd>
   17e38:	d8800715 	stw	r2,28(sp)
   17e3c:	d8800617 	ldw	r2,24(sp)
   17e40:	14c10c26 	beq	r2,r19,18274 <_dtoa_r+0xe3c>
   17e44:	d9400617 	ldw	r5,24(sp)
   17e48:	d9001617 	ldw	r4,88(sp)
   17e4c:	01800284 	movi	r6,10
   17e50:	000f883a 	mov	r7,zero
   17e54:	00198ec0 	call	198ec <__multadd>
   17e58:	d9001617 	ldw	r4,88(sp)
   17e5c:	980b883a 	mov	r5,r19
   17e60:	01800284 	movi	r6,10
   17e64:	000f883a 	mov	r7,zero
   17e68:	d8800615 	stw	r2,24(sp)
   17e6c:	00198ec0 	call	198ec <__multadd>
   17e70:	1027883a 	mov	r19,r2
   17e74:	003fc206 	br	17d80 <_dtoa_r+0x948>
   17e78:	2445c83a 	sub	r2,r4,r17
   17e7c:	a088983a 	sll	r4,r20,r2
   17e80:	003e4b06 	br	177b0 <_dtoa_r+0x378>
   17e84:	01bfffc4 	movi	r6,-1
   17e88:	00800044 	movi	r2,1
   17e8c:	d9800e15 	stw	r6,56(sp)
   17e90:	d9800f15 	stw	r6,60(sp)
   17e94:	d8800b15 	stw	r2,44(sp)
   17e98:	d8c01617 	ldw	r3,88(sp)
   17e9c:	008005c4 	movi	r2,23
   17ea0:	18001115 	stw	zero,68(r3)
   17ea4:	1580082e 	bgeu	r2,r22,17ec8 <_dtoa_r+0xa90>
   17ea8:	00c00104 	movi	r3,4
   17eac:	0009883a 	mov	r4,zero
   17eb0:	18c7883a 	add	r3,r3,r3
   17eb4:	18800504 	addi	r2,r3,20
   17eb8:	21000044 	addi	r4,r4,1
   17ebc:	b0bffc2e 	bgeu	r22,r2,17eb0 <_dtoa_r+0xa78>
   17ec0:	d9801617 	ldw	r6,88(sp)
   17ec4:	31001115 	stw	r4,68(r6)
   17ec8:	dc000f17 	ldw	r16,60(sp)
   17ecc:	003e4b06 	br	177fc <_dtoa_r+0x3c4>
   17ed0:	d9801717 	ldw	r6,92(sp)
   17ed4:	0023883a 	mov	r17,zero
   17ed8:	31bfff04 	addi	r6,r6,-4
   17edc:	d9801715 	stw	r6,92(sp)
   17ee0:	003df806 	br	176c4 <_dtoa_r+0x28c>
   17ee4:	00800804 	movi	r2,32
   17ee8:	10c9c83a 	sub	r4,r2,r3
   17eec:	00c00104 	movi	r3,4
   17ef0:	19005a16 	blt	r3,r4,1805c <_dtoa_r+0xc24>
   17ef4:	008000c4 	movi	r2,3
   17ef8:	113f7e16 	blt	r2,r4,17cf4 <_dtoa_r+0x8bc>
   17efc:	20800704 	addi	r2,r4,28
   17f00:	003f7506 	br	17cd8 <_dtoa_r+0x8a0>
   17f04:	d9801717 	ldw	r6,92(sp)
   17f08:	00800044 	movi	r2,1
   17f0c:	1180a10e 	bge	r2,r6,18194 <_dtoa_r+0xd5c>
   17f10:	d9800f17 	ldw	r6,60(sp)
   17f14:	d8c01017 	ldw	r3,64(sp)
   17f18:	30bfffc4 	addi	r2,r6,-1
   17f1c:	1881c616 	blt	r3,r2,18638 <_dtoa_r+0x1200>
   17f20:	18a5c83a 	sub	r18,r3,r2
   17f24:	d8800f17 	ldw	r2,60(sp)
   17f28:	10026216 	blt	r2,zero,188b4 <_dtoa_r+0x147c>
   17f2c:	dc001117 	ldw	r16,68(sp)
   17f30:	1007883a 	mov	r3,r2
   17f34:	d9800a17 	ldw	r6,40(sp)
   17f38:	d8801117 	ldw	r2,68(sp)
   17f3c:	d9001617 	ldw	r4,88(sp)
   17f40:	30cd883a 	add	r6,r6,r3
   17f44:	10c5883a 	add	r2,r2,r3
   17f48:	01400044 	movi	r5,1
   17f4c:	d9800a15 	stw	r6,40(sp)
   17f50:	d8801115 	stw	r2,68(sp)
   17f54:	00198b00 	call	198b0 <__i2b>
   17f58:	1027883a 	mov	r19,r2
   17f5c:	003f2506 	br	17bf4 <_dtoa_r+0x7bc>
   17f60:	00c000b4 	movhi	r3,2
   17f64:	18fbe204 	addi	r3,r3,-4216
   17f68:	003d6706 	br	17508 <_dtoa_r+0xd0>
   17f6c:	dd800517 	ldw	r22,20(sp)
   17f70:	04000044 	movi	r16,1
   17f74:	00000706 	br	17f94 <_dtoa_r+0xb5c>
   17f78:	d9400717 	ldw	r5,28(sp)
   17f7c:	d9001617 	ldw	r4,88(sp)
   17f80:	01800284 	movi	r6,10
   17f84:	000f883a 	mov	r7,zero
   17f88:	00198ec0 	call	198ec <__multadd>
   17f8c:	d8800715 	stw	r2,28(sp)
   17f90:	84000044 	addi	r16,r16,1
   17f94:	d9000717 	ldw	r4,28(sp)
   17f98:	900b883a 	mov	r5,r18
   17f9c:	00172200 	call	17220 <quorem>
   17fa0:	15c00c04 	addi	r23,r2,48
   17fa4:	b5c00005 	stb	r23,0(r22)
   17fa8:	d8c00f17 	ldw	r3,60(sp)
   17fac:	b5800044 	addi	r22,r22,1
   17fb0:	80fff116 	blt	r16,r3,17f78 <_dtoa_r+0xb40>
   17fb4:	d8000615 	stw	zero,24(sp)
   17fb8:	d9400717 	ldw	r5,28(sp)
   17fbc:	d9001617 	ldw	r4,88(sp)
   17fc0:	01800044 	movi	r6,1
   17fc4:	001957c0 	call	1957c <__lshift>
   17fc8:	1009883a 	mov	r4,r2
   17fcc:	900b883a 	mov	r5,r18
   17fd0:	d8800715 	stw	r2,28(sp)
   17fd4:	0018d940 	call	18d94 <__mcmp>
   17fd8:	00803c0e 	bge	zero,r2,180cc <_dtoa_r+0xc94>
   17fdc:	b009883a 	mov	r4,r22
   17fe0:	213fffc4 	addi	r4,r4,-1
   17fe4:	21400003 	ldbu	r5,0(r4)
   17fe8:	00800e44 	movi	r2,57
   17fec:	28c03fcc 	andi	r3,r5,255
   17ff0:	18c0201c 	xori	r3,r3,128
   17ff4:	18ffe004 	addi	r3,r3,-128
   17ff8:	1881981e 	bne	r3,r2,1865c <_dtoa_r+0x1224>
   17ffc:	d9800517 	ldw	r6,20(sp)
   18000:	21bff71e 	bne	r4,r6,17fe0 <_dtoa_r+0xba8>
   18004:	d8800d17 	ldw	r2,52(sp)
   18008:	37000044 	addi	fp,r6,1
   1800c:	10800044 	addi	r2,r2,1
   18010:	d8800d15 	stw	r2,52(sp)
   18014:	00800c44 	movi	r2,49
   18018:	30800005 	stb	r2,0(r6)
   1801c:	d9001617 	ldw	r4,88(sp)
   18020:	900b883a 	mov	r5,r18
   18024:	0018c380 	call	18c38 <_Bfree>
   18028:	983ecd26 	beq	r19,zero,17b60 <_dtoa_r+0x728>
   1802c:	d8c00617 	ldw	r3,24(sp)
   18030:	18000426 	beq	r3,zero,18044 <_dtoa_r+0xc0c>
   18034:	1cc00326 	beq	r3,r19,18044 <_dtoa_r+0xc0c>
   18038:	d9001617 	ldw	r4,88(sp)
   1803c:	180b883a 	mov	r5,r3
   18040:	0018c380 	call	18c38 <_Bfree>
   18044:	d9001617 	ldw	r4,88(sp)
   18048:	980b883a 	mov	r5,r19
   1804c:	0018c380 	call	18c38 <_Bfree>
   18050:	003ec306 	br	17b60 <_dtoa_r+0x728>
   18054:	1805883a 	mov	r2,r3
   18058:	003eeb06 	br	17c08 <_dtoa_r+0x7d0>
   1805c:	d9800a17 	ldw	r6,40(sp)
   18060:	d8c01117 	ldw	r3,68(sp)
   18064:	20bfff04 	addi	r2,r4,-4
   18068:	308d883a 	add	r6,r6,r2
   1806c:	1887883a 	add	r3,r3,r2
   18070:	80a1883a 	add	r16,r16,r2
   18074:	d9800a15 	stw	r6,40(sp)
   18078:	d8c01115 	stw	r3,68(sp)
   1807c:	003f1d06 	br	17cf4 <_dtoa_r+0x8bc>
   18080:	a03f0c1e 	bne	r20,zero,17cb4 <_dtoa_r+0x87c>
   18084:	00800434 	movhi	r2,16
   18088:	10bfffc4 	addi	r2,r2,-1
   1808c:	a884703a 	and	r2,r21,r2
   18090:	103f081e 	bne	r2,zero,17cb4 <_dtoa_r+0x87c>
   18094:	a89ffc2c 	andhi	r2,r21,32752
   18098:	103f0626 	beq	r2,zero,17cb4 <_dtoa_r+0x87c>
   1809c:	d8c01117 	ldw	r3,68(sp)
   180a0:	d9000a17 	ldw	r4,40(sp)
   180a4:	18c00044 	addi	r3,r3,1
   180a8:	21000044 	addi	r4,r4,1
   180ac:	d8c01115 	stw	r3,68(sp)
   180b0:	d9000a15 	stw	r4,40(sp)
   180b4:	003f0006 	br	17cb8 <_dtoa_r+0x880>
   180b8:	d9400717 	ldw	r5,28(sp)
   180bc:	d9001617 	ldw	r4,88(sp)
   180c0:	00199ec0 	call	199ec <__pow5mult>
   180c4:	d8800715 	stw	r2,28(sp)
   180c8:	003eed06 	br	17c80 <_dtoa_r+0x848>
   180cc:	1000021e 	bne	r2,zero,180d8 <_dtoa_r+0xca0>
   180d0:	b880004c 	andi	r2,r23,1
   180d4:	103fc11e 	bne	r2,zero,17fdc <_dtoa_r+0xba4>
   180d8:	b5bfffc4 	addi	r22,r22,-1
   180dc:	b0c00007 	ldb	r3,0(r22)
   180e0:	00800c04 	movi	r2,48
   180e4:	18bffc26 	beq	r3,r2,180d8 <_dtoa_r+0xca0>
   180e8:	b7000044 	addi	fp,r22,1
   180ec:	003fcb06 	br	1801c <_dtoa_r+0xbe4>
   180f0:	d9800d17 	ldw	r6,52(sp)
   180f4:	018fc83a 	sub	r7,zero,r6
   180f8:	3801f726 	beq	r7,zero,188d8 <_dtoa_r+0x14a0>
   180fc:	398003cc 	andi	r6,r7,15
   18100:	300c90fa 	slli	r6,r6,3
   18104:	014000b4 	movhi	r5,2
   18108:	297c9f04 	addi	r5,r5,-3460
   1810c:	d9001217 	ldw	r4,72(sp)
   18110:	314d883a 	add	r6,r6,r5
   18114:	30c00117 	ldw	r3,4(r6)
   18118:	30800017 	ldw	r2,0(r6)
   1811c:	d9401317 	ldw	r5,76(sp)
   18120:	3821d13a 	srai	r16,r7,4
   18124:	100d883a 	mov	r6,r2
   18128:	180f883a 	mov	r7,r3
   1812c:	00100b00 	call	100b0 <__muldf3>
   18130:	1011883a 	mov	r8,r2
   18134:	1813883a 	mov	r9,r3
   18138:	1029883a 	mov	r20,r2
   1813c:	182b883a 	mov	r21,r3
   18140:	8001e526 	beq	r16,zero,188d8 <_dtoa_r+0x14a0>
   18144:	05800084 	movi	r22,2
   18148:	044000b4 	movhi	r17,2
   1814c:	8c7cd104 	addi	r17,r17,-3260
   18150:	8080004c 	andi	r2,r16,1
   18154:	1005003a 	cmpeq	r2,r2,zero
   18158:	1000081e 	bne	r2,zero,1817c <_dtoa_r+0xd44>
   1815c:	89800017 	ldw	r6,0(r17)
   18160:	89c00117 	ldw	r7,4(r17)
   18164:	480b883a 	mov	r5,r9
   18168:	4009883a 	mov	r4,r8
   1816c:	00100b00 	call	100b0 <__muldf3>
   18170:	1011883a 	mov	r8,r2
   18174:	b5800044 	addi	r22,r22,1
   18178:	1813883a 	mov	r9,r3
   1817c:	8021d07a 	srai	r16,r16,1
   18180:	8c400204 	addi	r17,r17,8
   18184:	803ff21e 	bne	r16,zero,18150 <_dtoa_r+0xd18>
   18188:	4029883a 	mov	r20,r8
   1818c:	482b883a 	mov	r21,r9
   18190:	003dca06 	br	178bc <_dtoa_r+0x484>
   18194:	d9000817 	ldw	r4,32(sp)
   18198:	2005003a 	cmpeq	r2,r4,zero
   1819c:	1001f61e 	bne	r2,zero,18978 <_dtoa_r+0x1540>
   181a0:	dc001117 	ldw	r16,68(sp)
   181a4:	dc801017 	ldw	r18,64(sp)
   181a8:	18c10cc4 	addi	r3,r3,1075
   181ac:	003f6106 	br	17f34 <_dtoa_r+0xafc>
   181b0:	d8000b15 	stw	zero,44(sp)
   181b4:	d9802617 	ldw	r6,152(sp)
   181b8:	d8c00d17 	ldw	r3,52(sp)
   181bc:	30800044 	addi	r2,r6,1
   181c0:	18ad883a 	add	r22,r3,r2
   181c4:	b13fffc4 	addi	r4,r22,-1
   181c8:	d9000e15 	stw	r4,56(sp)
   181cc:	0581f60e 	bge	zero,r22,189a8 <_dtoa_r+0x1570>
   181d0:	dd800f15 	stw	r22,60(sp)
   181d4:	003f3006 	br	17e98 <_dtoa_r+0xa60>
   181d8:	d8000b15 	stw	zero,44(sp)
   181dc:	d9002617 	ldw	r4,152(sp)
   181e0:	0101eb0e 	bge	zero,r4,18990 <_dtoa_r+0x1558>
   181e4:	202d883a 	mov	r22,r4
   181e8:	d9000e15 	stw	r4,56(sp)
   181ec:	d9000f15 	stw	r4,60(sp)
   181f0:	003f2906 	br	17e98 <_dtoa_r+0xa60>
   181f4:	01800044 	movi	r6,1
   181f8:	d9800b15 	stw	r6,44(sp)
   181fc:	003ff706 	br	181dc <_dtoa_r+0xda4>
   18200:	01000044 	movi	r4,1
   18204:	d9000b15 	stw	r4,44(sp)
   18208:	003fea06 	br	181b4 <_dtoa_r+0xd7c>
   1820c:	04000c0e 	bge	zero,r16,18240 <_dtoa_r+0xe08>
   18210:	d9400717 	ldw	r5,28(sp)
   18214:	d9001617 	ldw	r4,88(sp)
   18218:	01800044 	movi	r6,1
   1821c:	001957c0 	call	1957c <__lshift>
   18220:	1009883a 	mov	r4,r2
   18224:	900b883a 	mov	r5,r18
   18228:	d8800715 	stw	r2,28(sp)
   1822c:	0018d940 	call	18d94 <__mcmp>
   18230:	0081e00e 	bge	zero,r2,189b4 <_dtoa_r+0x157c>
   18234:	bdc00044 	addi	r23,r23,1
   18238:	00800e84 	movi	r2,58
   1823c:	b881a226 	beq	r23,r2,188c8 <_dtoa_r+0x1490>
   18240:	b7000044 	addi	fp,r22,1
   18244:	b5c00005 	stb	r23,0(r22)
   18248:	003f7406 	br	1801c <_dtoa_r+0xbe4>
   1824c:	00800e44 	movi	r2,57
   18250:	b8819d26 	beq	r23,r2,188c8 <_dtoa_r+0x1490>
   18254:	053ffa0e 	bge	zero,r20,18240 <_dtoa_r+0xe08>
   18258:	8dc00c44 	addi	r23,r17,49
   1825c:	003ff806 	br	18240 <_dtoa_r+0xe08>
   18260:	d9001617 	ldw	r4,88(sp)
   18264:	a80b883a 	mov	r5,r21
   18268:	04000044 	movi	r16,1
   1826c:	0018c380 	call	18c38 <_Bfree>
   18270:	003edf06 	br	17df0 <_dtoa_r+0x9b8>
   18274:	d9001617 	ldw	r4,88(sp)
   18278:	980b883a 	mov	r5,r19
   1827c:	01800284 	movi	r6,10
   18280:	000f883a 	mov	r7,zero
   18284:	00198ec0 	call	198ec <__multadd>
   18288:	1027883a 	mov	r19,r2
   1828c:	d8800615 	stw	r2,24(sp)
   18290:	003ebb06 	br	17d80 <_dtoa_r+0x948>
   18294:	d9801117 	ldw	r6,68(sp)
   18298:	d8800d17 	ldw	r2,52(sp)
   1829c:	d8000915 	stw	zero,36(sp)
   182a0:	308dc83a 	sub	r6,r6,r2
   182a4:	0087c83a 	sub	r3,zero,r2
   182a8:	d9801115 	stw	r6,68(sp)
   182ac:	d8c01015 	stw	r3,64(sp)
   182b0:	003cfe06 	br	176ac <_dtoa_r+0x274>
   182b4:	018dc83a 	sub	r6,zero,r6
   182b8:	d9801115 	stw	r6,68(sp)
   182bc:	d8000a15 	stw	zero,40(sp)
   182c0:	003cf306 	br	17690 <_dtoa_r+0x258>
   182c4:	d9000d17 	ldw	r4,52(sp)
   182c8:	00104fc0 	call	104fc <__floatsidf>
   182cc:	880b883a 	mov	r5,r17
   182d0:	8009883a 	mov	r4,r16
   182d4:	180f883a 	mov	r7,r3
   182d8:	100d883a 	mov	r6,r2
   182dc:	001acf00 	call	1acf0 <__nedf2>
   182e0:	103ce126 	beq	r2,zero,17668 <_dtoa_r+0x230>
   182e4:	d9800d17 	ldw	r6,52(sp)
   182e8:	31bfffc4 	addi	r6,r6,-1
   182ec:	d9800d15 	stw	r6,52(sp)
   182f0:	003cdd06 	br	17668 <_dtoa_r+0x230>
   182f4:	d9000717 	ldw	r4,28(sp)
   182f8:	900b883a 	mov	r5,r18
   182fc:	0018d940 	call	18d94 <__mcmp>
   18300:	103e8d0e 	bge	r2,zero,17d38 <_dtoa_r+0x900>
   18304:	d9400717 	ldw	r5,28(sp)
   18308:	d9001617 	ldw	r4,88(sp)
   1830c:	01800284 	movi	r6,10
   18310:	000f883a 	mov	r7,zero
   18314:	00198ec0 	call	198ec <__multadd>
   18318:	d9800d17 	ldw	r6,52(sp)
   1831c:	d8800715 	stw	r2,28(sp)
   18320:	31bfffc4 	addi	r6,r6,-1
   18324:	d9800d15 	stw	r6,52(sp)
   18328:	b001a71e 	bne	r22,zero,189c8 <_dtoa_r+0x1590>
   1832c:	d8800e17 	ldw	r2,56(sp)
   18330:	d8800f15 	stw	r2,60(sp)
   18334:	003e8006 	br	17d38 <_dtoa_r+0x900>
   18338:	90800417 	ldw	r2,16(r18)
   1833c:	1085883a 	add	r2,r2,r2
   18340:	1085883a 	add	r2,r2,r2
   18344:	1485883a 	add	r2,r2,r18
   18348:	11000417 	ldw	r4,16(r2)
   1834c:	0018c600 	call	18c60 <__hi0bits>
   18350:	00c00804 	movi	r3,32
   18354:	1887c83a 	sub	r3,r3,r2
   18358:	003e5a06 	br	17cc4 <_dtoa_r+0x88c>
   1835c:	d9400717 	ldw	r5,28(sp)
   18360:	d9801017 	ldw	r6,64(sp)
   18364:	d9001617 	ldw	r4,88(sp)
   18368:	00199ec0 	call	199ec <__pow5mult>
   1836c:	d8800715 	stw	r2,28(sp)
   18370:	003e4306 	br	17c80 <_dtoa_r+0x848>
   18374:	d9800f17 	ldw	r6,60(sp)
   18378:	d8800d17 	ldw	r2,52(sp)
   1837c:	d9800315 	stw	r6,12(sp)
   18380:	d8800415 	stw	r2,16(sp)
   18384:	d8c00b17 	ldw	r3,44(sp)
   18388:	1805003a 	cmpeq	r2,r3,zero
   1838c:	1000e21e 	bne	r2,zero,18718 <_dtoa_r+0x12e0>
   18390:	d9000317 	ldw	r4,12(sp)
   18394:	0005883a 	mov	r2,zero
   18398:	00cff834 	movhi	r3,16352
   1839c:	200c90fa 	slli	r6,r4,3
   183a0:	010000b4 	movhi	r4,2
   183a4:	213c9f04 	addi	r4,r4,-3460
   183a8:	180b883a 	mov	r5,r3
   183ac:	310d883a 	add	r6,r6,r4
   183b0:	327fff17 	ldw	r9,-4(r6)
   183b4:	323ffe17 	ldw	r8,-8(r6)
   183b8:	1009883a 	mov	r4,r2
   183bc:	480f883a 	mov	r7,r9
   183c0:	400d883a 	mov	r6,r8
   183c4:	001aa100 	call	1aa10 <__divdf3>
   183c8:	180b883a 	mov	r5,r3
   183cc:	b00d883a 	mov	r6,r22
   183d0:	b80f883a 	mov	r7,r23
   183d4:	1009883a 	mov	r4,r2
   183d8:	000ffbc0 	call	ffbc <__subdf3>
   183dc:	a80b883a 	mov	r5,r21
   183e0:	a009883a 	mov	r4,r20
   183e4:	d8c01915 	stw	r3,100(sp)
   183e8:	d8801815 	stw	r2,96(sp)
   183ec:	00105f40 	call	105f4 <__fixdfsi>
   183f0:	1009883a 	mov	r4,r2
   183f4:	1027883a 	mov	r19,r2
   183f8:	00104fc0 	call	104fc <__floatsidf>
   183fc:	a80b883a 	mov	r5,r21
   18400:	a009883a 	mov	r4,r20
   18404:	180f883a 	mov	r7,r3
   18408:	100d883a 	mov	r6,r2
   1840c:	000ffbc0 	call	ffbc <__subdf3>
   18410:	d9801817 	ldw	r6,96(sp)
   18414:	1823883a 	mov	r17,r3
   18418:	d8801415 	stw	r2,80(sp)
   1841c:	302d883a 	mov	r22,r6
   18420:	d9800517 	ldw	r6,20(sp)
   18424:	9cc00c04 	addi	r19,r19,48
   18428:	dc401515 	stw	r17,84(sp)
   1842c:	d8c01917 	ldw	r3,100(sp)
   18430:	34c00005 	stb	r19,0(r6)
   18434:	d8800517 	ldw	r2,20(sp)
   18438:	d9401917 	ldw	r5,100(sp)
   1843c:	d9801417 	ldw	r6,80(sp)
   18440:	b009883a 	mov	r4,r22
   18444:	880f883a 	mov	r7,r17
   18448:	182f883a 	mov	r23,r3
   1844c:	17000044 	addi	fp,r2,1
   18450:	001ad780 	call	1ad78 <__gtdf2>
   18454:	00804e16 	blt	zero,r2,18590 <_dtoa_r+0x1158>
   18458:	d9801417 	ldw	r6,80(sp)
   1845c:	0005883a 	mov	r2,zero
   18460:	00cffc34 	movhi	r3,16368
   18464:	180b883a 	mov	r5,r3
   18468:	880f883a 	mov	r7,r17
   1846c:	1009883a 	mov	r4,r2
   18470:	000ffbc0 	call	ffbc <__subdf3>
   18474:	d9401917 	ldw	r5,100(sp)
   18478:	180f883a 	mov	r7,r3
   1847c:	b009883a 	mov	r4,r22
   18480:	100d883a 	mov	r6,r2
   18484:	001ad780 	call	1ad78 <__gtdf2>
   18488:	00bda216 	blt	zero,r2,17b14 <_dtoa_r+0x6dc>
   1848c:	d8c00317 	ldw	r3,12(sp)
   18490:	00800044 	movi	r2,1
   18494:	10c01216 	blt	r2,r3,184e0 <_dtoa_r+0x10a8>
   18498:	003d4506 	br	179b0 <_dtoa_r+0x578>
   1849c:	d9801417 	ldw	r6,80(sp)
   184a0:	0005883a 	mov	r2,zero
   184a4:	00cffc34 	movhi	r3,16368
   184a8:	180b883a 	mov	r5,r3
   184ac:	880f883a 	mov	r7,r17
   184b0:	1009883a 	mov	r4,r2
   184b4:	000ffbc0 	call	ffbc <__subdf3>
   184b8:	d9c01b17 	ldw	r7,108(sp)
   184bc:	180b883a 	mov	r5,r3
   184c0:	1009883a 	mov	r4,r2
   184c4:	b00d883a 	mov	r6,r22
   184c8:	00104740 	call	10474 <__ltdf2>
   184cc:	103d9116 	blt	r2,zero,17b14 <_dtoa_r+0x6dc>
   184d0:	d9800517 	ldw	r6,20(sp)
   184d4:	d9000317 	ldw	r4,12(sp)
   184d8:	3105883a 	add	r2,r6,r4
   184dc:	e0bd3426 	beq	fp,r2,179b0 <_dtoa_r+0x578>
   184e0:	04500934 	movhi	r17,16420
   184e4:	0021883a 	mov	r16,zero
   184e8:	b80b883a 	mov	r5,r23
   184ec:	b009883a 	mov	r4,r22
   184f0:	800d883a 	mov	r6,r16
   184f4:	880f883a 	mov	r7,r17
   184f8:	00100b00 	call	100b0 <__muldf3>
   184fc:	d9401517 	ldw	r5,84(sp)
   18500:	d9001417 	ldw	r4,80(sp)
   18504:	880f883a 	mov	r7,r17
   18508:	000d883a 	mov	r6,zero
   1850c:	d8801a15 	stw	r2,104(sp)
   18510:	d8c01b15 	stw	r3,108(sp)
   18514:	00100b00 	call	100b0 <__muldf3>
   18518:	180b883a 	mov	r5,r3
   1851c:	1009883a 	mov	r4,r2
   18520:	1823883a 	mov	r17,r3
   18524:	1021883a 	mov	r16,r2
   18528:	00105f40 	call	105f4 <__fixdfsi>
   1852c:	1009883a 	mov	r4,r2
   18530:	102b883a 	mov	r21,r2
   18534:	00104fc0 	call	104fc <__floatsidf>
   18538:	880b883a 	mov	r5,r17
   1853c:	8009883a 	mov	r4,r16
   18540:	180f883a 	mov	r7,r3
   18544:	100d883a 	mov	r6,r2
   18548:	000ffbc0 	call	ffbc <__subdf3>
   1854c:	1021883a 	mov	r16,r2
   18550:	d9001b17 	ldw	r4,108(sp)
   18554:	1823883a 	mov	r17,r3
   18558:	dc001415 	stw	r16,80(sp)
   1855c:	ad400c04 	addi	r21,r21,48
   18560:	dc401515 	stw	r17,84(sp)
   18564:	d8801a17 	ldw	r2,104(sp)
   18568:	e5400005 	stb	r21,0(fp)
   1856c:	202f883a 	mov	r23,r4
   18570:	d9c01b17 	ldw	r7,108(sp)
   18574:	d9001417 	ldw	r4,80(sp)
   18578:	880b883a 	mov	r5,r17
   1857c:	100d883a 	mov	r6,r2
   18580:	102d883a 	mov	r22,r2
   18584:	e7000044 	addi	fp,fp,1
   18588:	00104740 	call	10474 <__ltdf2>
   1858c:	103fc30e 	bge	r2,zero,1849c <_dtoa_r+0x1064>
   18590:	d9000417 	ldw	r4,16(sp)
   18594:	d9000d15 	stw	r4,52(sp)
   18598:	003d7106 	br	17b60 <_dtoa_r+0x728>
   1859c:	d9801717 	ldw	r6,92(sp)
   185a0:	00800084 	movi	r2,2
   185a4:	11bde60e 	bge	r2,r6,17d40 <_dtoa_r+0x908>
   185a8:	203cfb1e 	bne	r4,zero,17998 <_dtoa_r+0x560>
   185ac:	d9001617 	ldw	r4,88(sp)
   185b0:	900b883a 	mov	r5,r18
   185b4:	01800144 	movi	r6,5
   185b8:	000f883a 	mov	r7,zero
   185bc:	00198ec0 	call	198ec <__multadd>
   185c0:	d9000717 	ldw	r4,28(sp)
   185c4:	100b883a 	mov	r5,r2
   185c8:	1025883a 	mov	r18,r2
   185cc:	0018d940 	call	18d94 <__mcmp>
   185d0:	00bcf10e 	bge	zero,r2,17998 <_dtoa_r+0x560>
   185d4:	d8c00d17 	ldw	r3,52(sp)
   185d8:	d9000517 	ldw	r4,20(sp)
   185dc:	d8000615 	stw	zero,24(sp)
   185e0:	18c00044 	addi	r3,r3,1
   185e4:	d8c00d15 	stw	r3,52(sp)
   185e8:	00800c44 	movi	r2,49
   185ec:	27000044 	addi	fp,r4,1
   185f0:	20800005 	stb	r2,0(r4)
   185f4:	003e8906 	br	1801c <_dtoa_r+0xbe4>
   185f8:	d8c00517 	ldw	r3,20(sp)
   185fc:	003bc206 	br	17508 <_dtoa_r+0xd0>
   18600:	018000b4 	movhi	r6,2
   18604:	31bcd104 	addi	r6,r6,-3260
   18608:	30c00917 	ldw	r3,36(r6)
   1860c:	30800817 	ldw	r2,32(r6)
   18610:	d9001217 	ldw	r4,72(sp)
   18614:	d9401317 	ldw	r5,76(sp)
   18618:	180f883a 	mov	r7,r3
   1861c:	100d883a 	mov	r6,r2
   18620:	001aa100 	call	1aa10 <__divdf3>
   18624:	948003cc 	andi	r18,r18,15
   18628:	058000c4 	movi	r22,3
   1862c:	1029883a 	mov	r20,r2
   18630:	182b883a 	mov	r21,r3
   18634:	003c8906 	br	1785c <_dtoa_r+0x424>
   18638:	d9001017 	ldw	r4,64(sp)
   1863c:	d9800917 	ldw	r6,36(sp)
   18640:	0025883a 	mov	r18,zero
   18644:	1105c83a 	sub	r2,r2,r4
   18648:	2089883a 	add	r4,r4,r2
   1864c:	308d883a 	add	r6,r6,r2
   18650:	d9001015 	stw	r4,64(sp)
   18654:	d9800915 	stw	r6,36(sp)
   18658:	003e3206 	br	17f24 <_dtoa_r+0xaec>
   1865c:	28800044 	addi	r2,r5,1
   18660:	27000044 	addi	fp,r4,1
   18664:	20800005 	stb	r2,0(r4)
   18668:	003e6c06 	br	1801c <_dtoa_r+0xbe4>
   1866c:	d8800f17 	ldw	r2,60(sp)
   18670:	00bce016 	blt	zero,r2,179f4 <_dtoa_r+0x5bc>
   18674:	d9800f17 	ldw	r6,60(sp)
   18678:	303cc51e 	bne	r6,zero,17990 <_dtoa_r+0x558>
   1867c:	0005883a 	mov	r2,zero
   18680:	00d00534 	movhi	r3,16404
   18684:	980b883a 	mov	r5,r19
   18688:	180f883a 	mov	r7,r3
   1868c:	9009883a 	mov	r4,r18
   18690:	100d883a 	mov	r6,r2
   18694:	00100b00 	call	100b0 <__muldf3>
   18698:	180b883a 	mov	r5,r3
   1869c:	a80f883a 	mov	r7,r21
   186a0:	1009883a 	mov	r4,r2
   186a4:	a00d883a 	mov	r6,r20
   186a8:	001ae000 	call	1ae00 <__gedf2>
   186ac:	103cb80e 	bge	r2,zero,17990 <_dtoa_r+0x558>
   186b0:	0027883a 	mov	r19,zero
   186b4:	0025883a 	mov	r18,zero
   186b8:	003fc606 	br	185d4 <_dtoa_r+0x119c>
   186bc:	99400117 	ldw	r5,4(r19)
   186c0:	d9001617 	ldw	r4,88(sp)
   186c4:	00191b80 	call	191b8 <_Balloc>
   186c8:	99800417 	ldw	r6,16(r19)
   186cc:	11000304 	addi	r4,r2,12
   186d0:	99400304 	addi	r5,r19,12
   186d4:	318d883a 	add	r6,r6,r6
   186d8:	318d883a 	add	r6,r6,r6
   186dc:	31800204 	addi	r6,r6,8
   186e0:	1023883a 	mov	r17,r2
   186e4:	0013a240 	call	13a24 <memcpy>
   186e8:	d9001617 	ldw	r4,88(sp)
   186ec:	880b883a 	mov	r5,r17
   186f0:	01800044 	movi	r6,1
   186f4:	001957c0 	call	1957c <__lshift>
   186f8:	100b883a 	mov	r5,r2
   186fc:	003d9c06 	br	17d70 <_dtoa_r+0x938>
   18700:	00800e44 	movi	r2,57
   18704:	b8807026 	beq	r23,r2,188c8 <_dtoa_r+0x1490>
   18708:	b8800044 	addi	r2,r23,1
   1870c:	b7000044 	addi	fp,r22,1
   18710:	b0800005 	stb	r2,0(r22)
   18714:	003e4106 	br	1801c <_dtoa_r+0xbe4>
   18718:	d8800317 	ldw	r2,12(sp)
   1871c:	018000b4 	movhi	r6,2
   18720:	31bc9f04 	addi	r6,r6,-3460
   18724:	b009883a 	mov	r4,r22
   18728:	100e90fa 	slli	r7,r2,3
   1872c:	b80b883a 	mov	r5,r23
   18730:	398f883a 	add	r7,r7,r6
   18734:	38bffe17 	ldw	r2,-8(r7)
   18738:	d9800517 	ldw	r6,20(sp)
   1873c:	38ffff17 	ldw	r3,-4(r7)
   18740:	37000044 	addi	fp,r6,1
   18744:	180f883a 	mov	r7,r3
   18748:	100d883a 	mov	r6,r2
   1874c:	00100b00 	call	100b0 <__muldf3>
   18750:	a80b883a 	mov	r5,r21
   18754:	a009883a 	mov	r4,r20
   18758:	182f883a 	mov	r23,r3
   1875c:	102d883a 	mov	r22,r2
   18760:	00105f40 	call	105f4 <__fixdfsi>
   18764:	1009883a 	mov	r4,r2
   18768:	1027883a 	mov	r19,r2
   1876c:	00104fc0 	call	104fc <__floatsidf>
   18770:	a80b883a 	mov	r5,r21
   18774:	a009883a 	mov	r4,r20
   18778:	180f883a 	mov	r7,r3
   1877c:	100d883a 	mov	r6,r2
   18780:	000ffbc0 	call	ffbc <__subdf3>
   18784:	180b883a 	mov	r5,r3
   18788:	d8c00517 	ldw	r3,20(sp)
   1878c:	9cc00c04 	addi	r19,r19,48
   18790:	1009883a 	mov	r4,r2
   18794:	1cc00005 	stb	r19,0(r3)
   18798:	2021883a 	mov	r16,r4
   1879c:	d9000317 	ldw	r4,12(sp)
   187a0:	00800044 	movi	r2,1
   187a4:	2823883a 	mov	r17,r5
   187a8:	20802226 	beq	r4,r2,18834 <_dtoa_r+0x13fc>
   187ac:	1029883a 	mov	r20,r2
   187b0:	0005883a 	mov	r2,zero
   187b4:	00d00934 	movhi	r3,16420
   187b8:	180f883a 	mov	r7,r3
   187bc:	100d883a 	mov	r6,r2
   187c0:	880b883a 	mov	r5,r17
   187c4:	8009883a 	mov	r4,r16
   187c8:	00100b00 	call	100b0 <__muldf3>
   187cc:	180b883a 	mov	r5,r3
   187d0:	1009883a 	mov	r4,r2
   187d4:	1823883a 	mov	r17,r3
   187d8:	1021883a 	mov	r16,r2
   187dc:	00105f40 	call	105f4 <__fixdfsi>
   187e0:	1009883a 	mov	r4,r2
   187e4:	102b883a 	mov	r21,r2
   187e8:	00104fc0 	call	104fc <__floatsidf>
   187ec:	880b883a 	mov	r5,r17
   187f0:	8009883a 	mov	r4,r16
   187f4:	180f883a 	mov	r7,r3
   187f8:	100d883a 	mov	r6,r2
   187fc:	000ffbc0 	call	ffbc <__subdf3>
   18800:	180b883a 	mov	r5,r3
   18804:	d8c00517 	ldw	r3,20(sp)
   18808:	1009883a 	mov	r4,r2
   1880c:	ad400c04 	addi	r21,r21,48
   18810:	1d05883a 	add	r2,r3,r20
   18814:	15400005 	stb	r21,0(r2)
   18818:	2021883a 	mov	r16,r4
   1881c:	d9000317 	ldw	r4,12(sp)
   18820:	a5000044 	addi	r20,r20,1
   18824:	2823883a 	mov	r17,r5
   18828:	a13fe11e 	bne	r20,r4,187b0 <_dtoa_r+0x1378>
   1882c:	e505883a 	add	r2,fp,r20
   18830:	173fffc4 	addi	fp,r2,-1
   18834:	0025883a 	mov	r18,zero
   18838:	04cff834 	movhi	r19,16352
   1883c:	b009883a 	mov	r4,r22
   18840:	b80b883a 	mov	r5,r23
   18844:	900d883a 	mov	r6,r18
   18848:	980f883a 	mov	r7,r19
   1884c:	001003c0 	call	1003c <__adddf3>
   18850:	180b883a 	mov	r5,r3
   18854:	1009883a 	mov	r4,r2
   18858:	800d883a 	mov	r6,r16
   1885c:	880f883a 	mov	r7,r17
   18860:	00104740 	call	10474 <__ltdf2>
   18864:	103cab16 	blt	r2,zero,17b14 <_dtoa_r+0x6dc>
   18868:	0009883a 	mov	r4,zero
   1886c:	980b883a 	mov	r5,r19
   18870:	b80f883a 	mov	r7,r23
   18874:	b00d883a 	mov	r6,r22
   18878:	000ffbc0 	call	ffbc <__subdf3>
   1887c:	180b883a 	mov	r5,r3
   18880:	880f883a 	mov	r7,r17
   18884:	1009883a 	mov	r4,r2
   18888:	800d883a 	mov	r6,r16
   1888c:	001ad780 	call	1ad78 <__gtdf2>
   18890:	00bc470e 	bge	zero,r2,179b0 <_dtoa_r+0x578>
   18894:	00c00c04 	movi	r3,48
   18898:	e73fffc4 	addi	fp,fp,-1
   1889c:	e0800007 	ldb	r2,0(fp)
   188a0:	10fffd26 	beq	r2,r3,18898 <_dtoa_r+0x1460>
   188a4:	d9800417 	ldw	r6,16(sp)
   188a8:	e7000044 	addi	fp,fp,1
   188ac:	d9800d15 	stw	r6,52(sp)
   188b0:	003cab06 	br	17b60 <_dtoa_r+0x728>
   188b4:	d8c00f17 	ldw	r3,60(sp)
   188b8:	d9001117 	ldw	r4,68(sp)
   188bc:	20e1c83a 	sub	r16,r4,r3
   188c0:	0007883a 	mov	r3,zero
   188c4:	003d9b06 	br	17f34 <_dtoa_r+0xafc>
   188c8:	00800e44 	movi	r2,57
   188cc:	b0800005 	stb	r2,0(r22)
   188d0:	b5800044 	addi	r22,r22,1
   188d4:	003dc106 	br	17fdc <_dtoa_r+0xba4>
   188d8:	05800084 	movi	r22,2
   188dc:	003bf706 	br	178bc <_dtoa_r+0x484>
   188e0:	d9000f17 	ldw	r4,60(sp)
   188e4:	013c000e 	bge	zero,r4,178e8 <_dtoa_r+0x4b0>
   188e8:	d9800e17 	ldw	r6,56(sp)
   188ec:	01bc300e 	bge	zero,r6,179b0 <_dtoa_r+0x578>
   188f0:	0005883a 	mov	r2,zero
   188f4:	00d00934 	movhi	r3,16420
   188f8:	a80b883a 	mov	r5,r21
   188fc:	180f883a 	mov	r7,r3
   18900:	a009883a 	mov	r4,r20
   18904:	100d883a 	mov	r6,r2
   18908:	00100b00 	call	100b0 <__muldf3>
   1890c:	b1000044 	addi	r4,r22,1
   18910:	1021883a 	mov	r16,r2
   18914:	1823883a 	mov	r17,r3
   18918:	00104fc0 	call	104fc <__floatsidf>
   1891c:	880b883a 	mov	r5,r17
   18920:	8009883a 	mov	r4,r16
   18924:	180f883a 	mov	r7,r3
   18928:	100d883a 	mov	r6,r2
   1892c:	00100b00 	call	100b0 <__muldf3>
   18930:	0011883a 	mov	r8,zero
   18934:	02500734 	movhi	r9,16412
   18938:	180b883a 	mov	r5,r3
   1893c:	480f883a 	mov	r7,r9
   18940:	1009883a 	mov	r4,r2
   18944:	400d883a 	mov	r6,r8
   18948:	001003c0 	call	1003c <__adddf3>
   1894c:	102d883a 	mov	r22,r2
   18950:	00bf3034 	movhi	r2,64704
   18954:	10ef883a 	add	r23,r2,r3
   18958:	d8800d17 	ldw	r2,52(sp)
   1895c:	d8c00e17 	ldw	r3,56(sp)
   18960:	8029883a 	mov	r20,r16
   18964:	10bfffc4 	addi	r2,r2,-1
   18968:	882b883a 	mov	r21,r17
   1896c:	d8800415 	stw	r2,16(sp)
   18970:	d8c00315 	stw	r3,12(sp)
   18974:	003e8306 	br	18384 <_dtoa_r+0xf4c>
   18978:	d8800117 	ldw	r2,4(sp)
   1897c:	dc001117 	ldw	r16,68(sp)
   18980:	dc801017 	ldw	r18,64(sp)
   18984:	00c00d84 	movi	r3,54
   18988:	1887c83a 	sub	r3,r3,r2
   1898c:	003d6906 	br	17f34 <_dtoa_r+0xafc>
   18990:	01800044 	movi	r6,1
   18994:	3021883a 	mov	r16,r6
   18998:	d9800f15 	stw	r6,60(sp)
   1899c:	d9802615 	stw	r6,152(sp)
   189a0:	d9800e15 	stw	r6,56(sp)
   189a4:	003b9306 	br	177f4 <_dtoa_r+0x3bc>
   189a8:	b021883a 	mov	r16,r22
   189ac:	dd800f15 	stw	r22,60(sp)
   189b0:	003b9006 	br	177f4 <_dtoa_r+0x3bc>
   189b4:	103e221e 	bne	r2,zero,18240 <_dtoa_r+0xe08>
   189b8:	b880004c 	andi	r2,r23,1
   189bc:	1005003a 	cmpeq	r2,r2,zero
   189c0:	103e1f1e 	bne	r2,zero,18240 <_dtoa_r+0xe08>
   189c4:	003e1b06 	br	18234 <_dtoa_r+0xdfc>
   189c8:	d9001617 	ldw	r4,88(sp)
   189cc:	980b883a 	mov	r5,r19
   189d0:	01800284 	movi	r6,10
   189d4:	000f883a 	mov	r7,zero
   189d8:	00198ec0 	call	198ec <__multadd>
   189dc:	d8c00e17 	ldw	r3,56(sp)
   189e0:	1027883a 	mov	r19,r2
   189e4:	d8c00f15 	stw	r3,60(sp)
   189e8:	003cd306 	br	17d38 <_dtoa_r+0x900>

000189ec <__sflags>:
   189ec:	28c00007 	ldb	r3,0(r5)
   189f0:	00801c84 	movi	r2,114
   189f4:	18800926 	beq	r3,r2,18a1c <__sflags+0x30>
   189f8:	00801dc4 	movi	r2,119
   189fc:	18801426 	beq	r3,r2,18a50 <__sflags+0x64>
   18a00:	00801844 	movi	r2,97
   18a04:	18801626 	beq	r3,r2,18a60 <__sflags+0x74>
   18a08:	0007883a 	mov	r3,zero
   18a0c:	00800584 	movi	r2,22
   18a10:	20800015 	stw	r2,0(r4)
   18a14:	1805883a 	mov	r2,r3
   18a18:	f800283a 	ret
   18a1c:	000f883a 	mov	r7,zero
   18a20:	0011883a 	mov	r8,zero
   18a24:	00c00104 	movi	r3,4
   18a28:	28800047 	ldb	r2,1(r5)
   18a2c:	10000426 	beq	r2,zero,18a40 <__sflags+0x54>
   18a30:	01000ac4 	movi	r4,43
   18a34:	11000e26 	beq	r2,r4,18a70 <__sflags+0x84>
   18a38:	28800087 	ldb	r2,2(r5)
   18a3c:	11000c26 	beq	r2,r4,18a70 <__sflags+0x84>
   18a40:	3a04b03a 	or	r2,r7,r8
   18a44:	30800015 	stw	r2,0(r6)
   18a48:	1805883a 	mov	r2,r3
   18a4c:	f800283a 	ret
   18a50:	01c00044 	movi	r7,1
   18a54:	02018004 	movi	r8,1536
   18a58:	00c00204 	movi	r3,8
   18a5c:	003ff206 	br	18a28 <__sflags+0x3c>
   18a60:	01c00044 	movi	r7,1
   18a64:	02008204 	movi	r8,520
   18a68:	00c04204 	movi	r3,264
   18a6c:	003fee06 	br	18a28 <__sflags+0x3c>
   18a70:	00bffcc4 	movi	r2,-13
   18a74:	1884703a 	and	r2,r3,r2
   18a78:	01c00084 	movi	r7,2
   18a7c:	10c00414 	ori	r3,r2,16
   18a80:	3a04b03a 	or	r2,r7,r8
   18a84:	30800015 	stw	r2,0(r6)
   18a88:	003fef06 	br	18a48 <__sflags+0x5c>

00018a8c <_isatty_r>:
   18a8c:	defffd04 	addi	sp,sp,-12
   18a90:	dc000015 	stw	r16,0(sp)
   18a94:	040000b4 	movhi	r16,2
   18a98:	840ab304 	addi	r16,r16,10956
   18a9c:	dc400115 	stw	r17,4(sp)
   18aa0:	80000015 	stw	zero,0(r16)
   18aa4:	2023883a 	mov	r17,r4
   18aa8:	2809883a 	mov	r4,r5
   18aac:	dfc00215 	stw	ra,8(sp)
   18ab0:	001b3580 	call	1b358 <isatty>
   18ab4:	1007883a 	mov	r3,r2
   18ab8:	00bfffc4 	movi	r2,-1
   18abc:	18800626 	beq	r3,r2,18ad8 <_isatty_r+0x4c>
   18ac0:	1805883a 	mov	r2,r3
   18ac4:	dfc00217 	ldw	ra,8(sp)
   18ac8:	dc400117 	ldw	r17,4(sp)
   18acc:	dc000017 	ldw	r16,0(sp)
   18ad0:	dec00304 	addi	sp,sp,12
   18ad4:	f800283a 	ret
   18ad8:	80800017 	ldw	r2,0(r16)
   18adc:	103ff826 	beq	r2,zero,18ac0 <_isatty_r+0x34>
   18ae0:	88800015 	stw	r2,0(r17)
   18ae4:	1805883a 	mov	r2,r3
   18ae8:	dfc00217 	ldw	ra,8(sp)
   18aec:	dc400117 	ldw	r17,4(sp)
   18af0:	dc000017 	ldw	r16,0(sp)
   18af4:	dec00304 	addi	sp,sp,12
   18af8:	f800283a 	ret

00018afc <__locale_charset>:
   18afc:	d0a01017 	ldw	r2,-32704(gp)
   18b00:	f800283a 	ret

00018b04 <_localeconv_r>:
   18b04:	008000b4 	movhi	r2,2
   18b08:	10bc9304 	addi	r2,r2,-3508
   18b0c:	f800283a 	ret

00018b10 <localeconv>:
   18b10:	008000b4 	movhi	r2,2
   18b14:	1083ac04 	addi	r2,r2,3760
   18b18:	11000017 	ldw	r4,0(r2)
   18b1c:	0018b041 	jmpi	18b04 <_localeconv_r>

00018b20 <_setlocale_r>:
   18b20:	defffc04 	addi	sp,sp,-16
   18b24:	00c000b4 	movhi	r3,2
   18b28:	18fbc904 	addi	r3,r3,-4316
   18b2c:	dc800215 	stw	r18,8(sp)
   18b30:	dc400115 	stw	r17,4(sp)
   18b34:	dc000015 	stw	r16,0(sp)
   18b38:	2023883a 	mov	r17,r4
   18b3c:	2825883a 	mov	r18,r5
   18b40:	dfc00315 	stw	ra,12(sp)
   18b44:	3021883a 	mov	r16,r6
   18b48:	3009883a 	mov	r4,r6
   18b4c:	180b883a 	mov	r5,r3
   18b50:	30000926 	beq	r6,zero,18b78 <_setlocale_r+0x58>
   18b54:	0019d140 	call	19d14 <strcmp>
   18b58:	8009883a 	mov	r4,r16
   18b5c:	014000b4 	movhi	r5,2
   18b60:	297bda04 	addi	r5,r5,-4248
   18b64:	10000b1e 	bne	r2,zero,18b94 <_setlocale_r+0x74>
   18b68:	8c000d15 	stw	r16,52(r17)
   18b6c:	8c800c15 	stw	r18,48(r17)
   18b70:	00c000b4 	movhi	r3,2
   18b74:	18fbc904 	addi	r3,r3,-4316
   18b78:	1805883a 	mov	r2,r3
   18b7c:	dfc00317 	ldw	ra,12(sp)
   18b80:	dc800217 	ldw	r18,8(sp)
   18b84:	dc400117 	ldw	r17,4(sp)
   18b88:	dc000017 	ldw	r16,0(sp)
   18b8c:	dec00404 	addi	sp,sp,16
   18b90:	f800283a 	ret
   18b94:	0019d140 	call	19d14 <strcmp>
   18b98:	0007883a 	mov	r3,zero
   18b9c:	103ff226 	beq	r2,zero,18b68 <_setlocale_r+0x48>
   18ba0:	003ff506 	br	18b78 <_setlocale_r+0x58>

00018ba4 <setlocale>:
   18ba4:	018000b4 	movhi	r6,2
   18ba8:	3183ac04 	addi	r6,r6,3760
   18bac:	2007883a 	mov	r3,r4
   18bb0:	31000017 	ldw	r4,0(r6)
   18bb4:	280d883a 	mov	r6,r5
   18bb8:	180b883a 	mov	r5,r3
   18bbc:	0018b201 	jmpi	18b20 <_setlocale_r>

00018bc0 <_lseek_r>:
   18bc0:	defffd04 	addi	sp,sp,-12
   18bc4:	dc000015 	stw	r16,0(sp)
   18bc8:	040000b4 	movhi	r16,2
   18bcc:	840ab304 	addi	r16,r16,10956
   18bd0:	dc400115 	stw	r17,4(sp)
   18bd4:	80000015 	stw	zero,0(r16)
   18bd8:	2023883a 	mov	r17,r4
   18bdc:	2809883a 	mov	r4,r5
   18be0:	300b883a 	mov	r5,r6
   18be4:	380d883a 	mov	r6,r7
   18be8:	dfc00215 	stw	ra,8(sp)
   18bec:	001b7040 	call	1b704 <lseek>
   18bf0:	1007883a 	mov	r3,r2
   18bf4:	00bfffc4 	movi	r2,-1
   18bf8:	18800626 	beq	r3,r2,18c14 <_lseek_r+0x54>
   18bfc:	1805883a 	mov	r2,r3
   18c00:	dfc00217 	ldw	ra,8(sp)
   18c04:	dc400117 	ldw	r17,4(sp)
   18c08:	dc000017 	ldw	r16,0(sp)
   18c0c:	dec00304 	addi	sp,sp,12
   18c10:	f800283a 	ret
   18c14:	80800017 	ldw	r2,0(r16)
   18c18:	103ff826 	beq	r2,zero,18bfc <_lseek_r+0x3c>
   18c1c:	88800015 	stw	r2,0(r17)
   18c20:	1805883a 	mov	r2,r3
   18c24:	dfc00217 	ldw	ra,8(sp)
   18c28:	dc400117 	ldw	r17,4(sp)
   18c2c:	dc000017 	ldw	r16,0(sp)
   18c30:	dec00304 	addi	sp,sp,12
   18c34:	f800283a 	ret

00018c38 <_Bfree>:
   18c38:	28000826 	beq	r5,zero,18c5c <_Bfree+0x24>
   18c3c:	28800117 	ldw	r2,4(r5)
   18c40:	21001317 	ldw	r4,76(r4)
   18c44:	1085883a 	add	r2,r2,r2
   18c48:	1085883a 	add	r2,r2,r2
   18c4c:	1105883a 	add	r2,r2,r4
   18c50:	10c00017 	ldw	r3,0(r2)
   18c54:	28c00015 	stw	r3,0(r5)
   18c58:	11400015 	stw	r5,0(r2)
   18c5c:	f800283a 	ret

00018c60 <__hi0bits>:
   18c60:	20bfffec 	andhi	r2,r4,65535
   18c64:	10001426 	beq	r2,zero,18cb8 <__hi0bits+0x58>
   18c68:	0007883a 	mov	r3,zero
   18c6c:	20bfc02c 	andhi	r2,r4,65280
   18c70:	1000021e 	bne	r2,zero,18c7c <__hi0bits+0x1c>
   18c74:	2008923a 	slli	r4,r4,8
   18c78:	18c00204 	addi	r3,r3,8
   18c7c:	20bc002c 	andhi	r2,r4,61440
   18c80:	1000021e 	bne	r2,zero,18c8c <__hi0bits+0x2c>
   18c84:	2008913a 	slli	r4,r4,4
   18c88:	18c00104 	addi	r3,r3,4
   18c8c:	20b0002c 	andhi	r2,r4,49152
   18c90:	1000031e 	bne	r2,zero,18ca0 <__hi0bits+0x40>
   18c94:	2105883a 	add	r2,r4,r4
   18c98:	18c00084 	addi	r3,r3,2
   18c9c:	1089883a 	add	r4,r2,r2
   18ca0:	20000316 	blt	r4,zero,18cb0 <__hi0bits+0x50>
   18ca4:	2090002c 	andhi	r2,r4,16384
   18ca8:	10000626 	beq	r2,zero,18cc4 <__hi0bits+0x64>
   18cac:	18c00044 	addi	r3,r3,1
   18cb0:	1805883a 	mov	r2,r3
   18cb4:	f800283a 	ret
   18cb8:	2008943a 	slli	r4,r4,16
   18cbc:	00c00404 	movi	r3,16
   18cc0:	003fea06 	br	18c6c <__hi0bits+0xc>
   18cc4:	00c00804 	movi	r3,32
   18cc8:	1805883a 	mov	r2,r3
   18ccc:	f800283a 	ret

00018cd0 <__lo0bits>:
   18cd0:	20c00017 	ldw	r3,0(r4)
   18cd4:	188001cc 	andi	r2,r3,7
   18cd8:	10000a26 	beq	r2,zero,18d04 <__lo0bits+0x34>
   18cdc:	1880004c 	andi	r2,r3,1
   18ce0:	1005003a 	cmpeq	r2,r2,zero
   18ce4:	10002126 	beq	r2,zero,18d6c <__lo0bits+0x9c>
   18ce8:	1880008c 	andi	r2,r3,2
   18cec:	1000251e 	bne	r2,zero,18d84 <__lo0bits+0xb4>
   18cf0:	1804d0ba 	srli	r2,r3,2
   18cf4:	01400084 	movi	r5,2
   18cf8:	20800015 	stw	r2,0(r4)
   18cfc:	2805883a 	mov	r2,r5
   18d00:	f800283a 	ret
   18d04:	18bfffcc 	andi	r2,r3,65535
   18d08:	10001526 	beq	r2,zero,18d60 <__lo0bits+0x90>
   18d0c:	000b883a 	mov	r5,zero
   18d10:	18803fcc 	andi	r2,r3,255
   18d14:	1000021e 	bne	r2,zero,18d20 <__lo0bits+0x50>
   18d18:	1806d23a 	srli	r3,r3,8
   18d1c:	29400204 	addi	r5,r5,8
   18d20:	188003cc 	andi	r2,r3,15
   18d24:	1000021e 	bne	r2,zero,18d30 <__lo0bits+0x60>
   18d28:	1806d13a 	srli	r3,r3,4
   18d2c:	29400104 	addi	r5,r5,4
   18d30:	188000cc 	andi	r2,r3,3
   18d34:	1000021e 	bne	r2,zero,18d40 <__lo0bits+0x70>
   18d38:	1806d0ba 	srli	r3,r3,2
   18d3c:	29400084 	addi	r5,r5,2
   18d40:	1880004c 	andi	r2,r3,1
   18d44:	1000031e 	bne	r2,zero,18d54 <__lo0bits+0x84>
   18d48:	1806d07a 	srli	r3,r3,1
   18d4c:	18000a26 	beq	r3,zero,18d78 <__lo0bits+0xa8>
   18d50:	29400044 	addi	r5,r5,1
   18d54:	2805883a 	mov	r2,r5
   18d58:	20c00015 	stw	r3,0(r4)
   18d5c:	f800283a 	ret
   18d60:	1806d43a 	srli	r3,r3,16
   18d64:	01400404 	movi	r5,16
   18d68:	003fe906 	br	18d10 <__lo0bits+0x40>
   18d6c:	000b883a 	mov	r5,zero
   18d70:	2805883a 	mov	r2,r5
   18d74:	f800283a 	ret
   18d78:	01400804 	movi	r5,32
   18d7c:	2805883a 	mov	r2,r5
   18d80:	f800283a 	ret
   18d84:	1804d07a 	srli	r2,r3,1
   18d88:	01400044 	movi	r5,1
   18d8c:	20800015 	stw	r2,0(r4)
   18d90:	003fda06 	br	18cfc <__lo0bits+0x2c>

00018d94 <__mcmp>:
   18d94:	20800417 	ldw	r2,16(r4)
   18d98:	28c00417 	ldw	r3,16(r5)
   18d9c:	10cfc83a 	sub	r7,r2,r3
   18da0:	38000c1e 	bne	r7,zero,18dd4 <__mcmp+0x40>
   18da4:	18c5883a 	add	r2,r3,r3
   18da8:	1085883a 	add	r2,r2,r2
   18dac:	10c00504 	addi	r3,r2,20
   18db0:	21000504 	addi	r4,r4,20
   18db4:	28cb883a 	add	r5,r5,r3
   18db8:	2085883a 	add	r2,r4,r2
   18dbc:	10bfff04 	addi	r2,r2,-4
   18dc0:	297fff04 	addi	r5,r5,-4
   18dc4:	11800017 	ldw	r6,0(r2)
   18dc8:	28c00017 	ldw	r3,0(r5)
   18dcc:	30c0031e 	bne	r6,r3,18ddc <__mcmp+0x48>
   18dd0:	20bffa36 	bltu	r4,r2,18dbc <__mcmp+0x28>
   18dd4:	3805883a 	mov	r2,r7
   18dd8:	f800283a 	ret
   18ddc:	30c00336 	bltu	r6,r3,18dec <__mcmp+0x58>
   18de0:	01c00044 	movi	r7,1
   18de4:	3805883a 	mov	r2,r7
   18de8:	f800283a 	ret
   18dec:	01ffffc4 	movi	r7,-1
   18df0:	003ff806 	br	18dd4 <__mcmp+0x40>

00018df4 <__ulp>:
   18df4:	295ffc2c 	andhi	r5,r5,32752
   18df8:	013f3034 	movhi	r4,64704
   18dfc:	290b883a 	add	r5,r5,r4
   18e00:	0145c83a 	sub	r2,zero,r5
   18e04:	1007d53a 	srai	r3,r2,20
   18e08:	000d883a 	mov	r6,zero
   18e0c:	0140040e 	bge	zero,r5,18e20 <__ulp+0x2c>
   18e10:	280f883a 	mov	r7,r5
   18e14:	3807883a 	mov	r3,r7
   18e18:	3005883a 	mov	r2,r6
   18e1c:	f800283a 	ret
   18e20:	008004c4 	movi	r2,19
   18e24:	193ffb04 	addi	r4,r3,-20
   18e28:	10c00c0e 	bge	r2,r3,18e5c <__ulp+0x68>
   18e2c:	008007c4 	movi	r2,31
   18e30:	1107c83a 	sub	r3,r2,r4
   18e34:	00800784 	movi	r2,30
   18e38:	01400044 	movi	r5,1
   18e3c:	11000216 	blt	r2,r4,18e48 <__ulp+0x54>
   18e40:	00800044 	movi	r2,1
   18e44:	10ca983a 	sll	r5,r2,r3
   18e48:	000f883a 	mov	r7,zero
   18e4c:	280d883a 	mov	r6,r5
   18e50:	3807883a 	mov	r3,r7
   18e54:	3005883a 	mov	r2,r6
   18e58:	f800283a 	ret
   18e5c:	00800234 	movhi	r2,8
   18e60:	10cfd83a 	sra	r7,r2,r3
   18e64:	000d883a 	mov	r6,zero
   18e68:	3005883a 	mov	r2,r6
   18e6c:	3807883a 	mov	r3,r7
   18e70:	f800283a 	ret

00018e74 <__b2d>:
   18e74:	20800417 	ldw	r2,16(r4)
   18e78:	defff904 	addi	sp,sp,-28
   18e7c:	dd000415 	stw	r20,16(sp)
   18e80:	1085883a 	add	r2,r2,r2
   18e84:	25000504 	addi	r20,r4,20
   18e88:	1085883a 	add	r2,r2,r2
   18e8c:	dc000015 	stw	r16,0(sp)
   18e90:	a0a1883a 	add	r16,r20,r2
   18e94:	dd400515 	stw	r21,20(sp)
   18e98:	857fff17 	ldw	r21,-4(r16)
   18e9c:	dc400115 	stw	r17,4(sp)
   18ea0:	dfc00615 	stw	ra,24(sp)
   18ea4:	a809883a 	mov	r4,r21
   18ea8:	2823883a 	mov	r17,r5
   18eac:	dcc00315 	stw	r19,12(sp)
   18eb0:	dc800215 	stw	r18,8(sp)
   18eb4:	0018c600 	call	18c60 <__hi0bits>
   18eb8:	100b883a 	mov	r5,r2
   18ebc:	00800804 	movi	r2,32
   18ec0:	1145c83a 	sub	r2,r2,r5
   18ec4:	88800015 	stw	r2,0(r17)
   18ec8:	00800284 	movi	r2,10
   18ecc:	80ffff04 	addi	r3,r16,-4
   18ed0:	11401416 	blt	r2,r5,18f24 <__b2d+0xb0>
   18ed4:	008002c4 	movi	r2,11
   18ed8:	1149c83a 	sub	r4,r2,r5
   18edc:	a0c02736 	bltu	r20,r3,18f7c <__b2d+0x108>
   18ee0:	000d883a 	mov	r6,zero
   18ee4:	28800544 	addi	r2,r5,21
   18ee8:	a906d83a 	srl	r3,r21,r4
   18eec:	a884983a 	sll	r2,r21,r2
   18ef0:	1ccffc34 	orhi	r19,r3,16368
   18ef4:	11a4b03a 	or	r18,r2,r6
   18ef8:	9005883a 	mov	r2,r18
   18efc:	9807883a 	mov	r3,r19
   18f00:	dfc00617 	ldw	ra,24(sp)
   18f04:	dd400517 	ldw	r21,20(sp)
   18f08:	dd000417 	ldw	r20,16(sp)
   18f0c:	dcc00317 	ldw	r19,12(sp)
   18f10:	dc800217 	ldw	r18,8(sp)
   18f14:	dc400117 	ldw	r17,4(sp)
   18f18:	dc000017 	ldw	r16,0(sp)
   18f1c:	dec00704 	addi	sp,sp,28
   18f20:	f800283a 	ret
   18f24:	a0c00e36 	bltu	r20,r3,18f60 <__b2d+0xec>
   18f28:	293ffd44 	addi	r4,r5,-11
   18f2c:	000d883a 	mov	r6,zero
   18f30:	20000f26 	beq	r4,zero,18f70 <__b2d+0xfc>
   18f34:	00800804 	movi	r2,32
   18f38:	110bc83a 	sub	r5,r2,r4
   18f3c:	a0c01236 	bltu	r20,r3,18f88 <__b2d+0x114>
   18f40:	000f883a 	mov	r7,zero
   18f44:	a904983a 	sll	r2,r21,r4
   18f48:	3146d83a 	srl	r3,r6,r5
   18f4c:	3108983a 	sll	r4,r6,r4
   18f50:	108ffc34 	orhi	r2,r2,16368
   18f54:	18a6b03a 	or	r19,r3,r2
   18f58:	3924b03a 	or	r18,r7,r4
   18f5c:	003fe606 	br	18ef8 <__b2d+0x84>
   18f60:	293ffd44 	addi	r4,r5,-11
   18f64:	81bffe17 	ldw	r6,-8(r16)
   18f68:	80fffe04 	addi	r3,r16,-8
   18f6c:	203ff11e 	bne	r4,zero,18f34 <__b2d+0xc0>
   18f70:	accffc34 	orhi	r19,r21,16368
   18f74:	3025883a 	mov	r18,r6
   18f78:	003fdf06 	br	18ef8 <__b2d+0x84>
   18f7c:	18bfff17 	ldw	r2,-4(r3)
   18f80:	110cd83a 	srl	r6,r2,r4
   18f84:	003fd706 	br	18ee4 <__b2d+0x70>
   18f88:	18bfff17 	ldw	r2,-4(r3)
   18f8c:	114ed83a 	srl	r7,r2,r5
   18f90:	003fec06 	br	18f44 <__b2d+0xd0>

00018f94 <__ratio>:
   18f94:	defff904 	addi	sp,sp,-28
   18f98:	dc400215 	stw	r17,8(sp)
   18f9c:	2823883a 	mov	r17,r5
   18fa0:	d80b883a 	mov	r5,sp
   18fa4:	dfc00615 	stw	ra,24(sp)
   18fa8:	dd000515 	stw	r20,20(sp)
   18fac:	dcc00415 	stw	r19,16(sp)
   18fb0:	dc800315 	stw	r18,12(sp)
   18fb4:	2025883a 	mov	r18,r4
   18fb8:	0018e740 	call	18e74 <__b2d>
   18fbc:	8809883a 	mov	r4,r17
   18fc0:	d9400104 	addi	r5,sp,4
   18fc4:	1027883a 	mov	r19,r2
   18fc8:	1829883a 	mov	r20,r3
   18fcc:	0018e740 	call	18e74 <__b2d>
   18fd0:	89000417 	ldw	r4,16(r17)
   18fd4:	91c00417 	ldw	r7,16(r18)
   18fd8:	d9800117 	ldw	r6,4(sp)
   18fdc:	180b883a 	mov	r5,r3
   18fe0:	390fc83a 	sub	r7,r7,r4
   18fe4:	1009883a 	mov	r4,r2
   18fe8:	d8800017 	ldw	r2,0(sp)
   18fec:	380e917a 	slli	r7,r7,5
   18ff0:	2011883a 	mov	r8,r4
   18ff4:	1185c83a 	sub	r2,r2,r6
   18ff8:	11c5883a 	add	r2,r2,r7
   18ffc:	1006953a 	slli	r3,r2,20
   19000:	2813883a 	mov	r9,r5
   19004:	00800d0e 	bge	zero,r2,1903c <__ratio+0xa8>
   19008:	1d29883a 	add	r20,r3,r20
   1900c:	a00b883a 	mov	r5,r20
   19010:	480f883a 	mov	r7,r9
   19014:	9809883a 	mov	r4,r19
   19018:	400d883a 	mov	r6,r8
   1901c:	001aa100 	call	1aa10 <__divdf3>
   19020:	dfc00617 	ldw	ra,24(sp)
   19024:	dd000517 	ldw	r20,20(sp)
   19028:	dcc00417 	ldw	r19,16(sp)
   1902c:	dc800317 	ldw	r18,12(sp)
   19030:	dc400217 	ldw	r17,8(sp)
   19034:	dec00704 	addi	sp,sp,28
   19038:	f800283a 	ret
   1903c:	28d3c83a 	sub	r9,r5,r3
   19040:	003ff206 	br	1900c <__ratio+0x78>

00019044 <_mprec_log10>:
   19044:	defffe04 	addi	sp,sp,-8
   19048:	008005c4 	movi	r2,23
   1904c:	dc000015 	stw	r16,0(sp)
   19050:	dfc00115 	stw	ra,4(sp)
   19054:	2021883a 	mov	r16,r4
   19058:	11000c16 	blt	r2,r4,1908c <_mprec_log10+0x48>
   1905c:	200490fa 	slli	r2,r4,3
   19060:	00c000b4 	movhi	r3,2
   19064:	18fc9f04 	addi	r3,r3,-3460
   19068:	10c5883a 	add	r2,r2,r3
   1906c:	12400117 	ldw	r9,4(r2)
   19070:	12000017 	ldw	r8,0(r2)
   19074:	4807883a 	mov	r3,r9
   19078:	4005883a 	mov	r2,r8
   1907c:	dfc00117 	ldw	ra,4(sp)
   19080:	dc000017 	ldw	r16,0(sp)
   19084:	dec00204 	addi	sp,sp,8
   19088:	f800283a 	ret
   1908c:	0011883a 	mov	r8,zero
   19090:	024ffc34 	movhi	r9,16368
   19094:	0005883a 	mov	r2,zero
   19098:	00d00934 	movhi	r3,16420
   1909c:	480b883a 	mov	r5,r9
   190a0:	4009883a 	mov	r4,r8
   190a4:	180f883a 	mov	r7,r3
   190a8:	100d883a 	mov	r6,r2
   190ac:	00100b00 	call	100b0 <__muldf3>
   190b0:	843fffc4 	addi	r16,r16,-1
   190b4:	1011883a 	mov	r8,r2
   190b8:	1813883a 	mov	r9,r3
   190bc:	803ff51e 	bne	r16,zero,19094 <_mprec_log10+0x50>
   190c0:	4005883a 	mov	r2,r8
   190c4:	4807883a 	mov	r3,r9
   190c8:	dfc00117 	ldw	ra,4(sp)
   190cc:	dc000017 	ldw	r16,0(sp)
   190d0:	dec00204 	addi	sp,sp,8
   190d4:	f800283a 	ret

000190d8 <__copybits>:
   190d8:	297fffc4 	addi	r5,r5,-1
   190dc:	30800417 	ldw	r2,16(r6)
   190e0:	280bd17a 	srai	r5,r5,5
   190e4:	31800504 	addi	r6,r6,20
   190e8:	1085883a 	add	r2,r2,r2
   190ec:	294b883a 	add	r5,r5,r5
   190f0:	294b883a 	add	r5,r5,r5
   190f4:	1085883a 	add	r2,r2,r2
   190f8:	290b883a 	add	r5,r5,r4
   190fc:	3087883a 	add	r3,r6,r2
   19100:	29400104 	addi	r5,r5,4
   19104:	30c0052e 	bgeu	r6,r3,1911c <__copybits+0x44>
   19108:	30800017 	ldw	r2,0(r6)
   1910c:	31800104 	addi	r6,r6,4
   19110:	20800015 	stw	r2,0(r4)
   19114:	21000104 	addi	r4,r4,4
   19118:	30fffb36 	bltu	r6,r3,19108 <__copybits+0x30>
   1911c:	2140032e 	bgeu	r4,r5,1912c <__copybits+0x54>
   19120:	20000015 	stw	zero,0(r4)
   19124:	21000104 	addi	r4,r4,4
   19128:	217ffd36 	bltu	r4,r5,19120 <__copybits+0x48>
   1912c:	f800283a 	ret

00019130 <__any_on>:
   19130:	20800417 	ldw	r2,16(r4)
   19134:	2807d17a 	srai	r3,r5,5
   19138:	21000504 	addi	r4,r4,20
   1913c:	10c00d0e 	bge	r2,r3,19174 <__any_on+0x44>
   19140:	1085883a 	add	r2,r2,r2
   19144:	1085883a 	add	r2,r2,r2
   19148:	208d883a 	add	r6,r4,r2
   1914c:	2180182e 	bgeu	r4,r6,191b0 <__any_on+0x80>
   19150:	30bfff17 	ldw	r2,-4(r6)
   19154:	30ffff04 	addi	r3,r6,-4
   19158:	1000041e 	bne	r2,zero,1916c <__any_on+0x3c>
   1915c:	20c0142e 	bgeu	r4,r3,191b0 <__any_on+0x80>
   19160:	18ffff04 	addi	r3,r3,-4
   19164:	18800017 	ldw	r2,0(r3)
   19168:	103ffc26 	beq	r2,zero,1915c <__any_on+0x2c>
   1916c:	00800044 	movi	r2,1
   19170:	f800283a 	ret
   19174:	18800a0e 	bge	r3,r2,191a0 <__any_on+0x70>
   19178:	294007cc 	andi	r5,r5,31
   1917c:	28000826 	beq	r5,zero,191a0 <__any_on+0x70>
   19180:	18c5883a 	add	r2,r3,r3
   19184:	1085883a 	add	r2,r2,r2
   19188:	208d883a 	add	r6,r4,r2
   1918c:	30c00017 	ldw	r3,0(r6)
   19190:	1944d83a 	srl	r2,r3,r5
   19194:	1144983a 	sll	r2,r2,r5
   19198:	18bff41e 	bne	r3,r2,1916c <__any_on+0x3c>
   1919c:	003feb06 	br	1914c <__any_on+0x1c>
   191a0:	18c5883a 	add	r2,r3,r3
   191a4:	1085883a 	add	r2,r2,r2
   191a8:	208d883a 	add	r6,r4,r2
   191ac:	003fe706 	br	1914c <__any_on+0x1c>
   191b0:	0005883a 	mov	r2,zero
   191b4:	f800283a 	ret

000191b8 <_Balloc>:
   191b8:	20c01317 	ldw	r3,76(r4)
   191bc:	defffb04 	addi	sp,sp,-20
   191c0:	dcc00315 	stw	r19,12(sp)
   191c4:	dc800215 	stw	r18,8(sp)
   191c8:	dfc00415 	stw	ra,16(sp)
   191cc:	2825883a 	mov	r18,r5
   191d0:	dc400115 	stw	r17,4(sp)
   191d4:	dc000015 	stw	r16,0(sp)
   191d8:	2027883a 	mov	r19,r4
   191dc:	01800404 	movi	r6,16
   191e0:	01400104 	movi	r5,4
   191e4:	18001726 	beq	r3,zero,19244 <_Balloc+0x8c>
   191e8:	01400044 	movi	r5,1
   191ec:	9485883a 	add	r2,r18,r18
   191f0:	2ca2983a 	sll	r17,r5,r18
   191f4:	1085883a 	add	r2,r2,r2
   191f8:	10c7883a 	add	r3,r2,r3
   191fc:	1c000017 	ldw	r16,0(r3)
   19200:	8c4d883a 	add	r6,r17,r17
   19204:	318d883a 	add	r6,r6,r6
   19208:	9809883a 	mov	r4,r19
   1920c:	31800504 	addi	r6,r6,20
   19210:	80001226 	beq	r16,zero,1925c <_Balloc+0xa4>
   19214:	80800017 	ldw	r2,0(r16)
   19218:	18800015 	stw	r2,0(r3)
   1921c:	80000415 	stw	zero,16(r16)
   19220:	80000315 	stw	zero,12(r16)
   19224:	8005883a 	mov	r2,r16
   19228:	dfc00417 	ldw	ra,16(sp)
   1922c:	dcc00317 	ldw	r19,12(sp)
   19230:	dc800217 	ldw	r18,8(sp)
   19234:	dc400117 	ldw	r17,4(sp)
   19238:	dc000017 	ldw	r16,0(sp)
   1923c:	dec00504 	addi	sp,sp,20
   19240:	f800283a 	ret
   19244:	0019dd00 	call	19dd0 <_calloc_r>
   19248:	1007883a 	mov	r3,r2
   1924c:	0021883a 	mov	r16,zero
   19250:	98801315 	stw	r2,76(r19)
   19254:	103fe41e 	bne	r2,zero,191e8 <_Balloc+0x30>
   19258:	003ff206 	br	19224 <_Balloc+0x6c>
   1925c:	0019dd00 	call	19dd0 <_calloc_r>
   19260:	103ff026 	beq	r2,zero,19224 <_Balloc+0x6c>
   19264:	1021883a 	mov	r16,r2
   19268:	14800115 	stw	r18,4(r2)
   1926c:	14400215 	stw	r17,8(r2)
   19270:	003fea06 	br	1921c <_Balloc+0x64>

00019274 <__d2b>:
   19274:	defff504 	addi	sp,sp,-44
   19278:	dcc00515 	stw	r19,20(sp)
   1927c:	04c00044 	movi	r19,1
   19280:	dc000215 	stw	r16,8(sp)
   19284:	2821883a 	mov	r16,r5
   19288:	980b883a 	mov	r5,r19
   1928c:	ddc00915 	stw	r23,36(sp)
   19290:	dd800815 	stw	r22,32(sp)
   19294:	dd400715 	stw	r21,28(sp)
   19298:	dd000615 	stw	r20,24(sp)
   1929c:	dc800415 	stw	r18,16(sp)
   192a0:	dc400315 	stw	r17,12(sp)
   192a4:	dfc00a15 	stw	ra,40(sp)
   192a8:	3023883a 	mov	r17,r6
   192ac:	382d883a 	mov	r22,r7
   192b0:	ddc00b17 	ldw	r23,44(sp)
   192b4:	00191b80 	call	191b8 <_Balloc>
   192b8:	1025883a 	mov	r18,r2
   192bc:	00a00034 	movhi	r2,32768
   192c0:	10bfffc4 	addi	r2,r2,-1
   192c4:	8888703a 	and	r4,r17,r2
   192c8:	202ad53a 	srli	r21,r4,20
   192cc:	00800434 	movhi	r2,16
   192d0:	10bfffc4 	addi	r2,r2,-1
   192d4:	8886703a 	and	r3,r17,r2
   192d8:	a829003a 	cmpeq	r20,r21,zero
   192dc:	800b883a 	mov	r5,r16
   192e0:	d8c00115 	stw	r3,4(sp)
   192e4:	94000504 	addi	r16,r18,20
   192e8:	a000021e 	bne	r20,zero,192f4 <__d2b+0x80>
   192ec:	18c00434 	orhi	r3,r3,16
   192f0:	d8c00115 	stw	r3,4(sp)
   192f4:	28002726 	beq	r5,zero,19394 <__d2b+0x120>
   192f8:	d809883a 	mov	r4,sp
   192fc:	d9400015 	stw	r5,0(sp)
   19300:	0018cd00 	call	18cd0 <__lo0bits>
   19304:	100d883a 	mov	r6,r2
   19308:	10003526 	beq	r2,zero,193e0 <__d2b+0x16c>
   1930c:	d8c00117 	ldw	r3,4(sp)
   19310:	00800804 	movi	r2,32
   19314:	1185c83a 	sub	r2,r2,r6
   19318:	d9000017 	ldw	r4,0(sp)
   1931c:	1886983a 	sll	r3,r3,r2
   19320:	1906b03a 	or	r3,r3,r4
   19324:	90c00515 	stw	r3,20(r18)
   19328:	d8c00117 	ldw	r3,4(sp)
   1932c:	1986d83a 	srl	r3,r3,r6
   19330:	d8c00115 	stw	r3,4(sp)
   19334:	180b003a 	cmpeq	r5,r3,zero
   19338:	00800084 	movi	r2,2
   1933c:	114bc83a 	sub	r5,r2,r5
   19340:	80c00115 	stw	r3,4(r16)
   19344:	91400415 	stw	r5,16(r18)
   19348:	a0001a1e 	bne	r20,zero,193b4 <__d2b+0x140>
   1934c:	3545883a 	add	r2,r6,r21
   19350:	10bef344 	addi	r2,r2,-1075
   19354:	00c00d44 	movi	r3,53
   19358:	b0800015 	stw	r2,0(r22)
   1935c:	1987c83a 	sub	r3,r3,r6
   19360:	b8c00015 	stw	r3,0(r23)
   19364:	9005883a 	mov	r2,r18
   19368:	dfc00a17 	ldw	ra,40(sp)
   1936c:	ddc00917 	ldw	r23,36(sp)
   19370:	dd800817 	ldw	r22,32(sp)
   19374:	dd400717 	ldw	r21,28(sp)
   19378:	dd000617 	ldw	r20,24(sp)
   1937c:	dcc00517 	ldw	r19,20(sp)
   19380:	dc800417 	ldw	r18,16(sp)
   19384:	dc400317 	ldw	r17,12(sp)
   19388:	dc000217 	ldw	r16,8(sp)
   1938c:	dec00b04 	addi	sp,sp,44
   19390:	f800283a 	ret
   19394:	d9000104 	addi	r4,sp,4
   19398:	0018cd00 	call	18cd0 <__lo0bits>
   1939c:	11800804 	addi	r6,r2,32
   193a0:	d8800117 	ldw	r2,4(sp)
   193a4:	94c00415 	stw	r19,16(r18)
   193a8:	980b883a 	mov	r5,r19
   193ac:	90800515 	stw	r2,20(r18)
   193b0:	a03fe626 	beq	r20,zero,1934c <__d2b+0xd8>
   193b4:	2945883a 	add	r2,r5,r5
   193b8:	1085883a 	add	r2,r2,r2
   193bc:	1405883a 	add	r2,r2,r16
   193c0:	113fff17 	ldw	r4,-4(r2)
   193c4:	30fef384 	addi	r3,r6,-1074
   193c8:	2820917a 	slli	r16,r5,5
   193cc:	b0c00015 	stw	r3,0(r22)
   193d0:	0018c600 	call	18c60 <__hi0bits>
   193d4:	80a1c83a 	sub	r16,r16,r2
   193d8:	bc000015 	stw	r16,0(r23)
   193dc:	003fe106 	br	19364 <__d2b+0xf0>
   193e0:	d8800017 	ldw	r2,0(sp)
   193e4:	90800515 	stw	r2,20(r18)
   193e8:	d8c00117 	ldw	r3,4(sp)
   193ec:	003fd106 	br	19334 <__d2b+0xc0>

000193f0 <__mdiff>:
   193f0:	defffb04 	addi	sp,sp,-20
   193f4:	dc000015 	stw	r16,0(sp)
   193f8:	2821883a 	mov	r16,r5
   193fc:	dc800215 	stw	r18,8(sp)
   19400:	300b883a 	mov	r5,r6
   19404:	2025883a 	mov	r18,r4
   19408:	8009883a 	mov	r4,r16
   1940c:	dc400115 	stw	r17,4(sp)
   19410:	dfc00415 	stw	ra,16(sp)
   19414:	dcc00315 	stw	r19,12(sp)
   19418:	3023883a 	mov	r17,r6
   1941c:	0018d940 	call	18d94 <__mcmp>
   19420:	10004226 	beq	r2,zero,1952c <__mdiff+0x13c>
   19424:	10005016 	blt	r2,zero,19568 <__mdiff+0x178>
   19428:	0027883a 	mov	r19,zero
   1942c:	81400117 	ldw	r5,4(r16)
   19430:	9009883a 	mov	r4,r18
   19434:	00191b80 	call	191b8 <_Balloc>
   19438:	1019883a 	mov	r12,r2
   1943c:	82800417 	ldw	r10,16(r16)
   19440:	88800417 	ldw	r2,16(r17)
   19444:	81800504 	addi	r6,r16,20
   19448:	5287883a 	add	r3,r10,r10
   1944c:	1085883a 	add	r2,r2,r2
   19450:	18c7883a 	add	r3,r3,r3
   19454:	1085883a 	add	r2,r2,r2
   19458:	8a000504 	addi	r8,r17,20
   1945c:	64c00315 	stw	r19,12(r12)
   19460:	30db883a 	add	r13,r6,r3
   19464:	4097883a 	add	r11,r8,r2
   19468:	61c00504 	addi	r7,r12,20
   1946c:	0013883a 	mov	r9,zero
   19470:	31000017 	ldw	r4,0(r6)
   19474:	41400017 	ldw	r5,0(r8)
   19478:	42000104 	addi	r8,r8,4
   1947c:	20bfffcc 	andi	r2,r4,65535
   19480:	28ffffcc 	andi	r3,r5,65535
   19484:	10c5c83a 	sub	r2,r2,r3
   19488:	1245883a 	add	r2,r2,r9
   1948c:	2008d43a 	srli	r4,r4,16
   19490:	280ad43a 	srli	r5,r5,16
   19494:	1007d43a 	srai	r3,r2,16
   19498:	3880000d 	sth	r2,0(r7)
   1949c:	2149c83a 	sub	r4,r4,r5
   194a0:	20c9883a 	add	r4,r4,r3
   194a4:	3900008d 	sth	r4,2(r7)
   194a8:	31800104 	addi	r6,r6,4
   194ac:	39c00104 	addi	r7,r7,4
   194b0:	2013d43a 	srai	r9,r4,16
   194b4:	42ffee36 	bltu	r8,r11,19470 <__mdiff+0x80>
   194b8:	33400c2e 	bgeu	r6,r13,194ec <__mdiff+0xfc>
   194bc:	30800017 	ldw	r2,0(r6)
   194c0:	31800104 	addi	r6,r6,4
   194c4:	10ffffcc 	andi	r3,r2,65535
   194c8:	1a47883a 	add	r3,r3,r9
   194cc:	1004d43a 	srli	r2,r2,16
   194d0:	1809d43a 	srai	r4,r3,16
   194d4:	38c0000d 	sth	r3,0(r7)
   194d8:	1105883a 	add	r2,r2,r4
   194dc:	3880008d 	sth	r2,2(r7)
   194e0:	1013d43a 	srai	r9,r2,16
   194e4:	39c00104 	addi	r7,r7,4
   194e8:	337ff436 	bltu	r6,r13,194bc <__mdiff+0xcc>
   194ec:	38bfff17 	ldw	r2,-4(r7)
   194f0:	38ffff04 	addi	r3,r7,-4
   194f4:	1000041e 	bne	r2,zero,19508 <__mdiff+0x118>
   194f8:	18ffff04 	addi	r3,r3,-4
   194fc:	18800017 	ldw	r2,0(r3)
   19500:	52bfffc4 	addi	r10,r10,-1
   19504:	103ffc26 	beq	r2,zero,194f8 <__mdiff+0x108>
   19508:	6005883a 	mov	r2,r12
   1950c:	62800415 	stw	r10,16(r12)
   19510:	dfc00417 	ldw	ra,16(sp)
   19514:	dcc00317 	ldw	r19,12(sp)
   19518:	dc800217 	ldw	r18,8(sp)
   1951c:	dc400117 	ldw	r17,4(sp)
   19520:	dc000017 	ldw	r16,0(sp)
   19524:	dec00504 	addi	sp,sp,20
   19528:	f800283a 	ret
   1952c:	9009883a 	mov	r4,r18
   19530:	000b883a 	mov	r5,zero
   19534:	00191b80 	call	191b8 <_Balloc>
   19538:	1019883a 	mov	r12,r2
   1953c:	00800044 	movi	r2,1
   19540:	60800415 	stw	r2,16(r12)
   19544:	6005883a 	mov	r2,r12
   19548:	60000515 	stw	zero,20(r12)
   1954c:	dfc00417 	ldw	ra,16(sp)
   19550:	dcc00317 	ldw	r19,12(sp)
   19554:	dc800217 	ldw	r18,8(sp)
   19558:	dc400117 	ldw	r17,4(sp)
   1955c:	dc000017 	ldw	r16,0(sp)
   19560:	dec00504 	addi	sp,sp,20
   19564:	f800283a 	ret
   19568:	880d883a 	mov	r6,r17
   1956c:	04c00044 	movi	r19,1
   19570:	8023883a 	mov	r17,r16
   19574:	3021883a 	mov	r16,r6
   19578:	003fac06 	br	1942c <__mdiff+0x3c>

0001957c <__lshift>:
   1957c:	defff904 	addi	sp,sp,-28
   19580:	28800417 	ldw	r2,16(r5)
   19584:	dc000015 	stw	r16,0(sp)
   19588:	3021d17a 	srai	r16,r6,5
   1958c:	28c00217 	ldw	r3,8(r5)
   19590:	10800044 	addi	r2,r2,1
   19594:	dc400115 	stw	r17,4(sp)
   19598:	80a3883a 	add	r17,r16,r2
   1959c:	dd400515 	stw	r21,20(sp)
   195a0:	dd000415 	stw	r20,16(sp)
   195a4:	dc800215 	stw	r18,8(sp)
   195a8:	dfc00615 	stw	ra,24(sp)
   195ac:	2825883a 	mov	r18,r5
   195b0:	dcc00315 	stw	r19,12(sp)
   195b4:	3029883a 	mov	r20,r6
   195b8:	202b883a 	mov	r21,r4
   195bc:	29400117 	ldw	r5,4(r5)
   195c0:	1c40030e 	bge	r3,r17,195d0 <__lshift+0x54>
   195c4:	18c7883a 	add	r3,r3,r3
   195c8:	29400044 	addi	r5,r5,1
   195cc:	1c7ffd16 	blt	r3,r17,195c4 <__lshift+0x48>
   195d0:	a809883a 	mov	r4,r21
   195d4:	00191b80 	call	191b8 <_Balloc>
   195d8:	1027883a 	mov	r19,r2
   195dc:	11400504 	addi	r5,r2,20
   195e0:	0400090e 	bge	zero,r16,19608 <__lshift+0x8c>
   195e4:	2805883a 	mov	r2,r5
   195e8:	0007883a 	mov	r3,zero
   195ec:	18c00044 	addi	r3,r3,1
   195f0:	10000015 	stw	zero,0(r2)
   195f4:	10800104 	addi	r2,r2,4
   195f8:	80fffc1e 	bne	r16,r3,195ec <__lshift+0x70>
   195fc:	8405883a 	add	r2,r16,r16
   19600:	1085883a 	add	r2,r2,r2
   19604:	288b883a 	add	r5,r5,r2
   19608:	90800417 	ldw	r2,16(r18)
   1960c:	91000504 	addi	r4,r18,20
   19610:	a18007cc 	andi	r6,r20,31
   19614:	1085883a 	add	r2,r2,r2
   19618:	1085883a 	add	r2,r2,r2
   1961c:	208f883a 	add	r7,r4,r2
   19620:	30001e26 	beq	r6,zero,1969c <__lshift+0x120>
   19624:	00800804 	movi	r2,32
   19628:	1191c83a 	sub	r8,r2,r6
   1962c:	0007883a 	mov	r3,zero
   19630:	20800017 	ldw	r2,0(r4)
   19634:	1184983a 	sll	r2,r2,r6
   19638:	1884b03a 	or	r2,r3,r2
   1963c:	28800015 	stw	r2,0(r5)
   19640:	20c00017 	ldw	r3,0(r4)
   19644:	21000104 	addi	r4,r4,4
   19648:	29400104 	addi	r5,r5,4
   1964c:	1a06d83a 	srl	r3,r3,r8
   19650:	21fff736 	bltu	r4,r7,19630 <__lshift+0xb4>
   19654:	28c00015 	stw	r3,0(r5)
   19658:	18000126 	beq	r3,zero,19660 <__lshift+0xe4>
   1965c:	8c400044 	addi	r17,r17,1
   19660:	88bfffc4 	addi	r2,r17,-1
   19664:	98800415 	stw	r2,16(r19)
   19668:	a809883a 	mov	r4,r21
   1966c:	900b883a 	mov	r5,r18
   19670:	0018c380 	call	18c38 <_Bfree>
   19674:	9805883a 	mov	r2,r19
   19678:	dfc00617 	ldw	ra,24(sp)
   1967c:	dd400517 	ldw	r21,20(sp)
   19680:	dd000417 	ldw	r20,16(sp)
   19684:	dcc00317 	ldw	r19,12(sp)
   19688:	dc800217 	ldw	r18,8(sp)
   1968c:	dc400117 	ldw	r17,4(sp)
   19690:	dc000017 	ldw	r16,0(sp)
   19694:	dec00704 	addi	sp,sp,28
   19698:	f800283a 	ret
   1969c:	20800017 	ldw	r2,0(r4)
   196a0:	21000104 	addi	r4,r4,4
   196a4:	28800015 	stw	r2,0(r5)
   196a8:	29400104 	addi	r5,r5,4
   196ac:	21ffec2e 	bgeu	r4,r7,19660 <__lshift+0xe4>
   196b0:	20800017 	ldw	r2,0(r4)
   196b4:	21000104 	addi	r4,r4,4
   196b8:	28800015 	stw	r2,0(r5)
   196bc:	29400104 	addi	r5,r5,4
   196c0:	21fff636 	bltu	r4,r7,1969c <__lshift+0x120>
   196c4:	003fe606 	br	19660 <__lshift+0xe4>

000196c8 <__multiply>:
   196c8:	defff904 	addi	sp,sp,-28
   196cc:	dcc00315 	stw	r19,12(sp)
   196d0:	dc800215 	stw	r18,8(sp)
   196d4:	2cc00417 	ldw	r19,16(r5)
   196d8:	34800417 	ldw	r18,16(r6)
   196dc:	dd000415 	stw	r20,16(sp)
   196e0:	dc400115 	stw	r17,4(sp)
   196e4:	dfc00615 	stw	ra,24(sp)
   196e8:	dd400515 	stw	r21,20(sp)
   196ec:	dc000015 	stw	r16,0(sp)
   196f0:	2823883a 	mov	r17,r5
   196f4:	3029883a 	mov	r20,r6
   196f8:	9c80040e 	bge	r19,r18,1970c <__multiply+0x44>
   196fc:	9027883a 	mov	r19,r18
   19700:	2c800417 	ldw	r18,16(r5)
   19704:	2829883a 	mov	r20,r5
   19708:	3023883a 	mov	r17,r6
   1970c:	88800217 	ldw	r2,8(r17)
   19710:	9ca1883a 	add	r16,r19,r18
   19714:	89400117 	ldw	r5,4(r17)
   19718:	1400010e 	bge	r2,r16,19720 <__multiply+0x58>
   1971c:	29400044 	addi	r5,r5,1
   19720:	00191b80 	call	191b8 <_Balloc>
   19724:	102b883a 	mov	r21,r2
   19728:	8405883a 	add	r2,r16,r16
   1972c:	1085883a 	add	r2,r2,r2
   19730:	a9000504 	addi	r4,r21,20
   19734:	209d883a 	add	r14,r4,r2
   19738:	2380042e 	bgeu	r4,r14,1974c <__multiply+0x84>
   1973c:	2005883a 	mov	r2,r4
   19740:	10000015 	stw	zero,0(r2)
   19744:	10800104 	addi	r2,r2,4
   19748:	13bffd36 	bltu	r2,r14,19740 <__multiply+0x78>
   1974c:	9485883a 	add	r2,r18,r18
   19750:	9cc7883a 	add	r3,r19,r19
   19754:	a1800504 	addi	r6,r20,20
   19758:	1085883a 	add	r2,r2,r2
   1975c:	8b400504 	addi	r13,r17,20
   19760:	18c7883a 	add	r3,r3,r3
   19764:	309f883a 	add	r15,r6,r2
   19768:	68d7883a 	add	r11,r13,r3
   1976c:	33c03b2e 	bgeu	r6,r15,1985c <__multiply+0x194>
   19770:	2019883a 	mov	r12,r4
   19774:	30800017 	ldw	r2,0(r6)
   19778:	127fffcc 	andi	r9,r2,65535
   1977c:	48001826 	beq	r9,zero,197e0 <__multiply+0x118>
   19780:	6811883a 	mov	r8,r13
   19784:	600f883a 	mov	r7,r12
   19788:	0015883a 	mov	r10,zero
   1978c:	40c00017 	ldw	r3,0(r8)
   19790:	39400017 	ldw	r5,0(r7)
   19794:	42000104 	addi	r8,r8,4
   19798:	193fffcc 	andi	r4,r3,65535
   1979c:	4909383a 	mul	r4,r9,r4
   197a0:	1806d43a 	srli	r3,r3,16
   197a4:	28bfffcc 	andi	r2,r5,65535
   197a8:	5085883a 	add	r2,r10,r2
   197ac:	2089883a 	add	r4,r4,r2
   197b0:	48c7383a 	mul	r3,r9,r3
   197b4:	280ad43a 	srli	r5,r5,16
   197b8:	2004d43a 	srli	r2,r4,16
   197bc:	3900000d 	sth	r4,0(r7)
   197c0:	1947883a 	add	r3,r3,r5
   197c4:	10c5883a 	add	r2,r2,r3
   197c8:	3880008d 	sth	r2,2(r7)
   197cc:	1014d43a 	srli	r10,r2,16
   197d0:	39c00104 	addi	r7,r7,4
   197d4:	42ffed36 	bltu	r8,r11,1978c <__multiply+0xc4>
   197d8:	3a800015 	stw	r10,0(r7)
   197dc:	30800017 	ldw	r2,0(r6)
   197e0:	1012d43a 	srli	r9,r2,16
   197e4:	48001926 	beq	r9,zero,1984c <__multiply+0x184>
   197e8:	60800017 	ldw	r2,0(r12)
   197ec:	6811883a 	mov	r8,r13
   197f0:	600f883a 	mov	r7,r12
   197f4:	0015883a 	mov	r10,zero
   197f8:	100b883a 	mov	r5,r2
   197fc:	41000017 	ldw	r4,0(r8)
   19800:	2806d43a 	srli	r3,r5,16
   19804:	3880000d 	sth	r2,0(r7)
   19808:	20bfffcc 	andi	r2,r4,65535
   1980c:	4885383a 	mul	r2,r9,r2
   19810:	50c7883a 	add	r3,r10,r3
   19814:	2008d43a 	srli	r4,r4,16
   19818:	10c5883a 	add	r2,r2,r3
   1981c:	3880008d 	sth	r2,2(r7)
   19820:	39c00104 	addi	r7,r7,4
   19824:	39400017 	ldw	r5,0(r7)
   19828:	4909383a 	mul	r4,r9,r4
   1982c:	1004d43a 	srli	r2,r2,16
   19830:	28ffffcc 	andi	r3,r5,65535
   19834:	20c9883a 	add	r4,r4,r3
   19838:	1105883a 	add	r2,r2,r4
   1983c:	42000104 	addi	r8,r8,4
   19840:	1014d43a 	srli	r10,r2,16
   19844:	42ffed36 	bltu	r8,r11,197fc <__multiply+0x134>
   19848:	38800015 	stw	r2,0(r7)
   1984c:	31800104 	addi	r6,r6,4
   19850:	33c0022e 	bgeu	r6,r15,1985c <__multiply+0x194>
   19854:	63000104 	addi	r12,r12,4
   19858:	003fc606 	br	19774 <__multiply+0xac>
   1985c:	0400090e 	bge	zero,r16,19884 <__multiply+0x1bc>
   19860:	70bfff17 	ldw	r2,-4(r14)
   19864:	70ffff04 	addi	r3,r14,-4
   19868:	10000326 	beq	r2,zero,19878 <__multiply+0x1b0>
   1986c:	00000506 	br	19884 <__multiply+0x1bc>
   19870:	18800017 	ldw	r2,0(r3)
   19874:	1000031e 	bne	r2,zero,19884 <__multiply+0x1bc>
   19878:	843fffc4 	addi	r16,r16,-1
   1987c:	18ffff04 	addi	r3,r3,-4
   19880:	803ffb1e 	bne	r16,zero,19870 <__multiply+0x1a8>
   19884:	a805883a 	mov	r2,r21
   19888:	ac000415 	stw	r16,16(r21)
   1988c:	dfc00617 	ldw	ra,24(sp)
   19890:	dd400517 	ldw	r21,20(sp)
   19894:	dd000417 	ldw	r20,16(sp)
   19898:	dcc00317 	ldw	r19,12(sp)
   1989c:	dc800217 	ldw	r18,8(sp)
   198a0:	dc400117 	ldw	r17,4(sp)
   198a4:	dc000017 	ldw	r16,0(sp)
   198a8:	dec00704 	addi	sp,sp,28
   198ac:	f800283a 	ret

000198b0 <__i2b>:
   198b0:	defffd04 	addi	sp,sp,-12
   198b4:	dc000015 	stw	r16,0(sp)
   198b8:	04000044 	movi	r16,1
   198bc:	dc800115 	stw	r18,4(sp)
   198c0:	2825883a 	mov	r18,r5
   198c4:	800b883a 	mov	r5,r16
   198c8:	dfc00215 	stw	ra,8(sp)
   198cc:	00191b80 	call	191b8 <_Balloc>
   198d0:	14000415 	stw	r16,16(r2)
   198d4:	14800515 	stw	r18,20(r2)
   198d8:	dfc00217 	ldw	ra,8(sp)
   198dc:	dc800117 	ldw	r18,4(sp)
   198e0:	dc000017 	ldw	r16,0(sp)
   198e4:	dec00304 	addi	sp,sp,12
   198e8:	f800283a 	ret

000198ec <__multadd>:
   198ec:	defffa04 	addi	sp,sp,-24
   198f0:	dc800215 	stw	r18,8(sp)
   198f4:	2c800417 	ldw	r18,16(r5)
   198f8:	dd000415 	stw	r20,16(sp)
   198fc:	dcc00315 	stw	r19,12(sp)
   19900:	dc000015 	stw	r16,0(sp)
   19904:	dfc00515 	stw	ra,20(sp)
   19908:	3821883a 	mov	r16,r7
   1990c:	dc400115 	stw	r17,4(sp)
   19910:	2827883a 	mov	r19,r5
   19914:	2029883a 	mov	r20,r4
   19918:	2a000504 	addi	r8,r5,20
   1991c:	000f883a 	mov	r7,zero
   19920:	40800017 	ldw	r2,0(r8)
   19924:	39c00044 	addi	r7,r7,1
   19928:	10ffffcc 	andi	r3,r2,65535
   1992c:	1987383a 	mul	r3,r3,r6
   19930:	1004d43a 	srli	r2,r2,16
   19934:	1c07883a 	add	r3,r3,r16
   19938:	180ad43a 	srli	r5,r3,16
   1993c:	1185383a 	mul	r2,r2,r6
   19940:	18ffffcc 	andi	r3,r3,65535
   19944:	1145883a 	add	r2,r2,r5
   19948:	1008943a 	slli	r4,r2,16
   1994c:	1020d43a 	srli	r16,r2,16
   19950:	20c9883a 	add	r4,r4,r3
   19954:	41000015 	stw	r4,0(r8)
   19958:	42000104 	addi	r8,r8,4
   1995c:	3cbff016 	blt	r7,r18,19920 <__multadd+0x34>
   19960:	80000826 	beq	r16,zero,19984 <__multadd+0x98>
   19964:	98800217 	ldw	r2,8(r19)
   19968:	90800f0e 	bge	r18,r2,199a8 <__multadd+0xbc>
   1996c:	9485883a 	add	r2,r18,r18
   19970:	1085883a 	add	r2,r2,r2
   19974:	14c5883a 	add	r2,r2,r19
   19978:	90c00044 	addi	r3,r18,1
   1997c:	14000515 	stw	r16,20(r2)
   19980:	98c00415 	stw	r3,16(r19)
   19984:	9805883a 	mov	r2,r19
   19988:	dfc00517 	ldw	ra,20(sp)
   1998c:	dd000417 	ldw	r20,16(sp)
   19990:	dcc00317 	ldw	r19,12(sp)
   19994:	dc800217 	ldw	r18,8(sp)
   19998:	dc400117 	ldw	r17,4(sp)
   1999c:	dc000017 	ldw	r16,0(sp)
   199a0:	dec00604 	addi	sp,sp,24
   199a4:	f800283a 	ret
   199a8:	99400117 	ldw	r5,4(r19)
   199ac:	a009883a 	mov	r4,r20
   199b0:	29400044 	addi	r5,r5,1
   199b4:	00191b80 	call	191b8 <_Balloc>
   199b8:	99800417 	ldw	r6,16(r19)
   199bc:	99400304 	addi	r5,r19,12
   199c0:	11000304 	addi	r4,r2,12
   199c4:	318d883a 	add	r6,r6,r6
   199c8:	318d883a 	add	r6,r6,r6
   199cc:	31800204 	addi	r6,r6,8
   199d0:	1023883a 	mov	r17,r2
   199d4:	0013a240 	call	13a24 <memcpy>
   199d8:	980b883a 	mov	r5,r19
   199dc:	a009883a 	mov	r4,r20
   199e0:	0018c380 	call	18c38 <_Bfree>
   199e4:	8827883a 	mov	r19,r17
   199e8:	003fe006 	br	1996c <__multadd+0x80>

000199ec <__pow5mult>:
   199ec:	defffa04 	addi	sp,sp,-24
   199f0:	308000cc 	andi	r2,r6,3
   199f4:	dd000415 	stw	r20,16(sp)
   199f8:	dcc00315 	stw	r19,12(sp)
   199fc:	dc000015 	stw	r16,0(sp)
   19a00:	dfc00515 	stw	ra,20(sp)
   19a04:	dc800215 	stw	r18,8(sp)
   19a08:	dc400115 	stw	r17,4(sp)
   19a0c:	3021883a 	mov	r16,r6
   19a10:	2027883a 	mov	r19,r4
   19a14:	2829883a 	mov	r20,r5
   19a18:	10002b1e 	bne	r2,zero,19ac8 <__pow5mult+0xdc>
   19a1c:	8025d0ba 	srai	r18,r16,2
   19a20:	90001b26 	beq	r18,zero,19a90 <__pow5mult+0xa4>
   19a24:	9c001217 	ldw	r16,72(r19)
   19a28:	8000081e 	bne	r16,zero,19a4c <__pow5mult+0x60>
   19a2c:	00003006 	br	19af0 <__pow5mult+0x104>
   19a30:	800b883a 	mov	r5,r16
   19a34:	800d883a 	mov	r6,r16
   19a38:	9809883a 	mov	r4,r19
   19a3c:	90001426 	beq	r18,zero,19a90 <__pow5mult+0xa4>
   19a40:	80800017 	ldw	r2,0(r16)
   19a44:	10001b26 	beq	r2,zero,19ab4 <__pow5mult+0xc8>
   19a48:	1021883a 	mov	r16,r2
   19a4c:	9080004c 	andi	r2,r18,1
   19a50:	1005003a 	cmpeq	r2,r2,zero
   19a54:	9025d07a 	srai	r18,r18,1
   19a58:	800d883a 	mov	r6,r16
   19a5c:	9809883a 	mov	r4,r19
   19a60:	a00b883a 	mov	r5,r20
   19a64:	103ff21e 	bne	r2,zero,19a30 <__pow5mult+0x44>
   19a68:	00196c80 	call	196c8 <__multiply>
   19a6c:	a00b883a 	mov	r5,r20
   19a70:	9809883a 	mov	r4,r19
   19a74:	1023883a 	mov	r17,r2
   19a78:	0018c380 	call	18c38 <_Bfree>
   19a7c:	8829883a 	mov	r20,r17
   19a80:	800b883a 	mov	r5,r16
   19a84:	800d883a 	mov	r6,r16
   19a88:	9809883a 	mov	r4,r19
   19a8c:	903fec1e 	bne	r18,zero,19a40 <__pow5mult+0x54>
   19a90:	a005883a 	mov	r2,r20
   19a94:	dfc00517 	ldw	ra,20(sp)
   19a98:	dd000417 	ldw	r20,16(sp)
   19a9c:	dcc00317 	ldw	r19,12(sp)
   19aa0:	dc800217 	ldw	r18,8(sp)
   19aa4:	dc400117 	ldw	r17,4(sp)
   19aa8:	dc000017 	ldw	r16,0(sp)
   19aac:	dec00604 	addi	sp,sp,24
   19ab0:	f800283a 	ret
   19ab4:	00196c80 	call	196c8 <__multiply>
   19ab8:	80800015 	stw	r2,0(r16)
   19abc:	1021883a 	mov	r16,r2
   19ac0:	10000015 	stw	zero,0(r2)
   19ac4:	003fe106 	br	19a4c <__pow5mult+0x60>
   19ac8:	1085883a 	add	r2,r2,r2
   19acc:	00c000b4 	movhi	r3,2
   19ad0:	18fce504 	addi	r3,r3,-3180
   19ad4:	1085883a 	add	r2,r2,r2
   19ad8:	10c5883a 	add	r2,r2,r3
   19adc:	11bfff17 	ldw	r6,-4(r2)
   19ae0:	000f883a 	mov	r7,zero
   19ae4:	00198ec0 	call	198ec <__multadd>
   19ae8:	1029883a 	mov	r20,r2
   19aec:	003fcb06 	br	19a1c <__pow5mult+0x30>
   19af0:	9809883a 	mov	r4,r19
   19af4:	01409c44 	movi	r5,625
   19af8:	00198b00 	call	198b0 <__i2b>
   19afc:	98801215 	stw	r2,72(r19)
   19b00:	1021883a 	mov	r16,r2
   19b04:	10000015 	stw	zero,0(r2)
   19b08:	003fd006 	br	19a4c <__pow5mult+0x60>

00019b0c <__s2b>:
   19b0c:	defff904 	addi	sp,sp,-28
   19b10:	dcc00315 	stw	r19,12(sp)
   19b14:	dc800215 	stw	r18,8(sp)
   19b18:	2827883a 	mov	r19,r5
   19b1c:	2025883a 	mov	r18,r4
   19b20:	01400244 	movi	r5,9
   19b24:	39000204 	addi	r4,r7,8
   19b28:	dd000415 	stw	r20,16(sp)
   19b2c:	dc400115 	stw	r17,4(sp)
   19b30:	dfc00615 	stw	ra,24(sp)
   19b34:	dd400515 	stw	r21,20(sp)
   19b38:	dc000015 	stw	r16,0(sp)
   19b3c:	3829883a 	mov	r20,r7
   19b40:	3023883a 	mov	r17,r6
   19b44:	00107800 	call	10780 <__divsi3>
   19b48:	00c00044 	movi	r3,1
   19b4c:	1880350e 	bge	r3,r2,19c24 <__s2b+0x118>
   19b50:	000b883a 	mov	r5,zero
   19b54:	18c7883a 	add	r3,r3,r3
   19b58:	29400044 	addi	r5,r5,1
   19b5c:	18bffd16 	blt	r3,r2,19b54 <__s2b+0x48>
   19b60:	9009883a 	mov	r4,r18
   19b64:	00191b80 	call	191b8 <_Balloc>
   19b68:	1011883a 	mov	r8,r2
   19b6c:	d8800717 	ldw	r2,28(sp)
   19b70:	00c00044 	movi	r3,1
   19b74:	01800244 	movi	r6,9
   19b78:	40800515 	stw	r2,20(r8)
   19b7c:	40c00415 	stw	r3,16(r8)
   19b80:	3440260e 	bge	r6,r17,19c1c <__s2b+0x110>
   19b84:	3021883a 	mov	r16,r6
   19b88:	99ab883a 	add	r21,r19,r6
   19b8c:	9c05883a 	add	r2,r19,r16
   19b90:	11c00007 	ldb	r7,0(r2)
   19b94:	400b883a 	mov	r5,r8
   19b98:	9009883a 	mov	r4,r18
   19b9c:	39fff404 	addi	r7,r7,-48
   19ba0:	01800284 	movi	r6,10
   19ba4:	00198ec0 	call	198ec <__multadd>
   19ba8:	84000044 	addi	r16,r16,1
   19bac:	1011883a 	mov	r8,r2
   19bb0:	8c3ff61e 	bne	r17,r16,19b8c <__s2b+0x80>
   19bb4:	ac45883a 	add	r2,r21,r17
   19bb8:	117ffe04 	addi	r5,r2,-8
   19bbc:	880d883a 	mov	r6,r17
   19bc0:	35000c0e 	bge	r6,r20,19bf4 <__s2b+0xe8>
   19bc4:	a185c83a 	sub	r2,r20,r6
   19bc8:	2821883a 	mov	r16,r5
   19bcc:	28a3883a 	add	r17,r5,r2
   19bd0:	81c00007 	ldb	r7,0(r16)
   19bd4:	400b883a 	mov	r5,r8
   19bd8:	9009883a 	mov	r4,r18
   19bdc:	39fff404 	addi	r7,r7,-48
   19be0:	01800284 	movi	r6,10
   19be4:	00198ec0 	call	198ec <__multadd>
   19be8:	84000044 	addi	r16,r16,1
   19bec:	1011883a 	mov	r8,r2
   19bf0:	847ff71e 	bne	r16,r17,19bd0 <__s2b+0xc4>
   19bf4:	4005883a 	mov	r2,r8
   19bf8:	dfc00617 	ldw	ra,24(sp)
   19bfc:	dd400517 	ldw	r21,20(sp)
   19c00:	dd000417 	ldw	r20,16(sp)
   19c04:	dcc00317 	ldw	r19,12(sp)
   19c08:	dc800217 	ldw	r18,8(sp)
   19c0c:	dc400117 	ldw	r17,4(sp)
   19c10:	dc000017 	ldw	r16,0(sp)
   19c14:	dec00704 	addi	sp,sp,28
   19c18:	f800283a 	ret
   19c1c:	99400284 	addi	r5,r19,10
   19c20:	003fe706 	br	19bc0 <__s2b+0xb4>
   19c24:	000b883a 	mov	r5,zero
   19c28:	003fcd06 	br	19b60 <__s2b+0x54>

00019c2c <_read_r>:
   19c2c:	defffd04 	addi	sp,sp,-12
   19c30:	dc000015 	stw	r16,0(sp)
   19c34:	040000b4 	movhi	r16,2
   19c38:	840ab304 	addi	r16,r16,10956
   19c3c:	dc400115 	stw	r17,4(sp)
   19c40:	80000015 	stw	zero,0(r16)
   19c44:	2023883a 	mov	r17,r4
   19c48:	2809883a 	mov	r4,r5
   19c4c:	300b883a 	mov	r5,r6
   19c50:	380d883a 	mov	r6,r7
   19c54:	dfc00215 	stw	ra,8(sp)
   19c58:	001bbc40 	call	1bbc4 <read>
   19c5c:	1007883a 	mov	r3,r2
   19c60:	00bfffc4 	movi	r2,-1
   19c64:	18800626 	beq	r3,r2,19c80 <_read_r+0x54>
   19c68:	1805883a 	mov	r2,r3
   19c6c:	dfc00217 	ldw	ra,8(sp)
   19c70:	dc400117 	ldw	r17,4(sp)
   19c74:	dc000017 	ldw	r16,0(sp)
   19c78:	dec00304 	addi	sp,sp,12
   19c7c:	f800283a 	ret
   19c80:	80800017 	ldw	r2,0(r16)
   19c84:	103ff826 	beq	r2,zero,19c68 <_read_r+0x3c>
   19c88:	88800015 	stw	r2,0(r17)
   19c8c:	1805883a 	mov	r2,r3
   19c90:	dfc00217 	ldw	ra,8(sp)
   19c94:	dc400117 	ldw	r17,4(sp)
   19c98:	dc000017 	ldw	r16,0(sp)
   19c9c:	dec00304 	addi	sp,sp,12
   19ca0:	f800283a 	ret

00019ca4 <__isinfd>:
   19ca4:	200d883a 	mov	r6,r4
   19ca8:	0109c83a 	sub	r4,zero,r4
   19cac:	2188b03a 	or	r4,r4,r6
   19cb0:	2008d7fa 	srli	r4,r4,31
   19cb4:	00a00034 	movhi	r2,32768
   19cb8:	10bfffc4 	addi	r2,r2,-1
   19cbc:	1144703a 	and	r2,r2,r5
   19cc0:	2088b03a 	or	r4,r4,r2
   19cc4:	009ffc34 	movhi	r2,32752
   19cc8:	1105c83a 	sub	r2,r2,r4
   19ccc:	0087c83a 	sub	r3,zero,r2
   19cd0:	10c4b03a 	or	r2,r2,r3
   19cd4:	1004d7fa 	srli	r2,r2,31
   19cd8:	00c00044 	movi	r3,1
   19cdc:	1885c83a 	sub	r2,r3,r2
   19ce0:	f800283a 	ret

00019ce4 <__isnand>:
   19ce4:	200d883a 	mov	r6,r4
   19ce8:	0109c83a 	sub	r4,zero,r4
   19cec:	2188b03a 	or	r4,r4,r6
   19cf0:	2008d7fa 	srli	r4,r4,31
   19cf4:	00a00034 	movhi	r2,32768
   19cf8:	10bfffc4 	addi	r2,r2,-1
   19cfc:	1144703a 	and	r2,r2,r5
   19d00:	2088b03a 	or	r4,r4,r2
   19d04:	009ffc34 	movhi	r2,32752
   19d08:	1105c83a 	sub	r2,r2,r4
   19d0c:	1004d7fa 	srli	r2,r2,31
   19d10:	f800283a 	ret

00019d14 <strcmp>:
   19d14:	2144b03a 	or	r2,r4,r5
   19d18:	108000cc 	andi	r2,r2,3
   19d1c:	10001d1e 	bne	r2,zero,19d94 <strcmp+0x80>
   19d20:	200f883a 	mov	r7,r4
   19d24:	28800017 	ldw	r2,0(r5)
   19d28:	21000017 	ldw	r4,0(r4)
   19d2c:	280d883a 	mov	r6,r5
   19d30:	2080161e 	bne	r4,r2,19d8c <strcmp+0x78>
   19d34:	023fbff4 	movhi	r8,65279
   19d38:	423fbfc4 	addi	r8,r8,-257
   19d3c:	2207883a 	add	r3,r4,r8
   19d40:	01602074 	movhi	r5,32897
   19d44:	29602004 	addi	r5,r5,-32640
   19d48:	1946703a 	and	r3,r3,r5
   19d4c:	0104303a 	nor	r2,zero,r4
   19d50:	10c4703a 	and	r2,r2,r3
   19d54:	10001c1e 	bne	r2,zero,19dc8 <strcmp+0xb4>
   19d58:	4013883a 	mov	r9,r8
   19d5c:	2811883a 	mov	r8,r5
   19d60:	00000106 	br	19d68 <strcmp+0x54>
   19d64:	1800181e 	bne	r3,zero,19dc8 <strcmp+0xb4>
   19d68:	39c00104 	addi	r7,r7,4
   19d6c:	39000017 	ldw	r4,0(r7)
   19d70:	31800104 	addi	r6,r6,4
   19d74:	31400017 	ldw	r5,0(r6)
   19d78:	2245883a 	add	r2,r4,r9
   19d7c:	1204703a 	and	r2,r2,r8
   19d80:	0106303a 	nor	r3,zero,r4
   19d84:	1886703a 	and	r3,r3,r2
   19d88:	217ff626 	beq	r4,r5,19d64 <strcmp+0x50>
   19d8c:	3809883a 	mov	r4,r7
   19d90:	300b883a 	mov	r5,r6
   19d94:	20c00007 	ldb	r3,0(r4)
   19d98:	1800051e 	bne	r3,zero,19db0 <strcmp+0x9c>
   19d9c:	00000606 	br	19db8 <strcmp+0xa4>
   19da0:	21000044 	addi	r4,r4,1
   19da4:	20c00007 	ldb	r3,0(r4)
   19da8:	29400044 	addi	r5,r5,1
   19dac:	18000226 	beq	r3,zero,19db8 <strcmp+0xa4>
   19db0:	28800007 	ldb	r2,0(r5)
   19db4:	18bffa26 	beq	r3,r2,19da0 <strcmp+0x8c>
   19db8:	20c00003 	ldbu	r3,0(r4)
   19dbc:	28800003 	ldbu	r2,0(r5)
   19dc0:	1885c83a 	sub	r2,r3,r2
   19dc4:	f800283a 	ret
   19dc8:	0005883a 	mov	r2,zero
   19dcc:	f800283a 	ret

00019dd0 <_calloc_r>:
   19dd0:	298b383a 	mul	r5,r5,r6
   19dd4:	defffe04 	addi	sp,sp,-8
   19dd8:	dc000015 	stw	r16,0(sp)
   19ddc:	dfc00115 	stw	ra,4(sp)
   19de0:	001318c0 	call	1318c <_malloc_r>
   19de4:	1021883a 	mov	r16,r2
   19de8:	01c00904 	movi	r7,36
   19dec:	10000d26 	beq	r2,zero,19e24 <_calloc_r+0x54>
   19df0:	10ffff17 	ldw	r3,-4(r2)
   19df4:	1009883a 	mov	r4,r2
   19df8:	00bfff04 	movi	r2,-4
   19dfc:	1886703a 	and	r3,r3,r2
   19e00:	1887883a 	add	r3,r3,r2
   19e04:	180d883a 	mov	r6,r3
   19e08:	000b883a 	mov	r5,zero
   19e0c:	38c01736 	bltu	r7,r3,19e6c <_calloc_r+0x9c>
   19e10:	008004c4 	movi	r2,19
   19e14:	10c00836 	bltu	r2,r3,19e38 <_calloc_r+0x68>
   19e18:	20000215 	stw	zero,8(r4)
   19e1c:	20000015 	stw	zero,0(r4)
   19e20:	20000115 	stw	zero,4(r4)
   19e24:	8005883a 	mov	r2,r16
   19e28:	dfc00117 	ldw	ra,4(sp)
   19e2c:	dc000017 	ldw	r16,0(sp)
   19e30:	dec00204 	addi	sp,sp,8
   19e34:	f800283a 	ret
   19e38:	008006c4 	movi	r2,27
   19e3c:	80000015 	stw	zero,0(r16)
   19e40:	80000115 	stw	zero,4(r16)
   19e44:	81000204 	addi	r4,r16,8
   19e48:	10fff32e 	bgeu	r2,r3,19e18 <_calloc_r+0x48>
   19e4c:	80000215 	stw	zero,8(r16)
   19e50:	80000315 	stw	zero,12(r16)
   19e54:	81000404 	addi	r4,r16,16
   19e58:	19ffef1e 	bne	r3,r7,19e18 <_calloc_r+0x48>
   19e5c:	81000604 	addi	r4,r16,24
   19e60:	80000415 	stw	zero,16(r16)
   19e64:	80000515 	stw	zero,20(r16)
   19e68:	003feb06 	br	19e18 <_calloc_r+0x48>
   19e6c:	0013ba40 	call	13ba4 <memset>
   19e70:	8005883a 	mov	r2,r16
   19e74:	dfc00117 	ldw	ra,4(sp)
   19e78:	dc000017 	ldw	r16,0(sp)
   19e7c:	dec00204 	addi	sp,sp,8
   19e80:	f800283a 	ret

00019e84 <__udivdi3>:
   19e84:	defff004 	addi	sp,sp,-64
   19e88:	2005883a 	mov	r2,r4
   19e8c:	3011883a 	mov	r8,r6
   19e90:	df000e15 	stw	fp,56(sp)
   19e94:	dd000a15 	stw	r20,40(sp)
   19e98:	dc000615 	stw	r16,24(sp)
   19e9c:	dfc00f15 	stw	ra,60(sp)
   19ea0:	ddc00d15 	stw	r23,52(sp)
   19ea4:	dd800c15 	stw	r22,48(sp)
   19ea8:	dd400b15 	stw	r21,44(sp)
   19eac:	dcc00915 	stw	r19,36(sp)
   19eb0:	dc800815 	stw	r18,32(sp)
   19eb4:	dc400715 	stw	r17,28(sp)
   19eb8:	4021883a 	mov	r16,r8
   19ebc:	1039883a 	mov	fp,r2
   19ec0:	2829883a 	mov	r20,r5
   19ec4:	38003b1e 	bne	r7,zero,19fb4 <__udivdi3+0x130>
   19ec8:	2a005c36 	bltu	r5,r8,1a03c <__udivdi3+0x1b8>
   19ecc:	4000a626 	beq	r8,zero,1a168 <__udivdi3+0x2e4>
   19ed0:	00bfffd4 	movui	r2,65535
   19ed4:	14009e36 	bltu	r2,r16,1a150 <__udivdi3+0x2cc>
   19ed8:	00803fc4 	movi	r2,255
   19edc:	14013d36 	bltu	r2,r16,1a3d4 <__udivdi3+0x550>
   19ee0:	000b883a 	mov	r5,zero
   19ee4:	0005883a 	mov	r2,zero
   19ee8:	8084d83a 	srl	r2,r16,r2
   19eec:	010000b4 	movhi	r4,2
   19ef0:	213b8904 	addi	r4,r4,-4572
   19ef4:	01800804 	movi	r6,32
   19ef8:	1105883a 	add	r2,r2,r4
   19efc:	10c00003 	ldbu	r3,0(r2)
   19f00:	28c7883a 	add	r3,r5,r3
   19f04:	30edc83a 	sub	r22,r6,r3
   19f08:	b000ee1e 	bne	r22,zero,1a2c4 <__udivdi3+0x440>
   19f0c:	802ad43a 	srli	r21,r16,16
   19f10:	00800044 	movi	r2,1
   19f14:	a423c83a 	sub	r17,r20,r16
   19f18:	85ffffcc 	andi	r23,r16,65535
   19f1c:	d8800315 	stw	r2,12(sp)
   19f20:	8809883a 	mov	r4,r17
   19f24:	a80b883a 	mov	r5,r21
   19f28:	00108400 	call	10840 <__udivsi3>
   19f2c:	8809883a 	mov	r4,r17
   19f30:	a80b883a 	mov	r5,r21
   19f34:	102d883a 	mov	r22,r2
   19f38:	00108480 	call	10848 <__umodsi3>
   19f3c:	1004943a 	slli	r2,r2,16
   19f40:	e006d43a 	srli	r3,fp,16
   19f44:	bda3383a 	mul	r17,r23,r22
   19f48:	10c4b03a 	or	r2,r2,r3
   19f4c:	1440042e 	bgeu	r2,r17,19f60 <__udivdi3+0xdc>
   19f50:	1405883a 	add	r2,r2,r16
   19f54:	b5bfffc4 	addi	r22,r22,-1
   19f58:	14000136 	bltu	r2,r16,19f60 <__udivdi3+0xdc>
   19f5c:	14413d36 	bltu	r2,r17,1a454 <__udivdi3+0x5d0>
   19f60:	1463c83a 	sub	r17,r2,r17
   19f64:	8809883a 	mov	r4,r17
   19f68:	a80b883a 	mov	r5,r21
   19f6c:	00108400 	call	10840 <__udivsi3>
   19f70:	8809883a 	mov	r4,r17
   19f74:	a80b883a 	mov	r5,r21
   19f78:	1029883a 	mov	r20,r2
   19f7c:	00108480 	call	10848 <__umodsi3>
   19f80:	1004943a 	slli	r2,r2,16
   19f84:	bd09383a 	mul	r4,r23,r20
   19f88:	e0ffffcc 	andi	r3,fp,65535
   19f8c:	10c4b03a 	or	r2,r2,r3
   19f90:	1100042e 	bgeu	r2,r4,19fa4 <__udivdi3+0x120>
   19f94:	8085883a 	add	r2,r16,r2
   19f98:	a53fffc4 	addi	r20,r20,-1
   19f9c:	14000136 	bltu	r2,r16,19fa4 <__udivdi3+0x120>
   19fa0:	11012036 	bltu	r2,r4,1a424 <__udivdi3+0x5a0>
   19fa4:	b004943a 	slli	r2,r22,16
   19fa8:	d9000317 	ldw	r4,12(sp)
   19fac:	a084b03a 	or	r2,r20,r2
   19fb0:	00001506 	br	1a008 <__udivdi3+0x184>
   19fb4:	380d883a 	mov	r6,r7
   19fb8:	29c06236 	bltu	r5,r7,1a144 <__udivdi3+0x2c0>
   19fbc:	00bfffd4 	movui	r2,65535
   19fc0:	11c05a36 	bltu	r2,r7,1a12c <__udivdi3+0x2a8>
   19fc4:	00803fc4 	movi	r2,255
   19fc8:	11c0fc36 	bltu	r2,r7,1a3bc <__udivdi3+0x538>
   19fcc:	000b883a 	mov	r5,zero
   19fd0:	0005883a 	mov	r2,zero
   19fd4:	3084d83a 	srl	r2,r6,r2
   19fd8:	010000b4 	movhi	r4,2
   19fdc:	213b8904 	addi	r4,r4,-4572
   19fe0:	01c00804 	movi	r7,32
   19fe4:	1105883a 	add	r2,r2,r4
   19fe8:	10c00003 	ldbu	r3,0(r2)
   19fec:	28c7883a 	add	r3,r5,r3
   19ff0:	38efc83a 	sub	r23,r7,r3
   19ff4:	b800691e 	bne	r23,zero,1a19c <__udivdi3+0x318>
   19ff8:	35000136 	bltu	r6,r20,1a000 <__udivdi3+0x17c>
   19ffc:	e4005136 	bltu	fp,r16,1a144 <__udivdi3+0x2c0>
   1a000:	00800044 	movi	r2,1
   1a004:	0009883a 	mov	r4,zero
   1a008:	2007883a 	mov	r3,r4
   1a00c:	dfc00f17 	ldw	ra,60(sp)
   1a010:	df000e17 	ldw	fp,56(sp)
   1a014:	ddc00d17 	ldw	r23,52(sp)
   1a018:	dd800c17 	ldw	r22,48(sp)
   1a01c:	dd400b17 	ldw	r21,44(sp)
   1a020:	dd000a17 	ldw	r20,40(sp)
   1a024:	dcc00917 	ldw	r19,36(sp)
   1a028:	dc800817 	ldw	r18,32(sp)
   1a02c:	dc400717 	ldw	r17,28(sp)
   1a030:	dc000617 	ldw	r16,24(sp)
   1a034:	dec01004 	addi	sp,sp,64
   1a038:	f800283a 	ret
   1a03c:	00bfffd4 	movui	r2,65535
   1a040:	12005036 	bltu	r2,r8,1a184 <__udivdi3+0x300>
   1a044:	00803fc4 	movi	r2,255
   1a048:	1200e836 	bltu	r2,r8,1a3ec <__udivdi3+0x568>
   1a04c:	000b883a 	mov	r5,zero
   1a050:	0005883a 	mov	r2,zero
   1a054:	8084d83a 	srl	r2,r16,r2
   1a058:	010000b4 	movhi	r4,2
   1a05c:	213b8904 	addi	r4,r4,-4572
   1a060:	01800804 	movi	r6,32
   1a064:	1105883a 	add	r2,r2,r4
   1a068:	10c00003 	ldbu	r3,0(r2)
   1a06c:	28c7883a 	add	r3,r5,r3
   1a070:	30cbc83a 	sub	r5,r6,r3
   1a074:	28000626 	beq	r5,zero,1a090 <__udivdi3+0x20c>
   1a078:	3145c83a 	sub	r2,r6,r5
   1a07c:	e084d83a 	srl	r2,fp,r2
   1a080:	a146983a 	sll	r3,r20,r5
   1a084:	e178983a 	sll	fp,fp,r5
   1a088:	8160983a 	sll	r16,r16,r5
   1a08c:	18a8b03a 	or	r20,r3,r2
   1a090:	802ad43a 	srli	r21,r16,16
   1a094:	a009883a 	mov	r4,r20
   1a098:	85ffffcc 	andi	r23,r16,65535
   1a09c:	a80b883a 	mov	r5,r21
   1a0a0:	00108400 	call	10840 <__udivsi3>
   1a0a4:	a009883a 	mov	r4,r20
   1a0a8:	a80b883a 	mov	r5,r21
   1a0ac:	102d883a 	mov	r22,r2
   1a0b0:	00108480 	call	10848 <__umodsi3>
   1a0b4:	1004943a 	slli	r2,r2,16
   1a0b8:	e006d43a 	srli	r3,fp,16
   1a0bc:	bda3383a 	mul	r17,r23,r22
   1a0c0:	10c4b03a 	or	r2,r2,r3
   1a0c4:	1440042e 	bgeu	r2,r17,1a0d8 <__udivdi3+0x254>
   1a0c8:	1405883a 	add	r2,r2,r16
   1a0cc:	b5bfffc4 	addi	r22,r22,-1
   1a0d0:	14000136 	bltu	r2,r16,1a0d8 <__udivdi3+0x254>
   1a0d4:	1440d536 	bltu	r2,r17,1a42c <__udivdi3+0x5a8>
   1a0d8:	1463c83a 	sub	r17,r2,r17
   1a0dc:	8809883a 	mov	r4,r17
   1a0e0:	a80b883a 	mov	r5,r21
   1a0e4:	00108400 	call	10840 <__udivsi3>
   1a0e8:	8809883a 	mov	r4,r17
   1a0ec:	a80b883a 	mov	r5,r21
   1a0f0:	1029883a 	mov	r20,r2
   1a0f4:	00108480 	call	10848 <__umodsi3>
   1a0f8:	1004943a 	slli	r2,r2,16
   1a0fc:	bd09383a 	mul	r4,r23,r20
   1a100:	e0ffffcc 	andi	r3,fp,65535
   1a104:	10c4b03a 	or	r2,r2,r3
   1a108:	1100042e 	bgeu	r2,r4,1a11c <__udivdi3+0x298>
   1a10c:	8085883a 	add	r2,r16,r2
   1a110:	a53fffc4 	addi	r20,r20,-1
   1a114:	14000136 	bltu	r2,r16,1a11c <__udivdi3+0x298>
   1a118:	1100c736 	bltu	r2,r4,1a438 <__udivdi3+0x5b4>
   1a11c:	b004943a 	slli	r2,r22,16
   1a120:	0009883a 	mov	r4,zero
   1a124:	a084b03a 	or	r2,r20,r2
   1a128:	003fb706 	br	1a008 <__udivdi3+0x184>
   1a12c:	00804034 	movhi	r2,256
   1a130:	10bfffc4 	addi	r2,r2,-1
   1a134:	11c0a436 	bltu	r2,r7,1a3c8 <__udivdi3+0x544>
   1a138:	01400404 	movi	r5,16
   1a13c:	2805883a 	mov	r2,r5
   1a140:	003fa406 	br	19fd4 <__udivdi3+0x150>
   1a144:	0005883a 	mov	r2,zero
   1a148:	0009883a 	mov	r4,zero
   1a14c:	003fae06 	br	1a008 <__udivdi3+0x184>
   1a150:	00804034 	movhi	r2,256
   1a154:	10bfffc4 	addi	r2,r2,-1
   1a158:	1400a136 	bltu	r2,r16,1a3e0 <__udivdi3+0x55c>
   1a15c:	01400404 	movi	r5,16
   1a160:	2805883a 	mov	r2,r5
   1a164:	003f6006 	br	19ee8 <__udivdi3+0x64>
   1a168:	01000044 	movi	r4,1
   1a16c:	000b883a 	mov	r5,zero
   1a170:	00108400 	call	10840 <__udivsi3>
   1a174:	1021883a 	mov	r16,r2
   1a178:	00bfffd4 	movui	r2,65535
   1a17c:	143ff436 	bltu	r2,r16,1a150 <__udivdi3+0x2cc>
   1a180:	003f5506 	br	19ed8 <__udivdi3+0x54>
   1a184:	00804034 	movhi	r2,256
   1a188:	10bfffc4 	addi	r2,r2,-1
   1a18c:	12009a36 	bltu	r2,r8,1a3f8 <__udivdi3+0x574>
   1a190:	01400404 	movi	r5,16
   1a194:	2805883a 	mov	r2,r5
   1a198:	003fae06 	br	1a054 <__udivdi3+0x1d0>
   1a19c:	3dc5c83a 	sub	r2,r7,r23
   1a1a0:	35c8983a 	sll	r4,r6,r23
   1a1a4:	8086d83a 	srl	r3,r16,r2
   1a1a8:	a0a2d83a 	srl	r17,r20,r2
   1a1ac:	e084d83a 	srl	r2,fp,r2
   1a1b0:	20eab03a 	or	r21,r4,r3
   1a1b4:	a82cd43a 	srli	r22,r21,16
   1a1b8:	a5c6983a 	sll	r3,r20,r23
   1a1bc:	8809883a 	mov	r4,r17
   1a1c0:	b00b883a 	mov	r5,r22
   1a1c4:	1886b03a 	or	r3,r3,r2
   1a1c8:	d8c00215 	stw	r3,8(sp)
   1a1cc:	00108400 	call	10840 <__udivsi3>
   1a1d0:	8809883a 	mov	r4,r17
   1a1d4:	b00b883a 	mov	r5,r22
   1a1d8:	1029883a 	mov	r20,r2
   1a1dc:	00108480 	call	10848 <__umodsi3>
   1a1e0:	a8ffffcc 	andi	r3,r21,65535
   1a1e4:	d8c00515 	stw	r3,20(sp)
   1a1e8:	d9000217 	ldw	r4,8(sp)
   1a1ec:	d9400517 	ldw	r5,20(sp)
   1a1f0:	1004943a 	slli	r2,r2,16
   1a1f4:	2006d43a 	srli	r3,r4,16
   1a1f8:	85e0983a 	sll	r16,r16,r23
   1a1fc:	2d23383a 	mul	r17,r5,r20
   1a200:	10c4b03a 	or	r2,r2,r3
   1a204:	dc000015 	stw	r16,0(sp)
   1a208:	1440032e 	bgeu	r2,r17,1a218 <__udivdi3+0x394>
   1a20c:	1545883a 	add	r2,r2,r21
   1a210:	a53fffc4 	addi	r20,r20,-1
   1a214:	15407f2e 	bgeu	r2,r21,1a414 <__udivdi3+0x590>
   1a218:	1463c83a 	sub	r17,r2,r17
   1a21c:	8809883a 	mov	r4,r17
   1a220:	b00b883a 	mov	r5,r22
   1a224:	00108400 	call	10840 <__udivsi3>
   1a228:	8809883a 	mov	r4,r17
   1a22c:	b00b883a 	mov	r5,r22
   1a230:	1021883a 	mov	r16,r2
   1a234:	00108480 	call	10848 <__umodsi3>
   1a238:	d8c00517 	ldw	r3,20(sp)
   1a23c:	d9000217 	ldw	r4,8(sp)
   1a240:	1004943a 	slli	r2,r2,16
   1a244:	1c0f383a 	mul	r7,r3,r16
   1a248:	20ffffcc 	andi	r3,r4,65535
   1a24c:	10e2b03a 	or	r17,r2,r3
   1a250:	89c0032e 	bgeu	r17,r7,1a260 <__udivdi3+0x3dc>
   1a254:	8d63883a 	add	r17,r17,r21
   1a258:	843fffc4 	addi	r16,r16,-1
   1a25c:	8d40692e 	bgeu	r17,r21,1a404 <__udivdi3+0x580>
   1a260:	a008943a 	slli	r4,r20,16
   1a264:	d9400017 	ldw	r5,0(sp)
   1a268:	89e3c83a 	sub	r17,r17,r7
   1a26c:	8110b03a 	or	r8,r16,r4
   1a270:	280cd43a 	srli	r6,r5,16
   1a274:	28ffffcc 	andi	r3,r5,65535
   1a278:	40bfffcc 	andi	r2,r8,65535
   1a27c:	400ad43a 	srli	r5,r8,16
   1a280:	10d3383a 	mul	r9,r2,r3
   1a284:	1185383a 	mul	r2,r2,r6
   1a288:	28c7383a 	mul	r3,r5,r3
   1a28c:	4808d43a 	srli	r4,r9,16
   1a290:	298b383a 	mul	r5,r5,r6
   1a294:	10c5883a 	add	r2,r2,r3
   1a298:	2089883a 	add	r4,r4,r2
   1a29c:	20c0022e 	bgeu	r4,r3,1a2a8 <__udivdi3+0x424>
   1a2a0:	00800074 	movhi	r2,1
   1a2a4:	288b883a 	add	r5,r5,r2
   1a2a8:	2004d43a 	srli	r2,r4,16
   1a2ac:	288b883a 	add	r5,r5,r2
   1a2b0:	89403f36 	bltu	r17,r5,1a3b0 <__udivdi3+0x52c>
   1a2b4:	89403926 	beq	r17,r5,1a39c <__udivdi3+0x518>
   1a2b8:	4005883a 	mov	r2,r8
   1a2bc:	0009883a 	mov	r4,zero
   1a2c0:	003f5106 	br	1a008 <__udivdi3+0x184>
   1a2c4:	85a0983a 	sll	r16,r16,r22
   1a2c8:	3585c83a 	sub	r2,r6,r22
   1a2cc:	a0a2d83a 	srl	r17,r20,r2
   1a2d0:	802ad43a 	srli	r21,r16,16
   1a2d4:	e084d83a 	srl	r2,fp,r2
   1a2d8:	a586983a 	sll	r3,r20,r22
   1a2dc:	8809883a 	mov	r4,r17
   1a2e0:	a80b883a 	mov	r5,r21
   1a2e4:	1886b03a 	or	r3,r3,r2
   1a2e8:	d8c00115 	stw	r3,4(sp)
   1a2ec:	00108400 	call	10840 <__udivsi3>
   1a2f0:	8809883a 	mov	r4,r17
   1a2f4:	a80b883a 	mov	r5,r21
   1a2f8:	d8800415 	stw	r2,16(sp)
   1a2fc:	00108480 	call	10848 <__umodsi3>
   1a300:	d9000117 	ldw	r4,4(sp)
   1a304:	d9400417 	ldw	r5,16(sp)
   1a308:	1004943a 	slli	r2,r2,16
   1a30c:	85ffffcc 	andi	r23,r16,65535
   1a310:	2006d43a 	srli	r3,r4,16
   1a314:	b963383a 	mul	r17,r23,r5
   1a318:	10c4b03a 	or	r2,r2,r3
   1a31c:	1440042e 	bgeu	r2,r17,1a330 <__udivdi3+0x4ac>
   1a320:	297fffc4 	addi	r5,r5,-1
   1a324:	1405883a 	add	r2,r2,r16
   1a328:	d9400415 	stw	r5,16(sp)
   1a32c:	1400442e 	bgeu	r2,r16,1a440 <__udivdi3+0x5bc>
   1a330:	1463c83a 	sub	r17,r2,r17
   1a334:	8809883a 	mov	r4,r17
   1a338:	a80b883a 	mov	r5,r21
   1a33c:	00108400 	call	10840 <__udivsi3>
   1a340:	8809883a 	mov	r4,r17
   1a344:	a80b883a 	mov	r5,r21
   1a348:	1029883a 	mov	r20,r2
   1a34c:	00108480 	call	10848 <__umodsi3>
   1a350:	d9400117 	ldw	r5,4(sp)
   1a354:	1004943a 	slli	r2,r2,16
   1a358:	bd09383a 	mul	r4,r23,r20
   1a35c:	28ffffcc 	andi	r3,r5,65535
   1a360:	10c6b03a 	or	r3,r2,r3
   1a364:	1900062e 	bgeu	r3,r4,1a380 <__udivdi3+0x4fc>
   1a368:	1c07883a 	add	r3,r3,r16
   1a36c:	a53fffc4 	addi	r20,r20,-1
   1a370:	1c000336 	bltu	r3,r16,1a380 <__udivdi3+0x4fc>
   1a374:	1900022e 	bgeu	r3,r4,1a380 <__udivdi3+0x4fc>
   1a378:	a53fffc4 	addi	r20,r20,-1
   1a37c:	1c07883a 	add	r3,r3,r16
   1a380:	d9400417 	ldw	r5,16(sp)
   1a384:	e5b8983a 	sll	fp,fp,r22
   1a388:	1923c83a 	sub	r17,r3,r4
   1a38c:	2804943a 	slli	r2,r5,16
   1a390:	a0a8b03a 	or	r20,r20,r2
   1a394:	dd000315 	stw	r20,12(sp)
   1a398:	003ee106 	br	19f20 <__udivdi3+0x9c>
   1a39c:	2004943a 	slli	r2,r4,16
   1a3a0:	e5c8983a 	sll	r4,fp,r23
   1a3a4:	48ffffcc 	andi	r3,r9,65535
   1a3a8:	10c5883a 	add	r2,r2,r3
   1a3ac:	20bfc22e 	bgeu	r4,r2,1a2b8 <__udivdi3+0x434>
   1a3b0:	40bfffc4 	addi	r2,r8,-1
   1a3b4:	0009883a 	mov	r4,zero
   1a3b8:	003f1306 	br	1a008 <__udivdi3+0x184>
   1a3bc:	01400204 	movi	r5,8
   1a3c0:	2805883a 	mov	r2,r5
   1a3c4:	003f0306 	br	19fd4 <__udivdi3+0x150>
   1a3c8:	01400604 	movi	r5,24
   1a3cc:	2805883a 	mov	r2,r5
   1a3d0:	003f0006 	br	19fd4 <__udivdi3+0x150>
   1a3d4:	01400204 	movi	r5,8
   1a3d8:	2805883a 	mov	r2,r5
   1a3dc:	003ec206 	br	19ee8 <__udivdi3+0x64>
   1a3e0:	01400604 	movi	r5,24
   1a3e4:	2805883a 	mov	r2,r5
   1a3e8:	003ebf06 	br	19ee8 <__udivdi3+0x64>
   1a3ec:	01400204 	movi	r5,8
   1a3f0:	2805883a 	mov	r2,r5
   1a3f4:	003f1706 	br	1a054 <__udivdi3+0x1d0>
   1a3f8:	01400604 	movi	r5,24
   1a3fc:	2805883a 	mov	r2,r5
   1a400:	003f1406 	br	1a054 <__udivdi3+0x1d0>
   1a404:	89ff962e 	bgeu	r17,r7,1a260 <__udivdi3+0x3dc>
   1a408:	8d63883a 	add	r17,r17,r21
   1a40c:	843fffc4 	addi	r16,r16,-1
   1a410:	003f9306 	br	1a260 <__udivdi3+0x3dc>
   1a414:	147f802e 	bgeu	r2,r17,1a218 <__udivdi3+0x394>
   1a418:	a53fffc4 	addi	r20,r20,-1
   1a41c:	1545883a 	add	r2,r2,r21
   1a420:	003f7d06 	br	1a218 <__udivdi3+0x394>
   1a424:	a53fffc4 	addi	r20,r20,-1
   1a428:	003ede06 	br	19fa4 <__udivdi3+0x120>
   1a42c:	b5bfffc4 	addi	r22,r22,-1
   1a430:	1405883a 	add	r2,r2,r16
   1a434:	003f2806 	br	1a0d8 <__udivdi3+0x254>
   1a438:	a53fffc4 	addi	r20,r20,-1
   1a43c:	003f3706 	br	1a11c <__udivdi3+0x298>
   1a440:	147fbb2e 	bgeu	r2,r17,1a330 <__udivdi3+0x4ac>
   1a444:	297fffc4 	addi	r5,r5,-1
   1a448:	1405883a 	add	r2,r2,r16
   1a44c:	d9400415 	stw	r5,16(sp)
   1a450:	003fb706 	br	1a330 <__udivdi3+0x4ac>
   1a454:	b5bfffc4 	addi	r22,r22,-1
   1a458:	1405883a 	add	r2,r2,r16
   1a45c:	003ec006 	br	19f60 <__udivdi3+0xdc>

0001a460 <__umoddi3>:
   1a460:	defff104 	addi	sp,sp,-60
   1a464:	dd800b15 	stw	r22,44(sp)
   1a468:	dd000915 	stw	r20,36(sp)
   1a46c:	dc000515 	stw	r16,20(sp)
   1a470:	dfc00e15 	stw	ra,56(sp)
   1a474:	df000d15 	stw	fp,52(sp)
   1a478:	ddc00c15 	stw	r23,48(sp)
   1a47c:	dd400a15 	stw	r21,40(sp)
   1a480:	dcc00815 	stw	r19,32(sp)
   1a484:	dc800715 	stw	r18,28(sp)
   1a488:	dc400615 	stw	r17,24(sp)
   1a48c:	3021883a 	mov	r16,r6
   1a490:	202d883a 	mov	r22,r4
   1a494:	2829883a 	mov	r20,r5
   1a498:	38002b1e 	bne	r7,zero,1a548 <__umoddi3+0xe8>
   1a49c:	29805036 	bltu	r5,r6,1a5e0 <__umoddi3+0x180>
   1a4a0:	30008a26 	beq	r6,zero,1a6cc <__umoddi3+0x26c>
   1a4a4:	00bfffd4 	movui	r2,65535
   1a4a8:	14008236 	bltu	r2,r16,1a6b4 <__umoddi3+0x254>
   1a4ac:	00803fc4 	movi	r2,255
   1a4b0:	14013636 	bltu	r2,r16,1a98c <__umoddi3+0x52c>
   1a4b4:	000b883a 	mov	r5,zero
   1a4b8:	0005883a 	mov	r2,zero
   1a4bc:	8084d83a 	srl	r2,r16,r2
   1a4c0:	010000b4 	movhi	r4,2
   1a4c4:	213b8904 	addi	r4,r4,-4572
   1a4c8:	01800804 	movi	r6,32
   1a4cc:	1105883a 	add	r2,r2,r4
   1a4d0:	10c00003 	ldbu	r3,0(r2)
   1a4d4:	28c7883a 	add	r3,r5,r3
   1a4d8:	30efc83a 	sub	r23,r6,r3
   1a4dc:	b800941e 	bne	r23,zero,1a730 <__umoddi3+0x2d0>
   1a4e0:	802ad43a 	srli	r21,r16,16
   1a4e4:	a423c83a 	sub	r17,r20,r16
   1a4e8:	0039883a 	mov	fp,zero
   1a4ec:	853fffcc 	andi	r20,r16,65535
   1a4f0:	8809883a 	mov	r4,r17
   1a4f4:	a80b883a 	mov	r5,r21
   1a4f8:	00108400 	call	10840 <__udivsi3>
   1a4fc:	8809883a 	mov	r4,r17
   1a500:	a80b883a 	mov	r5,r21
   1a504:	a0a3383a 	mul	r17,r20,r2
   1a508:	00108480 	call	10848 <__umodsi3>
   1a50c:	1004943a 	slli	r2,r2,16
   1a510:	b006d43a 	srli	r3,r22,16
   1a514:	10c4b03a 	or	r2,r2,r3
   1a518:	1440032e 	bgeu	r2,r17,1a528 <__umoddi3+0xc8>
   1a51c:	1405883a 	add	r2,r2,r16
   1a520:	14000136 	bltu	r2,r16,1a528 <__umoddi3+0xc8>
   1a524:	14413536 	bltu	r2,r17,1a9fc <__umoddi3+0x59c>
   1a528:	1463c83a 	sub	r17,r2,r17
   1a52c:	8809883a 	mov	r4,r17
   1a530:	a80b883a 	mov	r5,r21
   1a534:	00108400 	call	10840 <__udivsi3>
   1a538:	8809883a 	mov	r4,r17
   1a53c:	a0a3383a 	mul	r17,r20,r2
   1a540:	a80b883a 	mov	r5,r21
   1a544:	00004d06 	br	1a67c <__umoddi3+0x21c>
   1a548:	380d883a 	mov	r6,r7
   1a54c:	29c0102e 	bgeu	r5,r7,1a590 <__umoddi3+0x130>
   1a550:	2011883a 	mov	r8,r4
   1a554:	2813883a 	mov	r9,r5
   1a558:	4005883a 	mov	r2,r8
   1a55c:	4807883a 	mov	r3,r9
   1a560:	dfc00e17 	ldw	ra,56(sp)
   1a564:	df000d17 	ldw	fp,52(sp)
   1a568:	ddc00c17 	ldw	r23,48(sp)
   1a56c:	dd800b17 	ldw	r22,44(sp)
   1a570:	dd400a17 	ldw	r21,40(sp)
   1a574:	dd000917 	ldw	r20,36(sp)
   1a578:	dcc00817 	ldw	r19,32(sp)
   1a57c:	dc800717 	ldw	r18,28(sp)
   1a580:	dc400617 	ldw	r17,24(sp)
   1a584:	dc000517 	ldw	r16,20(sp)
   1a588:	dec00f04 	addi	sp,sp,60
   1a58c:	f800283a 	ret
   1a590:	00bfffd4 	movui	r2,65535
   1a594:	11c05a36 	bltu	r2,r7,1a700 <__umoddi3+0x2a0>
   1a598:	00803fc4 	movi	r2,255
   1a59c:	11c0fe36 	bltu	r2,r7,1a998 <__umoddi3+0x538>
   1a5a0:	000b883a 	mov	r5,zero
   1a5a4:	0005883a 	mov	r2,zero
   1a5a8:	3084d83a 	srl	r2,r6,r2
   1a5ac:	010000b4 	movhi	r4,2
   1a5b0:	213b8904 	addi	r4,r4,-4572
   1a5b4:	01c00804 	movi	r7,32
   1a5b8:	1105883a 	add	r2,r2,r4
   1a5bc:	10c00003 	ldbu	r3,0(r2)
   1a5c0:	28c7883a 	add	r3,r5,r3
   1a5c4:	38ebc83a 	sub	r21,r7,r3
   1a5c8:	a800851e 	bne	r21,zero,1a7e0 <__umoddi3+0x380>
   1a5cc:	35005236 	bltu	r6,r20,1a718 <__umoddi3+0x2b8>
   1a5d0:	b400512e 	bgeu	r22,r16,1a718 <__umoddi3+0x2b8>
   1a5d4:	b011883a 	mov	r8,r22
   1a5d8:	a013883a 	mov	r9,r20
   1a5dc:	003fde06 	br	1a558 <__umoddi3+0xf8>
   1a5e0:	00bfffd4 	movui	r2,65535
   1a5e4:	11804036 	bltu	r2,r6,1a6e8 <__umoddi3+0x288>
   1a5e8:	00803fc4 	movi	r2,255
   1a5ec:	1180ed36 	bltu	r2,r6,1a9a4 <__umoddi3+0x544>
   1a5f0:	000b883a 	mov	r5,zero
   1a5f4:	0005883a 	mov	r2,zero
   1a5f8:	8084d83a 	srl	r2,r16,r2
   1a5fc:	010000b4 	movhi	r4,2
   1a600:	213b8904 	addi	r4,r4,-4572
   1a604:	01800804 	movi	r6,32
   1a608:	1105883a 	add	r2,r2,r4
   1a60c:	10c00003 	ldbu	r3,0(r2)
   1a610:	28c7883a 	add	r3,r5,r3
   1a614:	30c7c83a 	sub	r3,r6,r3
   1a618:	1800bf1e 	bne	r3,zero,1a918 <__umoddi3+0x4b8>
   1a61c:	0039883a 	mov	fp,zero
   1a620:	802ad43a 	srli	r21,r16,16
   1a624:	a009883a 	mov	r4,r20
   1a628:	85ffffcc 	andi	r23,r16,65535
   1a62c:	a80b883a 	mov	r5,r21
   1a630:	00108400 	call	10840 <__udivsi3>
   1a634:	a009883a 	mov	r4,r20
   1a638:	a80b883a 	mov	r5,r21
   1a63c:	b8a3383a 	mul	r17,r23,r2
   1a640:	00108480 	call	10848 <__umodsi3>
   1a644:	1004943a 	slli	r2,r2,16
   1a648:	b006d43a 	srli	r3,r22,16
   1a64c:	10c4b03a 	or	r2,r2,r3
   1a650:	1440032e 	bgeu	r2,r17,1a660 <__umoddi3+0x200>
   1a654:	1405883a 	add	r2,r2,r16
   1a658:	14000136 	bltu	r2,r16,1a660 <__umoddi3+0x200>
   1a65c:	1440e536 	bltu	r2,r17,1a9f4 <__umoddi3+0x594>
   1a660:	1463c83a 	sub	r17,r2,r17
   1a664:	8809883a 	mov	r4,r17
   1a668:	a80b883a 	mov	r5,r21
   1a66c:	00108400 	call	10840 <__udivsi3>
   1a670:	8809883a 	mov	r4,r17
   1a674:	b8a3383a 	mul	r17,r23,r2
   1a678:	a80b883a 	mov	r5,r21
   1a67c:	00108480 	call	10848 <__umodsi3>
   1a680:	1004943a 	slli	r2,r2,16
   1a684:	b0ffffcc 	andi	r3,r22,65535
   1a688:	10c4b03a 	or	r2,r2,r3
   1a68c:	1440042e 	bgeu	r2,r17,1a6a0 <__umoddi3+0x240>
   1a690:	1405883a 	add	r2,r2,r16
   1a694:	14000236 	bltu	r2,r16,1a6a0 <__umoddi3+0x240>
   1a698:	1440012e 	bgeu	r2,r17,1a6a0 <__umoddi3+0x240>
   1a69c:	1405883a 	add	r2,r2,r16
   1a6a0:	1445c83a 	sub	r2,r2,r17
   1a6a4:	1724d83a 	srl	r18,r2,fp
   1a6a8:	0013883a 	mov	r9,zero
   1a6ac:	9011883a 	mov	r8,r18
   1a6b0:	003fa906 	br	1a558 <__umoddi3+0xf8>
   1a6b4:	00804034 	movhi	r2,256
   1a6b8:	10bfffc4 	addi	r2,r2,-1
   1a6bc:	1400b036 	bltu	r2,r16,1a980 <__umoddi3+0x520>
   1a6c0:	01400404 	movi	r5,16
   1a6c4:	2805883a 	mov	r2,r5
   1a6c8:	003f7c06 	br	1a4bc <__umoddi3+0x5c>
   1a6cc:	01000044 	movi	r4,1
   1a6d0:	000b883a 	mov	r5,zero
   1a6d4:	00108400 	call	10840 <__udivsi3>
   1a6d8:	1021883a 	mov	r16,r2
   1a6dc:	00bfffd4 	movui	r2,65535
   1a6e0:	143ff436 	bltu	r2,r16,1a6b4 <__umoddi3+0x254>
   1a6e4:	003f7106 	br	1a4ac <__umoddi3+0x4c>
   1a6e8:	00804034 	movhi	r2,256
   1a6ec:	10bfffc4 	addi	r2,r2,-1
   1a6f0:	1180af36 	bltu	r2,r6,1a9b0 <__umoddi3+0x550>
   1a6f4:	01400404 	movi	r5,16
   1a6f8:	2805883a 	mov	r2,r5
   1a6fc:	003fbe06 	br	1a5f8 <__umoddi3+0x198>
   1a700:	00804034 	movhi	r2,256
   1a704:	10bfffc4 	addi	r2,r2,-1
   1a708:	11c0ac36 	bltu	r2,r7,1a9bc <__umoddi3+0x55c>
   1a70c:	01400404 	movi	r5,16
   1a710:	2805883a 	mov	r2,r5
   1a714:	003fa406 	br	1a5a8 <__umoddi3+0x148>
   1a718:	b409c83a 	sub	r4,r22,r16
   1a71c:	b105803a 	cmpltu	r2,r22,r4
   1a720:	a187c83a 	sub	r3,r20,r6
   1a724:	18a9c83a 	sub	r20,r3,r2
   1a728:	202d883a 	mov	r22,r4
   1a72c:	003fa906 	br	1a5d4 <__umoddi3+0x174>
   1a730:	85e0983a 	sll	r16,r16,r23
   1a734:	35c5c83a 	sub	r2,r6,r23
   1a738:	a0a2d83a 	srl	r17,r20,r2
   1a73c:	802ad43a 	srli	r21,r16,16
   1a740:	b084d83a 	srl	r2,r22,r2
   1a744:	a5c6983a 	sll	r3,r20,r23
   1a748:	8809883a 	mov	r4,r17
   1a74c:	a80b883a 	mov	r5,r21
   1a750:	1886b03a 	or	r3,r3,r2
   1a754:	d8c00115 	stw	r3,4(sp)
   1a758:	853fffcc 	andi	r20,r16,65535
   1a75c:	00108400 	call	10840 <__udivsi3>
   1a760:	8809883a 	mov	r4,r17
   1a764:	a80b883a 	mov	r5,r21
   1a768:	a0a3383a 	mul	r17,r20,r2
   1a76c:	00108480 	call	10848 <__umodsi3>
   1a770:	d9000117 	ldw	r4,4(sp)
   1a774:	1004943a 	slli	r2,r2,16
   1a778:	b839883a 	mov	fp,r23
   1a77c:	2006d43a 	srli	r3,r4,16
   1a780:	10c4b03a 	or	r2,r2,r3
   1a784:	1440022e 	bgeu	r2,r17,1a790 <__umoddi3+0x330>
   1a788:	1405883a 	add	r2,r2,r16
   1a78c:	1400962e 	bgeu	r2,r16,1a9e8 <__umoddi3+0x588>
   1a790:	1463c83a 	sub	r17,r2,r17
   1a794:	8809883a 	mov	r4,r17
   1a798:	a80b883a 	mov	r5,r21
   1a79c:	00108400 	call	10840 <__udivsi3>
   1a7a0:	8809883a 	mov	r4,r17
   1a7a4:	a80b883a 	mov	r5,r21
   1a7a8:	a0a3383a 	mul	r17,r20,r2
   1a7ac:	00108480 	call	10848 <__umodsi3>
   1a7b0:	d9400117 	ldw	r5,4(sp)
   1a7b4:	1004943a 	slli	r2,r2,16
   1a7b8:	28ffffcc 	andi	r3,r5,65535
   1a7bc:	10c4b03a 	or	r2,r2,r3
   1a7c0:	1440042e 	bgeu	r2,r17,1a7d4 <__umoddi3+0x374>
   1a7c4:	1405883a 	add	r2,r2,r16
   1a7c8:	14000236 	bltu	r2,r16,1a7d4 <__umoddi3+0x374>
   1a7cc:	1440012e 	bgeu	r2,r17,1a7d4 <__umoddi3+0x374>
   1a7d0:	1405883a 	add	r2,r2,r16
   1a7d4:	b5ec983a 	sll	r22,r22,r23
   1a7d8:	1463c83a 	sub	r17,r2,r17
   1a7dc:	003f4406 	br	1a4f0 <__umoddi3+0x90>
   1a7e0:	3d4fc83a 	sub	r7,r7,r21
   1a7e4:	3546983a 	sll	r3,r6,r21
   1a7e8:	81c4d83a 	srl	r2,r16,r7
   1a7ec:	a1e2d83a 	srl	r17,r20,r7
   1a7f0:	a54c983a 	sll	r6,r20,r21
   1a7f4:	18aeb03a 	or	r23,r3,r2
   1a7f8:	b828d43a 	srli	r20,r23,16
   1a7fc:	b1c4d83a 	srl	r2,r22,r7
   1a800:	8809883a 	mov	r4,r17
   1a804:	a00b883a 	mov	r5,r20
   1a808:	308cb03a 	or	r6,r6,r2
   1a80c:	d9c00315 	stw	r7,12(sp)
   1a810:	d9800215 	stw	r6,8(sp)
   1a814:	00108400 	call	10840 <__udivsi3>
   1a818:	8809883a 	mov	r4,r17
   1a81c:	a00b883a 	mov	r5,r20
   1a820:	1039883a 	mov	fp,r2
   1a824:	00108480 	call	10848 <__umodsi3>
   1a828:	b8ffffcc 	andi	r3,r23,65535
   1a82c:	d8c00415 	stw	r3,16(sp)
   1a830:	d9000217 	ldw	r4,8(sp)
   1a834:	d9400417 	ldw	r5,16(sp)
   1a838:	1004943a 	slli	r2,r2,16
   1a83c:	2006d43a 	srli	r3,r4,16
   1a840:	8560983a 	sll	r16,r16,r21
   1a844:	2f23383a 	mul	r17,r5,fp
   1a848:	10c4b03a 	or	r2,r2,r3
   1a84c:	dc000015 	stw	r16,0(sp)
   1a850:	b56c983a 	sll	r22,r22,r21
   1a854:	1440032e 	bgeu	r2,r17,1a864 <__umoddi3+0x404>
   1a858:	15c5883a 	add	r2,r2,r23
   1a85c:	e73fffc4 	addi	fp,fp,-1
   1a860:	15c05d2e 	bgeu	r2,r23,1a9d8 <__umoddi3+0x578>
   1a864:	1463c83a 	sub	r17,r2,r17
   1a868:	8809883a 	mov	r4,r17
   1a86c:	a00b883a 	mov	r5,r20
   1a870:	00108400 	call	10840 <__udivsi3>
   1a874:	8809883a 	mov	r4,r17
   1a878:	a00b883a 	mov	r5,r20
   1a87c:	1021883a 	mov	r16,r2
   1a880:	00108480 	call	10848 <__umodsi3>
   1a884:	d8c00417 	ldw	r3,16(sp)
   1a888:	d9000217 	ldw	r4,8(sp)
   1a88c:	1004943a 	slli	r2,r2,16
   1a890:	1c23383a 	mul	r17,r3,r16
   1a894:	20ffffcc 	andi	r3,r4,65535
   1a898:	10ceb03a 	or	r7,r2,r3
   1a89c:	3c40032e 	bgeu	r7,r17,1a8ac <__umoddi3+0x44c>
   1a8a0:	3dcf883a 	add	r7,r7,r23
   1a8a4:	843fffc4 	addi	r16,r16,-1
   1a8a8:	3dc0472e 	bgeu	r7,r23,1a9c8 <__umoddi3+0x568>
   1a8ac:	e004943a 	slli	r2,fp,16
   1a8b0:	d9400017 	ldw	r5,0(sp)
   1a8b4:	3c4fc83a 	sub	r7,r7,r17
   1a8b8:	8084b03a 	or	r2,r16,r2
   1a8bc:	28ffffcc 	andi	r3,r5,65535
   1a8c0:	280cd43a 	srli	r6,r5,16
   1a8c4:	100ad43a 	srli	r5,r2,16
   1a8c8:	10bfffcc 	andi	r2,r2,65535
   1a8cc:	10d1383a 	mul	r8,r2,r3
   1a8d0:	28c7383a 	mul	r3,r5,r3
   1a8d4:	1185383a 	mul	r2,r2,r6
   1a8d8:	4008d43a 	srli	r4,r8,16
   1a8dc:	298b383a 	mul	r5,r5,r6
   1a8e0:	10c5883a 	add	r2,r2,r3
   1a8e4:	2089883a 	add	r4,r4,r2
   1a8e8:	20c0022e 	bgeu	r4,r3,1a8f4 <__umoddi3+0x494>
   1a8ec:	00800074 	movhi	r2,1
   1a8f0:	288b883a 	add	r5,r5,r2
   1a8f4:	2004d43a 	srli	r2,r4,16
   1a8f8:	2008943a 	slli	r4,r4,16
   1a8fc:	40ffffcc 	andi	r3,r8,65535
   1a900:	288b883a 	add	r5,r5,r2
   1a904:	20c9883a 	add	r4,r4,r3
   1a908:	39400b36 	bltu	r7,r5,1a938 <__umoddi3+0x4d8>
   1a90c:	39403d26 	beq	r7,r5,1aa04 <__umoddi3+0x5a4>
   1a910:	394bc83a 	sub	r5,r7,r5
   1a914:	00000f06 	br	1a954 <__umoddi3+0x4f4>
   1a918:	30c5c83a 	sub	r2,r6,r3
   1a91c:	1839883a 	mov	fp,r3
   1a920:	b084d83a 	srl	r2,r22,r2
   1a924:	a0c6983a 	sll	r3,r20,r3
   1a928:	8720983a 	sll	r16,r16,fp
   1a92c:	b72c983a 	sll	r22,r22,fp
   1a930:	18a8b03a 	or	r20,r3,r2
   1a934:	003f3a06 	br	1a620 <__umoddi3+0x1c0>
   1a938:	d8c00017 	ldw	r3,0(sp)
   1a93c:	20c5c83a 	sub	r2,r4,r3
   1a940:	2089803a 	cmpltu	r4,r4,r2
   1a944:	2dc7c83a 	sub	r3,r5,r23
   1a948:	1907c83a 	sub	r3,r3,r4
   1a94c:	38cbc83a 	sub	r5,r7,r3
   1a950:	1009883a 	mov	r4,r2
   1a954:	b105c83a 	sub	r2,r22,r4
   1a958:	b087803a 	cmpltu	r3,r22,r2
   1a95c:	28c7c83a 	sub	r3,r5,r3
   1a960:	d9400317 	ldw	r5,12(sp)
   1a964:	1544d83a 	srl	r2,r2,r21
   1a968:	1948983a 	sll	r4,r3,r5
   1a96c:	1d46d83a 	srl	r3,r3,r21
   1a970:	20a4b03a 	or	r18,r4,r2
   1a974:	9011883a 	mov	r8,r18
   1a978:	1813883a 	mov	r9,r3
   1a97c:	003ef606 	br	1a558 <__umoddi3+0xf8>
   1a980:	01400604 	movi	r5,24
   1a984:	2805883a 	mov	r2,r5
   1a988:	003ecc06 	br	1a4bc <__umoddi3+0x5c>
   1a98c:	01400204 	movi	r5,8
   1a990:	2805883a 	mov	r2,r5
   1a994:	003ec906 	br	1a4bc <__umoddi3+0x5c>
   1a998:	01400204 	movi	r5,8
   1a99c:	2805883a 	mov	r2,r5
   1a9a0:	003f0106 	br	1a5a8 <__umoddi3+0x148>
   1a9a4:	01400204 	movi	r5,8
   1a9a8:	2805883a 	mov	r2,r5
   1a9ac:	003f1206 	br	1a5f8 <__umoddi3+0x198>
   1a9b0:	01400604 	movi	r5,24
   1a9b4:	2805883a 	mov	r2,r5
   1a9b8:	003f0f06 	br	1a5f8 <__umoddi3+0x198>
   1a9bc:	01400604 	movi	r5,24
   1a9c0:	2805883a 	mov	r2,r5
   1a9c4:	003ef806 	br	1a5a8 <__umoddi3+0x148>
   1a9c8:	3c7fb82e 	bgeu	r7,r17,1a8ac <__umoddi3+0x44c>
   1a9cc:	843fffc4 	addi	r16,r16,-1
   1a9d0:	3dcf883a 	add	r7,r7,r23
   1a9d4:	003fb506 	br	1a8ac <__umoddi3+0x44c>
   1a9d8:	147fa22e 	bgeu	r2,r17,1a864 <__umoddi3+0x404>
   1a9dc:	e73fffc4 	addi	fp,fp,-1
   1a9e0:	15c5883a 	add	r2,r2,r23
   1a9e4:	003f9f06 	br	1a864 <__umoddi3+0x404>
   1a9e8:	147f692e 	bgeu	r2,r17,1a790 <__umoddi3+0x330>
   1a9ec:	1405883a 	add	r2,r2,r16
   1a9f0:	003f6706 	br	1a790 <__umoddi3+0x330>
   1a9f4:	1405883a 	add	r2,r2,r16
   1a9f8:	003f1906 	br	1a660 <__umoddi3+0x200>
   1a9fc:	1405883a 	add	r2,r2,r16
   1aa00:	003ec906 	br	1a528 <__umoddi3+0xc8>
   1aa04:	b13fcc36 	bltu	r22,r4,1a938 <__umoddi3+0x4d8>
   1aa08:	000b883a 	mov	r5,zero
   1aa0c:	003fd106 	br	1a954 <__umoddi3+0x4f4>

0001aa10 <__divdf3>:
   1aa10:	deffed04 	addi	sp,sp,-76
   1aa14:	dcc01115 	stw	r19,68(sp)
   1aa18:	dcc00404 	addi	r19,sp,16
   1aa1c:	2011883a 	mov	r8,r4
   1aa20:	2813883a 	mov	r9,r5
   1aa24:	dc000e15 	stw	r16,56(sp)
   1aa28:	d809883a 	mov	r4,sp
   1aa2c:	980b883a 	mov	r5,r19
   1aa30:	dc000904 	addi	r16,sp,36
   1aa34:	dfc01215 	stw	ra,72(sp)
   1aa38:	da400115 	stw	r9,4(sp)
   1aa3c:	d9c00315 	stw	r7,12(sp)
   1aa40:	da000015 	stw	r8,0(sp)
   1aa44:	d9800215 	stw	r6,8(sp)
   1aa48:	dc801015 	stw	r18,64(sp)
   1aa4c:	dc400f15 	stw	r17,60(sp)
   1aa50:	00114940 	call	11494 <__unpack_d>
   1aa54:	d9000204 	addi	r4,sp,8
   1aa58:	800b883a 	mov	r5,r16
   1aa5c:	00114940 	call	11494 <__unpack_d>
   1aa60:	d9000417 	ldw	r4,16(sp)
   1aa64:	00800044 	movi	r2,1
   1aa68:	11000b2e 	bgeu	r2,r4,1aa98 <__divdf3+0x88>
   1aa6c:	d9400917 	ldw	r5,36(sp)
   1aa70:	1140762e 	bgeu	r2,r5,1ac4c <__divdf3+0x23c>
   1aa74:	d8800517 	ldw	r2,20(sp)
   1aa78:	d8c00a17 	ldw	r3,40(sp)
   1aa7c:	01800104 	movi	r6,4
   1aa80:	10c4f03a 	xor	r2,r2,r3
   1aa84:	d8800515 	stw	r2,20(sp)
   1aa88:	21800226 	beq	r4,r6,1aa94 <__divdf3+0x84>
   1aa8c:	00800084 	movi	r2,2
   1aa90:	2080141e 	bne	r4,r2,1aae4 <__divdf3+0xd4>
   1aa94:	29000926 	beq	r5,r4,1aabc <__divdf3+0xac>
   1aa98:	9809883a 	mov	r4,r19
   1aa9c:	00111800 	call	11180 <__pack_d>
   1aaa0:	dfc01217 	ldw	ra,72(sp)
   1aaa4:	dcc01117 	ldw	r19,68(sp)
   1aaa8:	dc801017 	ldw	r18,64(sp)
   1aaac:	dc400f17 	ldw	r17,60(sp)
   1aab0:	dc000e17 	ldw	r16,56(sp)
   1aab4:	dec01304 	addi	sp,sp,76
   1aab8:	f800283a 	ret
   1aabc:	010000b4 	movhi	r4,2
   1aac0:	213b8404 	addi	r4,r4,-4592
   1aac4:	00111800 	call	11180 <__pack_d>
   1aac8:	dfc01217 	ldw	ra,72(sp)
   1aacc:	dcc01117 	ldw	r19,68(sp)
   1aad0:	dc801017 	ldw	r18,64(sp)
   1aad4:	dc400f17 	ldw	r17,60(sp)
   1aad8:	dc000e17 	ldw	r16,56(sp)
   1aadc:	dec01304 	addi	sp,sp,76
   1aae0:	f800283a 	ret
   1aae4:	29805b26 	beq	r5,r6,1ac54 <__divdf3+0x244>
   1aae8:	28802d26 	beq	r5,r2,1aba0 <__divdf3+0x190>
   1aaec:	d8c00617 	ldw	r3,24(sp)
   1aaf0:	d8800b17 	ldw	r2,44(sp)
   1aaf4:	d9c00817 	ldw	r7,32(sp)
   1aaf8:	dc400d17 	ldw	r17,52(sp)
   1aafc:	188bc83a 	sub	r5,r3,r2
   1ab00:	d9800717 	ldw	r6,28(sp)
   1ab04:	dc000c17 	ldw	r16,48(sp)
   1ab08:	d9400615 	stw	r5,24(sp)
   1ab0c:	3c403836 	bltu	r7,r17,1abf0 <__divdf3+0x1e0>
   1ab10:	89c03626 	beq	r17,r7,1abec <__divdf3+0x1dc>
   1ab14:	0015883a 	mov	r10,zero
   1ab18:	001d883a 	mov	r14,zero
   1ab1c:	02c40034 	movhi	r11,4096
   1ab20:	001f883a 	mov	r15,zero
   1ab24:	003f883a 	mov	ra,zero
   1ab28:	04800f44 	movi	r18,61
   1ab2c:	00000f06 	br	1ab6c <__divdf3+0x15c>
   1ab30:	601d883a 	mov	r14,r12
   1ab34:	681f883a 	mov	r15,r13
   1ab38:	400d883a 	mov	r6,r8
   1ab3c:	100f883a 	mov	r7,r2
   1ab40:	3191883a 	add	r8,r6,r6
   1ab44:	5808d07a 	srli	r4,r11,1
   1ab48:	4185803a 	cmpltu	r2,r8,r6
   1ab4c:	39d3883a 	add	r9,r7,r7
   1ab50:	28c6b03a 	or	r3,r5,r3
   1ab54:	1245883a 	add	r2,r2,r9
   1ab58:	1815883a 	mov	r10,r3
   1ab5c:	2017883a 	mov	r11,r4
   1ab60:	400d883a 	mov	r6,r8
   1ab64:	100f883a 	mov	r7,r2
   1ab68:	fc801726 	beq	ra,r18,1abc8 <__divdf3+0x1b8>
   1ab6c:	580a97fa 	slli	r5,r11,31
   1ab70:	5006d07a 	srli	r3,r10,1
   1ab74:	ffc00044 	addi	ra,ra,1
   1ab78:	3c7ff136 	bltu	r7,r17,1ab40 <__divdf3+0x130>
   1ab7c:	3411c83a 	sub	r8,r6,r16
   1ab80:	3205803a 	cmpltu	r2,r6,r8
   1ab84:	3c53c83a 	sub	r9,r7,r17
   1ab88:	7298b03a 	or	r12,r14,r10
   1ab8c:	7adab03a 	or	r13,r15,r11
   1ab90:	4885c83a 	sub	r2,r9,r2
   1ab94:	89ffe61e 	bne	r17,r7,1ab30 <__divdf3+0x120>
   1ab98:	343fe936 	bltu	r6,r16,1ab40 <__divdf3+0x130>
   1ab9c:	003fe406 	br	1ab30 <__divdf3+0x120>
   1aba0:	9809883a 	mov	r4,r19
   1aba4:	d9800415 	stw	r6,16(sp)
   1aba8:	00111800 	call	11180 <__pack_d>
   1abac:	dfc01217 	ldw	ra,72(sp)
   1abb0:	dcc01117 	ldw	r19,68(sp)
   1abb4:	dc801017 	ldw	r18,64(sp)
   1abb8:	dc400f17 	ldw	r17,60(sp)
   1abbc:	dc000e17 	ldw	r16,56(sp)
   1abc0:	dec01304 	addi	sp,sp,76
   1abc4:	f800283a 	ret
   1abc8:	00803fc4 	movi	r2,255
   1abcc:	7090703a 	and	r8,r14,r2
   1abd0:	00802004 	movi	r2,128
   1abd4:	0007883a 	mov	r3,zero
   1abd8:	0013883a 	mov	r9,zero
   1abdc:	40800d26 	beq	r8,r2,1ac14 <__divdf3+0x204>
   1abe0:	dbc00815 	stw	r15,32(sp)
   1abe4:	db800715 	stw	r14,28(sp)
   1abe8:	003fab06 	br	1aa98 <__divdf3+0x88>
   1abec:	343fc92e 	bgeu	r6,r16,1ab14 <__divdf3+0x104>
   1abf0:	3185883a 	add	r2,r6,r6
   1abf4:	1189803a 	cmpltu	r4,r2,r6
   1abf8:	39c7883a 	add	r3,r7,r7
   1abfc:	20c9883a 	add	r4,r4,r3
   1ac00:	297fffc4 	addi	r5,r5,-1
   1ac04:	100d883a 	mov	r6,r2
   1ac08:	200f883a 	mov	r7,r4
   1ac0c:	d9400615 	stw	r5,24(sp)
   1ac10:	003fc006 	br	1ab14 <__divdf3+0x104>
   1ac14:	483ff21e 	bne	r9,zero,1abe0 <__divdf3+0x1d0>
   1ac18:	01004004 	movi	r4,256
   1ac1c:	7104703a 	and	r2,r14,r4
   1ac20:	10c4b03a 	or	r2,r2,r3
   1ac24:	103fee1e 	bne	r2,zero,1abe0 <__divdf3+0x1d0>
   1ac28:	31c4b03a 	or	r2,r6,r7
   1ac2c:	103fec26 	beq	r2,zero,1abe0 <__divdf3+0x1d0>
   1ac30:	7205883a 	add	r2,r14,r8
   1ac34:	1391803a 	cmpltu	r8,r2,r14
   1ac38:	43d1883a 	add	r8,r8,r15
   1ac3c:	013fc004 	movi	r4,-256
   1ac40:	111c703a 	and	r14,r2,r4
   1ac44:	401f883a 	mov	r15,r8
   1ac48:	003fe506 	br	1abe0 <__divdf3+0x1d0>
   1ac4c:	8009883a 	mov	r4,r16
   1ac50:	003f9206 	br	1aa9c <__divdf3+0x8c>
   1ac54:	9809883a 	mov	r4,r19
   1ac58:	d8000715 	stw	zero,28(sp)
   1ac5c:	d8000815 	stw	zero,32(sp)
   1ac60:	d8000615 	stw	zero,24(sp)
   1ac64:	003f8d06 	br	1aa9c <__divdf3+0x8c>

0001ac68 <__eqdf2>:
   1ac68:	deffef04 	addi	sp,sp,-68
   1ac6c:	dc400f15 	stw	r17,60(sp)
   1ac70:	dc400404 	addi	r17,sp,16
   1ac74:	2005883a 	mov	r2,r4
   1ac78:	2807883a 	mov	r3,r5
   1ac7c:	dc000e15 	stw	r16,56(sp)
   1ac80:	d809883a 	mov	r4,sp
   1ac84:	880b883a 	mov	r5,r17
   1ac88:	dc000904 	addi	r16,sp,36
   1ac8c:	d8c00115 	stw	r3,4(sp)
   1ac90:	d8800015 	stw	r2,0(sp)
   1ac94:	d9800215 	stw	r6,8(sp)
   1ac98:	dfc01015 	stw	ra,64(sp)
   1ac9c:	d9c00315 	stw	r7,12(sp)
   1aca0:	00114940 	call	11494 <__unpack_d>
   1aca4:	d9000204 	addi	r4,sp,8
   1aca8:	800b883a 	mov	r5,r16
   1acac:	00114940 	call	11494 <__unpack_d>
   1acb0:	d8800417 	ldw	r2,16(sp)
   1acb4:	00c00044 	movi	r3,1
   1acb8:	180d883a 	mov	r6,r3
   1acbc:	1880062e 	bgeu	r3,r2,1acd8 <__eqdf2+0x70>
   1acc0:	d8800917 	ldw	r2,36(sp)
   1acc4:	8809883a 	mov	r4,r17
   1acc8:	800b883a 	mov	r5,r16
   1accc:	1880022e 	bgeu	r3,r2,1acd8 <__eqdf2+0x70>
   1acd0:	00115cc0 	call	115cc <__fpcmp_parts_d>
   1acd4:	100d883a 	mov	r6,r2
   1acd8:	3005883a 	mov	r2,r6
   1acdc:	dfc01017 	ldw	ra,64(sp)
   1ace0:	dc400f17 	ldw	r17,60(sp)
   1ace4:	dc000e17 	ldw	r16,56(sp)
   1ace8:	dec01104 	addi	sp,sp,68
   1acec:	f800283a 	ret

0001acf0 <__nedf2>:
   1acf0:	deffef04 	addi	sp,sp,-68
   1acf4:	dc400f15 	stw	r17,60(sp)
   1acf8:	dc400404 	addi	r17,sp,16
   1acfc:	2005883a 	mov	r2,r4
   1ad00:	2807883a 	mov	r3,r5
   1ad04:	dc000e15 	stw	r16,56(sp)
   1ad08:	d809883a 	mov	r4,sp
   1ad0c:	880b883a 	mov	r5,r17
   1ad10:	dc000904 	addi	r16,sp,36
   1ad14:	d8c00115 	stw	r3,4(sp)
   1ad18:	d8800015 	stw	r2,0(sp)
   1ad1c:	d9800215 	stw	r6,8(sp)
   1ad20:	dfc01015 	stw	ra,64(sp)
   1ad24:	d9c00315 	stw	r7,12(sp)
   1ad28:	00114940 	call	11494 <__unpack_d>
   1ad2c:	d9000204 	addi	r4,sp,8
   1ad30:	800b883a 	mov	r5,r16
   1ad34:	00114940 	call	11494 <__unpack_d>
   1ad38:	d8800417 	ldw	r2,16(sp)
   1ad3c:	00c00044 	movi	r3,1
   1ad40:	180d883a 	mov	r6,r3
   1ad44:	1880062e 	bgeu	r3,r2,1ad60 <__nedf2+0x70>
   1ad48:	d8800917 	ldw	r2,36(sp)
   1ad4c:	8809883a 	mov	r4,r17
   1ad50:	800b883a 	mov	r5,r16
   1ad54:	1880022e 	bgeu	r3,r2,1ad60 <__nedf2+0x70>
   1ad58:	00115cc0 	call	115cc <__fpcmp_parts_d>
   1ad5c:	100d883a 	mov	r6,r2
   1ad60:	3005883a 	mov	r2,r6
   1ad64:	dfc01017 	ldw	ra,64(sp)
   1ad68:	dc400f17 	ldw	r17,60(sp)
   1ad6c:	dc000e17 	ldw	r16,56(sp)
   1ad70:	dec01104 	addi	sp,sp,68
   1ad74:	f800283a 	ret

0001ad78 <__gtdf2>:
   1ad78:	deffef04 	addi	sp,sp,-68
   1ad7c:	dc400f15 	stw	r17,60(sp)
   1ad80:	dc400404 	addi	r17,sp,16
   1ad84:	2005883a 	mov	r2,r4
   1ad88:	2807883a 	mov	r3,r5
   1ad8c:	dc000e15 	stw	r16,56(sp)
   1ad90:	d809883a 	mov	r4,sp
   1ad94:	880b883a 	mov	r5,r17
   1ad98:	dc000904 	addi	r16,sp,36
   1ad9c:	d8c00115 	stw	r3,4(sp)
   1ada0:	d8800015 	stw	r2,0(sp)
   1ada4:	d9800215 	stw	r6,8(sp)
   1ada8:	dfc01015 	stw	ra,64(sp)
   1adac:	d9c00315 	stw	r7,12(sp)
   1adb0:	00114940 	call	11494 <__unpack_d>
   1adb4:	d9000204 	addi	r4,sp,8
   1adb8:	800b883a 	mov	r5,r16
   1adbc:	00114940 	call	11494 <__unpack_d>
   1adc0:	d8800417 	ldw	r2,16(sp)
   1adc4:	00c00044 	movi	r3,1
   1adc8:	01bfffc4 	movi	r6,-1
   1adcc:	1880062e 	bgeu	r3,r2,1ade8 <__gtdf2+0x70>
   1add0:	d8800917 	ldw	r2,36(sp)
   1add4:	8809883a 	mov	r4,r17
   1add8:	800b883a 	mov	r5,r16
   1addc:	1880022e 	bgeu	r3,r2,1ade8 <__gtdf2+0x70>
   1ade0:	00115cc0 	call	115cc <__fpcmp_parts_d>
   1ade4:	100d883a 	mov	r6,r2
   1ade8:	3005883a 	mov	r2,r6
   1adec:	dfc01017 	ldw	ra,64(sp)
   1adf0:	dc400f17 	ldw	r17,60(sp)
   1adf4:	dc000e17 	ldw	r16,56(sp)
   1adf8:	dec01104 	addi	sp,sp,68
   1adfc:	f800283a 	ret

0001ae00 <__gedf2>:
   1ae00:	deffef04 	addi	sp,sp,-68
   1ae04:	dc400f15 	stw	r17,60(sp)
   1ae08:	dc400404 	addi	r17,sp,16
   1ae0c:	2005883a 	mov	r2,r4
   1ae10:	2807883a 	mov	r3,r5
   1ae14:	dc000e15 	stw	r16,56(sp)
   1ae18:	d809883a 	mov	r4,sp
   1ae1c:	880b883a 	mov	r5,r17
   1ae20:	dc000904 	addi	r16,sp,36
   1ae24:	d8c00115 	stw	r3,4(sp)
   1ae28:	d8800015 	stw	r2,0(sp)
   1ae2c:	d9800215 	stw	r6,8(sp)
   1ae30:	dfc01015 	stw	ra,64(sp)
   1ae34:	d9c00315 	stw	r7,12(sp)
   1ae38:	00114940 	call	11494 <__unpack_d>
   1ae3c:	d9000204 	addi	r4,sp,8
   1ae40:	800b883a 	mov	r5,r16
   1ae44:	00114940 	call	11494 <__unpack_d>
   1ae48:	d8800417 	ldw	r2,16(sp)
   1ae4c:	00c00044 	movi	r3,1
   1ae50:	01bfffc4 	movi	r6,-1
   1ae54:	1880062e 	bgeu	r3,r2,1ae70 <__gedf2+0x70>
   1ae58:	d8800917 	ldw	r2,36(sp)
   1ae5c:	8809883a 	mov	r4,r17
   1ae60:	800b883a 	mov	r5,r16
   1ae64:	1880022e 	bgeu	r3,r2,1ae70 <__gedf2+0x70>
   1ae68:	00115cc0 	call	115cc <__fpcmp_parts_d>
   1ae6c:	100d883a 	mov	r6,r2
   1ae70:	3005883a 	mov	r2,r6
   1ae74:	dfc01017 	ldw	ra,64(sp)
   1ae78:	dc400f17 	ldw	r17,60(sp)
   1ae7c:	dc000e17 	ldw	r16,56(sp)
   1ae80:	dec01104 	addi	sp,sp,68
   1ae84:	f800283a 	ret

0001ae88 <__floatunsidf>:
   1ae88:	defff204 	addi	sp,sp,-56
   1ae8c:	dfc00d15 	stw	ra,52(sp)
   1ae90:	ddc00c15 	stw	r23,48(sp)
   1ae94:	dd800b15 	stw	r22,44(sp)
   1ae98:	dd400a15 	stw	r21,40(sp)
   1ae9c:	dd000915 	stw	r20,36(sp)
   1aea0:	dcc00815 	stw	r19,32(sp)
   1aea4:	dc800715 	stw	r18,28(sp)
   1aea8:	dc400615 	stw	r17,24(sp)
   1aeac:	dc000515 	stw	r16,20(sp)
   1aeb0:	d8000115 	stw	zero,4(sp)
   1aeb4:	20000f1e 	bne	r4,zero,1aef4 <__floatunsidf+0x6c>
   1aeb8:	00800084 	movi	r2,2
   1aebc:	d8800015 	stw	r2,0(sp)
   1aec0:	d809883a 	mov	r4,sp
   1aec4:	00111800 	call	11180 <__pack_d>
   1aec8:	dfc00d17 	ldw	ra,52(sp)
   1aecc:	ddc00c17 	ldw	r23,48(sp)
   1aed0:	dd800b17 	ldw	r22,44(sp)
   1aed4:	dd400a17 	ldw	r21,40(sp)
   1aed8:	dd000917 	ldw	r20,36(sp)
   1aedc:	dcc00817 	ldw	r19,32(sp)
   1aee0:	dc800717 	ldw	r18,28(sp)
   1aee4:	dc400617 	ldw	r17,24(sp)
   1aee8:	dc000517 	ldw	r16,20(sp)
   1aeec:	dec00e04 	addi	sp,sp,56
   1aef0:	f800283a 	ret
   1aef4:	008000c4 	movi	r2,3
   1aef8:	00c00f04 	movi	r3,60
   1aefc:	002f883a 	mov	r23,zero
   1af00:	202d883a 	mov	r22,r4
   1af04:	d8800015 	stw	r2,0(sp)
   1af08:	d8c00215 	stw	r3,8(sp)
   1af0c:	d9000315 	stw	r4,12(sp)
   1af10:	ddc00415 	stw	r23,16(sp)
   1af14:	0010e300 	call	10e30 <__clzsi2>
   1af18:	12400744 	addi	r9,r2,29
   1af1c:	48000b16 	blt	r9,zero,1af4c <__floatunsidf+0xc4>
   1af20:	483fe726 	beq	r9,zero,1aec0 <__floatunsidf+0x38>
   1af24:	10bfff44 	addi	r2,r2,-3
   1af28:	10002e16 	blt	r2,zero,1afe4 <__floatunsidf+0x15c>
   1af2c:	b0a2983a 	sll	r17,r22,r2
   1af30:	0021883a 	mov	r16,zero
   1af34:	d8800217 	ldw	r2,8(sp)
   1af38:	dc400415 	stw	r17,16(sp)
   1af3c:	dc000315 	stw	r16,12(sp)
   1af40:	1245c83a 	sub	r2,r2,r9
   1af44:	d8800215 	stw	r2,8(sp)
   1af48:	003fdd06 	br	1aec0 <__floatunsidf+0x38>
   1af4c:	0255c83a 	sub	r10,zero,r9
   1af50:	51bff804 	addi	r6,r10,-32
   1af54:	30001b16 	blt	r6,zero,1afc4 <__floatunsidf+0x13c>
   1af58:	b9a8d83a 	srl	r20,r23,r6
   1af5c:	002b883a 	mov	r21,zero
   1af60:	000f883a 	mov	r7,zero
   1af64:	01000044 	movi	r4,1
   1af68:	0011883a 	mov	r8,zero
   1af6c:	30002516 	blt	r6,zero,1b004 <__floatunsidf+0x17c>
   1af70:	21a6983a 	sll	r19,r4,r6
   1af74:	0025883a 	mov	r18,zero
   1af78:	00bfffc4 	movi	r2,-1
   1af7c:	9089883a 	add	r4,r18,r2
   1af80:	988b883a 	add	r5,r19,r2
   1af84:	248d803a 	cmpltu	r6,r4,r18
   1af88:	314b883a 	add	r5,r6,r5
   1af8c:	b104703a 	and	r2,r22,r4
   1af90:	b946703a 	and	r3,r23,r5
   1af94:	10c4b03a 	or	r2,r2,r3
   1af98:	10000226 	beq	r2,zero,1afa4 <__floatunsidf+0x11c>
   1af9c:	01c00044 	movi	r7,1
   1afa0:	0011883a 	mov	r8,zero
   1afa4:	d9000217 	ldw	r4,8(sp)
   1afa8:	a1c4b03a 	or	r2,r20,r7
   1afac:	aa06b03a 	or	r3,r21,r8
   1afb0:	2249c83a 	sub	r4,r4,r9
   1afb4:	d8c00415 	stw	r3,16(sp)
   1afb8:	d9000215 	stw	r4,8(sp)
   1afbc:	d8800315 	stw	r2,12(sp)
   1afc0:	003fbf06 	br	1aec0 <__floatunsidf+0x38>
   1afc4:	bdc7883a 	add	r3,r23,r23
   1afc8:	008007c4 	movi	r2,31
   1afcc:	1285c83a 	sub	r2,r2,r10
   1afd0:	1886983a 	sll	r3,r3,r2
   1afd4:	b2a8d83a 	srl	r20,r22,r10
   1afd8:	baaad83a 	srl	r21,r23,r10
   1afdc:	1d28b03a 	or	r20,r3,r20
   1afe0:	003fdf06 	br	1af60 <__floatunsidf+0xd8>
   1afe4:	b006d07a 	srli	r3,r22,1
   1afe8:	008007c4 	movi	r2,31
   1afec:	1245c83a 	sub	r2,r2,r9
   1aff0:	1886d83a 	srl	r3,r3,r2
   1aff4:	ba62983a 	sll	r17,r23,r9
   1aff8:	b260983a 	sll	r16,r22,r9
   1affc:	1c62b03a 	or	r17,r3,r17
   1b000:	003fcc06 	br	1af34 <__floatunsidf+0xac>
   1b004:	2006d07a 	srli	r3,r4,1
   1b008:	008007c4 	movi	r2,31
   1b00c:	1285c83a 	sub	r2,r2,r10
   1b010:	18a6d83a 	srl	r19,r3,r2
   1b014:	22a4983a 	sll	r18,r4,r10
   1b018:	003fd706 	br	1af78 <__floatunsidf+0xf0>

0001b01c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   1b01c:	defff804 	addi	sp,sp,-32
   1b020:	dfc00715 	stw	ra,28(sp)
   1b024:	df000615 	stw	fp,24(sp)
   1b028:	df000604 	addi	fp,sp,24
   1b02c:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   1b030:	e0bffc17 	ldw	r2,-16(fp)
   1b034:	1004803a 	cmplt	r2,r2,zero
   1b038:	1000081e 	bne	r2,zero,1b05c <close+0x40>
   1b03c:	e0bffc17 	ldw	r2,-16(fp)
   1b040:	10800324 	muli	r2,r2,12
   1b044:	1007883a 	mov	r3,r2
   1b048:	008000b4 	movhi	r2,2
   1b04c:	10bf0b04 	addi	r2,r2,-980
   1b050:	1887883a 	add	r3,r3,r2
   1b054:	e0ffff15 	stw	r3,-4(fp)
   1b058:	00000106 	br	1b060 <close+0x44>
   1b05c:	e03fff15 	stw	zero,-4(fp)
   1b060:	e0bfff17 	ldw	r2,-4(fp)
   1b064:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
   1b068:	e0bffb17 	ldw	r2,-20(fp)
   1b06c:	1005003a 	cmpeq	r2,r2,zero
   1b070:	10001d1e 	bne	r2,zero,1b0e8 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   1b074:	e0bffb17 	ldw	r2,-20(fp)
   1b078:	10800017 	ldw	r2,0(r2)
   1b07c:	10800417 	ldw	r2,16(r2)
   1b080:	1005003a 	cmpeq	r2,r2,zero
   1b084:	1000071e 	bne	r2,zero,1b0a4 <close+0x88>
   1b088:	e0bffb17 	ldw	r2,-20(fp)
   1b08c:	10800017 	ldw	r2,0(r2)
   1b090:	10800417 	ldw	r2,16(r2)
   1b094:	e13ffb17 	ldw	r4,-20(fp)
   1b098:	103ee83a 	callr	r2
   1b09c:	e0bffe15 	stw	r2,-8(fp)
   1b0a0:	00000106 	br	1b0a8 <close+0x8c>
   1b0a4:	e03ffe15 	stw	zero,-8(fp)
   1b0a8:	e0bffe17 	ldw	r2,-8(fp)
   1b0ac:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   1b0b0:	e13ffc17 	ldw	r4,-16(fp)
   1b0b4:	001bd440 	call	1bd44 <alt_release_fd>
    if (rval < 0)
   1b0b8:	e0bffa17 	ldw	r2,-24(fp)
   1b0bc:	1004403a 	cmpge	r2,r2,zero
   1b0c0:	1000071e 	bne	r2,zero,1b0e0 <close+0xc4>
    {
      ALT_ERRNO = -rval;
   1b0c4:	001b1180 	call	1b118 <alt_get_errno>
   1b0c8:	e0fffa17 	ldw	r3,-24(fp)
   1b0cc:	00c7c83a 	sub	r3,zero,r3
   1b0d0:	10c00015 	stw	r3,0(r2)
      return -1;
   1b0d4:	00bfffc4 	movi	r2,-1
   1b0d8:	e0bffd15 	stw	r2,-12(fp)
   1b0dc:	00000806 	br	1b100 <close+0xe4>
    }
    return 0;
   1b0e0:	e03ffd15 	stw	zero,-12(fp)
   1b0e4:	00000606 	br	1b100 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   1b0e8:	001b1180 	call	1b118 <alt_get_errno>
   1b0ec:	1007883a 	mov	r3,r2
   1b0f0:	00801444 	movi	r2,81
   1b0f4:	18800015 	stw	r2,0(r3)
    return -1;
   1b0f8:	00bfffc4 	movi	r2,-1
   1b0fc:	e0bffd15 	stw	r2,-12(fp)
   1b100:	e0bffd17 	ldw	r2,-12(fp)
  }
}
   1b104:	e037883a 	mov	sp,fp
   1b108:	dfc00117 	ldw	ra,4(sp)
   1b10c:	df000017 	ldw	fp,0(sp)
   1b110:	dec00204 	addi	sp,sp,8
   1b114:	f800283a 	ret

0001b118 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1b118:	defffd04 	addi	sp,sp,-12
   1b11c:	dfc00215 	stw	ra,8(sp)
   1b120:	df000115 	stw	fp,4(sp)
   1b124:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   1b128:	008000b4 	movhi	r2,2
   1b12c:	1083b804 	addi	r2,r2,3808
   1b130:	10800017 	ldw	r2,0(r2)
   1b134:	1005003a 	cmpeq	r2,r2,zero
   1b138:	1000061e 	bne	r2,zero,1b154 <alt_get_errno+0x3c>
   1b13c:	008000b4 	movhi	r2,2
   1b140:	1083b804 	addi	r2,r2,3808
   1b144:	10800017 	ldw	r2,0(r2)
   1b148:	103ee83a 	callr	r2
   1b14c:	e0bfff15 	stw	r2,-4(fp)
   1b150:	00000306 	br	1b160 <alt_get_errno+0x48>
   1b154:	008000b4 	movhi	r2,2
   1b158:	108ab304 	addi	r2,r2,10956
   1b15c:	e0bfff15 	stw	r2,-4(fp)
   1b160:	e0bfff17 	ldw	r2,-4(fp)
}
   1b164:	e037883a 	mov	sp,fp
   1b168:	dfc00117 	ldw	ra,4(sp)
   1b16c:	df000017 	ldw	fp,0(sp)
   1b170:	dec00204 	addi	sp,sp,8
   1b174:	f800283a 	ret

0001b178 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   1b178:	defffc04 	addi	sp,sp,-16
   1b17c:	df000315 	stw	fp,12(sp)
   1b180:	df000304 	addi	fp,sp,12
   1b184:	e13ffd15 	stw	r4,-12(fp)
   1b188:	e17ffe15 	stw	r5,-8(fp)
   1b18c:	e1bfff15 	stw	r6,-4(fp)
  return len;
   1b190:	e0bfff17 	ldw	r2,-4(fp)
}
   1b194:	e037883a 	mov	sp,fp
   1b198:	df000017 	ldw	fp,0(sp)
   1b19c:	dec00104 	addi	sp,sp,4
   1b1a0:	f800283a 	ret

0001b1a4 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
   1b1a4:	defffd04 	addi	sp,sp,-12
   1b1a8:	df000215 	stw	fp,8(sp)
   1b1ac:	df000204 	addi	fp,sp,8
   1b1b0:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
   1b1b4:	e0bfff17 	ldw	r2,-4(fp)
   1b1b8:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   1b1bc:	e0bffe17 	ldw	r2,-8(fp)
   1b1c0:	1005003a 	cmpeq	r2,r2,zero
   1b1c4:	1000021e 	bne	r2,zero,1b1d0 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
   1b1c8:	002af070 	cmpltui	zero,zero,43969
   1b1cc:	00000106 	br	1b1d4 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
   1b1d0:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
   1b1d4:	e037883a 	mov	sp,fp
   1b1d8:	df000017 	ldw	fp,0(sp)
   1b1dc:	dec00104 	addi	sp,sp,4
   1b1e0:	f800283a 	ret

0001b1e4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   1b1e4:	defffd04 	addi	sp,sp,-12
   1b1e8:	dfc00215 	stw	ra,8(sp)
   1b1ec:	df000115 	stw	fp,4(sp)
   1b1f0:	df000104 	addi	fp,sp,4
   1b1f4:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
   1b1f8:	e13fff17 	ldw	r4,-4(fp)
   1b1fc:	001b1a40 	call	1b1a4 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   1b200:	003fff06 	br	1b200 <_exit+0x1c>

0001b204 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   1b204:	defff904 	addi	sp,sp,-28
   1b208:	dfc00615 	stw	ra,24(sp)
   1b20c:	df000515 	stw	fp,20(sp)
   1b210:	df000504 	addi	fp,sp,20
   1b214:	e13ffc15 	stw	r4,-16(fp)
   1b218:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1b21c:	e0bffc17 	ldw	r2,-16(fp)
   1b220:	1004803a 	cmplt	r2,r2,zero
   1b224:	1000081e 	bne	r2,zero,1b248 <fstat+0x44>
   1b228:	e0bffc17 	ldw	r2,-16(fp)
   1b22c:	10800324 	muli	r2,r2,12
   1b230:	1007883a 	mov	r3,r2
   1b234:	008000b4 	movhi	r2,2
   1b238:	10bf0b04 	addi	r2,r2,-980
   1b23c:	1887883a 	add	r3,r3,r2
   1b240:	e0ffff15 	stw	r3,-4(fp)
   1b244:	00000106 	br	1b24c <fstat+0x48>
   1b248:	e03fff15 	stw	zero,-4(fp)
   1b24c:	e0bfff17 	ldw	r2,-4(fp)
   1b250:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   1b254:	e0bffb17 	ldw	r2,-20(fp)
   1b258:	1005003a 	cmpeq	r2,r2,zero
   1b25c:	1000121e 	bne	r2,zero,1b2a8 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   1b260:	e0bffb17 	ldw	r2,-20(fp)
   1b264:	10800017 	ldw	r2,0(r2)
   1b268:	10800817 	ldw	r2,32(r2)
   1b26c:	1005003a 	cmpeq	r2,r2,zero
   1b270:	1000081e 	bne	r2,zero,1b294 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
   1b274:	e0bffb17 	ldw	r2,-20(fp)
   1b278:	10800017 	ldw	r2,0(r2)
   1b27c:	10800817 	ldw	r2,32(r2)
   1b280:	e13ffb17 	ldw	r4,-20(fp)
   1b284:	e17ffd17 	ldw	r5,-12(fp)
   1b288:	103ee83a 	callr	r2
   1b28c:	e0bffe15 	stw	r2,-8(fp)
   1b290:	00000b06 	br	1b2c0 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   1b294:	e0fffd17 	ldw	r3,-12(fp)
   1b298:	00880004 	movi	r2,8192
   1b29c:	18800115 	stw	r2,4(r3)
      return 0;
   1b2a0:	e03ffe15 	stw	zero,-8(fp)
   1b2a4:	00000606 	br	1b2c0 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   1b2a8:	001b2d80 	call	1b2d8 <alt_get_errno>
   1b2ac:	1007883a 	mov	r3,r2
   1b2b0:	00801444 	movi	r2,81
   1b2b4:	18800015 	stw	r2,0(r3)
    return -1;
   1b2b8:	00bfffc4 	movi	r2,-1
   1b2bc:	e0bffe15 	stw	r2,-8(fp)
   1b2c0:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   1b2c4:	e037883a 	mov	sp,fp
   1b2c8:	dfc00117 	ldw	ra,4(sp)
   1b2cc:	df000017 	ldw	fp,0(sp)
   1b2d0:	dec00204 	addi	sp,sp,8
   1b2d4:	f800283a 	ret

0001b2d8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1b2d8:	defffd04 	addi	sp,sp,-12
   1b2dc:	dfc00215 	stw	ra,8(sp)
   1b2e0:	df000115 	stw	fp,4(sp)
   1b2e4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   1b2e8:	008000b4 	movhi	r2,2
   1b2ec:	1083b804 	addi	r2,r2,3808
   1b2f0:	10800017 	ldw	r2,0(r2)
   1b2f4:	1005003a 	cmpeq	r2,r2,zero
   1b2f8:	1000061e 	bne	r2,zero,1b314 <alt_get_errno+0x3c>
   1b2fc:	008000b4 	movhi	r2,2
   1b300:	1083b804 	addi	r2,r2,3808
   1b304:	10800017 	ldw	r2,0(r2)
   1b308:	103ee83a 	callr	r2
   1b30c:	e0bfff15 	stw	r2,-4(fp)
   1b310:	00000306 	br	1b320 <alt_get_errno+0x48>
   1b314:	008000b4 	movhi	r2,2
   1b318:	108ab304 	addi	r2,r2,10956
   1b31c:	e0bfff15 	stw	r2,-4(fp)
   1b320:	e0bfff17 	ldw	r2,-4(fp)
}
   1b324:	e037883a 	mov	sp,fp
   1b328:	dfc00117 	ldw	ra,4(sp)
   1b32c:	df000017 	ldw	fp,0(sp)
   1b330:	dec00204 	addi	sp,sp,8
   1b334:	f800283a 	ret

0001b338 <getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
   1b338:	deffff04 	addi	sp,sp,-4
   1b33c:	df000015 	stw	fp,0(sp)
   1b340:	d839883a 	mov	fp,sp
  return 0;
   1b344:	0005883a 	mov	r2,zero
}
   1b348:	e037883a 	mov	sp,fp
   1b34c:	df000017 	ldw	fp,0(sp)
   1b350:	dec00104 	addi	sp,sp,4
   1b354:	f800283a 	ret

0001b358 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   1b358:	deffeb04 	addi	sp,sp,-84
   1b35c:	dfc01415 	stw	ra,80(sp)
   1b360:	df001315 	stw	fp,76(sp)
   1b364:	df001304 	addi	fp,sp,76
   1b368:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1b36c:	e0bffd17 	ldw	r2,-12(fp)
   1b370:	1004803a 	cmplt	r2,r2,zero
   1b374:	1000081e 	bne	r2,zero,1b398 <isatty+0x40>
   1b378:	e0bffd17 	ldw	r2,-12(fp)
   1b37c:	10800324 	muli	r2,r2,12
   1b380:	1007883a 	mov	r3,r2
   1b384:	008000b4 	movhi	r2,2
   1b388:	10bf0b04 	addi	r2,r2,-980
   1b38c:	1887883a 	add	r3,r3,r2
   1b390:	e0ffff15 	stw	r3,-4(fp)
   1b394:	00000106 	br	1b39c <isatty+0x44>
   1b398:	e03fff15 	stw	zero,-4(fp)
   1b39c:	e0bfff17 	ldw	r2,-4(fp)
   1b3a0:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
   1b3a4:	e0bfed17 	ldw	r2,-76(fp)
   1b3a8:	1005003a 	cmpeq	r2,r2,zero
   1b3ac:	10000f1e 	bne	r2,zero,1b3ec <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   1b3b0:	e0bfed17 	ldw	r2,-76(fp)
   1b3b4:	10800017 	ldw	r2,0(r2)
   1b3b8:	10800817 	ldw	r2,32(r2)
   1b3bc:	1004c03a 	cmpne	r2,r2,zero
   1b3c0:	1000031e 	bne	r2,zero,1b3d0 <isatty+0x78>
    {
      return 1;
   1b3c4:	00800044 	movi	r2,1
   1b3c8:	e0bffe15 	stw	r2,-8(fp)
   1b3cc:	00000c06 	br	1b400 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   1b3d0:	e17fee04 	addi	r5,fp,-72
   1b3d4:	e13ffd17 	ldw	r4,-12(fp)
   1b3d8:	001b2040 	call	1b204 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   1b3dc:	e0bfef17 	ldw	r2,-68(fp)
   1b3e0:	10880020 	cmpeqi	r2,r2,8192
   1b3e4:	e0bffe15 	stw	r2,-8(fp)
   1b3e8:	00000506 	br	1b400 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   1b3ec:	001b4180 	call	1b418 <alt_get_errno>
   1b3f0:	1007883a 	mov	r3,r2
   1b3f4:	00801444 	movi	r2,81
   1b3f8:	18800015 	stw	r2,0(r3)
    return 0;
   1b3fc:	e03ffe15 	stw	zero,-8(fp)
   1b400:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   1b404:	e037883a 	mov	sp,fp
   1b408:	dfc00117 	ldw	ra,4(sp)
   1b40c:	df000017 	ldw	fp,0(sp)
   1b410:	dec00204 	addi	sp,sp,8
   1b414:	f800283a 	ret

0001b418 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1b418:	defffd04 	addi	sp,sp,-12
   1b41c:	dfc00215 	stw	ra,8(sp)
   1b420:	df000115 	stw	fp,4(sp)
   1b424:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   1b428:	008000b4 	movhi	r2,2
   1b42c:	1083b804 	addi	r2,r2,3808
   1b430:	10800017 	ldw	r2,0(r2)
   1b434:	1005003a 	cmpeq	r2,r2,zero
   1b438:	1000061e 	bne	r2,zero,1b454 <alt_get_errno+0x3c>
   1b43c:	008000b4 	movhi	r2,2
   1b440:	1083b804 	addi	r2,r2,3808
   1b444:	10800017 	ldw	r2,0(r2)
   1b448:	103ee83a 	callr	r2
   1b44c:	e0bfff15 	stw	r2,-4(fp)
   1b450:	00000306 	br	1b460 <alt_get_errno+0x48>
   1b454:	008000b4 	movhi	r2,2
   1b458:	108ab304 	addi	r2,r2,10956
   1b45c:	e0bfff15 	stw	r2,-4(fp)
   1b460:	e0bfff17 	ldw	r2,-4(fp)
}
   1b464:	e037883a 	mov	sp,fp
   1b468:	dfc00117 	ldw	ra,4(sp)
   1b46c:	df000017 	ldw	fp,0(sp)
   1b470:	dec00204 	addi	sp,sp,8
   1b474:	f800283a 	ret

0001b478 <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
   1b478:	defffa04 	addi	sp,sp,-24
   1b47c:	dfc00515 	stw	ra,20(sp)
   1b480:	df000415 	stw	fp,16(sp)
   1b484:	df000404 	addi	fp,sp,16
   1b488:	e13ffd15 	stw	r4,-12(fp)
   1b48c:	e17ffe15 	stw	r5,-8(fp)
  int status = 0;
   1b490:	e03ffc15 	stw	zero,-16(fp)

  if (pid <= 0)
   1b494:	e0bffd17 	ldw	r2,-12(fp)
   1b498:	10800048 	cmpgei	r2,r2,1
   1b49c:	1000301e 	bne	r2,zero,1b560 <kill+0xe8>
  {
    switch (sig)
   1b4a0:	e0bffe17 	ldw	r2,-8(fp)
   1b4a4:	10800828 	cmpgeui	r2,r2,32
   1b4a8:	10002a1e 	bne	r2,zero,1b554 <kill+0xdc>
   1b4ac:	e0bffe17 	ldw	r2,-8(fp)
   1b4b0:	1085883a 	add	r2,r2,r2
   1b4b4:	1087883a 	add	r3,r2,r2
   1b4b8:	008000b4 	movhi	r2,2
   1b4bc:	10ad3304 	addi	r2,r2,-19252
   1b4c0:	1885883a 	add	r2,r3,r2
   1b4c4:	10800017 	ldw	r2,0(r2)
   1b4c8:	1000683a 	jmp	r2
   1b4cc:	0001b574 	movhi	zero,1749
   1b4d0:	0001b554 	movui	zero,1749
   1b4d4:	0001b554 	movui	zero,1749
   1b4d8:	0001b54c 	andi	zero,zero,1749
   1b4dc:	0001b54c 	andi	zero,zero,1749
   1b4e0:	0001b54c 	andi	zero,zero,1749
   1b4e4:	0001b54c 	andi	zero,zero,1749
   1b4e8:	0001b554 	movui	zero,1749
   1b4ec:	0001b54c 	andi	zero,zero,1749
   1b4f0:	0001b54c 	andi	zero,zero,1749
   1b4f4:	0001b54c 	andi	zero,zero,1749
   1b4f8:	0001b54c 	andi	zero,zero,1749
   1b4fc:	0001b54c 	andi	zero,zero,1749
   1b500:	0001b54c 	andi	zero,zero,1749
   1b504:	0001b54c 	andi	zero,zero,1749
   1b508:	0001b54c 	andi	zero,zero,1749
   1b50c:	0001b574 	movhi	zero,1749
   1b510:	0001b554 	movui	zero,1749
   1b514:	0001b554 	movui	zero,1749
   1b518:	0001b554 	movui	zero,1749
   1b51c:	0001b574 	movhi	zero,1749
   1b520:	0001b554 	movui	zero,1749
   1b524:	0001b554 	movui	zero,1749
   1b528:	0001b54c 	andi	zero,zero,1749
   1b52c:	0001b54c 	andi	zero,zero,1749
   1b530:	0001b54c 	andi	zero,zero,1749
   1b534:	0001b54c 	andi	zero,zero,1749
   1b538:	0001b54c 	andi	zero,zero,1749
   1b53c:	0001b554 	movui	zero,1749
   1b540:	0001b554 	movui	zero,1749
   1b544:	0001b54c 	andi	zero,zero,1749
   1b548:	0001b54c 	andi	zero,zero,1749
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
   1b54c:	0009883a 	mov	r4,zero
   1b550:	001b1e40 	call	1b1e4 <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
   1b554:	00800584 	movi	r2,22
   1b558:	e0bffc15 	stw	r2,-16(fp)
   1b55c:	00000506 	br	1b574 <kill+0xfc>
    }
  }

  else if (pid > 0)
   1b560:	e0bffd17 	ldw	r2,-12(fp)
   1b564:	10800050 	cmplti	r2,r2,1
   1b568:	1000021e 	bne	r2,zero,1b574 <kill+0xfc>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
   1b56c:	008000c4 	movi	r2,3
   1b570:	e0bffc15 	stw	r2,-16(fp)
  }

  if (status)
   1b574:	e0bffc17 	ldw	r2,-16(fp)
   1b578:	1005003a 	cmpeq	r2,r2,zero
   1b57c:	1000071e 	bne	r2,zero,1b59c <kill+0x124>
  {
    ALT_ERRNO = status;
   1b580:	001b5b80 	call	1b5b8 <alt_get_errno>
   1b584:	1007883a 	mov	r3,r2
   1b588:	e0bffc17 	ldw	r2,-16(fp)
   1b58c:	18800015 	stw	r2,0(r3)
    return -1;
   1b590:	00bfffc4 	movi	r2,-1
   1b594:	e0bfff15 	stw	r2,-4(fp)
   1b598:	00000106 	br	1b5a0 <kill+0x128>
  }

  return 0;
   1b59c:	e03fff15 	stw	zero,-4(fp)
   1b5a0:	e0bfff17 	ldw	r2,-4(fp)
}
   1b5a4:	e037883a 	mov	sp,fp
   1b5a8:	dfc00117 	ldw	ra,4(sp)
   1b5ac:	df000017 	ldw	fp,0(sp)
   1b5b0:	dec00204 	addi	sp,sp,8
   1b5b4:	f800283a 	ret

0001b5b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1b5b8:	defffd04 	addi	sp,sp,-12
   1b5bc:	dfc00215 	stw	ra,8(sp)
   1b5c0:	df000115 	stw	fp,4(sp)
   1b5c4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   1b5c8:	008000b4 	movhi	r2,2
   1b5cc:	1083b804 	addi	r2,r2,3808
   1b5d0:	10800017 	ldw	r2,0(r2)
   1b5d4:	1005003a 	cmpeq	r2,r2,zero
   1b5d8:	1000061e 	bne	r2,zero,1b5f4 <alt_get_errno+0x3c>
   1b5dc:	008000b4 	movhi	r2,2
   1b5e0:	1083b804 	addi	r2,r2,3808
   1b5e4:	10800017 	ldw	r2,0(r2)
   1b5e8:	103ee83a 	callr	r2
   1b5ec:	e0bfff15 	stw	r2,-4(fp)
   1b5f0:	00000306 	br	1b600 <alt_get_errno+0x48>
   1b5f4:	008000b4 	movhi	r2,2
   1b5f8:	108ab304 	addi	r2,r2,10956
   1b5fc:	e0bfff15 	stw	r2,-4(fp)
   1b600:	e0bfff17 	ldw	r2,-4(fp)
}
   1b604:	e037883a 	mov	sp,fp
   1b608:	dfc00117 	ldw	ra,4(sp)
   1b60c:	df000017 	ldw	fp,0(sp)
   1b610:	dec00204 	addi	sp,sp,8
   1b614:	f800283a 	ret

0001b618 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   1b618:	defffe04 	addi	sp,sp,-8
   1b61c:	dfc00115 	stw	ra,4(sp)
   1b620:	df000015 	stw	fp,0(sp)
   1b624:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   1b628:	010000b4 	movhi	r4,2
   1b62c:	2103cf04 	addi	r4,r4,3900
   1b630:	014000b4 	movhi	r5,2
   1b634:	297cfc04 	addi	r5,r5,-3088
   1b638:	018000b4 	movhi	r6,2
   1b63c:	3183cf04 	addi	r6,r6,3900
   1b640:	001b6980 	call	1b698 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   1b644:	01000034 	movhi	r4,0
   1b648:	21000804 	addi	r4,r4,32
   1b64c:	01400034 	movhi	r5,0
   1b650:	29400804 	addi	r5,r5,32
   1b654:	01800034 	movhi	r6,0
   1b658:	31806d04 	addi	r6,r6,436
   1b65c:	001b6980 	call	1b698 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   1b660:	010000b4 	movhi	r4,2
   1b664:	2139c504 	addi	r4,r4,-6380
   1b668:	014000b4 	movhi	r5,2
   1b66c:	2979c504 	addi	r5,r5,-6380
   1b670:	018000b4 	movhi	r6,2
   1b674:	31bcfc04 	addi	r6,r6,-3088
   1b678:	001b6980 	call	1b698 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   1b67c:	001d54c0 	call	1d54c <alt_dcache_flush_all>
  alt_icache_flush_all();
   1b680:	001da680 	call	1da68 <alt_icache_flush_all>
}
   1b684:	e037883a 	mov	sp,fp
   1b688:	dfc00117 	ldw	ra,4(sp)
   1b68c:	df000017 	ldw	fp,0(sp)
   1b690:	dec00204 	addi	sp,sp,8
   1b694:	f800283a 	ret

0001b698 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   1b698:	defffc04 	addi	sp,sp,-16
   1b69c:	df000315 	stw	fp,12(sp)
   1b6a0:	df000304 	addi	fp,sp,12
   1b6a4:	e13ffd15 	stw	r4,-12(fp)
   1b6a8:	e17ffe15 	stw	r5,-8(fp)
   1b6ac:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   1b6b0:	e0fffe17 	ldw	r3,-8(fp)
   1b6b4:	e0bffd17 	ldw	r2,-12(fp)
   1b6b8:	18800e26 	beq	r3,r2,1b6f4 <alt_load_section+0x5c>
  {
    while( to != end )
   1b6bc:	00000a06 	br	1b6e8 <alt_load_section+0x50>
    {
      *to++ = *from++;
   1b6c0:	e0bffd17 	ldw	r2,-12(fp)
   1b6c4:	10c00017 	ldw	r3,0(r2)
   1b6c8:	e0bffe17 	ldw	r2,-8(fp)
   1b6cc:	10c00015 	stw	r3,0(r2)
   1b6d0:	e0bffe17 	ldw	r2,-8(fp)
   1b6d4:	10800104 	addi	r2,r2,4
   1b6d8:	e0bffe15 	stw	r2,-8(fp)
   1b6dc:	e0bffd17 	ldw	r2,-12(fp)
   1b6e0:	10800104 	addi	r2,r2,4
   1b6e4:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   1b6e8:	e0fffe17 	ldw	r3,-8(fp)
   1b6ec:	e0bfff17 	ldw	r2,-4(fp)
   1b6f0:	18bff31e 	bne	r3,r2,1b6c0 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   1b6f4:	e037883a 	mov	sp,fp
   1b6f8:	df000017 	ldw	fp,0(sp)
   1b6fc:	dec00104 	addi	sp,sp,4
   1b700:	f800283a 	ret

0001b704 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   1b704:	defff804 	addi	sp,sp,-32
   1b708:	dfc00715 	stw	ra,28(sp)
   1b70c:	df000615 	stw	fp,24(sp)
   1b710:	df000604 	addi	fp,sp,24
   1b714:	e13ffc15 	stw	r4,-16(fp)
   1b718:	e17ffd15 	stw	r5,-12(fp)
   1b71c:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   1b720:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1b724:	e0bffc17 	ldw	r2,-16(fp)
   1b728:	1004803a 	cmplt	r2,r2,zero
   1b72c:	1000081e 	bne	r2,zero,1b750 <lseek+0x4c>
   1b730:	e0bffc17 	ldw	r2,-16(fp)
   1b734:	10800324 	muli	r2,r2,12
   1b738:	1007883a 	mov	r3,r2
   1b73c:	008000b4 	movhi	r2,2
   1b740:	10bf0b04 	addi	r2,r2,-980
   1b744:	1887883a 	add	r3,r3,r2
   1b748:	e0ffff15 	stw	r3,-4(fp)
   1b74c:	00000106 	br	1b754 <lseek+0x50>
   1b750:	e03fff15 	stw	zero,-4(fp)
   1b754:	e0bfff17 	ldw	r2,-4(fp)
   1b758:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
   1b75c:	e0bffb17 	ldw	r2,-20(fp)
   1b760:	1005003a 	cmpeq	r2,r2,zero
   1b764:	1000111e 	bne	r2,zero,1b7ac <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   1b768:	e0bffb17 	ldw	r2,-20(fp)
   1b76c:	10800017 	ldw	r2,0(r2)
   1b770:	10800717 	ldw	r2,28(r2)
   1b774:	1005003a 	cmpeq	r2,r2,zero
   1b778:	1000091e 	bne	r2,zero,1b7a0 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   1b77c:	e0bffb17 	ldw	r2,-20(fp)
   1b780:	10800017 	ldw	r2,0(r2)
   1b784:	10800717 	ldw	r2,28(r2)
   1b788:	e13ffb17 	ldw	r4,-20(fp)
   1b78c:	e17ffd17 	ldw	r5,-12(fp)
   1b790:	e1bffe17 	ldw	r6,-8(fp)
   1b794:	103ee83a 	callr	r2
   1b798:	e0bffa15 	stw	r2,-24(fp)
   1b79c:	00000506 	br	1b7b4 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   1b7a0:	00bfde84 	movi	r2,-134
   1b7a4:	e0bffa15 	stw	r2,-24(fp)
   1b7a8:	00000206 	br	1b7b4 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
   1b7ac:	00bfebc4 	movi	r2,-81
   1b7b0:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
   1b7b4:	e0bffa17 	ldw	r2,-24(fp)
   1b7b8:	1004403a 	cmpge	r2,r2,zero
   1b7bc:	1000071e 	bne	r2,zero,1b7dc <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
   1b7c0:	001b7f40 	call	1b7f4 <alt_get_errno>
   1b7c4:	1007883a 	mov	r3,r2
   1b7c8:	e0bffa17 	ldw	r2,-24(fp)
   1b7cc:	0085c83a 	sub	r2,zero,r2
   1b7d0:	18800015 	stw	r2,0(r3)
    rc = -1;
   1b7d4:	00bfffc4 	movi	r2,-1
   1b7d8:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
   1b7dc:	e0bffa17 	ldw	r2,-24(fp)
}
   1b7e0:	e037883a 	mov	sp,fp
   1b7e4:	dfc00117 	ldw	ra,4(sp)
   1b7e8:	df000017 	ldw	fp,0(sp)
   1b7ec:	dec00204 	addi	sp,sp,8
   1b7f0:	f800283a 	ret

0001b7f4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1b7f4:	defffd04 	addi	sp,sp,-12
   1b7f8:	dfc00215 	stw	ra,8(sp)
   1b7fc:	df000115 	stw	fp,4(sp)
   1b800:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   1b804:	008000b4 	movhi	r2,2
   1b808:	1083b804 	addi	r2,r2,3808
   1b80c:	10800017 	ldw	r2,0(r2)
   1b810:	1005003a 	cmpeq	r2,r2,zero
   1b814:	1000061e 	bne	r2,zero,1b830 <alt_get_errno+0x3c>
   1b818:	008000b4 	movhi	r2,2
   1b81c:	1083b804 	addi	r2,r2,3808
   1b820:	10800017 	ldw	r2,0(r2)
   1b824:	103ee83a 	callr	r2
   1b828:	e0bfff15 	stw	r2,-4(fp)
   1b82c:	00000306 	br	1b83c <alt_get_errno+0x48>
   1b830:	008000b4 	movhi	r2,2
   1b834:	108ab304 	addi	r2,r2,10956
   1b838:	e0bfff15 	stw	r2,-4(fp)
   1b83c:	e0bfff17 	ldw	r2,-4(fp)
}
   1b840:	e037883a 	mov	sp,fp
   1b844:	dfc00117 	ldw	ra,4(sp)
   1b848:	df000017 	ldw	fp,0(sp)
   1b84c:	dec00204 	addi	sp,sp,8
   1b850:	f800283a 	ret

0001b854 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   1b854:	defffd04 	addi	sp,sp,-12
   1b858:	dfc00215 	stw	ra,8(sp)
   1b85c:	df000115 	stw	fp,4(sp)
   1b860:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   1b864:	0009883a 	mov	r4,zero
   1b868:	001bfe00 	call	1bfe0 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   1b86c:	001c0140 	call	1c014 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   1b870:	010000b4 	movhi	r4,2
   1b874:	213ceb04 	addi	r4,r4,-3156
   1b878:	014000b4 	movhi	r5,2
   1b87c:	297ceb04 	addi	r5,r5,-3156
   1b880:	018000b4 	movhi	r6,2
   1b884:	31bceb04 	addi	r6,r6,-3156
   1b888:	001de280 	call	1de28 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   1b88c:	001d6a40 	call	1d6a4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   1b890:	010000b4 	movhi	r4,2
   1b894:	2135c204 	addi	r4,r4,-10488
   1b898:	001e0f40 	call	1e0f4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   1b89c:	d1271817 	ldw	r4,-25504(gp)
   1b8a0:	d1671917 	ldw	r5,-25500(gp)
   1b8a4:	d1a71a17 	ldw	r6,-25496(gp)
   1b8a8:	0003a880 	call	3a88 <main>
   1b8ac:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   1b8b0:	01000044 	movi	r4,1
   1b8b4:	001b01c0 	call	1b01c <close>
  exit (result);
   1b8b8:	e13fff17 	ldw	r4,-4(fp)
   1b8bc:	001e1080 	call	1e108 <exit>

0001b8c0 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   1b8c0:	defffe04 	addi	sp,sp,-8
   1b8c4:	df000115 	stw	fp,4(sp)
   1b8c8:	df000104 	addi	fp,sp,4
   1b8cc:	e13fff15 	stw	r4,-4(fp)
}
   1b8d0:	e037883a 	mov	sp,fp
   1b8d4:	df000017 	ldw	fp,0(sp)
   1b8d8:	dec00104 	addi	sp,sp,4
   1b8dc:	f800283a 	ret

0001b8e0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   1b8e0:	defffe04 	addi	sp,sp,-8
   1b8e4:	df000115 	stw	fp,4(sp)
   1b8e8:	df000104 	addi	fp,sp,4
   1b8ec:	e13fff15 	stw	r4,-4(fp)
}
   1b8f0:	e037883a 	mov	sp,fp
   1b8f4:	df000017 	ldw	fp,0(sp)
   1b8f8:	dec00104 	addi	sp,sp,4
   1b8fc:	f800283a 	ret

0001b900 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   1b900:	defffc04 	addi	sp,sp,-16
   1b904:	df000315 	stw	fp,12(sp)
   1b908:	df000304 	addi	fp,sp,12
   1b90c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   1b910:	e0bffe17 	ldw	r2,-8(fp)
   1b914:	10800217 	ldw	r2,8(r2)
   1b918:	10d00034 	orhi	r3,r2,16384
   1b91c:	e0bffe17 	ldw	r2,-8(fp)
   1b920:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1b924:	e03ffd15 	stw	zero,-12(fp)
   1b928:	00002006 	br	1b9ac <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   1b92c:	e0bffd17 	ldw	r2,-12(fp)
   1b930:	00c000b4 	movhi	r3,2
   1b934:	18ff0b04 	addi	r3,r3,-980
   1b938:	10800324 	muli	r2,r2,12
   1b93c:	10c5883a 	add	r2,r2,r3
   1b940:	10c00017 	ldw	r3,0(r2)
   1b944:	e0bffe17 	ldw	r2,-8(fp)
   1b948:	10800017 	ldw	r2,0(r2)
   1b94c:	1880141e 	bne	r3,r2,1b9a0 <alt_file_locked+0xa0>
   1b950:	e0bffd17 	ldw	r2,-12(fp)
   1b954:	00c000b4 	movhi	r3,2
   1b958:	18ff0b04 	addi	r3,r3,-980
   1b95c:	10800324 	muli	r2,r2,12
   1b960:	10c5883a 	add	r2,r2,r3
   1b964:	10800204 	addi	r2,r2,8
   1b968:	10800017 	ldw	r2,0(r2)
   1b96c:	1004403a 	cmpge	r2,r2,zero
   1b970:	10000b1e 	bne	r2,zero,1b9a0 <alt_file_locked+0xa0>
   1b974:	e0bffd17 	ldw	r2,-12(fp)
   1b978:	10800324 	muli	r2,r2,12
   1b97c:	1007883a 	mov	r3,r2
   1b980:	008000b4 	movhi	r2,2
   1b984:	10bf0b04 	addi	r2,r2,-980
   1b988:	1887883a 	add	r3,r3,r2
   1b98c:	e0bffe17 	ldw	r2,-8(fp)
   1b990:	18800326 	beq	r3,r2,1b9a0 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   1b994:	00bffcc4 	movi	r2,-13
   1b998:	e0bfff15 	stw	r2,-4(fp)
   1b99c:	00000a06 	br	1b9c8 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1b9a0:	e0bffd17 	ldw	r2,-12(fp)
   1b9a4:	10800044 	addi	r2,r2,1
   1b9a8:	e0bffd15 	stw	r2,-12(fp)
   1b9ac:	008000b4 	movhi	r2,2
   1b9b0:	1083b704 	addi	r2,r2,3804
   1b9b4:	10800017 	ldw	r2,0(r2)
   1b9b8:	1007883a 	mov	r3,r2
   1b9bc:	e0bffd17 	ldw	r2,-12(fp)
   1b9c0:	18bfda2e 	bgeu	r3,r2,1b92c <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   1b9c4:	e03fff15 	stw	zero,-4(fp)
   1b9c8:	e0bfff17 	ldw	r2,-4(fp)
}
   1b9cc:	e037883a 	mov	sp,fp
   1b9d0:	df000017 	ldw	fp,0(sp)
   1b9d4:	dec00104 	addi	sp,sp,4
   1b9d8:	f800283a 	ret

0001b9dc <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   1b9dc:	defff404 	addi	sp,sp,-48
   1b9e0:	dfc00b15 	stw	ra,44(sp)
   1b9e4:	df000a15 	stw	fp,40(sp)
   1b9e8:	df000a04 	addi	fp,sp,40
   1b9ec:	e13ffb15 	stw	r4,-20(fp)
   1b9f0:	e17ffc15 	stw	r5,-16(fp)
   1b9f4:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   1b9f8:	00bfffc4 	movi	r2,-1
   1b9fc:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
   1ba00:	00bffb44 	movi	r2,-19
   1ba04:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
   1ba08:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   1ba0c:	e13ffb17 	ldw	r4,-20(fp)
   1ba10:	014000b4 	movhi	r5,2
   1ba14:	2943b504 	addi	r5,r5,3796
   1ba18:	001d76c0 	call	1d76c <alt_find_dev>
   1ba1c:	e0bffa15 	stw	r2,-24(fp)
   1ba20:	e0bffa17 	ldw	r2,-24(fp)
   1ba24:	1004c03a 	cmpne	r2,r2,zero
   1ba28:	1000051e 	bne	r2,zero,1ba40 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   1ba2c:	e13ffb17 	ldw	r4,-20(fp)
   1ba30:	001d8000 	call	1d800 <alt_find_file>
   1ba34:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
   1ba38:	00800044 	movi	r2,1
   1ba3c:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   1ba40:	e0bffa17 	ldw	r2,-24(fp)
   1ba44:	1005003a 	cmpeq	r2,r2,zero
   1ba48:	1000301e 	bne	r2,zero,1bb0c <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
   1ba4c:	e13ffa17 	ldw	r4,-24(fp)
   1ba50:	001d9b00 	call	1d9b0 <alt_get_fd>
   1ba54:	e0bff815 	stw	r2,-32(fp)
   1ba58:	e0bff817 	ldw	r2,-32(fp)
   1ba5c:	1004403a 	cmpge	r2,r2,zero
   1ba60:	1000031e 	bne	r2,zero,1ba70 <open+0x94>
    {
      status = index;
   1ba64:	e0bff817 	ldw	r2,-32(fp)
   1ba68:	e0bff715 	stw	r2,-36(fp)
   1ba6c:	00002906 	br	1bb14 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
   1ba70:	e0bff817 	ldw	r2,-32(fp)
   1ba74:	10800324 	muli	r2,r2,12
   1ba78:	1007883a 	mov	r3,r2
   1ba7c:	008000b4 	movhi	r2,2
   1ba80:	10bf0b04 	addi	r2,r2,-980
   1ba84:	1885883a 	add	r2,r3,r2
   1ba88:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   1ba8c:	e0fffc17 	ldw	r3,-16(fp)
   1ba90:	00900034 	movhi	r2,16384
   1ba94:	10bfffc4 	addi	r2,r2,-1
   1ba98:	1886703a 	and	r3,r3,r2
   1ba9c:	e0bff917 	ldw	r2,-28(fp)
   1baa0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   1baa4:	e0bff617 	ldw	r2,-40(fp)
   1baa8:	1004c03a 	cmpne	r2,r2,zero
   1baac:	1000061e 	bne	r2,zero,1bac8 <open+0xec>
   1bab0:	e13ff917 	ldw	r4,-28(fp)
   1bab4:	001b9000 	call	1b900 <alt_file_locked>
   1bab8:	e0bff715 	stw	r2,-36(fp)
   1babc:	e0bff717 	ldw	r2,-36(fp)
   1bac0:	1004803a 	cmplt	r2,r2,zero
   1bac4:	1000131e 	bne	r2,zero,1bb14 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   1bac8:	e0bffa17 	ldw	r2,-24(fp)
   1bacc:	10800317 	ldw	r2,12(r2)
   1bad0:	1005003a 	cmpeq	r2,r2,zero
   1bad4:	1000091e 	bne	r2,zero,1bafc <open+0x120>
   1bad8:	e0bffa17 	ldw	r2,-24(fp)
   1badc:	10800317 	ldw	r2,12(r2)
   1bae0:	e13ff917 	ldw	r4,-28(fp)
   1bae4:	e17ffb17 	ldw	r5,-20(fp)
   1bae8:	e1bffc17 	ldw	r6,-16(fp)
   1baec:	e1fffd17 	ldw	r7,-12(fp)
   1baf0:	103ee83a 	callr	r2
   1baf4:	e0bfff15 	stw	r2,-4(fp)
   1baf8:	00000106 	br	1bb00 <open+0x124>
   1bafc:	e03fff15 	stw	zero,-4(fp)
   1bb00:	e0bfff17 	ldw	r2,-4(fp)
   1bb04:	e0bff715 	stw	r2,-36(fp)
   1bb08:	00000206 	br	1bb14 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
   1bb0c:	00bffb44 	movi	r2,-19
   1bb10:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   1bb14:	e0bff717 	ldw	r2,-36(fp)
   1bb18:	1004403a 	cmpge	r2,r2,zero
   1bb1c:	1000091e 	bne	r2,zero,1bb44 <open+0x168>
  {
    alt_release_fd (index);  
   1bb20:	e13ff817 	ldw	r4,-32(fp)
   1bb24:	001bd440 	call	1bd44 <alt_release_fd>
    ALT_ERRNO = -status;
   1bb28:	001bb640 	call	1bb64 <alt_get_errno>
   1bb2c:	e0fff717 	ldw	r3,-36(fp)
   1bb30:	00c7c83a 	sub	r3,zero,r3
   1bb34:	10c00015 	stw	r3,0(r2)
    return -1;
   1bb38:	00bfffc4 	movi	r2,-1
   1bb3c:	e0bffe15 	stw	r2,-8(fp)
   1bb40:	00000206 	br	1bb4c <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
   1bb44:	e0bff817 	ldw	r2,-32(fp)
   1bb48:	e0bffe15 	stw	r2,-8(fp)
   1bb4c:	e0bffe17 	ldw	r2,-8(fp)
}
   1bb50:	e037883a 	mov	sp,fp
   1bb54:	dfc00117 	ldw	ra,4(sp)
   1bb58:	df000017 	ldw	fp,0(sp)
   1bb5c:	dec00204 	addi	sp,sp,8
   1bb60:	f800283a 	ret

0001bb64 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1bb64:	defffd04 	addi	sp,sp,-12
   1bb68:	dfc00215 	stw	ra,8(sp)
   1bb6c:	df000115 	stw	fp,4(sp)
   1bb70:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   1bb74:	008000b4 	movhi	r2,2
   1bb78:	1083b804 	addi	r2,r2,3808
   1bb7c:	10800017 	ldw	r2,0(r2)
   1bb80:	1005003a 	cmpeq	r2,r2,zero
   1bb84:	1000061e 	bne	r2,zero,1bba0 <alt_get_errno+0x3c>
   1bb88:	008000b4 	movhi	r2,2
   1bb8c:	1083b804 	addi	r2,r2,3808
   1bb90:	10800017 	ldw	r2,0(r2)
   1bb94:	103ee83a 	callr	r2
   1bb98:	e0bfff15 	stw	r2,-4(fp)
   1bb9c:	00000306 	br	1bbac <alt_get_errno+0x48>
   1bba0:	008000b4 	movhi	r2,2
   1bba4:	108ab304 	addi	r2,r2,10956
   1bba8:	e0bfff15 	stw	r2,-4(fp)
   1bbac:	e0bfff17 	ldw	r2,-4(fp)
}
   1bbb0:	e037883a 	mov	sp,fp
   1bbb4:	dfc00117 	ldw	ra,4(sp)
   1bbb8:	df000017 	ldw	fp,0(sp)
   1bbbc:	dec00204 	addi	sp,sp,8
   1bbc0:	f800283a 	ret

0001bbc4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   1bbc4:	defff704 	addi	sp,sp,-36
   1bbc8:	dfc00815 	stw	ra,32(sp)
   1bbcc:	df000715 	stw	fp,28(sp)
   1bbd0:	df000704 	addi	fp,sp,28
   1bbd4:	e13ffb15 	stw	r4,-20(fp)
   1bbd8:	e17ffc15 	stw	r5,-16(fp)
   1bbdc:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1bbe0:	e0bffb17 	ldw	r2,-20(fp)
   1bbe4:	1004803a 	cmplt	r2,r2,zero
   1bbe8:	1000081e 	bne	r2,zero,1bc0c <read+0x48>
   1bbec:	e0bffb17 	ldw	r2,-20(fp)
   1bbf0:	10800324 	muli	r2,r2,12
   1bbf4:	1007883a 	mov	r3,r2
   1bbf8:	008000b4 	movhi	r2,2
   1bbfc:	10bf0b04 	addi	r2,r2,-980
   1bc00:	1887883a 	add	r3,r3,r2
   1bc04:	e0ffff15 	stw	r3,-4(fp)
   1bc08:	00000106 	br	1bc10 <read+0x4c>
   1bc0c:	e03fff15 	stw	zero,-4(fp)
   1bc10:	e0bfff17 	ldw	r2,-4(fp)
   1bc14:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   1bc18:	e0bffa17 	ldw	r2,-24(fp)
   1bc1c:	1005003a 	cmpeq	r2,r2,zero
   1bc20:	1000241e 	bne	r2,zero,1bcb4 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   1bc24:	e0bffa17 	ldw	r2,-24(fp)
   1bc28:	10800217 	ldw	r2,8(r2)
   1bc2c:	108000cc 	andi	r2,r2,3
   1bc30:	10800060 	cmpeqi	r2,r2,1
   1bc34:	10001a1e 	bne	r2,zero,1bca0 <read+0xdc>
   1bc38:	e0bffa17 	ldw	r2,-24(fp)
   1bc3c:	10800017 	ldw	r2,0(r2)
   1bc40:	10800517 	ldw	r2,20(r2)
   1bc44:	1005003a 	cmpeq	r2,r2,zero
   1bc48:	1000151e 	bne	r2,zero,1bca0 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   1bc4c:	e0bffa17 	ldw	r2,-24(fp)
   1bc50:	10800017 	ldw	r2,0(r2)
   1bc54:	10800517 	ldw	r2,20(r2)
   1bc58:	e17ffc17 	ldw	r5,-16(fp)
   1bc5c:	e1bffd17 	ldw	r6,-12(fp)
   1bc60:	e13ffa17 	ldw	r4,-24(fp)
   1bc64:	103ee83a 	callr	r2
   1bc68:	e0bff915 	stw	r2,-28(fp)
   1bc6c:	e0bff917 	ldw	r2,-28(fp)
   1bc70:	1004403a 	cmpge	r2,r2,zero
   1bc74:	1000071e 	bne	r2,zero,1bc94 <read+0xd0>
        {
          ALT_ERRNO = -rval;
   1bc78:	001bce40 	call	1bce4 <alt_get_errno>
   1bc7c:	e0fff917 	ldw	r3,-28(fp)
   1bc80:	00c7c83a 	sub	r3,zero,r3
   1bc84:	10c00015 	stw	r3,0(r2)
          return -1;
   1bc88:	00bfffc4 	movi	r2,-1
   1bc8c:	e0bffe15 	stw	r2,-8(fp)
   1bc90:	00000e06 	br	1bccc <read+0x108>
        }
        return rval;
   1bc94:	e0bff917 	ldw	r2,-28(fp)
   1bc98:	e0bffe15 	stw	r2,-8(fp)
   1bc9c:	00000b06 	br	1bccc <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
   1bca0:	001bce40 	call	1bce4 <alt_get_errno>
   1bca4:	1007883a 	mov	r3,r2
   1bca8:	00800344 	movi	r2,13
   1bcac:	18800015 	stw	r2,0(r3)
   1bcb0:	00000406 	br	1bcc4 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   1bcb4:	001bce40 	call	1bce4 <alt_get_errno>
   1bcb8:	1007883a 	mov	r3,r2
   1bcbc:	00801444 	movi	r2,81
   1bcc0:	18800015 	stw	r2,0(r3)
  }
  return -1;
   1bcc4:	00bfffc4 	movi	r2,-1
   1bcc8:	e0bffe15 	stw	r2,-8(fp)
   1bccc:	e0bffe17 	ldw	r2,-8(fp)
}
   1bcd0:	e037883a 	mov	sp,fp
   1bcd4:	dfc00117 	ldw	ra,4(sp)
   1bcd8:	df000017 	ldw	fp,0(sp)
   1bcdc:	dec00204 	addi	sp,sp,8
   1bce0:	f800283a 	ret

0001bce4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1bce4:	defffd04 	addi	sp,sp,-12
   1bce8:	dfc00215 	stw	ra,8(sp)
   1bcec:	df000115 	stw	fp,4(sp)
   1bcf0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   1bcf4:	008000b4 	movhi	r2,2
   1bcf8:	1083b804 	addi	r2,r2,3808
   1bcfc:	10800017 	ldw	r2,0(r2)
   1bd00:	1005003a 	cmpeq	r2,r2,zero
   1bd04:	1000061e 	bne	r2,zero,1bd20 <alt_get_errno+0x3c>
   1bd08:	008000b4 	movhi	r2,2
   1bd0c:	1083b804 	addi	r2,r2,3808
   1bd10:	10800017 	ldw	r2,0(r2)
   1bd14:	103ee83a 	callr	r2
   1bd18:	e0bfff15 	stw	r2,-4(fp)
   1bd1c:	00000306 	br	1bd2c <alt_get_errno+0x48>
   1bd20:	008000b4 	movhi	r2,2
   1bd24:	108ab304 	addi	r2,r2,10956
   1bd28:	e0bfff15 	stw	r2,-4(fp)
   1bd2c:	e0bfff17 	ldw	r2,-4(fp)
}
   1bd30:	e037883a 	mov	sp,fp
   1bd34:	dfc00117 	ldw	ra,4(sp)
   1bd38:	df000017 	ldw	fp,0(sp)
   1bd3c:	dec00204 	addi	sp,sp,8
   1bd40:	f800283a 	ret

0001bd44 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   1bd44:	defffe04 	addi	sp,sp,-8
   1bd48:	df000115 	stw	fp,4(sp)
   1bd4c:	df000104 	addi	fp,sp,4
   1bd50:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   1bd54:	e0bfff17 	ldw	r2,-4(fp)
   1bd58:	108000d0 	cmplti	r2,r2,3
   1bd5c:	10000d1e 	bne	r2,zero,1bd94 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   1bd60:	e0bfff17 	ldw	r2,-4(fp)
   1bd64:	00c000b4 	movhi	r3,2
   1bd68:	18ff0b04 	addi	r3,r3,-980
   1bd6c:	10800324 	muli	r2,r2,12
   1bd70:	10c5883a 	add	r2,r2,r3
   1bd74:	10800204 	addi	r2,r2,8
   1bd78:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   1bd7c:	e0bfff17 	ldw	r2,-4(fp)
   1bd80:	00c000b4 	movhi	r3,2
   1bd84:	18ff0b04 	addi	r3,r3,-980
   1bd88:	10800324 	muli	r2,r2,12
   1bd8c:	10c5883a 	add	r2,r2,r3
   1bd90:	10000015 	stw	zero,0(r2)
  }
}
   1bd94:	e037883a 	mov	sp,fp
   1bd98:	df000017 	ldw	fp,0(sp)
   1bd9c:	dec00104 	addi	sp,sp,4
   1bda0:	f800283a 	ret

0001bda4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   1bda4:	defff804 	addi	sp,sp,-32
   1bda8:	df000715 	stw	fp,28(sp)
   1bdac:	df000704 	addi	fp,sp,28
   1bdb0:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1bdb4:	0005303a 	rdctl	r2,status
   1bdb8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1bdbc:	e0fffb17 	ldw	r3,-20(fp)
   1bdc0:	00bfff84 	movi	r2,-2
   1bdc4:	1884703a 	and	r2,r3,r2
   1bdc8:	1001703a 	wrctl	status,r2
  
  return context;
   1bdcc:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   1bdd0:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   1bdd4:	d0a01717 	ldw	r2,-32676(gp)
   1bdd8:	10c000c4 	addi	r3,r2,3
   1bddc:	00bfff04 	movi	r2,-4
   1bde0:	1884703a 	and	r2,r3,r2
   1bde4:	d0a01715 	stw	r2,-32676(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   1bde8:	d0e01717 	ldw	r3,-32676(gp)
   1bdec:	e0bffe17 	ldw	r2,-8(fp)
   1bdf0:	1887883a 	add	r3,r3,r2
   1bdf4:	00802034 	movhi	r2,128
   1bdf8:	10800004 	addi	r2,r2,0
   1bdfc:	10c0072e 	bgeu	r2,r3,1be1c <sbrk+0x78>
   1be00:	e0bffd17 	ldw	r2,-12(fp)
   1be04:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1be08:	e0bffa17 	ldw	r2,-24(fp)
   1be0c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   1be10:	00bfffc4 	movi	r2,-1
   1be14:	e0bfff15 	stw	r2,-4(fp)
   1be18:	00000c06 	br	1be4c <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
   1be1c:	d0a01717 	ldw	r2,-32676(gp)
   1be20:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
   1be24:	d0e01717 	ldw	r3,-32676(gp)
   1be28:	e0bffe17 	ldw	r2,-8(fp)
   1be2c:	1885883a 	add	r2,r3,r2
   1be30:	d0a01715 	stw	r2,-32676(gp)
   1be34:	e0bffd17 	ldw	r2,-12(fp)
   1be38:	e0bff915 	stw	r2,-28(fp)
   1be3c:	e0bff917 	ldw	r2,-28(fp)
   1be40:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   1be44:	e0bffc17 	ldw	r2,-16(fp)
   1be48:	e0bfff15 	stw	r2,-4(fp)
   1be4c:	e0bfff17 	ldw	r2,-4(fp)
} 
   1be50:	e037883a 	mov	sp,fp
   1be54:	df000017 	ldw	fp,0(sp)
   1be58:	dec00104 	addi	sp,sp,4
   1be5c:	f800283a 	ret

0001be60 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   1be60:	defff704 	addi	sp,sp,-36
   1be64:	dfc00815 	stw	ra,32(sp)
   1be68:	df000715 	stw	fp,28(sp)
   1be6c:	df000704 	addi	fp,sp,28
   1be70:	e13ffb15 	stw	r4,-20(fp)
   1be74:	e17ffc15 	stw	r5,-16(fp)
   1be78:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1be7c:	e0bffb17 	ldw	r2,-20(fp)
   1be80:	1004803a 	cmplt	r2,r2,zero
   1be84:	1000081e 	bne	r2,zero,1bea8 <write+0x48>
   1be88:	e0bffb17 	ldw	r2,-20(fp)
   1be8c:	10800324 	muli	r2,r2,12
   1be90:	1007883a 	mov	r3,r2
   1be94:	008000b4 	movhi	r2,2
   1be98:	10bf0b04 	addi	r2,r2,-980
   1be9c:	1887883a 	add	r3,r3,r2
   1bea0:	e0ffff15 	stw	r3,-4(fp)
   1bea4:	00000106 	br	1beac <write+0x4c>
   1bea8:	e03fff15 	stw	zero,-4(fp)
   1beac:	e0bfff17 	ldw	r2,-4(fp)
   1beb0:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   1beb4:	e0bffa17 	ldw	r2,-24(fp)
   1beb8:	1005003a 	cmpeq	r2,r2,zero
   1bebc:	1000241e 	bne	r2,zero,1bf50 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   1bec0:	e0bffa17 	ldw	r2,-24(fp)
   1bec4:	10800217 	ldw	r2,8(r2)
   1bec8:	108000cc 	andi	r2,r2,3
   1becc:	1005003a 	cmpeq	r2,r2,zero
   1bed0:	10001a1e 	bne	r2,zero,1bf3c <write+0xdc>
   1bed4:	e0bffa17 	ldw	r2,-24(fp)
   1bed8:	10800017 	ldw	r2,0(r2)
   1bedc:	10800617 	ldw	r2,24(r2)
   1bee0:	1005003a 	cmpeq	r2,r2,zero
   1bee4:	1000151e 	bne	r2,zero,1bf3c <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   1bee8:	e0bffa17 	ldw	r2,-24(fp)
   1beec:	10800017 	ldw	r2,0(r2)
   1bef0:	10800617 	ldw	r2,24(r2)
   1bef4:	e17ffc17 	ldw	r5,-16(fp)
   1bef8:	e1bffd17 	ldw	r6,-12(fp)
   1befc:	e13ffa17 	ldw	r4,-24(fp)
   1bf00:	103ee83a 	callr	r2
   1bf04:	e0bff915 	stw	r2,-28(fp)
   1bf08:	e0bff917 	ldw	r2,-28(fp)
   1bf0c:	1004403a 	cmpge	r2,r2,zero
   1bf10:	1000071e 	bne	r2,zero,1bf30 <write+0xd0>
      {
        ALT_ERRNO = -rval;
   1bf14:	001bf800 	call	1bf80 <alt_get_errno>
   1bf18:	e0fff917 	ldw	r3,-28(fp)
   1bf1c:	00c7c83a 	sub	r3,zero,r3
   1bf20:	10c00015 	stw	r3,0(r2)
        return -1;
   1bf24:	00bfffc4 	movi	r2,-1
   1bf28:	e0bffe15 	stw	r2,-8(fp)
   1bf2c:	00000e06 	br	1bf68 <write+0x108>
      }
      return rval;
   1bf30:	e0bff917 	ldw	r2,-28(fp)
   1bf34:	e0bffe15 	stw	r2,-8(fp)
   1bf38:	00000b06 	br	1bf68 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
   1bf3c:	001bf800 	call	1bf80 <alt_get_errno>
   1bf40:	1007883a 	mov	r3,r2
   1bf44:	00800344 	movi	r2,13
   1bf48:	18800015 	stw	r2,0(r3)
   1bf4c:	00000406 	br	1bf60 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   1bf50:	001bf800 	call	1bf80 <alt_get_errno>
   1bf54:	1007883a 	mov	r3,r2
   1bf58:	00801444 	movi	r2,81
   1bf5c:	18800015 	stw	r2,0(r3)
  }
  return -1;
   1bf60:	00bfffc4 	movi	r2,-1
   1bf64:	e0bffe15 	stw	r2,-8(fp)
   1bf68:	e0bffe17 	ldw	r2,-8(fp)
}
   1bf6c:	e037883a 	mov	sp,fp
   1bf70:	dfc00117 	ldw	ra,4(sp)
   1bf74:	df000017 	ldw	fp,0(sp)
   1bf78:	dec00204 	addi	sp,sp,8
   1bf7c:	f800283a 	ret

0001bf80 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1bf80:	defffd04 	addi	sp,sp,-12
   1bf84:	dfc00215 	stw	ra,8(sp)
   1bf88:	df000115 	stw	fp,4(sp)
   1bf8c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   1bf90:	008000b4 	movhi	r2,2
   1bf94:	1083b804 	addi	r2,r2,3808
   1bf98:	10800017 	ldw	r2,0(r2)
   1bf9c:	1005003a 	cmpeq	r2,r2,zero
   1bfa0:	1000061e 	bne	r2,zero,1bfbc <alt_get_errno+0x3c>
   1bfa4:	008000b4 	movhi	r2,2
   1bfa8:	1083b804 	addi	r2,r2,3808
   1bfac:	10800017 	ldw	r2,0(r2)
   1bfb0:	103ee83a 	callr	r2
   1bfb4:	e0bfff15 	stw	r2,-4(fp)
   1bfb8:	00000306 	br	1bfc8 <alt_get_errno+0x48>
   1bfbc:	008000b4 	movhi	r2,2
   1bfc0:	108ab304 	addi	r2,r2,10956
   1bfc4:	e0bfff15 	stw	r2,-4(fp)
   1bfc8:	e0bfff17 	ldw	r2,-4(fp)
}
   1bfcc:	e037883a 	mov	sp,fp
   1bfd0:	dfc00117 	ldw	ra,4(sp)
   1bfd4:	df000017 	ldw	fp,0(sp)
   1bfd8:	dec00204 	addi	sp,sp,8
   1bfdc:	f800283a 	ret

0001bfe0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   1bfe0:	defffd04 	addi	sp,sp,-12
   1bfe4:	dfc00215 	stw	ra,8(sp)
   1bfe8:	df000115 	stw	fp,4(sp)
   1bfec:	df000104 	addi	fp,sp,4
   1bff0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_PROCESSOR, nios2_processor);
   1bff4:	001e0440 	call	1e044 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   1bff8:	00800044 	movi	r2,1
   1bffc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   1c000:	e037883a 	mov	sp,fp
   1c004:	dfc00117 	ldw	ra,4(sp)
   1c008:	df000017 	ldw	fp,0(sp)
   1c00c:	dec00204 	addi	sp,sp,8
   1c010:	f800283a 	ret

0001c014 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   1c014:	defffd04 	addi	sp,sp,-12
   1c018:	dfc00215 	stw	ra,8(sp)
   1c01c:	df000115 	stw	fp,4(sp)
   1c020:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
   1c024:	01040034 	movhi	r4,4096
   1c028:	21080004 	addi	r4,r4,8192
   1c02c:	000b883a 	mov	r5,zero
   1c030:	000d883a 	mov	r6,zero
   1c034:	01c0fa04 	movi	r7,1000
   1c038:	001cdc80 	call	1cdc8 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   1c03c:	010000b4 	movhi	r4,2
   1c040:	213f7504 	addi	r4,r4,-556
   1c044:	000b883a 	mov	r5,zero
   1c048:	01800404 	movi	r6,16
   1c04c:	001c3f40 	call	1c3f4 <altera_avalon_jtag_uart_init>
   1c050:	010000b4 	movhi	r4,2
   1c054:	213f6b04 	addi	r4,r4,-596
   1c058:	001c2740 	call	1c274 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
    ALTERA_HOSTFS_INIT ( ALTERA_HOSTFS, altera_hostfs);
   1c05c:	010000b4 	movhi	r4,2
   1c060:	21038304 	addi	r4,r4,3596
   1c064:	001d9200 	call	1d920 <alt_fs_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( PIXEL_BUFFER_DMA, Pixel_Buffer_DMA);
   1c068:	008000b4 	movhi	r2,2
   1c06c:	10838d04 	addi	r2,r2,3636
   1c070:	10800a17 	ldw	r2,40(r2)
   1c074:	10800017 	ldw	r2,0(r2)
   1c078:	1007883a 	mov	r3,r2
   1c07c:	008000b4 	movhi	r2,2
   1c080:	10838d04 	addi	r2,r2,3636
   1c084:	10c00b15 	stw	r3,44(r2)
   1c088:	008000b4 	movhi	r2,2
   1c08c:	10838d04 	addi	r2,r2,3636
   1c090:	10800a17 	ldw	r2,40(r2)
   1c094:	10800104 	addi	r2,r2,4
   1c098:	10800017 	ldw	r2,0(r2)
   1c09c:	1007883a 	mov	r3,r2
   1c0a0:	008000b4 	movhi	r2,2
   1c0a4:	10838d04 	addi	r2,r2,3636
   1c0a8:	10c00c15 	stw	r3,48(r2)
   1c0ac:	008000b4 	movhi	r2,2
   1c0b0:	10838d04 	addi	r2,r2,3636
   1c0b4:	10800a17 	ldw	r2,40(r2)
   1c0b8:	10800204 	addi	r2,r2,8
   1c0bc:	10800017 	ldw	r2,0(r2)
   1c0c0:	10ffffcc 	andi	r3,r2,65535
   1c0c4:	008000b4 	movhi	r2,2
   1c0c8:	10838d04 	addi	r2,r2,3636
   1c0cc:	10c00f15 	stw	r3,60(r2)
   1c0d0:	008000b4 	movhi	r2,2
   1c0d4:	10838d04 	addi	r2,r2,3636
   1c0d8:	10800a17 	ldw	r2,40(r2)
   1c0dc:	10800204 	addi	r2,r2,8
   1c0e0:	10800017 	ldw	r2,0(r2)
   1c0e4:	1005d43a 	srai	r2,r2,16
   1c0e8:	10ffffcc 	andi	r3,r2,65535
   1c0ec:	008000b4 	movhi	r2,2
   1c0f0:	10838d04 	addi	r2,r2,3636
   1c0f4:	10c01015 	stw	r3,64(r2)
   1c0f8:	008000b4 	movhi	r2,2
   1c0fc:	10838d04 	addi	r2,r2,3636
   1c100:	10800a17 	ldw	r2,40(r2)
   1c104:	10800304 	addi	r2,r2,12
   1c108:	10800017 	ldw	r2,0(r2)
   1c10c:	1005d07a 	srai	r2,r2,1
   1c110:	10c0004c 	andi	r3,r2,1
   1c114:	008000b4 	movhi	r2,2
   1c118:	10838d04 	addi	r2,r2,3636
   1c11c:	10c00d15 	stw	r3,52(r2)
   1c120:	008000b4 	movhi	r2,2
   1c124:	10838d04 	addi	r2,r2,3636
   1c128:	10800a17 	ldw	r2,40(r2)
   1c12c:	10800304 	addi	r2,r2,12
   1c130:	10800017 	ldw	r2,0(r2)
   1c134:	1005d13a 	srai	r2,r2,4
   1c138:	10c003cc 	andi	r3,r2,15
   1c13c:	008000b4 	movhi	r2,2
   1c140:	10838d04 	addi	r2,r2,3636
   1c144:	10c00e15 	stw	r3,56(r2)
   1c148:	008000b4 	movhi	r2,2
   1c14c:	10838d04 	addi	r2,r2,3636
   1c150:	10800a17 	ldw	r2,40(r2)
   1c154:	10800304 	addi	r2,r2,12
   1c158:	10800017 	ldw	r2,0(r2)
   1c15c:	1005d43a 	srai	r2,r2,16
   1c160:	1007883a 	mov	r3,r2
   1c164:	00bfffc4 	movi	r2,-1
   1c168:	1884703a 	and	r2,r3,r2
   1c16c:	e0bfff45 	stb	r2,-3(fp)
   1c170:	008000b4 	movhi	r2,2
   1c174:	10838d04 	addi	r2,r2,3636
   1c178:	10800a17 	ldw	r2,40(r2)
   1c17c:	10800304 	addi	r2,r2,12
   1c180:	10800017 	ldw	r2,0(r2)
   1c184:	1005d63a 	srai	r2,r2,24
   1c188:	1007883a 	mov	r3,r2
   1c18c:	00bfffc4 	movi	r2,-1
   1c190:	1884703a 	and	r2,r3,r2
   1c194:	e0bfff05 	stb	r2,-4(fp)
   1c198:	008000b4 	movhi	r2,2
   1c19c:	10838d04 	addi	r2,r2,3636
   1c1a0:	10800e17 	ldw	r2,56(r2)
   1c1a4:	10800058 	cmpnei	r2,r2,1
   1c1a8:	1000041e 	bne	r2,zero,1c1bc <alt_sys_init+0x1a8>
   1c1ac:	008000b4 	movhi	r2,2
   1c1b0:	10838d04 	addi	r2,r2,3636
   1c1b4:	10001115 	stw	zero,68(r2)
   1c1b8:	00000e06 	br	1c1f4 <alt_sys_init+0x1e0>
   1c1bc:	008000b4 	movhi	r2,2
   1c1c0:	10838d04 	addi	r2,r2,3636
   1c1c4:	10800e17 	ldw	r2,56(r2)
   1c1c8:	10800098 	cmpnei	r2,r2,2
   1c1cc:	1000051e 	bne	r2,zero,1c1e4 <alt_sys_init+0x1d0>
   1c1d0:	00c000b4 	movhi	r3,2
   1c1d4:	18c38d04 	addi	r3,r3,3636
   1c1d8:	00800044 	movi	r2,1
   1c1dc:	18801115 	stw	r2,68(r3)
   1c1e0:	00000406 	br	1c1f4 <alt_sys_init+0x1e0>
   1c1e4:	00c000b4 	movhi	r3,2
   1c1e8:	18c38d04 	addi	r3,r3,3636
   1c1ec:	00800084 	movi	r2,2
   1c1f0:	18801115 	stw	r2,68(r3)
   1c1f4:	e0ffff43 	ldbu	r3,-3(fp)
   1c1f8:	00800804 	movi	r2,32
   1c1fc:	10c7c83a 	sub	r3,r2,r3
   1c200:	00bfffc4 	movi	r2,-1
   1c204:	10c6d83a 	srl	r3,r2,r3
   1c208:	008000b4 	movhi	r2,2
   1c20c:	10838d04 	addi	r2,r2,3636
   1c210:	10c01215 	stw	r3,72(r2)
   1c214:	e0ffff43 	ldbu	r3,-3(fp)
   1c218:	008000b4 	movhi	r2,2
   1c21c:	10838d04 	addi	r2,r2,3636
   1c220:	10801117 	ldw	r2,68(r2)
   1c224:	1887883a 	add	r3,r3,r2
   1c228:	008000b4 	movhi	r2,2
   1c22c:	10838d04 	addi	r2,r2,3636
   1c230:	10c01315 	stw	r3,76(r2)
   1c234:	e0ffff03 	ldbu	r3,-4(fp)
   1c238:	00800804 	movi	r2,32
   1c23c:	10c7c83a 	sub	r3,r2,r3
   1c240:	00bfffc4 	movi	r2,-1
   1c244:	10c6d83a 	srl	r3,r2,r3
   1c248:	008000b4 	movhi	r2,2
   1c24c:	10838d04 	addi	r2,r2,3636
   1c250:	10c01415 	stw	r3,80(r2)
   1c254:	010000b4 	movhi	r4,2
   1c258:	21038d04 	addi	r4,r4,3636
   1c25c:	001c2740 	call	1c274 <alt_dev_reg>
}
   1c260:	e037883a 	mov	sp,fp
   1c264:	dfc00117 	ldw	ra,4(sp)
   1c268:	df000017 	ldw	fp,0(sp)
   1c26c:	dec00204 	addi	sp,sp,8
   1c270:	f800283a 	ret

0001c274 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   1c274:	defffd04 	addi	sp,sp,-12
   1c278:	dfc00215 	stw	ra,8(sp)
   1c27c:	df000115 	stw	fp,4(sp)
   1c280:	df000104 	addi	fp,sp,4
   1c284:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   1c288:	e13fff17 	ldw	r4,-4(fp)
   1c28c:	014000b4 	movhi	r5,2
   1c290:	2943b504 	addi	r5,r5,3796
   1c294:	001d5900 	call	1d590 <alt_dev_llist_insert>
}
   1c298:	e037883a 	mov	sp,fp
   1c29c:	dfc00117 	ldw	ra,4(sp)
   1c2a0:	df000017 	ldw	fp,0(sp)
   1c2a4:	dec00204 	addi	sp,sp,8
   1c2a8:	f800283a 	ret

0001c2ac <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   1c2ac:	defffa04 	addi	sp,sp,-24
   1c2b0:	dfc00515 	stw	ra,20(sp)
   1c2b4:	df000415 	stw	fp,16(sp)
   1c2b8:	df000404 	addi	fp,sp,16
   1c2bc:	e13ffd15 	stw	r4,-12(fp)
   1c2c0:	e17ffe15 	stw	r5,-8(fp)
   1c2c4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1c2c8:	e0bffd17 	ldw	r2,-12(fp)
   1c2cc:	10800017 	ldw	r2,0(r2)
   1c2d0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   1c2d4:	e0bffc17 	ldw	r2,-16(fp)
   1c2d8:	11000a04 	addi	r4,r2,40
   1c2dc:	e0bffd17 	ldw	r2,-12(fp)
   1c2e0:	11c00217 	ldw	r7,8(r2)
   1c2e4:	e17ffe17 	ldw	r5,-8(fp)
   1c2e8:	e1bfff17 	ldw	r6,-4(fp)
   1c2ec:	001c8f40 	call	1c8f4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   1c2f0:	e037883a 	mov	sp,fp
   1c2f4:	dfc00117 	ldw	ra,4(sp)
   1c2f8:	df000017 	ldw	fp,0(sp)
   1c2fc:	dec00204 	addi	sp,sp,8
   1c300:	f800283a 	ret

0001c304 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   1c304:	defffa04 	addi	sp,sp,-24
   1c308:	dfc00515 	stw	ra,20(sp)
   1c30c:	df000415 	stw	fp,16(sp)
   1c310:	df000404 	addi	fp,sp,16
   1c314:	e13ffd15 	stw	r4,-12(fp)
   1c318:	e17ffe15 	stw	r5,-8(fp)
   1c31c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1c320:	e0bffd17 	ldw	r2,-12(fp)
   1c324:	10800017 	ldw	r2,0(r2)
   1c328:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   1c32c:	e0bffc17 	ldw	r2,-16(fp)
   1c330:	11000a04 	addi	r4,r2,40
   1c334:	e0bffd17 	ldw	r2,-12(fp)
   1c338:	11c00217 	ldw	r7,8(r2)
   1c33c:	e17ffe17 	ldw	r5,-8(fp)
   1c340:	e1bfff17 	ldw	r6,-4(fp)
   1c344:	001cb180 	call	1cb18 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   1c348:	e037883a 	mov	sp,fp
   1c34c:	dfc00117 	ldw	ra,4(sp)
   1c350:	df000017 	ldw	fp,0(sp)
   1c354:	dec00204 	addi	sp,sp,8
   1c358:	f800283a 	ret

0001c35c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   1c35c:	defffc04 	addi	sp,sp,-16
   1c360:	dfc00315 	stw	ra,12(sp)
   1c364:	df000215 	stw	fp,8(sp)
   1c368:	df000204 	addi	fp,sp,8
   1c36c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1c370:	e0bfff17 	ldw	r2,-4(fp)
   1c374:	10800017 	ldw	r2,0(r2)
   1c378:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   1c37c:	e0bffe17 	ldw	r2,-8(fp)
   1c380:	11000a04 	addi	r4,r2,40
   1c384:	e0bfff17 	ldw	r2,-4(fp)
   1c388:	11400217 	ldw	r5,8(r2)
   1c38c:	001c78c0 	call	1c78c <altera_avalon_jtag_uart_close>
}
   1c390:	e037883a 	mov	sp,fp
   1c394:	dfc00117 	ldw	ra,4(sp)
   1c398:	df000017 	ldw	fp,0(sp)
   1c39c:	dec00204 	addi	sp,sp,8
   1c3a0:	f800283a 	ret

0001c3a4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   1c3a4:	defffa04 	addi	sp,sp,-24
   1c3a8:	dfc00515 	stw	ra,20(sp)
   1c3ac:	df000415 	stw	fp,16(sp)
   1c3b0:	df000404 	addi	fp,sp,16
   1c3b4:	e13ffd15 	stw	r4,-12(fp)
   1c3b8:	e17ffe15 	stw	r5,-8(fp)
   1c3bc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   1c3c0:	e0bffd17 	ldw	r2,-12(fp)
   1c3c4:	10800017 	ldw	r2,0(r2)
   1c3c8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   1c3cc:	e0bffc17 	ldw	r2,-16(fp)
   1c3d0:	11000a04 	addi	r4,r2,40
   1c3d4:	e17ffe17 	ldw	r5,-8(fp)
   1c3d8:	e1bfff17 	ldw	r6,-4(fp)
   1c3dc:	001c8000 	call	1c800 <altera_avalon_jtag_uart_ioctl>
}
   1c3e0:	e037883a 	mov	sp,fp
   1c3e4:	dfc00117 	ldw	ra,4(sp)
   1c3e8:	df000017 	ldw	fp,0(sp)
   1c3ec:	dec00204 	addi	sp,sp,8
   1c3f0:	f800283a 	ret

0001c3f4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   1c3f4:	defffa04 	addi	sp,sp,-24
   1c3f8:	dfc00515 	stw	ra,20(sp)
   1c3fc:	df000415 	stw	fp,16(sp)
   1c400:	df000404 	addi	fp,sp,16
   1c404:	e13ffd15 	stw	r4,-12(fp)
   1c408:	e17ffe15 	stw	r5,-8(fp)
   1c40c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1c410:	e0fffd17 	ldw	r3,-12(fp)
   1c414:	00800044 	movi	r2,1
   1c418:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   1c41c:	e0bffd17 	ldw	r2,-12(fp)
   1c420:	10800017 	ldw	r2,0(r2)
   1c424:	11000104 	addi	r4,r2,4
   1c428:	e0bffd17 	ldw	r2,-12(fp)
   1c42c:	10800817 	ldw	r2,32(r2)
   1c430:	1007883a 	mov	r3,r2
   1c434:	2005883a 	mov	r2,r4
   1c438:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   1c43c:	e13ffe17 	ldw	r4,-8(fp)
   1c440:	e17fff17 	ldw	r5,-4(fp)
   1c444:	d8000015 	stw	zero,0(sp)
   1c448:	018000b4 	movhi	r6,2
   1c44c:	31b12d04 	addi	r6,r6,-15180
   1c450:	e1fffd17 	ldw	r7,-12(fp)
   1c454:	001da980 	call	1da98 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   1c458:	e0bffd17 	ldw	r2,-12(fp)
   1c45c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   1c460:	e0bffd17 	ldw	r2,-12(fp)
   1c464:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   1c468:	008000b4 	movhi	r2,2
   1c46c:	108abe04 	addi	r2,r2,11000
   1c470:	10800017 	ldw	r2,0(r2)
   1c474:	100b883a 	mov	r5,r2
   1c478:	018000b4 	movhi	r6,2
   1c47c:	31b1b704 	addi	r6,r6,-14628
   1c480:	e1fffd17 	ldw	r7,-12(fp)
   1c484:	001d3f80 	call	1d3f8 <alt_alarm_start>
   1c488:	1004403a 	cmpge	r2,r2,zero
   1c48c:	1000041e 	bne	r2,zero,1c4a0 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   1c490:	e0fffd17 	ldw	r3,-12(fp)
   1c494:	00a00034 	movhi	r2,32768
   1c498:	10bfffc4 	addi	r2,r2,-1
   1c49c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   1c4a0:	e037883a 	mov	sp,fp
   1c4a4:	dfc00117 	ldw	ra,4(sp)
   1c4a8:	df000017 	ldw	fp,0(sp)
   1c4ac:	dec00204 	addi	sp,sp,8
   1c4b0:	f800283a 	ret

0001c4b4 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   1c4b4:	defff804 	addi	sp,sp,-32
   1c4b8:	df000715 	stw	fp,28(sp)
   1c4bc:	df000704 	addi	fp,sp,28
   1c4c0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   1c4c4:	e0bfff17 	ldw	r2,-4(fp)
   1c4c8:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
   1c4cc:	e0bffe17 	ldw	r2,-8(fp)
   1c4d0:	10800017 	ldw	r2,0(r2)
   1c4d4:	e0bffd15 	stw	r2,-12(fp)
   1c4d8:	00000006 	br	1c4dc <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1c4dc:	e0bffd17 	ldw	r2,-12(fp)
   1c4e0:	10800104 	addi	r2,r2,4
   1c4e4:	10800037 	ldwio	r2,0(r2)
   1c4e8:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   1c4ec:	e0bffc17 	ldw	r2,-16(fp)
   1c4f0:	1080c00c 	andi	r2,r2,768
   1c4f4:	1005003a 	cmpeq	r2,r2,zero
   1c4f8:	1000741e 	bne	r2,zero,1c6cc <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   1c4fc:	e0bffc17 	ldw	r2,-16(fp)
   1c500:	1080400c 	andi	r2,r2,256
   1c504:	1005003a 	cmpeq	r2,r2,zero
   1c508:	1000351e 	bne	r2,zero,1c5e0 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   1c50c:	00800074 	movhi	r2,1
   1c510:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1c514:	e0bffe17 	ldw	r2,-8(fp)
   1c518:	10800a17 	ldw	r2,40(r2)
   1c51c:	10800044 	addi	r2,r2,1
   1c520:	1081ffcc 	andi	r2,r2,2047
   1c524:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
   1c528:	e0bffe17 	ldw	r2,-8(fp)
   1c52c:	10c00b17 	ldw	r3,44(r2)
   1c530:	e0bffa17 	ldw	r2,-24(fp)
   1c534:	18801626 	beq	r3,r2,1c590 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   1c538:	e0bffd17 	ldw	r2,-12(fp)
   1c53c:	10800037 	ldwio	r2,0(r2)
   1c540:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   1c544:	e0bffb17 	ldw	r2,-20(fp)
   1c548:	10a0000c 	andi	r2,r2,32768
   1c54c:	1005003a 	cmpeq	r2,r2,zero
   1c550:	10000f1e 	bne	r2,zero,1c590 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   1c554:	e0bffe17 	ldw	r2,-8(fp)
   1c558:	10c00a17 	ldw	r3,40(r2)
   1c55c:	e0bffb17 	ldw	r2,-20(fp)
   1c560:	1009883a 	mov	r4,r2
   1c564:	e0bffe17 	ldw	r2,-8(fp)
   1c568:	1885883a 	add	r2,r3,r2
   1c56c:	10800e04 	addi	r2,r2,56
   1c570:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1c574:	e0bffe17 	ldw	r2,-8(fp)
   1c578:	10800a17 	ldw	r2,40(r2)
   1c57c:	10800044 	addi	r2,r2,1
   1c580:	10c1ffcc 	andi	r3,r2,2047
   1c584:	e0bffe17 	ldw	r2,-8(fp)
   1c588:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   1c58c:	003fe106 	br	1c514 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   1c590:	e0bffb17 	ldw	r2,-20(fp)
   1c594:	10bfffec 	andhi	r2,r2,65535
   1c598:	1005003a 	cmpeq	r2,r2,zero
   1c59c:	1000101e 	bne	r2,zero,1c5e0 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1c5a0:	e0bffe17 	ldw	r2,-8(fp)
   1c5a4:	10c00817 	ldw	r3,32(r2)
   1c5a8:	00bfff84 	movi	r2,-2
   1c5ac:	1886703a 	and	r3,r3,r2
   1c5b0:	e0bffe17 	ldw	r2,-8(fp)
   1c5b4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   1c5b8:	e0bffd17 	ldw	r2,-12(fp)
   1c5bc:	11000104 	addi	r4,r2,4
   1c5c0:	e0bffe17 	ldw	r2,-8(fp)
   1c5c4:	10800817 	ldw	r2,32(r2)
   1c5c8:	1007883a 	mov	r3,r2
   1c5cc:	2005883a 	mov	r2,r4
   1c5d0:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1c5d4:	e0bffd17 	ldw	r2,-12(fp)
   1c5d8:	10800104 	addi	r2,r2,4
   1c5dc:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   1c5e0:	e0bffc17 	ldw	r2,-16(fp)
   1c5e4:	1080800c 	andi	r2,r2,512
   1c5e8:	1005003a 	cmpeq	r2,r2,zero
   1c5ec:	103fbb1e 	bne	r2,zero,1c4dc <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   1c5f0:	e0bffc17 	ldw	r2,-16(fp)
   1c5f4:	10bfffec 	andhi	r2,r2,65535
   1c5f8:	1004d43a 	srli	r2,r2,16
   1c5fc:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   1c600:	00001506 	br	1c658 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   1c604:	e13ffd17 	ldw	r4,-12(fp)
   1c608:	e0bffe17 	ldw	r2,-8(fp)
   1c60c:	10c00d17 	ldw	r3,52(r2)
   1c610:	e0bffe17 	ldw	r2,-8(fp)
   1c614:	1885883a 	add	r2,r3,r2
   1c618:	10820e04 	addi	r2,r2,2104
   1c61c:	10800003 	ldbu	r2,0(r2)
   1c620:	10c03fcc 	andi	r3,r2,255
   1c624:	18c0201c 	xori	r3,r3,128
   1c628:	18ffe004 	addi	r3,r3,-128
   1c62c:	2005883a 	mov	r2,r4
   1c630:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1c634:	e0bffe17 	ldw	r2,-8(fp)
   1c638:	10800d17 	ldw	r2,52(r2)
   1c63c:	10800044 	addi	r2,r2,1
   1c640:	10c1ffcc 	andi	r3,r2,2047
   1c644:	e0bffe17 	ldw	r2,-8(fp)
   1c648:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   1c64c:	e0bff917 	ldw	r2,-28(fp)
   1c650:	10bfffc4 	addi	r2,r2,-1
   1c654:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   1c658:	e0bff917 	ldw	r2,-28(fp)
   1c65c:	1005003a 	cmpeq	r2,r2,zero
   1c660:	1000051e 	bne	r2,zero,1c678 <altera_avalon_jtag_uart_irq+0x1c4>
   1c664:	e0bffe17 	ldw	r2,-8(fp)
   1c668:	10c00d17 	ldw	r3,52(r2)
   1c66c:	e0bffe17 	ldw	r2,-8(fp)
   1c670:	10800c17 	ldw	r2,48(r2)
   1c674:	18bfe31e 	bne	r3,r2,1c604 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   1c678:	e0bff917 	ldw	r2,-28(fp)
   1c67c:	1005003a 	cmpeq	r2,r2,zero
   1c680:	103f961e 	bne	r2,zero,1c4dc <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   1c684:	e0bffe17 	ldw	r2,-8(fp)
   1c688:	10c00817 	ldw	r3,32(r2)
   1c68c:	00bfff44 	movi	r2,-3
   1c690:	1886703a 	and	r3,r3,r2
   1c694:	e0bffe17 	ldw	r2,-8(fp)
   1c698:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1c69c:	e0bffe17 	ldw	r2,-8(fp)
   1c6a0:	10800017 	ldw	r2,0(r2)
   1c6a4:	11000104 	addi	r4,r2,4
   1c6a8:	e0bffe17 	ldw	r2,-8(fp)
   1c6ac:	10800817 	ldw	r2,32(r2)
   1c6b0:	1007883a 	mov	r3,r2
   1c6b4:	2005883a 	mov	r2,r4
   1c6b8:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1c6bc:	e0bffd17 	ldw	r2,-12(fp)
   1c6c0:	10800104 	addi	r2,r2,4
   1c6c4:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   1c6c8:	003f8406 	br	1c4dc <altera_avalon_jtag_uart_irq+0x28>
}
   1c6cc:	e037883a 	mov	sp,fp
   1c6d0:	df000017 	ldw	fp,0(sp)
   1c6d4:	dec00104 	addi	sp,sp,4
   1c6d8:	f800283a 	ret

0001c6dc <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   1c6dc:	defffc04 	addi	sp,sp,-16
   1c6e0:	df000315 	stw	fp,12(sp)
   1c6e4:	df000304 	addi	fp,sp,12
   1c6e8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   1c6ec:	e0bfff17 	ldw	r2,-4(fp)
   1c6f0:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   1c6f4:	e0bffe17 	ldw	r2,-8(fp)
   1c6f8:	10800017 	ldw	r2,0(r2)
   1c6fc:	10800104 	addi	r2,r2,4
   1c700:	10800037 	ldwio	r2,0(r2)
   1c704:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   1c708:	e0bffd17 	ldw	r2,-12(fp)
   1c70c:	1081000c 	andi	r2,r2,1024
   1c710:	1005003a 	cmpeq	r2,r2,zero
   1c714:	10000c1e 	bne	r2,zero,1c748 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   1c718:	e0bffe17 	ldw	r2,-8(fp)
   1c71c:	10800017 	ldw	r2,0(r2)
   1c720:	11000104 	addi	r4,r2,4
   1c724:	e0bffe17 	ldw	r2,-8(fp)
   1c728:	10800817 	ldw	r2,32(r2)
   1c72c:	10810014 	ori	r2,r2,1024
   1c730:	1007883a 	mov	r3,r2
   1c734:	2005883a 	mov	r2,r4
   1c738:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   1c73c:	e0bffe17 	ldw	r2,-8(fp)
   1c740:	10000915 	stw	zero,36(r2)
   1c744:	00000a06 	br	1c770 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   1c748:	e0bffe17 	ldw	r2,-8(fp)
   1c74c:	10c00917 	ldw	r3,36(r2)
   1c750:	00a00034 	movhi	r2,32768
   1c754:	10bfff04 	addi	r2,r2,-4
   1c758:	10c00536 	bltu	r2,r3,1c770 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
   1c75c:	e0bffe17 	ldw	r2,-8(fp)
   1c760:	10800917 	ldw	r2,36(r2)
   1c764:	10c00044 	addi	r3,r2,1
   1c768:	e0bffe17 	ldw	r2,-8(fp)
   1c76c:	10c00915 	stw	r3,36(r2)
   1c770:	008000b4 	movhi	r2,2
   1c774:	108abe04 	addi	r2,r2,11000
   1c778:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   1c77c:	e037883a 	mov	sp,fp
   1c780:	df000017 	ldw	fp,0(sp)
   1c784:	dec00104 	addi	sp,sp,4
   1c788:	f800283a 	ret

0001c78c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   1c78c:	defffc04 	addi	sp,sp,-16
   1c790:	df000315 	stw	fp,12(sp)
   1c794:	df000304 	addi	fp,sp,12
   1c798:	e13ffd15 	stw	r4,-12(fp)
   1c79c:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   1c7a0:	00000706 	br	1c7c0 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
   1c7a4:	e0bffe17 	ldw	r2,-8(fp)
   1c7a8:	1090000c 	andi	r2,r2,16384
   1c7ac:	1005003a 	cmpeq	r2,r2,zero
   1c7b0:	1000031e 	bne	r2,zero,1c7c0 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
   1c7b4:	00bffd44 	movi	r2,-11
   1c7b8:	e0bfff15 	stw	r2,-4(fp)
   1c7bc:	00000b06 	br	1c7ec <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   1c7c0:	e0bffd17 	ldw	r2,-12(fp)
   1c7c4:	10c00d17 	ldw	r3,52(r2)
   1c7c8:	e0bffd17 	ldw	r2,-12(fp)
   1c7cc:	10800c17 	ldw	r2,48(r2)
   1c7d0:	18800526 	beq	r3,r2,1c7e8 <altera_avalon_jtag_uart_close+0x5c>
   1c7d4:	e0bffd17 	ldw	r2,-12(fp)
   1c7d8:	10c00917 	ldw	r3,36(r2)
   1c7dc:	e0bffd17 	ldw	r2,-12(fp)
   1c7e0:	10800117 	ldw	r2,4(r2)
   1c7e4:	18bfef36 	bltu	r3,r2,1c7a4 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   1c7e8:	e03fff15 	stw	zero,-4(fp)
   1c7ec:	e0bfff17 	ldw	r2,-4(fp)
}
   1c7f0:	e037883a 	mov	sp,fp
   1c7f4:	df000017 	ldw	fp,0(sp)
   1c7f8:	dec00104 	addi	sp,sp,4
   1c7fc:	f800283a 	ret

0001c800 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   1c800:	defff804 	addi	sp,sp,-32
   1c804:	df000715 	stw	fp,28(sp)
   1c808:	df000704 	addi	fp,sp,28
   1c80c:	e13ffb15 	stw	r4,-20(fp)
   1c810:	e17ffc15 	stw	r5,-16(fp)
   1c814:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
   1c818:	00bff9c4 	movi	r2,-25
   1c81c:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
   1c820:	e0bffc17 	ldw	r2,-16(fp)
   1c824:	e0bfff15 	stw	r2,-4(fp)
   1c828:	e0ffff17 	ldw	r3,-4(fp)
   1c82c:	189a8060 	cmpeqi	r2,r3,27137
   1c830:	1000041e 	bne	r2,zero,1c844 <altera_avalon_jtag_uart_ioctl+0x44>
   1c834:	e0ffff17 	ldw	r3,-4(fp)
   1c838:	189a80a0 	cmpeqi	r2,r3,27138
   1c83c:	10001b1e 	bne	r2,zero,1c8ac <altera_avalon_jtag_uart_ioctl+0xac>
   1c840:	00002706 	br	1c8e0 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   1c844:	e0bffb17 	ldw	r2,-20(fp)
   1c848:	10c00117 	ldw	r3,4(r2)
   1c84c:	00a00034 	movhi	r2,32768
   1c850:	10bfffc4 	addi	r2,r2,-1
   1c854:	18802226 	beq	r3,r2,1c8e0 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
   1c858:	e0bffd17 	ldw	r2,-12(fp)
   1c85c:	10800017 	ldw	r2,0(r2)
   1c860:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   1c864:	e0bff917 	ldw	r2,-28(fp)
   1c868:	10800090 	cmplti	r2,r2,2
   1c86c:	1000071e 	bne	r2,zero,1c88c <altera_avalon_jtag_uart_ioctl+0x8c>
   1c870:	e0fff917 	ldw	r3,-28(fp)
   1c874:	00a00034 	movhi	r2,32768
   1c878:	10bfffc4 	addi	r2,r2,-1
   1c87c:	18800326 	beq	r3,r2,1c88c <altera_avalon_jtag_uart_ioctl+0x8c>
   1c880:	e0bff917 	ldw	r2,-28(fp)
   1c884:	e0bffe15 	stw	r2,-8(fp)
   1c888:	00000306 	br	1c898 <altera_avalon_jtag_uart_ioctl+0x98>
   1c88c:	00e00034 	movhi	r3,32768
   1c890:	18ffff84 	addi	r3,r3,-2
   1c894:	e0fffe15 	stw	r3,-8(fp)
   1c898:	e0bffb17 	ldw	r2,-20(fp)
   1c89c:	e0fffe17 	ldw	r3,-8(fp)
   1c8a0:	10c00115 	stw	r3,4(r2)
      rc = 0;
   1c8a4:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
   1c8a8:	00000d06 	br	1c8e0 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   1c8ac:	e0bffb17 	ldw	r2,-20(fp)
   1c8b0:	10c00117 	ldw	r3,4(r2)
   1c8b4:	00a00034 	movhi	r2,32768
   1c8b8:	10bfffc4 	addi	r2,r2,-1
   1c8bc:	18800826 	beq	r3,r2,1c8e0 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   1c8c0:	e13ffd17 	ldw	r4,-12(fp)
   1c8c4:	e0bffb17 	ldw	r2,-20(fp)
   1c8c8:	10c00917 	ldw	r3,36(r2)
   1c8cc:	e0bffb17 	ldw	r2,-20(fp)
   1c8d0:	10800117 	ldw	r2,4(r2)
   1c8d4:	1885803a 	cmpltu	r2,r3,r2
   1c8d8:	20800015 	stw	r2,0(r4)
      rc = 0;
   1c8dc:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
   1c8e0:	e0bffa17 	ldw	r2,-24(fp)
}
   1c8e4:	e037883a 	mov	sp,fp
   1c8e8:	df000017 	ldw	fp,0(sp)
   1c8ec:	dec00104 	addi	sp,sp,4
   1c8f0:	f800283a 	ret

0001c8f4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   1c8f4:	defff204 	addi	sp,sp,-56
   1c8f8:	dfc00d15 	stw	ra,52(sp)
   1c8fc:	df000c15 	stw	fp,48(sp)
   1c900:	df000c04 	addi	fp,sp,48
   1c904:	e13ffb15 	stw	r4,-20(fp)
   1c908:	e17ffc15 	stw	r5,-16(fp)
   1c90c:	e1bffd15 	stw	r6,-12(fp)
   1c910:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
   1c914:	e0bffc17 	ldw	r2,-16(fp)
   1c918:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   1c91c:	00004806 	br	1ca40 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   1c920:	e0bffb17 	ldw	r2,-20(fp)
   1c924:	10800a17 	ldw	r2,40(r2)
   1c928:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   1c92c:	e0bffb17 	ldw	r2,-20(fp)
   1c930:	10800b17 	ldw	r2,44(r2)
   1c934:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
   1c938:	e0fff717 	ldw	r3,-36(fp)
   1c93c:	e0bff617 	ldw	r2,-40(fp)
   1c940:	18800536 	bltu	r3,r2,1c958 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   1c944:	e0bff717 	ldw	r2,-36(fp)
   1c948:	e0fff617 	ldw	r3,-40(fp)
   1c94c:	10c5c83a 	sub	r2,r2,r3
   1c950:	e0bff815 	stw	r2,-32(fp)
   1c954:	00000406 	br	1c968 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   1c958:	00820004 	movi	r2,2048
   1c95c:	e0fff617 	ldw	r3,-40(fp)
   1c960:	10c5c83a 	sub	r2,r2,r3
   1c964:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
   1c968:	e0bff817 	ldw	r2,-32(fp)
   1c96c:	1005003a 	cmpeq	r2,r2,zero
   1c970:	10001f1e 	bne	r2,zero,1c9f0 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
   1c974:	e0fffd17 	ldw	r3,-12(fp)
   1c978:	e0bff817 	ldw	r2,-32(fp)
   1c97c:	1880022e 	bgeu	r3,r2,1c988 <altera_avalon_jtag_uart_read+0x94>
        n = space;
   1c980:	e0bffd17 	ldw	r2,-12(fp)
   1c984:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   1c988:	e0bffb17 	ldw	r2,-20(fp)
   1c98c:	10c00e04 	addi	r3,r2,56
   1c990:	e0bff617 	ldw	r2,-40(fp)
   1c994:	1887883a 	add	r3,r3,r2
   1c998:	e0bffa17 	ldw	r2,-24(fp)
   1c99c:	1009883a 	mov	r4,r2
   1c9a0:	180b883a 	mov	r5,r3
   1c9a4:	e1bff817 	ldw	r6,-32(fp)
   1c9a8:	0013a240 	call	13a24 <memcpy>
      ptr   += n;
   1c9ac:	e0fff817 	ldw	r3,-32(fp)
   1c9b0:	e0bffa17 	ldw	r2,-24(fp)
   1c9b4:	10c5883a 	add	r2,r2,r3
   1c9b8:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
   1c9bc:	e0fffd17 	ldw	r3,-12(fp)
   1c9c0:	e0bff817 	ldw	r2,-32(fp)
   1c9c4:	1885c83a 	sub	r2,r3,r2
   1c9c8:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1c9cc:	e0fff617 	ldw	r3,-40(fp)
   1c9d0:	e0bff817 	ldw	r2,-32(fp)
   1c9d4:	1885883a 	add	r2,r3,r2
   1c9d8:	10c1ffcc 	andi	r3,r2,2047
   1c9dc:	e0bffb17 	ldw	r2,-20(fp)
   1c9e0:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   1c9e4:	e0bffd17 	ldw	r2,-12(fp)
   1c9e8:	10800048 	cmpgei	r2,r2,1
   1c9ec:	103fcc1e 	bne	r2,zero,1c920 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
   1c9f0:	e0fffa17 	ldw	r3,-24(fp)
   1c9f4:	e0bffc17 	ldw	r2,-16(fp)
   1c9f8:	1880141e 	bne	r3,r2,1ca4c <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   1c9fc:	e0bffe17 	ldw	r2,-8(fp)
   1ca00:	1090000c 	andi	r2,r2,16384
   1ca04:	1004c03a 	cmpne	r2,r2,zero
   1ca08:	1000101e 	bne	r2,zero,1ca4c <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   1ca0c:	e0bffb17 	ldw	r2,-20(fp)
   1ca10:	10c00a17 	ldw	r3,40(r2)
   1ca14:	e0bff717 	ldw	r2,-36(fp)
   1ca18:	1880051e 	bne	r3,r2,1ca30 <altera_avalon_jtag_uart_read+0x13c>
   1ca1c:	e0bffb17 	ldw	r2,-20(fp)
   1ca20:	10c00917 	ldw	r3,36(r2)
   1ca24:	e0bffb17 	ldw	r2,-20(fp)
   1ca28:	10800117 	ldw	r2,4(r2)
   1ca2c:	18bff736 	bltu	r3,r2,1ca0c <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   1ca30:	e0bffb17 	ldw	r2,-20(fp)
   1ca34:	10c00a17 	ldw	r3,40(r2)
   1ca38:	e0bff717 	ldw	r2,-36(fp)
   1ca3c:	18800326 	beq	r3,r2,1ca4c <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   1ca40:	e0bffd17 	ldw	r2,-12(fp)
   1ca44:	10800048 	cmpgei	r2,r2,1
   1ca48:	103fb51e 	bne	r2,zero,1c920 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   1ca4c:	e0fffa17 	ldw	r3,-24(fp)
   1ca50:	e0bffc17 	ldw	r2,-16(fp)
   1ca54:	18801926 	beq	r3,r2,1cabc <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1ca58:	0005303a 	rdctl	r2,status
   1ca5c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1ca60:	e0fff517 	ldw	r3,-44(fp)
   1ca64:	00bfff84 	movi	r2,-2
   1ca68:	1884703a 	and	r2,r3,r2
   1ca6c:	1001703a 	wrctl	status,r2
  
  return context;
   1ca70:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   1ca74:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1ca78:	e0bffb17 	ldw	r2,-20(fp)
   1ca7c:	10800817 	ldw	r2,32(r2)
   1ca80:	10c00054 	ori	r3,r2,1
   1ca84:	e0bffb17 	ldw	r2,-20(fp)
   1ca88:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1ca8c:	e0bffb17 	ldw	r2,-20(fp)
   1ca90:	10800017 	ldw	r2,0(r2)
   1ca94:	11000104 	addi	r4,r2,4
   1ca98:	e0bffb17 	ldw	r2,-20(fp)
   1ca9c:	10800817 	ldw	r2,32(r2)
   1caa0:	1007883a 	mov	r3,r2
   1caa4:	2005883a 	mov	r2,r4
   1caa8:	10c00035 	stwio	r3,0(r2)
   1caac:	e0bff917 	ldw	r2,-28(fp)
   1cab0:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1cab4:	e0bff417 	ldw	r2,-48(fp)
   1cab8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   1cabc:	e0fffa17 	ldw	r3,-24(fp)
   1cac0:	e0bffc17 	ldw	r2,-16(fp)
   1cac4:	18800526 	beq	r3,r2,1cadc <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
   1cac8:	e0fffa17 	ldw	r3,-24(fp)
   1cacc:	e0bffc17 	ldw	r2,-16(fp)
   1cad0:	1887c83a 	sub	r3,r3,r2
   1cad4:	e0ffff15 	stw	r3,-4(fp)
   1cad8:	00000906 	br	1cb00 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
   1cadc:	e0bffe17 	ldw	r2,-8(fp)
   1cae0:	1090000c 	andi	r2,r2,16384
   1cae4:	1005003a 	cmpeq	r2,r2,zero
   1cae8:	1000031e 	bne	r2,zero,1caf8 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   1caec:	00bffd44 	movi	r2,-11
   1caf0:	e0bfff15 	stw	r2,-4(fp)
   1caf4:	00000206 	br	1cb00 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
   1caf8:	00bffec4 	movi	r2,-5
   1cafc:	e0bfff15 	stw	r2,-4(fp)
   1cb00:	e0bfff17 	ldw	r2,-4(fp)
}
   1cb04:	e037883a 	mov	sp,fp
   1cb08:	dfc00117 	ldw	ra,4(sp)
   1cb0c:	df000017 	ldw	fp,0(sp)
   1cb10:	dec00204 	addi	sp,sp,8
   1cb14:	f800283a 	ret

0001cb18 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   1cb18:	defff204 	addi	sp,sp,-56
   1cb1c:	dfc00d15 	stw	ra,52(sp)
   1cb20:	df000c15 	stw	fp,48(sp)
   1cb24:	df000c04 	addi	fp,sp,48
   1cb28:	e13ffb15 	stw	r4,-20(fp)
   1cb2c:	e17ffc15 	stw	r5,-16(fp)
   1cb30:	e1bffd15 	stw	r6,-12(fp)
   1cb34:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   1cb38:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   1cb3c:	e0bffc17 	ldw	r2,-16(fp)
   1cb40:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   1cb44:	00003a06 	br	1cc30 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   1cb48:	e0bffb17 	ldw	r2,-20(fp)
   1cb4c:	10800c17 	ldw	r2,48(r2)
   1cb50:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
   1cb54:	e0bffb17 	ldw	r2,-20(fp)
   1cb58:	10800d17 	ldw	r2,52(r2)
   1cb5c:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
   1cb60:	e0fffa17 	ldw	r3,-24(fp)
   1cb64:	e0bff917 	ldw	r2,-28(fp)
   1cb68:	1880062e 	bgeu	r3,r2,1cb84 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   1cb6c:	e0fff917 	ldw	r3,-28(fp)
   1cb70:	e0bffa17 	ldw	r2,-24(fp)
   1cb74:	1885c83a 	sub	r2,r3,r2
   1cb78:	10bfffc4 	addi	r2,r2,-1
   1cb7c:	e0bff815 	stw	r2,-32(fp)
   1cb80:	00000c06 	br	1cbb4 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
   1cb84:	e0bff917 	ldw	r2,-28(fp)
   1cb88:	1005003a 	cmpeq	r2,r2,zero
   1cb8c:	1000051e 	bne	r2,zero,1cba4 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   1cb90:	00820004 	movi	r2,2048
   1cb94:	e0fffa17 	ldw	r3,-24(fp)
   1cb98:	10c5c83a 	sub	r2,r2,r3
   1cb9c:	e0bff815 	stw	r2,-32(fp)
   1cba0:	00000406 	br	1cbb4 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   1cba4:	0081ffc4 	movi	r2,2047
   1cba8:	e0fffa17 	ldw	r3,-24(fp)
   1cbac:	10c5c83a 	sub	r2,r2,r3
   1cbb0:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
   1cbb4:	e0bff817 	ldw	r2,-32(fp)
   1cbb8:	1005003a 	cmpeq	r2,r2,zero
   1cbbc:	10001f1e 	bne	r2,zero,1cc3c <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
   1cbc0:	e0fffd17 	ldw	r3,-12(fp)
   1cbc4:	e0bff817 	ldw	r2,-32(fp)
   1cbc8:	1880022e 	bgeu	r3,r2,1cbd4 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
   1cbcc:	e0bffd17 	ldw	r2,-12(fp)
   1cbd0:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   1cbd4:	e0bffb17 	ldw	r2,-20(fp)
   1cbd8:	10c20e04 	addi	r3,r2,2104
   1cbdc:	e0bffa17 	ldw	r2,-24(fp)
   1cbe0:	1885883a 	add	r2,r3,r2
   1cbe4:	e0fffc17 	ldw	r3,-16(fp)
   1cbe8:	1009883a 	mov	r4,r2
   1cbec:	180b883a 	mov	r5,r3
   1cbf0:	e1bff817 	ldw	r6,-32(fp)
   1cbf4:	0013a240 	call	13a24 <memcpy>
      ptr   += n;
   1cbf8:	e0fff817 	ldw	r3,-32(fp)
   1cbfc:	e0bffc17 	ldw	r2,-16(fp)
   1cc00:	10c5883a 	add	r2,r2,r3
   1cc04:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
   1cc08:	e0fffd17 	ldw	r3,-12(fp)
   1cc0c:	e0bff817 	ldw	r2,-32(fp)
   1cc10:	1885c83a 	sub	r2,r3,r2
   1cc14:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1cc18:	e0fffa17 	ldw	r3,-24(fp)
   1cc1c:	e0bff817 	ldw	r2,-32(fp)
   1cc20:	1885883a 	add	r2,r3,r2
   1cc24:	10c1ffcc 	andi	r3,r2,2047
   1cc28:	e0bffb17 	ldw	r2,-20(fp)
   1cc2c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   1cc30:	e0bffd17 	ldw	r2,-12(fp)
   1cc34:	10800048 	cmpgei	r2,r2,1
   1cc38:	103fc31e 	bne	r2,zero,1cb48 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1cc3c:	0005303a 	rdctl	r2,status
   1cc40:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1cc44:	e0fff517 	ldw	r3,-44(fp)
   1cc48:	00bfff84 	movi	r2,-2
   1cc4c:	1884703a 	and	r2,r3,r2
   1cc50:	1001703a 	wrctl	status,r2
  
  return context;
   1cc54:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   1cc58:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   1cc5c:	e0bffb17 	ldw	r2,-20(fp)
   1cc60:	10800817 	ldw	r2,32(r2)
   1cc64:	10c00094 	ori	r3,r2,2
   1cc68:	e0bffb17 	ldw	r2,-20(fp)
   1cc6c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1cc70:	e0bffb17 	ldw	r2,-20(fp)
   1cc74:	10800017 	ldw	r2,0(r2)
   1cc78:	11000104 	addi	r4,r2,4
   1cc7c:	e0bffb17 	ldw	r2,-20(fp)
   1cc80:	10800817 	ldw	r2,32(r2)
   1cc84:	1007883a 	mov	r3,r2
   1cc88:	2005883a 	mov	r2,r4
   1cc8c:	10c00035 	stwio	r3,0(r2)
   1cc90:	e0bff717 	ldw	r2,-36(fp)
   1cc94:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1cc98:	e0bff417 	ldw	r2,-48(fp)
   1cc9c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   1cca0:	e0bffd17 	ldw	r2,-12(fp)
   1cca4:	10800050 	cmplti	r2,r2,1
   1cca8:	1000111e 	bne	r2,zero,1ccf0 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
   1ccac:	e0bffe17 	ldw	r2,-8(fp)
   1ccb0:	1090000c 	andi	r2,r2,16384
   1ccb4:	1004c03a 	cmpne	r2,r2,zero
   1ccb8:	1000101e 	bne	r2,zero,1ccfc <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   1ccbc:	e0bffb17 	ldw	r2,-20(fp)
   1ccc0:	10c00d17 	ldw	r3,52(r2)
   1ccc4:	e0bff917 	ldw	r2,-28(fp)
   1ccc8:	1880051e 	bne	r3,r2,1cce0 <altera_avalon_jtag_uart_write+0x1c8>
   1cccc:	e0bffb17 	ldw	r2,-20(fp)
   1ccd0:	10c00917 	ldw	r3,36(r2)
   1ccd4:	e0bffb17 	ldw	r2,-20(fp)
   1ccd8:	10800117 	ldw	r2,4(r2)
   1ccdc:	18bff736 	bltu	r3,r2,1ccbc <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   1cce0:	e0bffb17 	ldw	r2,-20(fp)
   1cce4:	10c00d17 	ldw	r3,52(r2)
   1cce8:	e0bff917 	ldw	r2,-28(fp)
   1ccec:	18800326 	beq	r3,r2,1ccfc <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
   1ccf0:	e0bffd17 	ldw	r2,-12(fp)
   1ccf4:	10800048 	cmpgei	r2,r2,1
   1ccf8:	103fcd1e 	bne	r2,zero,1cc30 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   1ccfc:	e0fffc17 	ldw	r3,-16(fp)
   1cd00:	e0bff617 	ldw	r2,-40(fp)
   1cd04:	18800526 	beq	r3,r2,1cd1c <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
   1cd08:	e0fffc17 	ldw	r3,-16(fp)
   1cd0c:	e0bff617 	ldw	r2,-40(fp)
   1cd10:	1887c83a 	sub	r3,r3,r2
   1cd14:	e0ffff15 	stw	r3,-4(fp)
   1cd18:	00000906 	br	1cd40 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
   1cd1c:	e0bffe17 	ldw	r2,-8(fp)
   1cd20:	1090000c 	andi	r2,r2,16384
   1cd24:	1005003a 	cmpeq	r2,r2,zero
   1cd28:	1000031e 	bne	r2,zero,1cd38 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
   1cd2c:	00bffd44 	movi	r2,-11
   1cd30:	e0bfff15 	stw	r2,-4(fp)
   1cd34:	00000206 	br	1cd40 <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   1cd38:	00bffec4 	movi	r2,-5
   1cd3c:	e0bfff15 	stw	r2,-4(fp)
   1cd40:	e0bfff17 	ldw	r2,-4(fp)
}
   1cd44:	e037883a 	mov	sp,fp
   1cd48:	dfc00117 	ldw	ra,4(sp)
   1cd4c:	df000017 	ldw	fp,0(sp)
   1cd50:	dec00204 	addi	sp,sp,8
   1cd54:	f800283a 	ret

0001cd58 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   1cd58:	defffa04 	addi	sp,sp,-24
   1cd5c:	dfc00515 	stw	ra,20(sp)
   1cd60:	df000415 	stw	fp,16(sp)
   1cd64:	df000404 	addi	fp,sp,16
   1cd68:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   1cd6c:	e0bfff17 	ldw	r2,-4(fp)
   1cd70:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   1cd74:	e0bfff17 	ldw	r2,-4(fp)
   1cd78:	10800104 	addi	r2,r2,4
   1cd7c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1cd80:	0005303a 	rdctl	r2,status
   1cd84:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1cd88:	e0fffd17 	ldw	r3,-12(fp)
   1cd8c:	00bfff84 	movi	r2,-2
   1cd90:	1884703a 	and	r2,r3,r2
   1cd94:	1001703a 	wrctl	status,r2
  
  return context;
   1cd98:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   1cd9c:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
   1cda0:	001df380 	call	1df38 <alt_tick>
   1cda4:	e0bffe17 	ldw	r2,-8(fp)
   1cda8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1cdac:	e0bffc17 	ldw	r2,-16(fp)
   1cdb0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   1cdb4:	e037883a 	mov	sp,fp
   1cdb8:	dfc00117 	ldw	ra,4(sp)
   1cdbc:	df000017 	ldw	fp,0(sp)
   1cdc0:	dec00204 	addi	sp,sp,8
   1cdc4:	f800283a 	ret

0001cdc8 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   1cdc8:	defff804 	addi	sp,sp,-32
   1cdcc:	dfc00715 	stw	ra,28(sp)
   1cdd0:	df000615 	stw	fp,24(sp)
   1cdd4:	df000604 	addi	fp,sp,24
   1cdd8:	e13ffc15 	stw	r4,-16(fp)
   1cddc:	e17ffd15 	stw	r5,-12(fp)
   1cde0:	e1bffe15 	stw	r6,-8(fp)
   1cde4:	e1ffff15 	stw	r7,-4(fp)
   1cde8:	e0bfff17 	ldw	r2,-4(fp)
   1cdec:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   1cdf0:	008000b4 	movhi	r2,2
   1cdf4:	108abe04 	addi	r2,r2,11000
   1cdf8:	10800017 	ldw	r2,0(r2)
   1cdfc:	1004c03a 	cmpne	r2,r2,zero
   1ce00:	1000041e 	bne	r2,zero,1ce14 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
   1ce04:	00c000b4 	movhi	r3,2
   1ce08:	18cabe04 	addi	r3,r3,11000
   1ce0c:	e0bffb17 	ldw	r2,-20(fp)
   1ce10:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   1ce14:	e0bffc17 	ldw	r2,-16(fp)
   1ce18:	10800104 	addi	r2,r2,4
   1ce1c:	1007883a 	mov	r3,r2
   1ce20:	008001c4 	movi	r2,7
   1ce24:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   1ce28:	d8000015 	stw	zero,0(sp)
   1ce2c:	e13ffd17 	ldw	r4,-12(fp)
   1ce30:	e17ffe17 	ldw	r5,-8(fp)
   1ce34:	018000b4 	movhi	r6,2
   1ce38:	31b35604 	addi	r6,r6,-12968
   1ce3c:	e1fffc17 	ldw	r7,-16(fp)
   1ce40:	001da980 	call	1da98 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   1ce44:	e037883a 	mov	sp,fp
   1ce48:	dfc00117 	ldw	ra,4(sp)
   1ce4c:	df000017 	ldw	fp,0(sp)
   1ce50:	dec00204 	addi	sp,sp,8
   1ce54:	f800283a 	ret

0001ce58 <alt_hostfs_open>:
* alt_hostfs_open
*
* If we can't find anything return -1
*/
int alt_hostfs_open(alt_fd* fd, const char * name, int flags, int mode)
{
   1ce58:	deffee04 	addi	sp,sp,-72
   1ce5c:	df001115 	stw	fp,68(sp)
   1ce60:	df001104 	addi	fp,sp,68
   1ce64:	e13ffc15 	stw	r4,-16(fp)
   1ce68:	e17ffd15 	stw	r5,-12(fp)
   1ce6c:	e1bffe15 	stw	r6,-8(fp)
   1ce70:	e1ffff15 	stw	r7,-4(fp)
  static const struct HOSTCALL_INFO hcinfo = { 0x0103, "open" };

  alt_hostfs_dev* dev= (alt_hostfs_dev*)fd->dev;
   1ce74:	e0bffc17 	ldw	r2,-16(fp)
   1ce78:	10800017 	ldw	r2,0(r2)
   1ce7c:	e0bffb15 	stw	r2,-20(fp)
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
   1ce80:	e0bffb17 	ldw	r2,-20(fp)
   1ce84:	10800217 	ldw	r2,8(r2)
   1ce88:	e0bff115 	stw	r2,-60(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
   1ce8c:	e0bff117 	ldw	r2,-60(fp)
   1ce90:	10bfffc4 	addi	r2,r2,-1
   1ce94:	e0bff215 	stw	r2,-56(fp)

  while (*++ptr != 0)
   1ce98:	e0bff217 	ldw	r2,-56(fp)
   1ce9c:	10800044 	addi	r2,r2,1
   1cea0:	e0bff215 	stw	r2,-56(fp)
   1cea4:	e0bff217 	ldw	r2,-56(fp)
   1cea8:	10800003 	ldbu	r2,0(r2)
   1ceac:	10803fcc 	andi	r2,r2,255
   1ceb0:	1080201c 	xori	r2,r2,128
   1ceb4:	10bfe004 	addi	r2,r2,-128
   1ceb8:	1004c03a 	cmpne	r2,r2,zero
   1cebc:	103ff61e 	bne	r2,zero,1ce98 <alt_hostfs_open+0x40>
    ;

  return ptr - string;
   1cec0:	e0fff217 	ldw	r3,-56(fp)
   1cec4:	e0bff117 	ldw	r2,-60(fp)
   1cec8:	1885c83a 	sub	r2,r3,r2
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
   1cecc:	1007883a 	mov	r3,r2
   1ced0:	e0bffd17 	ldw	r2,-12(fp)
   1ced4:	1885883a 	add	r2,r3,r2
   1ced8:	10800044 	addi	r2,r2,1
   1cedc:	e0bffd15 	stw	r2,-12(fp)

  r3 = (int)&hcinfo;
   1cee0:	d0a01804 	addi	r2,gp,-32672
   1cee4:	e0bff715 	stw	r2,-36(fp)
  r4 = (int)name;
   1cee8:	e0bffd17 	ldw	r2,-12(fp)
   1ceec:	e0bff615 	stw	r2,-40(fp)
  r5 = flags;
   1cef0:	e0bffe17 	ldw	r2,-8(fp)
   1cef4:	e0bff515 	stw	r2,-44(fp)
  r6 = mode;
   1cef8:	e0bfff17 	ldw	r2,-4(fp)
   1cefc:	e0bff415 	stw	r2,-48(fp)
   1cf00:	e0bffd17 	ldw	r2,-12(fp)
   1cf04:	e0bfef15 	stw	r2,-68(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
   1cf08:	e0bfef17 	ldw	r2,-68(fp)
   1cf0c:	10bfffc4 	addi	r2,r2,-1
   1cf10:	e0bff015 	stw	r2,-64(fp)

  while (*++ptr != 0)
   1cf14:	e0bff017 	ldw	r2,-64(fp)
   1cf18:	10800044 	addi	r2,r2,1
   1cf1c:	e0bff015 	stw	r2,-64(fp)
   1cf20:	e0bff017 	ldw	r2,-64(fp)
   1cf24:	10800003 	ldbu	r2,0(r2)
   1cf28:	10803fcc 	andi	r2,r2,255
   1cf2c:	1080201c 	xori	r2,r2,128
   1cf30:	10bfe004 	addi	r2,r2,-128
   1cf34:	1004c03a 	cmpne	r2,r2,zero
   1cf38:	103ff61e 	bne	r2,zero,1cf14 <alt_hostfs_open+0xbc>
    ;

  return ptr - string;
   1cf3c:	e0fff017 	ldw	r3,-64(fp)
   1cf40:	e0bfef17 	ldw	r2,-68(fp)
   1cf44:	1885c83a 	sub	r2,r3,r2

  r3 = (int)&hcinfo;
  r4 = (int)name;
  r5 = flags;
  r6 = mode;
  r7 = inline_strlen(name);
   1cf48:	e0bff315 	stw	r2,-52(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5), "D06" (r6), "D07" (r7) : "memory" );
   1cf4c:	e13ff617 	ldw	r4,-40(fp)
   1cf50:	e17ff517 	ldw	r5,-44(fp)
   1cf54:	e1bff417 	ldw	r6,-48(fp)
   1cf58:	e1fff317 	ldw	r7,-52(fp)
   1cf5c:	e0fff717 	ldw	r3,-36(fp)
   1cf60:	003da07a 	break	1
   1cf64:	e0bff815 	stw	r2,-32(fp)
   1cf68:	e0fff715 	stw	r3,-36(fp)

  handle = (void *)r2;
   1cf6c:	e0bff817 	ldw	r2,-32(fp)
   1cf70:	e0bff915 	stw	r2,-28(fp)
  error = r3;
   1cf74:	e0bff717 	ldw	r2,-36(fp)
   1cf78:	e0bffa15 	stw	r2,-24(fp)

  if (error == 0)
   1cf7c:	e0bffa17 	ldw	r2,-24(fp)
   1cf80:	1004c03a 	cmpne	r2,r2,zero
   1cf84:	1000031e 	bne	r2,zero,1cf94 <alt_hostfs_open+0x13c>
    fd->priv = handle;
   1cf88:	e0fff917 	ldw	r3,-28(fp)
   1cf8c:	e0bffc17 	ldw	r2,-16(fp)
   1cf90:	10c00115 	stw	r3,4(r2)

  return -error;
   1cf94:	e0bffa17 	ldw	r2,-24(fp)
   1cf98:	0085c83a 	sub	r2,zero,r2
}
   1cf9c:	e037883a 	mov	sp,fp
   1cfa0:	df000017 	ldw	fp,0(sp)
   1cfa4:	dec00104 	addi	sp,sp,4
   1cfa8:	f800283a 	ret

0001cfac <alt_hostfs_close>:
* alt_hostfs_close
*
* Read the file
*/
int alt_hostfs_close(alt_fd* fd)
{
   1cfac:	defffb04 	addi	sp,sp,-20
   1cfb0:	df000415 	stw	fp,16(sp)
   1cfb4:	df000404 	addi	fp,sp,16
   1cfb8:	e13fff15 	stw	r4,-4(fp)
  int error;

  /* Input and output parameters for the hostcall */
  int r3, r4;

  r3 = (int)&hcinfo;
   1cfbc:	d0a01b04 	addi	r2,gp,-32660
   1cfc0:	e0bffd15 	stw	r2,-12(fp)
  r4 = (int)fd->priv;
   1cfc4:	e0bfff17 	ldw	r2,-4(fp)
   1cfc8:	10800117 	ldw	r2,4(r2)
   1cfcc:	e0bffc15 	stw	r2,-16(fp)

  __asm__ volatile("break 1" : "+D03" (r3) : "D04" (r4) );
   1cfd0:	e13ffc17 	ldw	r4,-16(fp)
   1cfd4:	e0fffd17 	ldw	r3,-12(fp)
   1cfd8:	003da07a 	break	1
   1cfdc:	e0fffd15 	stw	r3,-12(fp)

  error = r3;
   1cfe0:	e0bffd17 	ldw	r2,-12(fp)
   1cfe4:	e0bffe15 	stw	r2,-8(fp)

  return -error;
   1cfe8:	e0bffe17 	ldw	r2,-8(fp)
   1cfec:	0085c83a 	sub	r2,zero,r2
}
   1cff0:	e037883a 	mov	sp,fp
   1cff4:	df000017 	ldw	fp,0(sp)
   1cff8:	dec00104 	addi	sp,sp,4
   1cffc:	f800283a 	ret

0001d000 <alt_hostfs_read>:
* alt_hostfs_read
*
* Read the file
*/
int alt_hostfs_read(alt_fd* fd, char * ptr, int len)
{
   1d000:	defff404 	addi	sp,sp,-48
   1d004:	df000b15 	stw	fp,44(sp)
   1d008:	df000b04 	addi	fp,sp,44
   1d00c:	e13ffc15 	stw	r4,-16(fp)
   1d010:	e17ffd15 	stw	r5,-12(fp)
   1d014:	e1bffe15 	stw	r6,-8(fp)
  int rc;

  /* Input and output parameters for the hostcall */
  int r2, r3, r4, r5, r6;

  r3 = (int)&hcinfo;
   1d018:	d0a01e04 	addi	r2,gp,-32648
   1d01c:	e0bff815 	stw	r2,-32(fp)
  r4 = (int)fd->priv;
   1d020:	e0bffc17 	ldw	r2,-16(fp)
   1d024:	10800117 	ldw	r2,4(r2)
   1d028:	e0bff715 	stw	r2,-36(fp)
  r5 = (int)ptr;
   1d02c:	e0bffd17 	ldw	r2,-12(fp)
   1d030:	e0bff615 	stw	r2,-40(fp)
  r6 = len;
   1d034:	e0bffe17 	ldw	r2,-8(fp)
   1d038:	e0bff515 	stw	r2,-44(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5), "D06" (r6) : "memory" );
   1d03c:	e13ff717 	ldw	r4,-36(fp)
   1d040:	e17ff617 	ldw	r5,-40(fp)
   1d044:	e1bff517 	ldw	r6,-44(fp)
   1d048:	e0fff817 	ldw	r3,-32(fp)
   1d04c:	003da07a 	break	1
   1d050:	e0bff915 	stw	r2,-28(fp)
   1d054:	e0fff815 	stw	r3,-32(fp)

  rc = r2;
   1d058:	e0bff917 	ldw	r2,-28(fp)
   1d05c:	e0bffa15 	stw	r2,-24(fp)
  error = r3;
   1d060:	e0bff817 	ldw	r2,-32(fp)
   1d064:	e0bffb15 	stw	r2,-20(fp)

  return (error == 0) ? rc : -error;
   1d068:	e0bffb17 	ldw	r2,-20(fp)
   1d06c:	1005003a 	cmpeq	r2,r2,zero
   1d070:	1000041e 	bne	r2,zero,1d084 <alt_hostfs_read+0x84>
   1d074:	e0bffb17 	ldw	r2,-20(fp)
   1d078:	0085c83a 	sub	r2,zero,r2
   1d07c:	e0bfff15 	stw	r2,-4(fp)
   1d080:	00000206 	br	1d08c <alt_hostfs_read+0x8c>
   1d084:	e0bffa17 	ldw	r2,-24(fp)
   1d088:	e0bfff15 	stw	r2,-4(fp)
   1d08c:	e0bfff17 	ldw	r2,-4(fp)
}
   1d090:	e037883a 	mov	sp,fp
   1d094:	df000017 	ldw	fp,0(sp)
   1d098:	dec00104 	addi	sp,sp,4
   1d09c:	f800283a 	ret

0001d0a0 <alt_hostfs_write>:
* alt_hostfs_write
*
* Read the file
*/
int alt_hostfs_write(alt_fd* fd, const char * ptr, int len)
{
   1d0a0:	defff404 	addi	sp,sp,-48
   1d0a4:	df000b15 	stw	fp,44(sp)
   1d0a8:	df000b04 	addi	fp,sp,44
   1d0ac:	e13ffc15 	stw	r4,-16(fp)
   1d0b0:	e17ffd15 	stw	r5,-12(fp)
   1d0b4:	e1bffe15 	stw	r6,-8(fp)
  int rc;

  /* Input and output parameters for the hostcall */
  int r2, r3, r4, r5, r6;

  r3 = (int)&hcinfo;
   1d0b8:	d0a02104 	addi	r2,gp,-32636
   1d0bc:	e0bff815 	stw	r2,-32(fp)
  r4 = (int)fd->priv;
   1d0c0:	e0bffc17 	ldw	r2,-16(fp)
   1d0c4:	10800117 	ldw	r2,4(r2)
   1d0c8:	e0bff715 	stw	r2,-36(fp)
  r5 = (int)ptr;
   1d0cc:	e0bffd17 	ldw	r2,-12(fp)
   1d0d0:	e0bff615 	stw	r2,-40(fp)
  r6 = len;
   1d0d4:	e0bffe17 	ldw	r2,-8(fp)
   1d0d8:	e0bff515 	stw	r2,-44(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5), "D06" (r6) : "memory" );
   1d0dc:	e13ff717 	ldw	r4,-36(fp)
   1d0e0:	e17ff617 	ldw	r5,-40(fp)
   1d0e4:	e1bff517 	ldw	r6,-44(fp)
   1d0e8:	e0fff817 	ldw	r3,-32(fp)
   1d0ec:	003da07a 	break	1
   1d0f0:	e0bff915 	stw	r2,-28(fp)
   1d0f4:	e0fff815 	stw	r3,-32(fp)

  rc = r2;
   1d0f8:	e0bff917 	ldw	r2,-28(fp)
   1d0fc:	e0bffa15 	stw	r2,-24(fp)
  error = r3;
   1d100:	e0bff817 	ldw	r2,-32(fp)
   1d104:	e0bffb15 	stw	r2,-20(fp)

  return (error == 0) ? rc : -error;
   1d108:	e0bffb17 	ldw	r2,-20(fp)
   1d10c:	1005003a 	cmpeq	r2,r2,zero
   1d110:	1000041e 	bne	r2,zero,1d124 <alt_hostfs_write+0x84>
   1d114:	e0bffb17 	ldw	r2,-20(fp)
   1d118:	0085c83a 	sub	r2,zero,r2
   1d11c:	e0bfff15 	stw	r2,-4(fp)
   1d120:	00000206 	br	1d12c <alt_hostfs_write+0x8c>
   1d124:	e0bffa17 	ldw	r2,-24(fp)
   1d128:	e0bfff15 	stw	r2,-4(fp)
   1d12c:	e0bfff17 	ldw	r2,-4(fp)
}
   1d130:	e037883a 	mov	sp,fp
   1d134:	df000017 	ldw	fp,0(sp)
   1d138:	dec00104 	addi	sp,sp,4
   1d13c:	f800283a 	ret

0001d140 <alt_hostfs_seek>:
* Move around within a file
*
* returns -errno for an error or the offset within the file
*/
int alt_hostfs_seek(alt_fd* fd, int ptr, int dir)
{
   1d140:	defff404 	addi	sp,sp,-48
   1d144:	df000b15 	stw	fp,44(sp)
   1d148:	df000b04 	addi	fp,sp,44
   1d14c:	e13ffc15 	stw	r4,-16(fp)
   1d150:	e17ffd15 	stw	r5,-12(fp)
   1d154:	e1bffe15 	stw	r6,-8(fp)
  int rc;

  /* Input and output parameters for the hostcall */
  int r2, r3, r4, r5, r6;

  r3 = (int)&hcinfo;
   1d158:	d0a02404 	addi	r2,gp,-32624
   1d15c:	e0bff815 	stw	r2,-32(fp)
  r4 = (int)fd->priv;
   1d160:	e0bffc17 	ldw	r2,-16(fp)
   1d164:	10800117 	ldw	r2,4(r2)
   1d168:	e0bff715 	stw	r2,-36(fp)
  r5 = ptr;
   1d16c:	e0bffd17 	ldw	r2,-12(fp)
   1d170:	e0bff615 	stw	r2,-40(fp)
  r6 = dir;
   1d174:	e0bffe17 	ldw	r2,-8(fp)
   1d178:	e0bff515 	stw	r2,-44(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5), "D06" (r6) : "memory" );
   1d17c:	e13ff717 	ldw	r4,-36(fp)
   1d180:	e17ff617 	ldw	r5,-40(fp)
   1d184:	e1bff517 	ldw	r6,-44(fp)
   1d188:	e0fff817 	ldw	r3,-32(fp)
   1d18c:	003da07a 	break	1
   1d190:	e0bff915 	stw	r2,-28(fp)
   1d194:	e0fff815 	stw	r3,-32(fp)

  rc = r2;
   1d198:	e0bff917 	ldw	r2,-28(fp)
   1d19c:	e0bffa15 	stw	r2,-24(fp)
  error = r3;
   1d1a0:	e0bff817 	ldw	r2,-32(fp)
   1d1a4:	e0bffb15 	stw	r2,-20(fp)

  return (error == 0) ? rc : -error;
   1d1a8:	e0bffb17 	ldw	r2,-20(fp)
   1d1ac:	1005003a 	cmpeq	r2,r2,zero
   1d1b0:	1000041e 	bne	r2,zero,1d1c4 <alt_hostfs_seek+0x84>
   1d1b4:	e0bffb17 	ldw	r2,-20(fp)
   1d1b8:	0085c83a 	sub	r2,zero,r2
   1d1bc:	e0bfff15 	stw	r2,-4(fp)
   1d1c0:	00000206 	br	1d1cc <alt_hostfs_seek+0x8c>
   1d1c4:	e0bffa17 	ldw	r2,-24(fp)
   1d1c8:	e0bfff15 	stw	r2,-4(fp)
   1d1cc:	e0bfff17 	ldw	r2,-4(fp)
}
   1d1d0:	e037883a 	mov	sp,fp
   1d1d4:	df000017 	ldw	fp,0(sp)
   1d1d8:	dec00104 	addi	sp,sp,4
   1d1dc:	f800283a 	ret

0001d1e0 <alt_hostfs_fstat>:
* at the lower address.
* We need to copy the structure and byte swap it to make it match our local
* layout of struct stat.
*/
int alt_hostfs_fstat(alt_fd* fd, struct stat* st)
{
   1d1e0:	deffe404 	addi	sp,sp,-112
   1d1e4:	df001b15 	stw	fp,108(sp)
   1d1e8:	df001b04 	addi	fp,sp,108
   1d1ec:	e13ffd15 	stw	r4,-12(fp)
   1d1f0:	e17ffe15 	stw	r5,-8(fp)
  int rc;

  /* Input and output parameters for the hostcall */
  int r2, r3, r4, r5;

  r3 = (int)&hcinfo;
   1d1f4:	d0a02704 	addi	r2,gp,-32612
   1d1f8:	e0bfe915 	stw	r2,-92(fp)
  r4 = (int)fd->priv;
   1d1fc:	e0bffd17 	ldw	r2,-12(fp)
   1d200:	10800117 	ldw	r2,4(r2)
   1d204:	e0bfe815 	stw	r2,-96(fp)
  r5 = (int)&hoststat;
   1d208:	e0bfed04 	addi	r2,fp,-76
   1d20c:	e0bfe715 	stw	r2,-100(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5) : "memory" );
   1d210:	e13fe817 	ldw	r4,-96(fp)
   1d214:	e17fe717 	ldw	r5,-100(fp)
   1d218:	e0ffe917 	ldw	r3,-92(fp)
   1d21c:	003da07a 	break	1
   1d220:	e0bfea15 	stw	r2,-88(fp)
   1d224:	e0ffe915 	stw	r3,-92(fp)

  rc = r2;
   1d228:	e0bfea17 	ldw	r2,-88(fp)
   1d22c:	e0bfeb15 	stw	r2,-84(fp)
  error = r3;
   1d230:	e0bfe917 	ldw	r2,-92(fp)
   1d234:	e0bfec15 	stw	r2,-80(fp)

  if (error == 0)
   1d238:	e0bfec17 	ldw	r2,-80(fp)
   1d23c:	1004c03a 	cmpne	r2,r2,zero
   1d240:	1000651e 	bne	r2,zero,1d3d8 <alt_hostfs_fstat+0x1f8>
     * no change is required.  On a little-endian processor we need to swap
     * the bytes in each word.
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
   1d244:	e0bfed04 	addi	r2,fp,-76
   1d248:	e0bfe615 	stw	r2,-104(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
   1d24c:	e0bfe617 	ldw	r2,-104(fp)
   1d250:	10801004 	addi	r2,r2,64
   1d254:	e0bfe515 	stw	r2,-108(fp)
    for ( ; ptr < end ; ptr++)
   1d258:	00001806 	br	1d2bc <alt_hostfs_fstat+0xdc>
      *ptr = ((*ptr & 0xFF000000) >> 24) |
   1d25c:	e0bfe617 	ldw	r2,-104(fp)
   1d260:	10800017 	ldw	r2,0(r2)
   1d264:	10bfc02c 	andhi	r2,r2,65280
   1d268:	1006d63a 	srli	r3,r2,24
   1d26c:	e0bfe617 	ldw	r2,-104(fp)
   1d270:	10800017 	ldw	r2,0(r2)
   1d274:	10803fec 	andhi	r2,r2,255
   1d278:	1004d23a 	srli	r2,r2,8
   1d27c:	1886b03a 	or	r3,r3,r2
   1d280:	e0bfe617 	ldw	r2,-104(fp)
   1d284:	10800017 	ldw	r2,0(r2)
   1d288:	10bfc00c 	andi	r2,r2,65280
   1d28c:	1004923a 	slli	r2,r2,8
   1d290:	1886b03a 	or	r3,r3,r2
   1d294:	e0bfe617 	ldw	r2,-104(fp)
   1d298:	10800017 	ldw	r2,0(r2)
   1d29c:	10803fcc 	andi	r2,r2,255
   1d2a0:	1004963a 	slli	r2,r2,24
   1d2a4:	1886b03a 	or	r3,r3,r2
   1d2a8:	e0bfe617 	ldw	r2,-104(fp)
   1d2ac:	10c00015 	stw	r3,0(r2)
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
   1d2b0:	e0bfe617 	ldw	r2,-104(fp)
   1d2b4:	10800104 	addi	r2,r2,4
   1d2b8:	e0bfe615 	stw	r2,-104(fp)
   1d2bc:	e0ffe617 	ldw	r3,-104(fp)
   1d2c0:	e0bfe517 	ldw	r2,-108(fp)
   1d2c4:	18bfe536 	bltu	r3,r2,1d25c <alt_hostfs_fstat+0x7c>
             ((*ptr & 0x0000FF00) << 8)  |
             ((*ptr & 0x000000FF) << 24);
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
   1d2c8:	e0bffe17 	ldw	r2,-8(fp)
   1d2cc:	e0bfe615 	stw	r2,-104(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
   1d2d0:	e0bfe617 	ldw	r2,-104(fp)
   1d2d4:	10800f04 	addi	r2,r2,60
   1d2d8:	e0bfe515 	stw	r2,-108(fp)
    for ( ; ptr < end ; ptr++)
   1d2dc:	00000506 	br	1d2f4 <alt_hostfs_fstat+0x114>
      *ptr = 0;
   1d2e0:	e0bfe617 	ldw	r2,-104(fp)
   1d2e4:	10000015 	stw	zero,0(r2)
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
    for ( ; ptr < end ; ptr++)
   1d2e8:	e0bfe617 	ldw	r2,-104(fp)
   1d2ec:	10800104 	addi	r2,r2,4
   1d2f0:	e0bfe615 	stw	r2,-104(fp)
   1d2f4:	e0ffe617 	ldw	r3,-104(fp)
   1d2f8:	e0bfe517 	ldw	r2,-108(fp)
   1d2fc:	18bff836 	bltu	r3,r2,1d2e0 <alt_hostfs_fstat+0x100>

    /* Copy the data provided by the host into our local copy, for data which
     * is provided as 64bit values by the host we just use the least
     * significant word.
     */
    st->st_dev     = hoststat.fst_dev;
   1d300:	e0bfed17 	ldw	r2,-76(fp)
   1d304:	1007883a 	mov	r3,r2
   1d308:	e0bffe17 	ldw	r2,-8(fp)
   1d30c:	10c0000d 	sth	r3,0(r2)
    st->st_ino     = hoststat.fst_ino;
   1d310:	e0bfee17 	ldw	r2,-72(fp)
   1d314:	1007883a 	mov	r3,r2
   1d318:	e0bffe17 	ldw	r2,-8(fp)
   1d31c:	10c0008d 	sth	r3,2(r2)
    st->st_mode    = hoststat.fst_mode;
   1d320:	e0ffef17 	ldw	r3,-68(fp)
   1d324:	e0bffe17 	ldw	r2,-8(fp)
   1d328:	10c00115 	stw	r3,4(r2)
    st->st_nlink   = hoststat.fst_nlink;
   1d32c:	e0bff017 	ldw	r2,-64(fp)
   1d330:	1007883a 	mov	r3,r2
   1d334:	e0bffe17 	ldw	r2,-8(fp)
   1d338:	10c0020d 	sth	r3,8(r2)
    st->st_uid     = hoststat.fst_uid;
   1d33c:	e0bff117 	ldw	r2,-60(fp)
   1d340:	1007883a 	mov	r3,r2
   1d344:	e0bffe17 	ldw	r2,-8(fp)
   1d348:	10c0028d 	sth	r3,10(r2)
    st->st_gid     = hoststat.fst_gid;
   1d34c:	e0bff217 	ldw	r2,-56(fp)
   1d350:	1007883a 	mov	r3,r2
   1d354:	e0bffe17 	ldw	r2,-8(fp)
   1d358:	10c0030d 	sth	r3,12(r2)
    st->st_rdev    = hoststat.fst_rdev;
   1d35c:	e0bff317 	ldw	r2,-52(fp)
   1d360:	1007883a 	mov	r3,r2
   1d364:	e0bffe17 	ldw	r2,-8(fp)
   1d368:	10c0038d 	sth	r3,14(r2)
    st->st_size    = hoststat.fst_size[1];
   1d36c:	e0bff517 	ldw	r2,-44(fp)
   1d370:	1007883a 	mov	r3,r2
   1d374:	e0bffe17 	ldw	r2,-8(fp)
   1d378:	10c00415 	stw	r3,16(r2)

    st->st_atime   = hoststat.fst_atime;
   1d37c:	e0bffa17 	ldw	r2,-24(fp)
   1d380:	1007883a 	mov	r3,r2
   1d384:	e0bffe17 	ldw	r2,-8(fp)
   1d388:	10c00515 	stw	r3,20(r2)
    st->st_mtime   = hoststat.fst_mtime;
   1d38c:	e0bffb17 	ldw	r2,-20(fp)
   1d390:	1007883a 	mov	r3,r2
   1d394:	e0bffe17 	ldw	r2,-8(fp)
   1d398:	10c00715 	stw	r3,28(r2)
    st->st_ctime   = hoststat.fst_ctime;
   1d39c:	e0bffc17 	ldw	r2,-16(fp)
   1d3a0:	1007883a 	mov	r3,r2
   1d3a4:	e0bffe17 	ldw	r2,-8(fp)
   1d3a8:	10c00915 	stw	r3,36(r2)

    st->st_blksize = hoststat.fst_blksize[1];
   1d3ac:	e0bff717 	ldw	r2,-36(fp)
   1d3b0:	1007883a 	mov	r3,r2
   1d3b4:	e0bffe17 	ldw	r2,-8(fp)
   1d3b8:	10c00b15 	stw	r3,44(r2)
    st->st_blocks  = hoststat.fst_blocks[1];
   1d3bc:	e0bff917 	ldw	r2,-28(fp)
   1d3c0:	1007883a 	mov	r3,r2
   1d3c4:	e0bffe17 	ldw	r2,-8(fp)
   1d3c8:	10c00c15 	stw	r3,48(r2)

    return rc;
   1d3cc:	e0bfeb17 	ldw	r2,-84(fp)
   1d3d0:	e0bfff15 	stw	r2,-4(fp)
   1d3d4:	00000306 	br	1d3e4 <alt_hostfs_fstat+0x204>
  }
  else
    return -error;
   1d3d8:	e0bfec17 	ldw	r2,-80(fp)
   1d3dc:	0085c83a 	sub	r2,zero,r2
   1d3e0:	e0bfff15 	stw	r2,-4(fp)
   1d3e4:	e0bfff17 	ldw	r2,-4(fp)
}
   1d3e8:	e037883a 	mov	sp,fp
   1d3ec:	df000017 	ldw	fp,0(sp)
   1d3f0:	dec00104 	addi	sp,sp,4
   1d3f4:	f800283a 	ret

0001d3f8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   1d3f8:	defff404 	addi	sp,sp,-48
   1d3fc:	df000b15 	stw	fp,44(sp)
   1d400:	df000b04 	addi	fp,sp,44
   1d404:	e13ffb15 	stw	r4,-20(fp)
   1d408:	e17ffc15 	stw	r5,-16(fp)
   1d40c:	e1bffd15 	stw	r6,-12(fp)
   1d410:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   1d414:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   1d418:	008000b4 	movhi	r2,2
   1d41c:	108abe04 	addi	r2,r2,11000
   1d420:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   1d424:	1005003a 	cmpeq	r2,r2,zero
   1d428:	1000411e 	bne	r2,zero,1d530 <alt_alarm_start+0x138>
  {
    if (alarm)
   1d42c:	e0bffb17 	ldw	r2,-20(fp)
   1d430:	1005003a 	cmpeq	r2,r2,zero
   1d434:	10003b1e 	bne	r2,zero,1d524 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
   1d438:	e0fffb17 	ldw	r3,-20(fp)
   1d43c:	e0bffd17 	ldw	r2,-12(fp)
   1d440:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
   1d444:	e0fffb17 	ldw	r3,-20(fp)
   1d448:	e0bffe17 	ldw	r2,-8(fp)
   1d44c:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1d450:	0005303a 	rdctl	r2,status
   1d454:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1d458:	e0fff817 	ldw	r3,-32(fp)
   1d45c:	00bfff84 	movi	r2,-2
   1d460:	1884703a 	and	r2,r3,r2
   1d464:	1001703a 	wrctl	status,r2
  
  return context;
   1d468:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   1d46c:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   1d470:	008000b4 	movhi	r2,2
   1d474:	108abf04 	addi	r2,r2,11004
   1d478:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   1d47c:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   1d480:	e0fffc17 	ldw	r3,-16(fp)
   1d484:	e0bff917 	ldw	r2,-28(fp)
   1d488:	1885883a 	add	r2,r3,r2
   1d48c:	10c00044 	addi	r3,r2,1
   1d490:	e0bffb17 	ldw	r2,-20(fp)
   1d494:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   1d498:	e0bffb17 	ldw	r2,-20(fp)
   1d49c:	10c00217 	ldw	r3,8(r2)
   1d4a0:	e0bff917 	ldw	r2,-28(fp)
   1d4a4:	1880042e 	bgeu	r3,r2,1d4b8 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
   1d4a8:	e0fffb17 	ldw	r3,-20(fp)
   1d4ac:	00800044 	movi	r2,1
   1d4b0:	18800405 	stb	r2,16(r3)
   1d4b4:	00000206 	br	1d4c0 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
   1d4b8:	e0bffb17 	ldw	r2,-20(fp)
   1d4bc:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   1d4c0:	e0fffb17 	ldw	r3,-20(fp)
   1d4c4:	008000b4 	movhi	r2,2
   1d4c8:	1083cd04 	addi	r2,r2,3892
   1d4cc:	e0bff615 	stw	r2,-40(fp)
   1d4d0:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   1d4d4:	e0fff717 	ldw	r3,-36(fp)
   1d4d8:	e0bff617 	ldw	r2,-40(fp)
   1d4dc:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   1d4e0:	e0bff617 	ldw	r2,-40(fp)
   1d4e4:	10c00017 	ldw	r3,0(r2)
   1d4e8:	e0bff717 	ldw	r2,-36(fp)
   1d4ec:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   1d4f0:	e0bff617 	ldw	r2,-40(fp)
   1d4f4:	10c00017 	ldw	r3,0(r2)
   1d4f8:	e0bff717 	ldw	r2,-36(fp)
   1d4fc:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   1d500:	e0fff617 	ldw	r3,-40(fp)
   1d504:	e0bff717 	ldw	r2,-36(fp)
   1d508:	18800015 	stw	r2,0(r3)
   1d50c:	e0bffa17 	ldw	r2,-24(fp)
   1d510:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1d514:	e0bff517 	ldw	r2,-44(fp)
   1d518:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   1d51c:	e03fff15 	stw	zero,-4(fp)
   1d520:	00000506 	br	1d538 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
   1d524:	00bffa84 	movi	r2,-22
   1d528:	e0bfff15 	stw	r2,-4(fp)
   1d52c:	00000206 	br	1d538 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
   1d530:	00bfde84 	movi	r2,-134
   1d534:	e0bfff15 	stw	r2,-4(fp)
   1d538:	e0bfff17 	ldw	r2,-4(fp)
  }
}
   1d53c:	e037883a 	mov	sp,fp
   1d540:	df000017 	ldw	fp,0(sp)
   1d544:	dec00104 	addi	sp,sp,4
   1d548:	f800283a 	ret

0001d54c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   1d54c:	defffe04 	addi	sp,sp,-8
   1d550:	df000115 	stw	fp,4(sp)
   1d554:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   1d558:	e03fff15 	stw	zero,-4(fp)
   1d55c:	00000506 	br	1d574 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   1d560:	e0bfff17 	ldw	r2,-4(fp)
   1d564:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   1d568:	e0bfff17 	ldw	r2,-4(fp)
   1d56c:	10800804 	addi	r2,r2,32
   1d570:	e0bfff15 	stw	r2,-4(fp)
   1d574:	e0bfff17 	ldw	r2,-4(fp)
   1d578:	10820030 	cmpltui	r2,r2,2048
   1d57c:	103ff81e 	bne	r2,zero,1d560 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   1d580:	e037883a 	mov	sp,fp
   1d584:	df000017 	ldw	fp,0(sp)
   1d588:	dec00104 	addi	sp,sp,4
   1d58c:	f800283a 	ret

0001d590 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   1d590:	defff904 	addi	sp,sp,-28
   1d594:	dfc00615 	stw	ra,24(sp)
   1d598:	df000515 	stw	fp,20(sp)
   1d59c:	df000504 	addi	fp,sp,20
   1d5a0:	e13ffd15 	stw	r4,-12(fp)
   1d5a4:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   1d5a8:	e0bffd17 	ldw	r2,-12(fp)
   1d5ac:	1005003a 	cmpeq	r2,r2,zero
   1d5b0:	1000041e 	bne	r2,zero,1d5c4 <alt_dev_llist_insert+0x34>
   1d5b4:	e0bffd17 	ldw	r2,-12(fp)
   1d5b8:	10800217 	ldw	r2,8(r2)
   1d5bc:	1004c03a 	cmpne	r2,r2,zero
   1d5c0:	1000071e 	bne	r2,zero,1d5e0 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
   1d5c4:	001d6440 	call	1d644 <alt_get_errno>
   1d5c8:	1007883a 	mov	r3,r2
   1d5cc:	00800584 	movi	r2,22
   1d5d0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   1d5d4:	00bffa84 	movi	r2,-22
   1d5d8:	e0bfff15 	stw	r2,-4(fp)
   1d5dc:	00001306 	br	1d62c <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   1d5e0:	e0fffd17 	ldw	r3,-12(fp)
   1d5e4:	e0bffe17 	ldw	r2,-8(fp)
   1d5e8:	e0bffb15 	stw	r2,-20(fp)
   1d5ec:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   1d5f0:	e0fffc17 	ldw	r3,-16(fp)
   1d5f4:	e0bffb17 	ldw	r2,-20(fp)
   1d5f8:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   1d5fc:	e0bffb17 	ldw	r2,-20(fp)
   1d600:	10c00017 	ldw	r3,0(r2)
   1d604:	e0bffc17 	ldw	r2,-16(fp)
   1d608:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   1d60c:	e0bffb17 	ldw	r2,-20(fp)
   1d610:	10c00017 	ldw	r3,0(r2)
   1d614:	e0bffc17 	ldw	r2,-16(fp)
   1d618:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   1d61c:	e0fffb17 	ldw	r3,-20(fp)
   1d620:	e0bffc17 	ldw	r2,-16(fp)
   1d624:	18800015 	stw	r2,0(r3)

  return 0;  
   1d628:	e03fff15 	stw	zero,-4(fp)
   1d62c:	e0bfff17 	ldw	r2,-4(fp)
}
   1d630:	e037883a 	mov	sp,fp
   1d634:	dfc00117 	ldw	ra,4(sp)
   1d638:	df000017 	ldw	fp,0(sp)
   1d63c:	dec00204 	addi	sp,sp,8
   1d640:	f800283a 	ret

0001d644 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1d644:	defffd04 	addi	sp,sp,-12
   1d648:	dfc00215 	stw	ra,8(sp)
   1d64c:	df000115 	stw	fp,4(sp)
   1d650:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   1d654:	008000b4 	movhi	r2,2
   1d658:	1083b804 	addi	r2,r2,3808
   1d65c:	10800017 	ldw	r2,0(r2)
   1d660:	1005003a 	cmpeq	r2,r2,zero
   1d664:	1000061e 	bne	r2,zero,1d680 <alt_get_errno+0x3c>
   1d668:	008000b4 	movhi	r2,2
   1d66c:	1083b804 	addi	r2,r2,3808
   1d670:	10800017 	ldw	r2,0(r2)
   1d674:	103ee83a 	callr	r2
   1d678:	e0bfff15 	stw	r2,-4(fp)
   1d67c:	00000306 	br	1d68c <alt_get_errno+0x48>
   1d680:	008000b4 	movhi	r2,2
   1d684:	108ab304 	addi	r2,r2,10956
   1d688:	e0bfff15 	stw	r2,-4(fp)
   1d68c:	e0bfff17 	ldw	r2,-4(fp)
}
   1d690:	e037883a 	mov	sp,fp
   1d694:	dfc00117 	ldw	ra,4(sp)
   1d698:	df000017 	ldw	fp,0(sp)
   1d69c:	dec00204 	addi	sp,sp,8
   1d6a0:	f800283a 	ret

0001d6a4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   1d6a4:	defffd04 	addi	sp,sp,-12
   1d6a8:	dfc00215 	stw	ra,8(sp)
   1d6ac:	df000115 	stw	fp,4(sp)
   1d6b0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   1d6b4:	00bfff04 	movi	r2,-4
   1d6b8:	00c000b4 	movhi	r3,2
   1d6bc:	18f9c504 	addi	r3,r3,-6380
   1d6c0:	1885883a 	add	r2,r3,r2
   1d6c4:	e0bfff15 	stw	r2,-4(fp)
   1d6c8:	00000606 	br	1d6e4 <_do_ctors+0x40>
        (*ctor) (); 
   1d6cc:	e0bfff17 	ldw	r2,-4(fp)
   1d6d0:	10800017 	ldw	r2,0(r2)
   1d6d4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   1d6d8:	e0bfff17 	ldw	r2,-4(fp)
   1d6dc:	10bfff04 	addi	r2,r2,-4
   1d6e0:	e0bfff15 	stw	r2,-4(fp)
   1d6e4:	e0ffff17 	ldw	r3,-4(fp)
   1d6e8:	008000b4 	movhi	r2,2
   1d6ec:	10b9c404 	addi	r2,r2,-6384
   1d6f0:	18bff62e 	bgeu	r3,r2,1d6cc <_do_ctors+0x28>
        (*ctor) (); 
}
   1d6f4:	e037883a 	mov	sp,fp
   1d6f8:	dfc00117 	ldw	ra,4(sp)
   1d6fc:	df000017 	ldw	fp,0(sp)
   1d700:	dec00204 	addi	sp,sp,8
   1d704:	f800283a 	ret

0001d708 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   1d708:	defffd04 	addi	sp,sp,-12
   1d70c:	dfc00215 	stw	ra,8(sp)
   1d710:	df000115 	stw	fp,4(sp)
   1d714:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   1d718:	00bfff04 	movi	r2,-4
   1d71c:	00c000b4 	movhi	r3,2
   1d720:	18f9c504 	addi	r3,r3,-6380
   1d724:	1885883a 	add	r2,r3,r2
   1d728:	e0bfff15 	stw	r2,-4(fp)
   1d72c:	00000606 	br	1d748 <_do_dtors+0x40>
        (*dtor) (); 
   1d730:	e0bfff17 	ldw	r2,-4(fp)
   1d734:	10800017 	ldw	r2,0(r2)
   1d738:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   1d73c:	e0bfff17 	ldw	r2,-4(fp)
   1d740:	10bfff04 	addi	r2,r2,-4
   1d744:	e0bfff15 	stw	r2,-4(fp)
   1d748:	e0ffff17 	ldw	r3,-4(fp)
   1d74c:	008000b4 	movhi	r2,2
   1d750:	10b9c504 	addi	r2,r2,-6380
   1d754:	18bff62e 	bgeu	r3,r2,1d730 <_do_dtors+0x28>
        (*dtor) (); 
}
   1d758:	e037883a 	mov	sp,fp
   1d75c:	dfc00117 	ldw	ra,4(sp)
   1d760:	df000017 	ldw	fp,0(sp)
   1d764:	dec00204 	addi	sp,sp,8
   1d768:	f800283a 	ret

0001d76c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   1d76c:	defff904 	addi	sp,sp,-28
   1d770:	dfc00615 	stw	ra,24(sp)
   1d774:	df000515 	stw	fp,20(sp)
   1d778:	df000504 	addi	fp,sp,20
   1d77c:	e13ffd15 	stw	r4,-12(fp)
   1d780:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
   1d784:	e0bffe17 	ldw	r2,-8(fp)
   1d788:	10800017 	ldw	r2,0(r2)
   1d78c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   1d790:	e13ffd17 	ldw	r4,-12(fp)
   1d794:	0014cac0 	call	14cac <strlen>
   1d798:	10800044 	addi	r2,r2,1
   1d79c:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1d7a0:	00000d06 	br	1d7d8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   1d7a4:	e0bffc17 	ldw	r2,-16(fp)
   1d7a8:	11000217 	ldw	r4,8(r2)
   1d7ac:	e1bffb17 	ldw	r6,-20(fp)
   1d7b0:	e17ffd17 	ldw	r5,-12(fp)
   1d7b4:	00139b00 	call	139b0 <memcmp>
   1d7b8:	1004c03a 	cmpne	r2,r2,zero
   1d7bc:	1000031e 	bne	r2,zero,1d7cc <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   1d7c0:	e0bffc17 	ldw	r2,-16(fp)
   1d7c4:	e0bfff15 	stw	r2,-4(fp)
   1d7c8:	00000706 	br	1d7e8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   1d7cc:	e0bffc17 	ldw	r2,-16(fp)
   1d7d0:	10800017 	ldw	r2,0(r2)
   1d7d4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1d7d8:	e0fffe17 	ldw	r3,-8(fp)
   1d7dc:	e0bffc17 	ldw	r2,-16(fp)
   1d7e0:	10fff01e 	bne	r2,r3,1d7a4 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   1d7e4:	e03fff15 	stw	zero,-4(fp)
   1d7e8:	e0bfff17 	ldw	r2,-4(fp)
}
   1d7ec:	e037883a 	mov	sp,fp
   1d7f0:	dfc00117 	ldw	ra,4(sp)
   1d7f4:	df000017 	ldw	fp,0(sp)
   1d7f8:	dec00204 	addi	sp,sp,8
   1d7fc:	f800283a 	ret

0001d800 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   1d800:	defffa04 	addi	sp,sp,-24
   1d804:	dfc00515 	stw	ra,20(sp)
   1d808:	df000415 	stw	fp,16(sp)
   1d80c:	df000404 	addi	fp,sp,16
   1d810:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   1d814:	008000b4 	movhi	r2,2
   1d818:	1083b304 	addi	r2,r2,3788
   1d81c:	10800017 	ldw	r2,0(r2)
   1d820:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   1d824:	00003306 	br	1d8f4 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
   1d828:	e0bffd17 	ldw	r2,-12(fp)
   1d82c:	11000217 	ldw	r4,8(r2)
   1d830:	0014cac0 	call	14cac <strlen>
   1d834:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
   1d838:	e0bffd17 	ldw	r2,-12(fp)
   1d83c:	10c00217 	ldw	r3,8(r2)
   1d840:	e0bffc17 	ldw	r2,-16(fp)
   1d844:	1885883a 	add	r2,r3,r2
   1d848:	10bfffc4 	addi	r2,r2,-1
   1d84c:	10800003 	ldbu	r2,0(r2)
   1d850:	10803fcc 	andi	r2,r2,255
   1d854:	1080201c 	xori	r2,r2,128
   1d858:	10bfe004 	addi	r2,r2,-128
   1d85c:	10800bd8 	cmpnei	r2,r2,47
   1d860:	1000031e 	bne	r2,zero,1d870 <alt_find_file+0x70>
    {
      len -= 1;
   1d864:	e0bffc17 	ldw	r2,-16(fp)
   1d868:	10bfffc4 	addi	r2,r2,-1
   1d86c:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   1d870:	e0bffc17 	ldw	r2,-16(fp)
   1d874:	1007883a 	mov	r3,r2
   1d878:	e0bffe17 	ldw	r2,-8(fp)
   1d87c:	1885883a 	add	r2,r3,r2
   1d880:	10800003 	ldbu	r2,0(r2)
   1d884:	10803fcc 	andi	r2,r2,255
   1d888:	1080201c 	xori	r2,r2,128
   1d88c:	10bfe004 	addi	r2,r2,-128
   1d890:	10800be0 	cmpeqi	r2,r2,47
   1d894:	10000a1e 	bne	r2,zero,1d8c0 <alt_find_file+0xc0>
   1d898:	e0bffc17 	ldw	r2,-16(fp)
   1d89c:	1007883a 	mov	r3,r2
   1d8a0:	e0bffe17 	ldw	r2,-8(fp)
   1d8a4:	1885883a 	add	r2,r3,r2
   1d8a8:	10800003 	ldbu	r2,0(r2)
   1d8ac:	10803fcc 	andi	r2,r2,255
   1d8b0:	1080201c 	xori	r2,r2,128
   1d8b4:	10bfe004 	addi	r2,r2,-128
   1d8b8:	1004c03a 	cmpne	r2,r2,zero
   1d8bc:	10000a1e 	bne	r2,zero,1d8e8 <alt_find_file+0xe8>
   1d8c0:	e0bffd17 	ldw	r2,-12(fp)
   1d8c4:	11000217 	ldw	r4,8(r2)
   1d8c8:	e1bffc17 	ldw	r6,-16(fp)
   1d8cc:	e17ffe17 	ldw	r5,-8(fp)
   1d8d0:	00139b00 	call	139b0 <memcmp>
   1d8d4:	1004c03a 	cmpne	r2,r2,zero
   1d8d8:	1000031e 	bne	r2,zero,1d8e8 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   1d8dc:	e0bffd17 	ldw	r2,-12(fp)
   1d8e0:	e0bfff15 	stw	r2,-4(fp)
   1d8e4:	00000806 	br	1d908 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
   1d8e8:	e0bffd17 	ldw	r2,-12(fp)
   1d8ec:	10800017 	ldw	r2,0(r2)
   1d8f0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   1d8f4:	00c000b4 	movhi	r3,2
   1d8f8:	18c3b304 	addi	r3,r3,3788
   1d8fc:	e0bffd17 	ldw	r2,-12(fp)
   1d900:	10ffc91e 	bne	r2,r3,1d828 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   1d904:	e03fff15 	stw	zero,-4(fp)
   1d908:	e0bfff17 	ldw	r2,-4(fp)
}
   1d90c:	e037883a 	mov	sp,fp
   1d910:	dfc00117 	ldw	ra,4(sp)
   1d914:	df000017 	ldw	fp,0(sp)
   1d918:	dec00204 	addi	sp,sp,8
   1d91c:	f800283a 	ret

0001d920 <alt_fs_reg>:
 * A return value of zero indicates success. A negative return value indicates
 * failure. 
 */
 
int alt_fs_reg (alt_dev* dev)
{
   1d920:	defffb04 	addi	sp,sp,-20
   1d924:	df000415 	stw	fp,16(sp)
   1d928:	df000404 	addi	fp,sp,16
   1d92c:	e13ffe15 	stw	r4,-8(fp)
  /*
   * check that the device has a name.
   */

  if (!dev->name)
   1d930:	e0bffe17 	ldw	r2,-8(fp)
   1d934:	10800217 	ldw	r2,8(r2)
   1d938:	1004c03a 	cmpne	r2,r2,zero
   1d93c:	1000031e 	bne	r2,zero,1d94c <alt_fs_reg+0x2c>
  {
    return -ENODEV;
   1d940:	00bffb44 	movi	r2,-19
   1d944:	e0bfff15 	stw	r2,-4(fp)
   1d948:	00001406 	br	1d99c <alt_fs_reg+0x7c>
  
  /*
   * register the file system.
   */

  alt_llist_insert(&alt_fs_list, &dev->llist);
   1d94c:	e0fffe17 	ldw	r3,-8(fp)
   1d950:	008000b4 	movhi	r2,2
   1d954:	1083b304 	addi	r2,r2,3788
   1d958:	e0bffc15 	stw	r2,-16(fp)
   1d95c:	e0fffd15 	stw	r3,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   1d960:	e0fffd17 	ldw	r3,-12(fp)
   1d964:	e0bffc17 	ldw	r2,-16(fp)
   1d968:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   1d96c:	e0bffc17 	ldw	r2,-16(fp)
   1d970:	10c00017 	ldw	r3,0(r2)
   1d974:	e0bffd17 	ldw	r2,-12(fp)
   1d978:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   1d97c:	e0bffc17 	ldw	r2,-16(fp)
   1d980:	10c00017 	ldw	r3,0(r2)
   1d984:	e0bffd17 	ldw	r2,-12(fp)
   1d988:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   1d98c:	e0fffc17 	ldw	r3,-16(fp)
   1d990:	e0bffd17 	ldw	r2,-12(fp)
   1d994:	18800015 	stw	r2,0(r3)

  return 0;
   1d998:	e03fff15 	stw	zero,-4(fp)
   1d99c:	e0bfff17 	ldw	r2,-4(fp)
} 
   1d9a0:	e037883a 	mov	sp,fp
   1d9a4:	df000017 	ldw	fp,0(sp)
   1d9a8:	dec00104 	addi	sp,sp,4
   1d9ac:	f800283a 	ret

0001d9b0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   1d9b0:	defffc04 	addi	sp,sp,-16
   1d9b4:	df000315 	stw	fp,12(sp)
   1d9b8:	df000304 	addi	fp,sp,12
   1d9bc:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   1d9c0:	00bffa04 	movi	r2,-24
   1d9c4:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   1d9c8:	e03ffe15 	stw	zero,-8(fp)
   1d9cc:	00001e06 	br	1da48 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
   1d9d0:	e0bffe17 	ldw	r2,-8(fp)
   1d9d4:	00c000b4 	movhi	r3,2
   1d9d8:	18ff0b04 	addi	r3,r3,-980
   1d9dc:	10800324 	muli	r2,r2,12
   1d9e0:	10c5883a 	add	r2,r2,r3
   1d9e4:	10800017 	ldw	r2,0(r2)
   1d9e8:	1004c03a 	cmpne	r2,r2,zero
   1d9ec:	1000131e 	bne	r2,zero,1da3c <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
   1d9f0:	e0bffe17 	ldw	r2,-8(fp)
   1d9f4:	00c000b4 	movhi	r3,2
   1d9f8:	18ff0b04 	addi	r3,r3,-980
   1d9fc:	10800324 	muli	r2,r2,12
   1da00:	10c7883a 	add	r3,r2,r3
   1da04:	e0bfff17 	ldw	r2,-4(fp)
   1da08:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
   1da0c:	008000b4 	movhi	r2,2
   1da10:	1083b704 	addi	r2,r2,3804
   1da14:	10c00017 	ldw	r3,0(r2)
   1da18:	e0bffe17 	ldw	r2,-8(fp)
   1da1c:	1880040e 	bge	r3,r2,1da30 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
   1da20:	00c000b4 	movhi	r3,2
   1da24:	18c3b704 	addi	r3,r3,3804
   1da28:	e0bffe17 	ldw	r2,-8(fp)
   1da2c:	18800015 	stw	r2,0(r3)
      }
      rc = i;
   1da30:	e0bffe17 	ldw	r2,-8(fp)
   1da34:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   1da38:	00000606 	br	1da54 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   1da3c:	e0bffe17 	ldw	r2,-8(fp)
   1da40:	10800044 	addi	r2,r2,1
   1da44:	e0bffe15 	stw	r2,-8(fp)
   1da48:	e0bffe17 	ldw	r2,-8(fp)
   1da4c:	10800810 	cmplti	r2,r2,32
   1da50:	103fdf1e 	bne	r2,zero,1d9d0 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   1da54:	e0bffd17 	ldw	r2,-12(fp)
}
   1da58:	e037883a 	mov	sp,fp
   1da5c:	df000017 	ldw	fp,0(sp)
   1da60:	dec00104 	addi	sp,sp,4
   1da64:	f800283a 	ret

0001da68 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   1da68:	defffe04 	addi	sp,sp,-8
   1da6c:	dfc00115 	stw	ra,4(sp)
   1da70:	df000015 	stw	fp,0(sp)
   1da74:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   1da78:	0009883a 	mov	r4,zero
   1da7c:	01440004 	movi	r5,4096
   1da80:	001e0640 	call	1e064 <alt_icache_flush>
#endif
}
   1da84:	e037883a 	mov	sp,fp
   1da88:	dfc00117 	ldw	ra,4(sp)
   1da8c:	df000017 	ldw	fp,0(sp)
   1da90:	dec00204 	addi	sp,sp,8
   1da94:	f800283a 	ret

0001da98 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   1da98:	defff904 	addi	sp,sp,-28
   1da9c:	dfc00615 	stw	ra,24(sp)
   1daa0:	df000515 	stw	fp,20(sp)
   1daa4:	df000504 	addi	fp,sp,20
   1daa8:	e13ffc15 	stw	r4,-16(fp)
   1daac:	e17ffd15 	stw	r5,-12(fp)
   1dab0:	e1bffe15 	stw	r6,-8(fp)
   1dab4:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   1dab8:	e0800217 	ldw	r2,8(fp)
   1dabc:	d8800015 	stw	r2,0(sp)
   1dac0:	e13ffc17 	ldw	r4,-16(fp)
   1dac4:	e17ffd17 	ldw	r5,-12(fp)
   1dac8:	e1bffe17 	ldw	r6,-8(fp)
   1dacc:	e1ffff17 	ldw	r7,-4(fp)
   1dad0:	001dc6c0 	call	1dc6c <alt_iic_isr_register>
}  
   1dad4:	e037883a 	mov	sp,fp
   1dad8:	dfc00117 	ldw	ra,4(sp)
   1dadc:	df000017 	ldw	fp,0(sp)
   1dae0:	dec00204 	addi	sp,sp,8
   1dae4:	f800283a 	ret

0001dae8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   1dae8:	defff904 	addi	sp,sp,-28
   1daec:	df000615 	stw	fp,24(sp)
   1daf0:	df000604 	addi	fp,sp,24
   1daf4:	e13ffe15 	stw	r4,-8(fp)
   1daf8:	e17fff15 	stw	r5,-4(fp)
   1dafc:	e0bfff17 	ldw	r2,-4(fp)
   1db00:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1db04:	0005303a 	rdctl	r2,status
   1db08:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1db0c:	e0fffb17 	ldw	r3,-20(fp)
   1db10:	00bfff84 	movi	r2,-2
   1db14:	1884703a 	and	r2,r3,r2
   1db18:	1001703a 	wrctl	status,r2
  
  return context;
   1db1c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   1db20:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
   1db24:	e0fffc17 	ldw	r3,-16(fp)
   1db28:	00800044 	movi	r2,1
   1db2c:	10c4983a 	sll	r2,r2,r3
   1db30:	1007883a 	mov	r3,r2
   1db34:	008000b4 	movhi	r2,2
   1db38:	108abd04 	addi	r2,r2,10996
   1db3c:	10800017 	ldw	r2,0(r2)
   1db40:	1886b03a 	or	r3,r3,r2
   1db44:	008000b4 	movhi	r2,2
   1db48:	108abd04 	addi	r2,r2,10996
   1db4c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   1db50:	008000b4 	movhi	r2,2
   1db54:	108abd04 	addi	r2,r2,10996
   1db58:	10800017 	ldw	r2,0(r2)
   1db5c:	100170fa 	wrctl	ienable,r2
   1db60:	e0bffd17 	ldw	r2,-12(fp)
   1db64:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1db68:	e0bffa17 	ldw	r2,-24(fp)
   1db6c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   1db70:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   1db74:	e037883a 	mov	sp,fp
   1db78:	df000017 	ldw	fp,0(sp)
   1db7c:	dec00104 	addi	sp,sp,4
   1db80:	f800283a 	ret

0001db84 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   1db84:	defff904 	addi	sp,sp,-28
   1db88:	df000615 	stw	fp,24(sp)
   1db8c:	df000604 	addi	fp,sp,24
   1db90:	e13ffe15 	stw	r4,-8(fp)
   1db94:	e17fff15 	stw	r5,-4(fp)
   1db98:	e0bfff17 	ldw	r2,-4(fp)
   1db9c:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1dba0:	0005303a 	rdctl	r2,status
   1dba4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1dba8:	e0fffb17 	ldw	r3,-20(fp)
   1dbac:	00bfff84 	movi	r2,-2
   1dbb0:	1884703a 	and	r2,r3,r2
   1dbb4:	1001703a 	wrctl	status,r2
  
  return context;
   1dbb8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   1dbbc:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
   1dbc0:	e0fffc17 	ldw	r3,-16(fp)
   1dbc4:	00800044 	movi	r2,1
   1dbc8:	10c4983a 	sll	r2,r2,r3
   1dbcc:	0084303a 	nor	r2,zero,r2
   1dbd0:	1007883a 	mov	r3,r2
   1dbd4:	008000b4 	movhi	r2,2
   1dbd8:	108abd04 	addi	r2,r2,10996
   1dbdc:	10800017 	ldw	r2,0(r2)
   1dbe0:	1886703a 	and	r3,r3,r2
   1dbe4:	008000b4 	movhi	r2,2
   1dbe8:	108abd04 	addi	r2,r2,10996
   1dbec:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   1dbf0:	008000b4 	movhi	r2,2
   1dbf4:	108abd04 	addi	r2,r2,10996
   1dbf8:	10800017 	ldw	r2,0(r2)
   1dbfc:	100170fa 	wrctl	ienable,r2
   1dc00:	e0bffd17 	ldw	r2,-12(fp)
   1dc04:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1dc08:	e0bffa17 	ldw	r2,-24(fp)
   1dc0c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   1dc10:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   1dc14:	e037883a 	mov	sp,fp
   1dc18:	df000017 	ldw	fp,0(sp)
   1dc1c:	dec00104 	addi	sp,sp,4
   1dc20:	f800283a 	ret

0001dc24 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   1dc24:	defffc04 	addi	sp,sp,-16
   1dc28:	df000315 	stw	fp,12(sp)
   1dc2c:	df000304 	addi	fp,sp,12
   1dc30:	e13ffe15 	stw	r4,-8(fp)
   1dc34:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   1dc38:	000530fa 	rdctl	r2,ienable
   1dc3c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   1dc40:	e0ffff17 	ldw	r3,-4(fp)
   1dc44:	00800044 	movi	r2,1
   1dc48:	10c4983a 	sll	r2,r2,r3
   1dc4c:	1007883a 	mov	r3,r2
   1dc50:	e0bffd17 	ldw	r2,-12(fp)
   1dc54:	1884703a 	and	r2,r3,r2
   1dc58:	1004c03a 	cmpne	r2,r2,zero
}
   1dc5c:	e037883a 	mov	sp,fp
   1dc60:	df000017 	ldw	fp,0(sp)
   1dc64:	dec00104 	addi	sp,sp,4
   1dc68:	f800283a 	ret

0001dc6c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   1dc6c:	defff404 	addi	sp,sp,-48
   1dc70:	dfc00b15 	stw	ra,44(sp)
   1dc74:	df000a15 	stw	fp,40(sp)
   1dc78:	df000a04 	addi	fp,sp,40
   1dc7c:	e13ffb15 	stw	r4,-20(fp)
   1dc80:	e17ffc15 	stw	r5,-16(fp)
   1dc84:	e1bffd15 	stw	r6,-12(fp)
   1dc88:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
   1dc8c:	00bffa84 	movi	r2,-22
   1dc90:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   1dc94:	e0bffc17 	ldw	r2,-16(fp)
   1dc98:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   1dc9c:	e0bff917 	ldw	r2,-28(fp)
   1dca0:	10800808 	cmpgei	r2,r2,32
   1dca4:	1000291e 	bne	r2,zero,1dd4c <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1dca8:	0005303a 	rdctl	r2,status
   1dcac:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1dcb0:	e0fff717 	ldw	r3,-36(fp)
   1dcb4:	00bfff84 	movi	r2,-2
   1dcb8:	1884703a 	and	r2,r3,r2
   1dcbc:	1001703a 	wrctl	status,r2
  
  return context;
   1dcc0:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   1dcc4:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
   1dcc8:	e0bff917 	ldw	r2,-28(fp)
   1dccc:	00c000b4 	movhi	r3,2
   1dcd0:	18ccce04 	addi	r3,r3,13112
   1dcd4:	100490fa 	slli	r2,r2,3
   1dcd8:	10c7883a 	add	r3,r2,r3
   1dcdc:	e0bffd17 	ldw	r2,-12(fp)
   1dce0:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
   1dce4:	e0bff917 	ldw	r2,-28(fp)
   1dce8:	00c000b4 	movhi	r3,2
   1dcec:	18ccce04 	addi	r3,r3,13112
   1dcf0:	100490fa 	slli	r2,r2,3
   1dcf4:	10c5883a 	add	r2,r2,r3
   1dcf8:	10c00104 	addi	r3,r2,4
   1dcfc:	e0bffe17 	ldw	r2,-8(fp)
   1dd00:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   1dd04:	e0bffd17 	ldw	r2,-12(fp)
   1dd08:	1005003a 	cmpeq	r2,r2,zero
   1dd0c:	1000051e 	bne	r2,zero,1dd24 <alt_iic_isr_register+0xb8>
   1dd10:	e17ff917 	ldw	r5,-28(fp)
   1dd14:	e13ffb17 	ldw	r4,-20(fp)
   1dd18:	001dae80 	call	1dae8 <alt_ic_irq_enable>
   1dd1c:	e0bfff15 	stw	r2,-4(fp)
   1dd20:	00000406 	br	1dd34 <alt_iic_isr_register+0xc8>
   1dd24:	e17ff917 	ldw	r5,-28(fp)
   1dd28:	e13ffb17 	ldw	r4,-20(fp)
   1dd2c:	001db840 	call	1db84 <alt_ic_irq_disable>
   1dd30:	e0bfff15 	stw	r2,-4(fp)
   1dd34:	e0bfff17 	ldw	r2,-4(fp)
   1dd38:	e0bffa15 	stw	r2,-24(fp)
   1dd3c:	e0bff817 	ldw	r2,-32(fp)
   1dd40:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1dd44:	e0bff617 	ldw	r2,-40(fp)
   1dd48:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   1dd4c:	e0bffa17 	ldw	r2,-24(fp)
}
   1dd50:	e037883a 	mov	sp,fp
   1dd54:	dfc00117 	ldw	ra,4(sp)
   1dd58:	df000017 	ldw	fp,0(sp)
   1dd5c:	dec00204 	addi	sp,sp,8
   1dd60:	f800283a 	ret

0001dd64 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   1dd64:	defff904 	addi	sp,sp,-28
   1dd68:	dfc00615 	stw	ra,24(sp)
   1dd6c:	df000515 	stw	fp,20(sp)
   1dd70:	df000504 	addi	fp,sp,20
   1dd74:	e13ffc15 	stw	r4,-16(fp)
   1dd78:	e17ffd15 	stw	r5,-12(fp)
   1dd7c:	e1bffe15 	stw	r6,-8(fp)
   1dd80:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   1dd84:	e13ffd17 	ldw	r4,-12(fp)
   1dd88:	e17ffe17 	ldw	r5,-8(fp)
   1dd8c:	e1bfff17 	ldw	r6,-4(fp)
   1dd90:	001b9dc0 	call	1b9dc <open>
   1dd94:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   1dd98:	e0bffb17 	ldw	r2,-20(fp)
   1dd9c:	1004803a 	cmplt	r2,r2,zero
   1dda0:	10001c1e 	bne	r2,zero,1de14 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
   1dda4:	e0bffb17 	ldw	r2,-20(fp)
   1dda8:	00c000b4 	movhi	r3,2
   1ddac:	18ff0b04 	addi	r3,r3,-980
   1ddb0:	10800324 	muli	r2,r2,12
   1ddb4:	10c5883a 	add	r2,r2,r3
   1ddb8:	10c00017 	ldw	r3,0(r2)
   1ddbc:	e0bffc17 	ldw	r2,-16(fp)
   1ddc0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   1ddc4:	e0bffb17 	ldw	r2,-20(fp)
   1ddc8:	00c000b4 	movhi	r3,2
   1ddcc:	18ff0b04 	addi	r3,r3,-980
   1ddd0:	10800324 	muli	r2,r2,12
   1ddd4:	10c5883a 	add	r2,r2,r3
   1ddd8:	10800104 	addi	r2,r2,4
   1dddc:	10c00017 	ldw	r3,0(r2)
   1dde0:	e0bffc17 	ldw	r2,-16(fp)
   1dde4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   1dde8:	e0bffb17 	ldw	r2,-20(fp)
   1ddec:	00c000b4 	movhi	r3,2
   1ddf0:	18ff0b04 	addi	r3,r3,-980
   1ddf4:	10800324 	muli	r2,r2,12
   1ddf8:	10c5883a 	add	r2,r2,r3
   1ddfc:	10800204 	addi	r2,r2,8
   1de00:	10c00017 	ldw	r3,0(r2)
   1de04:	e0bffc17 	ldw	r2,-16(fp)
   1de08:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   1de0c:	e13ffb17 	ldw	r4,-20(fp)
   1de10:	001bd440 	call	1bd44 <alt_release_fd>
  }
} 
   1de14:	e037883a 	mov	sp,fp
   1de18:	dfc00117 	ldw	ra,4(sp)
   1de1c:	df000017 	ldw	fp,0(sp)
   1de20:	dec00204 	addi	sp,sp,8
   1de24:	f800283a 	ret

0001de28 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   1de28:	defffb04 	addi	sp,sp,-20
   1de2c:	dfc00415 	stw	ra,16(sp)
   1de30:	df000315 	stw	fp,12(sp)
   1de34:	df000304 	addi	fp,sp,12
   1de38:	e13ffd15 	stw	r4,-12(fp)
   1de3c:	e17ffe15 	stw	r5,-8(fp)
   1de40:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   1de44:	010000b4 	movhi	r4,2
   1de48:	213f0e04 	addi	r4,r4,-968
   1de4c:	e17ffd17 	ldw	r5,-12(fp)
   1de50:	01800044 	movi	r6,1
   1de54:	01c07fc4 	movi	r7,511
   1de58:	001dd640 	call	1dd64 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   1de5c:	010000b4 	movhi	r4,2
   1de60:	213f0b04 	addi	r4,r4,-980
   1de64:	e17ffe17 	ldw	r5,-8(fp)
   1de68:	000d883a 	mov	r6,zero
   1de6c:	01c07fc4 	movi	r7,511
   1de70:	001dd640 	call	1dd64 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   1de74:	010000b4 	movhi	r4,2
   1de78:	213f1104 	addi	r4,r4,-956
   1de7c:	e17fff17 	ldw	r5,-4(fp)
   1de80:	01800044 	movi	r6,1
   1de84:	01c07fc4 	movi	r7,511
   1de88:	001dd640 	call	1dd64 <alt_open_fd>
}  
   1de8c:	e037883a 	mov	sp,fp
   1de90:	dfc00117 	ldw	ra,4(sp)
   1de94:	df000017 	ldw	fp,0(sp)
   1de98:	dec00204 	addi	sp,sp,8
   1de9c:	f800283a 	ret

0001dea0 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   1dea0:	defffa04 	addi	sp,sp,-24
   1dea4:	df000515 	stw	fp,20(sp)
   1dea8:	df000504 	addi	fp,sp,20
   1deac:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1deb0:	0005303a 	rdctl	r2,status
   1deb4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1deb8:	e0fffd17 	ldw	r3,-12(fp)
   1debc:	00bfff84 	movi	r2,-2
   1dec0:	1884703a 	and	r2,r3,r2
   1dec4:	1001703a 	wrctl	status,r2
  
  return context;
   1dec8:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   1decc:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
   1ded0:	e0bfff17 	ldw	r2,-4(fp)
   1ded4:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   1ded8:	e0bffc17 	ldw	r2,-16(fp)
   1dedc:	10c00017 	ldw	r3,0(r2)
   1dee0:	e0bffc17 	ldw	r2,-16(fp)
   1dee4:	10800117 	ldw	r2,4(r2)
   1dee8:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
   1deec:	e0bffc17 	ldw	r2,-16(fp)
   1def0:	10c00117 	ldw	r3,4(r2)
   1def4:	e0bffc17 	ldw	r2,-16(fp)
   1def8:	10800017 	ldw	r2,0(r2)
   1defc:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   1df00:	e0fffc17 	ldw	r3,-16(fp)
   1df04:	e0bffc17 	ldw	r2,-16(fp)
   1df08:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
   1df0c:	e0fffc17 	ldw	r3,-16(fp)
   1df10:	e0bffc17 	ldw	r2,-16(fp)
   1df14:	18800015 	stw	r2,0(r3)
   1df18:	e0bffe17 	ldw	r2,-8(fp)
   1df1c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1df20:	e0bffb17 	ldw	r2,-20(fp)
   1df24:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   1df28:	e037883a 	mov	sp,fp
   1df2c:	df000017 	ldw	fp,0(sp)
   1df30:	dec00104 	addi	sp,sp,4
   1df34:	f800283a 	ret

0001df38 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   1df38:	defffb04 	addi	sp,sp,-20
   1df3c:	dfc00415 	stw	ra,16(sp)
   1df40:	df000315 	stw	fp,12(sp)
   1df44:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   1df48:	d0a02b17 	ldw	r2,-32596(gp)
   1df4c:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   1df50:	d0a71d17 	ldw	r2,-25484(gp)
   1df54:	10800044 	addi	r2,r2,1
   1df58:	d0a71d15 	stw	r2,-25484(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   1df5c:	00003106 	br	1e024 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
   1df60:	e0bffe17 	ldw	r2,-8(fp)
   1df64:	10800017 	ldw	r2,0(r2)
   1df68:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   1df6c:	e0bffe17 	ldw	r2,-8(fp)
   1df70:	10800403 	ldbu	r2,16(r2)
   1df74:	10803fcc 	andi	r2,r2,255
   1df78:	1005003a 	cmpeq	r2,r2,zero
   1df7c:	1000051e 	bne	r2,zero,1df94 <alt_tick+0x5c>
   1df80:	d0a71d17 	ldw	r2,-25484(gp)
   1df84:	1004c03a 	cmpne	r2,r2,zero
   1df88:	1000021e 	bne	r2,zero,1df94 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
   1df8c:	e0bffe17 	ldw	r2,-8(fp)
   1df90:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   1df94:	e0bffe17 	ldw	r2,-8(fp)
   1df98:	10c00217 	ldw	r3,8(r2)
   1df9c:	d0a71d17 	ldw	r2,-25484(gp)
   1dfa0:	10c01e36 	bltu	r2,r3,1e01c <alt_tick+0xe4>
   1dfa4:	e0bffe17 	ldw	r2,-8(fp)
   1dfa8:	10800403 	ldbu	r2,16(r2)
   1dfac:	10803fcc 	andi	r2,r2,255
   1dfb0:	1004c03a 	cmpne	r2,r2,zero
   1dfb4:	1000191e 	bne	r2,zero,1e01c <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
   1dfb8:	e0bffe17 	ldw	r2,-8(fp)
   1dfbc:	10c00317 	ldw	r3,12(r2)
   1dfc0:	e0bffe17 	ldw	r2,-8(fp)
   1dfc4:	11000517 	ldw	r4,20(r2)
   1dfc8:	183ee83a 	callr	r3
   1dfcc:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   1dfd0:	e0bffd17 	ldw	r2,-12(fp)
   1dfd4:	1004c03a 	cmpne	r2,r2,zero
   1dfd8:	1000031e 	bne	r2,zero,1dfe8 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
   1dfdc:	e13ffe17 	ldw	r4,-8(fp)
   1dfe0:	001dea00 	call	1dea0 <alt_alarm_stop>
   1dfe4:	00000d06 	br	1e01c <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
   1dfe8:	e0bffe17 	ldw	r2,-8(fp)
   1dfec:	10c00217 	ldw	r3,8(r2)
   1dff0:	e0bffd17 	ldw	r2,-12(fp)
   1dff4:	1887883a 	add	r3,r3,r2
   1dff8:	e0bffe17 	ldw	r2,-8(fp)
   1dffc:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   1e000:	e0bffe17 	ldw	r2,-8(fp)
   1e004:	10c00217 	ldw	r3,8(r2)
   1e008:	d0a71d17 	ldw	r2,-25484(gp)
   1e00c:	1880032e 	bgeu	r3,r2,1e01c <alt_tick+0xe4>
        {
          alarm->rollover = 1;
   1e010:	e0fffe17 	ldw	r3,-8(fp)
   1e014:	00800044 	movi	r2,1
   1e018:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
   1e01c:	e0bfff17 	ldw	r2,-4(fp)
   1e020:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   1e024:	d0e02b04 	addi	r3,gp,-32596
   1e028:	e0bffe17 	ldw	r2,-8(fp)
   1e02c:	10ffcc1e 	bne	r2,r3,1df60 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
   1e030:	e037883a 	mov	sp,fp
   1e034:	dfc00117 	ldw	ra,4(sp)
   1e038:	df000017 	ldw	fp,0(sp)
   1e03c:	dec00204 	addi	sp,sp,8
   1e040:	f800283a 	ret

0001e044 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   1e044:	deffff04 	addi	sp,sp,-4
   1e048:	df000015 	stw	fp,0(sp)
   1e04c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   1e050:	000170fa 	wrctl	ienable,zero
}
   1e054:	e037883a 	mov	sp,fp
   1e058:	df000017 	ldw	fp,0(sp)
   1e05c:	dec00104 	addi	sp,sp,4
   1e060:	f800283a 	ret

0001e064 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   1e064:	defffb04 	addi	sp,sp,-20
   1e068:	df000415 	stw	fp,16(sp)
   1e06c:	df000404 	addi	fp,sp,16
   1e070:	e13ffe15 	stw	r4,-8(fp)
   1e074:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   1e078:	e0bfff17 	ldw	r2,-4(fp)
   1e07c:	10840070 	cmpltui	r2,r2,4097
   1e080:	1000021e 	bne	r2,zero,1e08c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   1e084:	00840004 	movi	r2,4096
   1e088:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   1e08c:	e0fffe17 	ldw	r3,-8(fp)
   1e090:	e0bfff17 	ldw	r2,-4(fp)
   1e094:	1885883a 	add	r2,r3,r2
   1e098:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   1e09c:	e0bffe17 	ldw	r2,-8(fp)
   1e0a0:	e0bffd15 	stw	r2,-12(fp)
   1e0a4:	00000506 	br	1e0bc <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   1e0a8:	e0bffd17 	ldw	r2,-12(fp)
   1e0ac:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   1e0b0:	e0bffd17 	ldw	r2,-12(fp)
   1e0b4:	10800804 	addi	r2,r2,32
   1e0b8:	e0bffd15 	stw	r2,-12(fp)
   1e0bc:	e0fffd17 	ldw	r3,-12(fp)
   1e0c0:	e0bffc17 	ldw	r2,-16(fp)
   1e0c4:	18bff836 	bltu	r3,r2,1e0a8 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   1e0c8:	e0bffe17 	ldw	r2,-8(fp)
   1e0cc:	108007cc 	andi	r2,r2,31
   1e0d0:	1005003a 	cmpeq	r2,r2,zero
   1e0d4:	1000021e 	bne	r2,zero,1e0e0 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   1e0d8:	e0bffd17 	ldw	r2,-12(fp)
   1e0dc:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   1e0e0:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   1e0e4:	e037883a 	mov	sp,fp
   1e0e8:	df000017 	ldw	fp,0(sp)
   1e0ec:	dec00104 	addi	sp,sp,4
   1e0f0:	f800283a 	ret

0001e0f4 <atexit>:
   1e0f4:	200b883a 	mov	r5,r4
   1e0f8:	000d883a 	mov	r6,zero
   1e0fc:	0009883a 	mov	r4,zero
   1e100:	000f883a 	mov	r7,zero
   1e104:	001e1401 	jmpi	1e140 <__register_exitproc>

0001e108 <exit>:
   1e108:	defffe04 	addi	sp,sp,-8
   1e10c:	000b883a 	mov	r5,zero
   1e110:	dc000015 	stw	r16,0(sp)
   1e114:	dfc00115 	stw	ra,4(sp)
   1e118:	2021883a 	mov	r16,r4
   1e11c:	001e2780 	call	1e278 <__call_exitprocs>
   1e120:	008000b4 	movhi	r2,2
   1e124:	1083ad04 	addi	r2,r2,3764
   1e128:	11000017 	ldw	r4,0(r2)
   1e12c:	20800f17 	ldw	r2,60(r4)
   1e130:	10000126 	beq	r2,zero,1e138 <exit+0x30>
   1e134:	103ee83a 	callr	r2
   1e138:	8009883a 	mov	r4,r16
   1e13c:	001b1e40 	call	1b1e4 <_exit>

0001e140 <__register_exitproc>:
   1e140:	defffa04 	addi	sp,sp,-24
   1e144:	008000b4 	movhi	r2,2
   1e148:	1083ad04 	addi	r2,r2,3764
   1e14c:	dc000015 	stw	r16,0(sp)
   1e150:	14000017 	ldw	r16,0(r2)
   1e154:	dd000415 	stw	r20,16(sp)
   1e158:	2829883a 	mov	r20,r5
   1e15c:	81405217 	ldw	r5,328(r16)
   1e160:	dcc00315 	stw	r19,12(sp)
   1e164:	dc800215 	stw	r18,8(sp)
   1e168:	dc400115 	stw	r17,4(sp)
   1e16c:	dfc00515 	stw	ra,20(sp)
   1e170:	2023883a 	mov	r17,r4
   1e174:	3027883a 	mov	r19,r6
   1e178:	3825883a 	mov	r18,r7
   1e17c:	28002526 	beq	r5,zero,1e214 <__register_exitproc+0xd4>
   1e180:	29000117 	ldw	r4,4(r5)
   1e184:	008007c4 	movi	r2,31
   1e188:	11002716 	blt	r2,r4,1e228 <__register_exitproc+0xe8>
   1e18c:	8800101e 	bne	r17,zero,1e1d0 <__register_exitproc+0x90>
   1e190:	2105883a 	add	r2,r4,r4
   1e194:	1085883a 	add	r2,r2,r2
   1e198:	20c00044 	addi	r3,r4,1
   1e19c:	1145883a 	add	r2,r2,r5
   1e1a0:	0009883a 	mov	r4,zero
   1e1a4:	15000215 	stw	r20,8(r2)
   1e1a8:	28c00115 	stw	r3,4(r5)
   1e1ac:	2005883a 	mov	r2,r4
   1e1b0:	dfc00517 	ldw	ra,20(sp)
   1e1b4:	dd000417 	ldw	r20,16(sp)
   1e1b8:	dcc00317 	ldw	r19,12(sp)
   1e1bc:	dc800217 	ldw	r18,8(sp)
   1e1c0:	dc400117 	ldw	r17,4(sp)
   1e1c4:	dc000017 	ldw	r16,0(sp)
   1e1c8:	dec00604 	addi	sp,sp,24
   1e1cc:	f800283a 	ret
   1e1d0:	29802204 	addi	r6,r5,136
   1e1d4:	00800044 	movi	r2,1
   1e1d8:	110e983a 	sll	r7,r2,r4
   1e1dc:	30c04017 	ldw	r3,256(r6)
   1e1e0:	2105883a 	add	r2,r4,r4
   1e1e4:	1085883a 	add	r2,r2,r2
   1e1e8:	1185883a 	add	r2,r2,r6
   1e1ec:	19c6b03a 	or	r3,r3,r7
   1e1f0:	14802015 	stw	r18,128(r2)
   1e1f4:	14c00015 	stw	r19,0(r2)
   1e1f8:	00800084 	movi	r2,2
   1e1fc:	30c04015 	stw	r3,256(r6)
   1e200:	88bfe31e 	bne	r17,r2,1e190 <__register_exitproc+0x50>
   1e204:	30804117 	ldw	r2,260(r6)
   1e208:	11c4b03a 	or	r2,r2,r7
   1e20c:	30804115 	stw	r2,260(r6)
   1e210:	003fdf06 	br	1e190 <__register_exitproc+0x50>
   1e214:	008000b4 	movhi	r2,2
   1e218:	108d0e04 	addi	r2,r2,13368
   1e21c:	100b883a 	mov	r5,r2
   1e220:	80805215 	stw	r2,328(r16)
   1e224:	003fd606 	br	1e180 <__register_exitproc+0x40>
   1e228:	00800074 	movhi	r2,1
   1e22c:	108c5e04 	addi	r2,r2,12664
   1e230:	1000021e 	bne	r2,zero,1e23c <__register_exitproc+0xfc>
   1e234:	013fffc4 	movi	r4,-1
   1e238:	003fdc06 	br	1e1ac <__register_exitproc+0x6c>
   1e23c:	01006404 	movi	r4,400
   1e240:	103ee83a 	callr	r2
   1e244:	1007883a 	mov	r3,r2
   1e248:	103ffa26 	beq	r2,zero,1e234 <__register_exitproc+0xf4>
   1e24c:	80805217 	ldw	r2,328(r16)
   1e250:	180b883a 	mov	r5,r3
   1e254:	18000115 	stw	zero,4(r3)
   1e258:	18800015 	stw	r2,0(r3)
   1e25c:	80c05215 	stw	r3,328(r16)
   1e260:	18006215 	stw	zero,392(r3)
   1e264:	18006315 	stw	zero,396(r3)
   1e268:	0009883a 	mov	r4,zero
   1e26c:	883fc826 	beq	r17,zero,1e190 <__register_exitproc+0x50>
   1e270:	003fd706 	br	1e1d0 <__register_exitproc+0x90>

0001e274 <register_fini>:
   1e274:	f800283a 	ret

0001e278 <__call_exitprocs>:
   1e278:	008000b4 	movhi	r2,2
   1e27c:	1083ad04 	addi	r2,r2,3764
   1e280:	10800017 	ldw	r2,0(r2)
   1e284:	defff304 	addi	sp,sp,-52
   1e288:	df000b15 	stw	fp,44(sp)
   1e28c:	d8800115 	stw	r2,4(sp)
   1e290:	00800074 	movhi	r2,1
   1e294:	108c5904 	addi	r2,r2,12644
   1e298:	1005003a 	cmpeq	r2,r2,zero
   1e29c:	d8800215 	stw	r2,8(sp)
   1e2a0:	d8800117 	ldw	r2,4(sp)
   1e2a4:	dd400815 	stw	r21,32(sp)
   1e2a8:	dd000715 	stw	r20,28(sp)
   1e2ac:	10805204 	addi	r2,r2,328
   1e2b0:	dfc00c15 	stw	ra,48(sp)
   1e2b4:	ddc00a15 	stw	r23,40(sp)
   1e2b8:	dd800915 	stw	r22,36(sp)
   1e2bc:	dcc00615 	stw	r19,24(sp)
   1e2c0:	dc800515 	stw	r18,20(sp)
   1e2c4:	dc400415 	stw	r17,16(sp)
   1e2c8:	dc000315 	stw	r16,12(sp)
   1e2cc:	282b883a 	mov	r21,r5
   1e2d0:	2039883a 	mov	fp,r4
   1e2d4:	d8800015 	stw	r2,0(sp)
   1e2d8:	2829003a 	cmpeq	r20,r5,zero
   1e2dc:	d8800117 	ldw	r2,4(sp)
   1e2e0:	14405217 	ldw	r17,328(r2)
   1e2e4:	88001026 	beq	r17,zero,1e328 <__call_exitprocs+0xb0>
   1e2e8:	ddc00017 	ldw	r23,0(sp)
   1e2ec:	88800117 	ldw	r2,4(r17)
   1e2f0:	8c802204 	addi	r18,r17,136
   1e2f4:	143fffc4 	addi	r16,r2,-1
   1e2f8:	80000916 	blt	r16,zero,1e320 <__call_exitprocs+0xa8>
   1e2fc:	05bfffc4 	movi	r22,-1
   1e300:	a000151e 	bne	r20,zero,1e358 <__call_exitprocs+0xe0>
   1e304:	8409883a 	add	r4,r16,r16
   1e308:	2105883a 	add	r2,r4,r4
   1e30c:	1485883a 	add	r2,r2,r18
   1e310:	10c02017 	ldw	r3,128(r2)
   1e314:	a8c01126 	beq	r21,r3,1e35c <__call_exitprocs+0xe4>
   1e318:	843fffc4 	addi	r16,r16,-1
   1e31c:	85bff81e 	bne	r16,r22,1e300 <__call_exitprocs+0x88>
   1e320:	d8800217 	ldw	r2,8(sp)
   1e324:	10003126 	beq	r2,zero,1e3ec <__call_exitprocs+0x174>
   1e328:	dfc00c17 	ldw	ra,48(sp)
   1e32c:	df000b17 	ldw	fp,44(sp)
   1e330:	ddc00a17 	ldw	r23,40(sp)
   1e334:	dd800917 	ldw	r22,36(sp)
   1e338:	dd400817 	ldw	r21,32(sp)
   1e33c:	dd000717 	ldw	r20,28(sp)
   1e340:	dcc00617 	ldw	r19,24(sp)
   1e344:	dc800517 	ldw	r18,20(sp)
   1e348:	dc400417 	ldw	r17,16(sp)
   1e34c:	dc000317 	ldw	r16,12(sp)
   1e350:	dec00d04 	addi	sp,sp,52
   1e354:	f800283a 	ret
   1e358:	8409883a 	add	r4,r16,r16
   1e35c:	88c00117 	ldw	r3,4(r17)
   1e360:	2105883a 	add	r2,r4,r4
   1e364:	1445883a 	add	r2,r2,r17
   1e368:	18ffffc4 	addi	r3,r3,-1
   1e36c:	11800217 	ldw	r6,8(r2)
   1e370:	1c001526 	beq	r3,r16,1e3c8 <__call_exitprocs+0x150>
   1e374:	10000215 	stw	zero,8(r2)
   1e378:	303fe726 	beq	r6,zero,1e318 <__call_exitprocs+0xa0>
   1e37c:	00c00044 	movi	r3,1
   1e380:	1c06983a 	sll	r3,r3,r16
   1e384:	90804017 	ldw	r2,256(r18)
   1e388:	8cc00117 	ldw	r19,4(r17)
   1e38c:	1884703a 	and	r2,r3,r2
   1e390:	10001426 	beq	r2,zero,1e3e4 <__call_exitprocs+0x16c>
   1e394:	90804117 	ldw	r2,260(r18)
   1e398:	1884703a 	and	r2,r3,r2
   1e39c:	10000c1e 	bne	r2,zero,1e3d0 <__call_exitprocs+0x158>
   1e3a0:	2105883a 	add	r2,r4,r4
   1e3a4:	1485883a 	add	r2,r2,r18
   1e3a8:	11400017 	ldw	r5,0(r2)
   1e3ac:	e009883a 	mov	r4,fp
   1e3b0:	303ee83a 	callr	r6
   1e3b4:	88800117 	ldw	r2,4(r17)
   1e3b8:	98bfc81e 	bne	r19,r2,1e2dc <__call_exitprocs+0x64>
   1e3bc:	b8800017 	ldw	r2,0(r23)
   1e3c0:	147fd526 	beq	r2,r17,1e318 <__call_exitprocs+0xa0>
   1e3c4:	003fc506 	br	1e2dc <__call_exitprocs+0x64>
   1e3c8:	8c000115 	stw	r16,4(r17)
   1e3cc:	003fea06 	br	1e378 <__call_exitprocs+0x100>
   1e3d0:	2105883a 	add	r2,r4,r4
   1e3d4:	1485883a 	add	r2,r2,r18
   1e3d8:	11000017 	ldw	r4,0(r2)
   1e3dc:	303ee83a 	callr	r6
   1e3e0:	003ff406 	br	1e3b4 <__call_exitprocs+0x13c>
   1e3e4:	303ee83a 	callr	r6
   1e3e8:	003ff206 	br	1e3b4 <__call_exitprocs+0x13c>
   1e3ec:	88800117 	ldw	r2,4(r17)
   1e3f0:	1000081e 	bne	r2,zero,1e414 <__call_exitprocs+0x19c>
   1e3f4:	89000017 	ldw	r4,0(r17)
   1e3f8:	20000726 	beq	r4,zero,1e418 <__call_exitprocs+0x1a0>
   1e3fc:	b9000015 	stw	r4,0(r23)
   1e400:	8809883a 	mov	r4,r17
   1e404:	00131640 	call	13164 <free>
   1e408:	bc400017 	ldw	r17,0(r23)
   1e40c:	883fb71e 	bne	r17,zero,1e2ec <__call_exitprocs+0x74>
   1e410:	003fc506 	br	1e328 <__call_exitprocs+0xb0>
   1e414:	89000017 	ldw	r4,0(r17)
   1e418:	882f883a 	mov	r23,r17
   1e41c:	2023883a 	mov	r17,r4
   1e420:	883fb21e 	bne	r17,zero,1e2ec <__call_exitprocs+0x74>
   1e424:	003fc006 	br	1e328 <__call_exitprocs+0xb0>
   1e428:	0201ffff 	0x201ffff
   1e42c:	ffff0000 	call	ffff000 <__alt_data_end+0xf7ff000>
   1e430:	00000401 	jmpi	40 <__flash_exceptions_start+0x20>
   1e434:	ffff0001 	jmpi	ffff000 <__alt_data_end+0xf7ff000>
   1e438:	00000201 	jmpi	20 <__flash_exceptions_start>
   1e43c:	0201ffff 	0x201ffff
   1e440:	ffff0000 	call	ffff000 <__alt_data_end+0xf7ff000>
   1e444:	00000401 	jmpi	40 <__flash_exceptions_start+0x20>
   1e448:	ffff0001 	jmpi	ffff000 <__alt_data_end+0xf7ff000>
   1e44c:	00000801 	jmpi	80 <__flash_exceptions_start+0x60>
   1e450:	00020001 	jmpi	2000 <_Z18ScaleImage_InvokerP9myCascadefiiRSt6vectorI6MyRectSaIS2_EE+0x108>
   1e454:	883a0003 	ldbu	zero,-6144(r17)
   1e458:	010d0bff 	0x10d0bff
   1e45c:	01030004 	movi	r4,3072
   1e460:	7f000000 	call	7f00000 <__alt_data_end+0x7700000>
   1e464:	0000007d 	0x7d
   1e468:	00000000 	call	0 <__alt_mem_sdram>
   1e46c:	01110bff 	0x1110bff
   1e470:	01030008 	cmpgei	r4,zero,3072
   1e474:	03000203 	ldbu	r12,8(zero)
   1e478:	7f000000 	call	7f00000 <__alt_data_end+0x7700000>
   1e47c:	0000007d 	0x7d
   1e480:	00000000 	call	0 <__alt_mem_sdram>
   1e484:	01110bff 	0x1110bff
   1e488:	01030008 	cmpgei	r4,zero,3072
   1e48c:	03000203 	ldbu	r12,8(zero)
   1e490:	7f000000 	call	7f00000 <__alt_data_end+0x7700000>
   1e494:	0000007d 	0x7d
   1e498:	00000000 	call	0 <__alt_mem_sdram>
   1e49c:	01110bff 	0x1110bff
   1e4a0:	01030008 	cmpgei	r4,zero,3072
   1e4a4:	03000203 	ldbu	r12,8(zero)
   1e4a8:	7f000000 	call	7f00000 <__alt_data_end+0x7700000>
   1e4ac:	0000007d 	0x7d
   1e4b0:	00000000 	call	0 <__alt_mem_sdram>
   1e4b4:	01110bff 	0x1110bff
   1e4b8:	01030008 	cmpgei	r4,zero,3072
   1e4bc:	03000203 	ldbu	r12,8(zero)
   1e4c0:	7f000000 	call	7f00000 <__alt_data_end+0x7700000>
   1e4c4:	0000007d 	0x7d
   1e4c8:	00000000 	call	0 <__alt_mem_sdram>
   1e4cc:	01110bff 	0x1110bff
   1e4d0:	01030008 	cmpgei	r4,zero,3072
   1e4d4:	03000203 	ldbu	r12,8(zero)
   1e4d8:	7f000000 	call	7f00000 <__alt_data_end+0x7700000>
   1e4dc:	0000007d 	0x7d
   1e4e0:	00000000 	call	0 <__alt_mem_sdram>
   1e4e4:	01110bff 	0x1110bff
   1e4e8:	01030008 	cmpgei	r4,zero,3072
   1e4ec:	03000203 	ldbu	r12,8(zero)
   1e4f0:	7f000000 	call	7f00000 <__alt_data_end+0x7700000>
   1e4f4:	0000007d 	0x7d
   1e4f8:	00000000 	call	0 <__alt_mem_sdram>
   1e4fc:	01110bff 	0x1110bff
   1e500:	01030008 	cmpgei	r4,zero,3072
   1e504:	03000203 	ldbu	r12,8(zero)
   1e508:	7f000000 	call	7f00000 <__alt_data_end+0x7700000>
   1e50c:	0000007d 	0x7d
   1e510:	00000000 	call	0 <__alt_mem_sdram>
   1e514:	01110bff 	0x1110bff
   1e518:	01030008 	cmpgei	r4,zero,3072
   1e51c:	03000203 	ldbu	r12,8(zero)
   1e520:	7f000000 	call	7f00000 <__alt_data_end+0x7700000>
   1e524:	0000007d 	0x7d
   1e528:	00000000 	call	0 <__alt_mem_sdram>
   1e52c:	01110bff 	0x1110bff
   1e530:	01030008 	cmpgei	r4,zero,3072
   1e534:	03000203 	ldbu	r12,8(zero)
   1e538:	7f000000 	call	7f00000 <__alt_data_end+0x7700000>
   1e53c:	0000007d 	0x7d
   1e540:	00000000 	call	0 <__alt_mem_sdram>
   1e544:	01090bff 	0x1090bff
   1e548:	7f030002 	0x7f030002
   1e54c:	007d0000 	call	7d000 <_gp+0x54178>
   1e550:	00000000 	call	0 <__alt_mem_sdram>
   1e554:	01090bff 	0x1090bff
   1e558:	7f030002 	0x7f030002
   1e55c:	007d0000 	call	7d000 <_gp+0x54178>
   1e560:	00000000 	call	0 <__alt_mem_sdram>
   1e564:	01090bff 	0x1090bff
   1e568:	7f030002 	0x7f030002
   1e56c:	007d0000 	call	7d000 <_gp+0x54178>
   1e570:	00000000 	call	0 <__alt_mem_sdram>
   1e574:	01090bff 	0x1090bff
   1e578:	7f030002 	0x7f030002
   1e57c:	007d0000 	call	7d000 <_gp+0x54178>
   1e580:	00000000 	call	0 <__alt_mem_sdram>
   1e584:	01090bff 	0x1090bff
   1e588:	7f030002 	0x7f030002
   1e58c:	007d0000 	call	7d000 <_gp+0x54178>
   1e590:	00000000 	call	0 <__alt_mem_sdram>
   1e594:	01090bff 	0x1090bff
   1e598:	7f030002 	0x7f030002
   1e59c:	007d0000 	call	7d000 <_gp+0x54178>
   1e5a0:	01ffff00 	call	1ffff0 <_gp+0x1d7168>
   1e5a4:	ff000002 	0xff000002
   1e5a8:	000201ff 	0x201ff
   1e5ac:	01ffff00 	call	1ffff0 <_gp+0x1d7168>
   1e5b0:	ff000002 	0xff000002
   1e5b4:	000201ff 	0x201ff
   1e5b8:	00000000 	call	0 <__alt_mem_sdram>
   1e5bc:	01090bff 	0x1090bff
   1e5c0:	7f030002 	0x7f030002
   1e5c4:	007d0000 	call	7d000 <_gp+0x54178>
   1e5c8:	00000000 	call	0 <__alt_mem_sdram>
   1e5cc:	01090bff 	0x1090bff
   1e5d0:	7f030002 	0x7f030002
   1e5d4:	007d0000 	call	7d000 <_gp+0x54178>
   1e5d8:	00000000 	call	0 <__alt_mem_sdram>
   1e5dc:	01090bff 	0x1090bff
   1e5e0:	7f030002 	0x7f030002
   1e5e4:	007d0000 	call	7d000 <_gp+0x54178>
   1e5e8:	00000000 	call	0 <__alt_mem_sdram>
   1e5ec:	01090bff 	0x1090bff
   1e5f0:	7f030002 	0x7f030002
   1e5f4:	007d0000 	call	7d000 <_gp+0x54178>
   1e5f8:	00000000 	call	0 <__alt_mem_sdram>
   1e5fc:	01090bff 	0x1090bff
   1e600:	7f030002 	0x7f030002
   1e604:	007d0000 	call	7d000 <_gp+0x54178>
   1e608:	00000000 	call	0 <__alt_mem_sdram>
   1e60c:	01090bff 	0x1090bff
   1e610:	7f010002 	0x7f010002
   1e614:	00000000 	call	0 <__alt_mem_sdram>
   1e618:	01ffff00 	call	1ffff0 <_gp+0x1d7168>
   1e61c:	00000002 	0x2
   1e620:	01090bff 	0x1090bff
   1e624:	7f010002 	0x7f010002
   1e628:	00000000 	call	0 <__alt_mem_sdram>
   1e62c:	01ffff00 	call	1ffff0 <_gp+0x1d7168>
   1e630:	ff000002 	0xff000002
   1e634:	000201ff 	0x201ff
   1e638:	00000000 	call	0 <__alt_mem_sdram>
   1e63c:	01090bff 	0x1090bff
   1e640:	01010004 	movi	r4,1024
   1e644:	00007f00 	call	7f0 <cpyPgm+0x84>
   1e648:	00000000 	call	0 <__alt_mem_sdram>
   1e64c:	01090bff 	0x1090bff
   1e650:	01010004 	movi	r4,1024
   1e654:	00007f00 	call	7f0 <cpyPgm+0x84>
   1e658:	00000000 	call	0 <__alt_mem_sdram>
   1e65c:	010d0bff 	0x10d0bff
   1e660:	01010006 	br	1ea64 <_ZTINSt8ios_base7failureE+0x8>
   1e664:	7f000200 	call	7f00020 <__alt_data_end+0x7700020>
   1e668:	00000000 	call	0 <__alt_mem_sdram>
   1e66c:	01ffff00 	call	1ffff0 <_gp+0x1d7168>
   1e670:	ff000002 	0xff000002
   1e674:	000201ff 	0x201ff
   1e678:	01ffff00 	call	1ffff0 <_gp+0x1d7168>
   1e67c:	ff000002 	0xff000002
   1e680:	000201ff 	0x201ff
   1e684:	01ffff00 	call	1ffff0 <_gp+0x1d7168>
   1e688:	01000004 	movi	r4,0
   1e68c:	01ffff00 	call	1ffff0 <_gp+0x1d7168>
   1e690:	01000004 	movi	r4,0
   1e694:	01ffff00 	call	1ffff0 <_gp+0x1d7168>
   1e698:	01000004 	movi	r4,0
   1e69c:	01ffff00 	call	1ffff0 <_gp+0x1d7168>
   1e6a0:	01000008 	cmpgei	r4,zero,0
   1e6a4:	03000200 	call	300020 <_gp+0x2d7198>
   1e6a8:	00000000 	call	0 <__alt_mem_sdram>
   1e6ac:	01090bff 	0x1090bff
   1e6b0:	7f010002 	0x7f010002
	...
   1e6bc:	010d0bff 	0x10d0bff
   1e6c0:	01000004 	movi	r4,0
   1e6c4:	00000101 	jmpi	10 <__alt_mem_sdram+0x10>
   1e6c8:	00000000 	call	0 <__alt_mem_sdram>
   1e6cc:	010d0bff 	0x10d0bff
   1e6d0:	01000004 	movi	r4,0
   1e6d4:	00000101 	jmpi	10 <__alt_mem_sdram+0x10>
   1e6d8:	00000000 	call	0 <__alt_mem_sdram>
   1e6dc:	010d0bff 	0x10d0bff
   1e6e0:	01000004 	movi	r4,0
   1e6e4:	00000101 	jmpi	10 <__alt_mem_sdram+0x10>
   1e6e8:	00000000 	call	0 <__alt_mem_sdram>
   1e6ec:	010d0bff 	0x10d0bff
   1e6f0:	7f010002 	0x7f010002
   1e6f4:	00000000 	call	0 <__alt_mem_sdram>
   1e6f8:	0001ed68 	cmpgeui	zero,zero,1973
   1e6fc:	00000001 	jmpi	0 <__alt_mem_sdram>
   1e700:	01090bff 	0x1090bff
   1e704:	7f010002 	0x7f010002
	...
   1e710:	0001e274 	movhi	zero,1929
